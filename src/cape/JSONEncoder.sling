
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

var isNewLine = true
var mysb as StringBuilder

func print(line as string, indent as int, startline as bool, endline as bool, sb as StringBuilder, niceFormatting as bool) private
{
	if startline && isNewLine == false {
		if niceFormatting:
			sb.append('\n')
		isNewLine = true
	}
	if isNewLine && niceFormatting {
		for(var n = 0; n<indent; n++):
			sb.append('\t')
	}
	sb.append(line)
	if endline {
		if niceFormatting:
			sb.append('\n')
		isNewLine = true
	}
	else {
		isNewLine = false
	}
}

macro PRINT_COLON
{
	if niceFormatting {
		sb.append(" : ")
	}
	else {
		sb.append(':')
	}
}

func encodeArray(cc as array<object>, indent as int, sb as StringBuilder, niceFormatting as bool) private
{
	print("[", indent, false, true, sb, niceFormatting)
	var first = true
	foreach o in cc {
		if first == false:
			print(",", indent, false, true, sb, niceFormatting)
		encodeObject(o, indent+1, sb, niceFormatting)
		first = false
	}
	print("]", indent, true, false, sb, niceFormatting)
}

func encodeDynamicVector(cc as DynamicVector, indent as int, sb as StringBuilder, niceFormatting as bool) private
{
	print("[", indent, false, true, sb, niceFormatting)
	var first = true
	foreach o in cc.toVector() {
		if first == false:
			print(",", indent, false, true, sb, niceFormatting)
		encodeObject(o, indent+1, sb, niceFormatting)
		first = false
	}
	print("]", indent, true, false, sb, niceFormatting)
}

func encodeVector(cc as vector<object>, indent as int, sb as StringBuilder, niceFormatting as bool) private
{
	print("[", indent, false, true, sb, niceFormatting)
	var first = true
	foreach o in cc {
		if first == false:
			print(",", indent, false, true, sb, niceFormatting)
		encodeObject(o, indent+1, sb, niceFormatting)
		first = false
	}
	print("]", indent, true, false, sb, niceFormatting)
}

func encodeMap(map as map, indent as int, sb as StringBuilder, niceFormatting as bool) private
{
	print("{", indent, false, true, sb, niceFormatting)
	var first = true
	var it as Iterator<object> #force = Map.iterateKeys(map)
	while it {
		var keyo = it.next()
		if not keyo:
			break
		var key = String.asString(keyo)
		if not key:
			continue
		if not first:
			print(",", indent, false, true, sb, niceFormatting)
		encodeString(key, indent+1, sb, niceFormatting)
		PRINT_COLON()
		encodeObject(map[keyo], indent+1, sb, niceFormatting)
		first = false
	}
	print("}", indent, true, false, sb, niceFormatting)
}

func encodeDynamicMap(map as DynamicMap, indent as int, sb as StringBuilder, niceFormatting as bool) private
{
	print("{", indent, false, true, sb, niceFormatting)
	var first = true
	var it = map.iterateKeys()
	while it {
		var key = it.next()
		if not key:
			break
		if first == false:
			print(",", indent, false, true, sb, niceFormatting)
		encodeString(key, indent+1, sb, niceFormatting)
		PRINT_COLON()
		encodeObject(map.get(key), indent+1, sb, niceFormatting)
		first = false
	}
	print("}", indent, true, false, sb, niceFormatting)
}

func encodeKeyValueList(list as KeyValueListForStrings, indent as int, sb as StringBuilder, niceFormatting as bool) private
{
	print("{", indent, false, true, sb, niceFormatting)
	var first = true
	var it as Iterator<KeyValuePair<string,string>> #force = list.iterate()
	while it {
		var pair = it.next()
		if pair == null:
			break
		if first == false:
			print(",", indent, false, true, sb, niceFormatting)
		encodeString(pair.key, indent+1, sb, niceFormatting)
		PRINT_COLON()
		encodeString(pair.value, indent+1, sb, niceFormatting)
		first = false
	}
	print("}", indent, true, false, sb, niceFormatting)
}

func encodeString(s as string, indent as int, sb as StringBuilder, niceFormatting as bool) private
{
	if mysb == null {
		mysb = new StringBuilder()
	}
	else {
		mysb.clear()
	}
	mysb.append('"')
	if String.indexOf(s, '"') >= 0 || String.indexOf(s, '\\') >= 0 {
		var it = String.iterate(s)
		loop {
			var c = it.getNextChar()
			if c < 1:
				break
			if c == '"' {
				mysb.append('\\')
			}
			else if(c == '\\') {
				mysb.append('\\')
			}
			mysb.append(c)
		}
	}
	else {
		mysb.append(s)
	}
	mysb.append('"')
	print(mysb.toString(), indent, false, false, sb, niceFormatting)
}

func encodeObject(o as object, indent as int, sb as StringBuilder, niceFormatting as bool) virtual
{
	if not o {
		encodeString("", indent, sb, niceFormatting)
	}
	else if o is array {
		encodeArray(o as! array, indent, sb, niceFormatting)
	}
	else if o is vector {
		encodeVector(o as! vector, indent, sb, niceFormatting)
	}
	else if o is map {
		encodeMap(o as! map, indent, sb, niceFormatting)
	}
	else if o is buffer {
		encodeString(Base64Encoder.encode(o as! buffer), indent, sb, niceFormatting)
	}
	else if o is string {
		encodeString(o as! string, indent, sb, niceFormatting)
	}
	else if o is DynamicMap {
		encodeDynamicMap(o as! DynamicMap, indent, sb, niceFormatting)
	}
	else if o is DynamicVector {
		encodeDynamicVector(o as! DynamicVector, indent, sb, niceFormatting)
	}
	else if o is KeyValueListForStrings {
		encodeKeyValueList(o as! KeyValueListForStrings, indent, sb, niceFormatting)
	}
	else if o is StringObject {
		encodeString((o as! StringObject).toString(), indent, sb, niceFormatting)
	}
	else if o is BufferObject {
		encodeString(Base64Encoder.encode((o as! BufferObject).toBuffer()), indent, sb, niceFormatting)
	}
	else if o is ArrayObject<object> {
		var aa as array #force = (o as! ArrayObject<object>).toArray()
		encodeArray(aa, indent, sb, niceFormatting)
	}
	else if o is VectorObject<object> {
		var vv as vector #force = (o as! VectorObject<object>).toVector()
		encodeVector(vv, indent, sb, niceFormatting)
	}
	else if o is IntegerObject || o is LongIntegerObject || o is BooleanObject || o is DoubleObject || o is CharacterObject {
		encodeString(String.asString(o), indent, sb, niceFormatting)
	}
	else {
		encodeString("", indent, sb, niceFormatting)
	}
}

func encode(o as object, niceFormatting as bool = true) static as string
{
	var sb = new StringBuilder()
	new this().encodeObject(o, 0, sb, niceFormatting)
	return sb.toString()
}

func encodeStringToBuilder(s as string, sb as StringBuilder) static
{
	sb.append('"')
	if String.indexOf(s, '"') >= 0 || String.indexOf(s, '\\') >= 0 {
		var it = String.iterate(s)
		loop {
			var c = it.getNextChar()
			if c < 1:
				break
			if c == '"' {
				sb.append('\\')
			}
			else if(c == '\\') {
				sb.append('\\')
			}
			sb.append(c)
		}
	}
	else {
		sb.append(s)
	}
	sb.append('"')
}
