
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is GeoLocationManager imports cape:

IFDEF("target_android") {
	depend "androidPermission:android.permission.ACCESS_FINE_LOCATION"
	depend "androidPermission:android.permission.ACCESS_COARSE_LOCATION"
}

var instance static as this

func getInstance(ctx as AndroidApplicationContext) static as this
{
	if not instance:
		instance = new this(ctx)
	return instance
}

lang "java" {{{
	private android.location.LocationManager locationManager;
	private LocationCallBack lcb;
}}}
var context as AndroidApplicationContext

ctor(context as AndroidApplicationContext) private
{
	base()
	this.context = context
	var acontext = context.getAndroidActivityContext()
	lang "java" {{{
		lcb = new LocationCallBack(this);
		locationManager = (android.location.LocationManager)acontext.getSystemService(acontext.LOCATION_SERVICE);
	}}}
}

func startLocationUpdates(callback as function<void,bool>) override
{
	var perms = new string[] { "android.permission.ACCESS_FINE_LOCATION", "android.permission.ACCESS_COARSE_LOCATION" }
	var cb final = callback
	context.requestPermissions(perms, func(status as bool) {
		if not status {
			if cb:
				cb(false)
			return
		}
		var v = true
		lang "java" {{{
			boolean isGPSEnabled = false;
			boolean isNetworkEnabled = false;
			try {
				isGPSEnabled = locationManager.isProviderEnabled(android.location.LocationManager.GPS_PROVIDER);
				isNetworkEnabled = locationManager.isProviderEnabled(android.location.LocationManager.NETWORK_PROVIDER);
				if(isGPSEnabled) {
					locationManager.requestLocationUpdates(android.location.LocationManager.GPS_PROVIDER, 0, 0, lcb);
				}
				else if(isNetworkEnabled) {
					locationManager.requestLocationUpdates(android.location.LocationManager.NETWORK_PROVIDER, 0, 0, lcb);
				}
				else {
					v = false;
				}
			}
			catch (java.lang.Exception e) {
				v = false;
			}
		}}}
		if cb:
			cb(v)
	})
}

func stopLocationUpdates override
{
	lang "java" {{{
		if(locationManager != null) {
			locationManager.removeUpdates(lcb);
		}
	}}}
}

func getLastLocation(callback as function<void, GeoLocation, Error>) override
{
	var error #used = Error.forCode("failedToGetLastLocation")
	lang "java" {{{
		if(locationManager == null) {
			callback.execute(null, error);
		}
		try {
			java.util.List<java.lang.String> providers = locationManager.getProviders(true);
			android.location.Location location = null;
			for (java.lang.String provider : providers) {
				android.location.Location loc = locationManager.getLastKnownLocation(provider);
				if(loc == null) {
					continue;
				}
				if(location != null) {
					long locationTime = location.getTime();
					long locTime = loc.getTime();
					long diff = java.lang.Math.abs(locTime - locationTime);
					if(diff < 5000) {
						if(loc.getAccuracy() < location.getAccuracy()) {
							location = loc;
						}
					}
					else {
						if(locTime > locationTime) {
							location = loc;
						}
					}
				}
				else {
					location = loc;
				}
			}
			if(location == null) {
				callback.execute(null, error);
			}
			else {
				GeoLocation myLocation = new GeoLocation();
				myLocation.setLatitude(location.getLatitude());
				myLocation.setLongitude(location.getLongitude());
				callback.execute(myLocation, null);
			}
		}
		catch(java.lang.Exception e) {
			callback.execute(null, error);
		}
	}}}
}

lang "java" {{{
	class LocationCallBack implements android.location.LocationListener {

		public LocationCallBack(GeoLocationManagerForAndroid self) {
			this.self = self;
		}

		private GeoLocationManagerForAndroid self;

		@Override
		public void onLocationChanged(android.location.Location location) {
			GeoLocation l = new GeoLocation();
			l.setLatitude(location.getLatitude());
			l.setLongitude(location.getLongitude());
			self.notifyListeners(l);
		}

		@Override
		public void onProviderDisabled(String provider) {
		}

		@Override
		public void onProviderEnabled(String provider) {
		}

		@Override
		public void onStatusChanged(String provider, int status, android.os.Bundle extras) {
		}
	}
}}}
