
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log

class is WidgetWithLayout #widget:

func forColor(context as GuiApplicationContext, color as Color) static as this
{
	var v = new this(context)
	v.setWidgetColor(color)
	return v
}

IFDEF "target_ios"
{
	extend !"UIView"
	isAlso Widget

	lang "objc" {{{
		CAShapeLayer *border;
	}}}
}

IFDEF "target_android"
{
	extend !"android.view.View"
	isAlso Widget
}

IFDEF "target_html"
{
	is Widget

	func prepareElement(element as object) override
	{
		base.prepareElement(element)
		HTMLDOM.setStyle(element, "box-sizing", "border-box")
	}
}

IFDEF "target_uwp"
{
	extend !"Windows.UI.Xaml.Controls.UserControl"
	isAlso Widget

	var rectangle as !"Windows.UI.Xaml.Shapes.Rectangle"
}

var widgetContext as GuiApplicationContext
var widgetColor as Color
var widgetTopLeftRadius as double
var widgetTopRightRadius as double
var widgetBottomRightRadius as double
var widgetBottomLeftRadius as double
var widgetOutlineColor as Color
var widgetOutlineWidth as int
var widgetBorderStyle as int

ctor(context as GuiApplicationContext)
{
	IFDEF "target_android" {
		base((context as! GuiApplicationContextForAndroid).getActivityContext())
	}
	ELSE IFDEF "target_ios" {
		IFDEF "target_swift" {
			lang "swift" {{{
				super.init(frame: CGRect.zero)
			}}}
		}
	}
	widgetContext = context
	widgetColor = Color.black()
	widgetOutlineColor = Color.black()
	IFDEF "target_uwp" {
		rectangle = new !"Windows.UI.Xaml.Shapes.Rectangle"()
		lang "cs" {{{
			this.Content = rectangle;
		}}}
	}
}

func setWidgetLayoutChanged
{
}

func hasWidgetLayoutChanged as bool:
	return false

func layoutWidget(widthConstraint as int #notLiteral, force as bool) as bool
{
	var wc = widthConstraint
	if wc < 0:
		wc = 0
	Widget.setLayoutSize(this, wc, 0)
	return true
}

func setWidgetColor(color as Color)
{
	widgetColor = color
	IFDEF "target_ios" {
		if not widgetColor {
			IFDEF "target_objc" {
				lang "objc" {{{
					self.backgroundColor = nil;
				}}}
			}
			ELSE IFDEF "target_swift" {
				lang "swift" {{{
					self.backgroundColor = nil
				}}}
			}
		}
		else {
			IFDEF "target_objc" {
				lang "objc" {{{
					self.backgroundColor = [color toUIColor];
				}}}
			}
			ELSE IFDEF "target_swift" {
				lang "swift" {{{
					self.backgroundColor = color.toUIColor()
				}}}
			}
		}
	}
	ELSE IFDEF "target_android" {
		IFDEF "target_java" {
			if not widgetColor {
				lang "java" {{{
					setBackgroundColor(0);
				}}}
			}
			else {
				lang "java" {{{
					setBackgroundColor(widgetColor.toARGBInt32());
				}}}
				updateCanvasRoundingRadius()
			}
		}
		ELSE IFDEF "target_kotlin" {
			if not widgetColor {
				lang "kotlin" {{{
					setBackgroundColor(0);
				}}}
			}
			else {
				lang "kotlin" {{{
					setBackgroundColor(widgetColor!!.toARGBInt32());
				}}}
				updateCanvasRoundingRadius()
			}
		}
	}
	ELSE IFDEF "target_html" {
		if not widgetColor {
			HTMLDOM.removeStyle(element, "background-color")
		}
		else {
			HTMLDOM.setStyle(element, "background-color", HTMLDOM.colorToRGBA(widgetColor))
		}
	}
	ELSE IFDEF "target_uwp" {
		lang "cs" {{{
			rectangle.Fill = color.toBrush();
		}}}
	}
	ELSE {
		ERROR "Not implemented"
	}
}

func getWidgetColor as Color:
	return widgetColor

func setWidgetOutlineColor(color as Color)
{
	widgetOutlineColor = color
	updateCanvas()
}

func getWidgetOutlineColor as Color:
	return widgetOutlineColor

func setWidgetOutlineWidth(width as int #notLiteral)
{
	widgetOutlineWidth = width
	updateCanvas()
}

func getWidgetOutlineWidth as int:
	return widgetOutlineWidth

func updateCanvas private
{
	IFDEF "target_html" {
		if widgetOutlineWidth < 0 {
			HTMLDOM.removeStyle(element, "border")
			HTMLDOM.removeStyle(element, "border-color")
			HTMLDOM.removeStyle(element, "border-style")
		}
		else {
			HTMLDOM.setStyle(element, "border", String.forInteger(widgetOutlineWidth) .. "px")
			HTMLDOM.setStyle(element, "border-style", "solid")
			HTMLDOM.setStyle(element, "border-color", widgetOutlineColor.toRgbString())
		}
	}
	ELSE IFDEF "target_ios" {
        IFDEF "target_objc" {
            if widgetOutlineWidth > 0 {
                lang "objc" {{{
                    if(border == nil) {
                        border = [[CAShapeLayer alloc]init];
                    }
                    border.strokeColor = [widgetOutlineColor toUIColor].CGColor;
                    border.fillColor = [widgetColor toUIColor].CGColor;
                    border.frame = self.bounds;
                    border.path = [UIBezierPath bezierPathWithRect:self.bounds].CGPath;
                    [self.layer addSublayer:border];
                }}}
            }
        }
    }
	ELSE IFDEF "target_android" {
		IFDEF "target_java" {
			if widgetOutlineWidth > 0 {
				lang "java" {{{
					if(border == null) {
						border = new android.graphics.drawable.GradientDrawable();
					}
					border.setColor(widgetColor.toARGBInt32());
					if(widgetBorderStyle == BORDER_STYLE_DASHED) {
						border.setStroke(widgetOutlineWidth, widgetOutlineColor.toARGBInt32(), 10,5);
					}
					else if(widgetBorderStyle == BORDER_STYLE_DOTTED) {
						border.setStroke(widgetOutlineWidth, widgetOutlineColor.toARGBInt32(), 3,5);
					}
					else {
						border.setStroke(widgetOutlineWidth, widgetOutlineColor.toARGBInt32());
					}
					if(android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.JELLY_BEAN) {
						this.setBackgroundDrawable(border);
					}
					else {
						this.setBackground(border);
					}
				}}}
			}
		}
	}
	ELSE {
		ERROR "Not implemented."
	}
}

func updateCanvasRoundingRadius private
{
	var isRounded = true
	if widgetTopLeftRadius <= 0.0 && widgetTopRightRadius <= 0.0 && widgetBottomRightRadius <= 0.0 && widgetBottomLeftRadius <= 0.0 {
		isRounded = false
	}
	IFDEF "target_html" {
		if isRounded {
			HTMLDOM.setStyle(element, "border-radius", String.forInteger(widgetTopLeftRadius) .. "px " ..
				String.forInteger(widgetTopRightRadius) .. "px " ..
				String.forInteger(widgetBottomRightRadius) .. "px " ..
				String.forInteger(widgetBottomLeftRadius) .. "px")
		}
		else {
			HTMLDOM.removeStyle(element, "border-radius")
		}
	}
	ELSE IFDEF "target_android" {
		var r1 = widgetTopLeftRadius as float
		var r2 = widgetTopRightRadius as float
		var r3 = widgetBottomRightRadius as float
		var r4 = widgetBottomLeftRadius as float
		IFDEF "target_java" {
			lang "java" {{{
				if(border == null) {
					border = new android.graphics.drawable.GradientDrawable();
				}
				border.setCornerRadii(new float[] { r1, r1, r2, r2, r3, r3, r4, r4 });
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			var rr = new !"android.graphics.drawable.shapes.RoundRectShape"(new float[] { r1, r1, r2, r2, r3, r3, r4, r4 }, null, null)
			var shape = new !"android.graphics.drawable.ShapeDrawable"(rr)
			lang "kotlin" {{{
				if(widgetColor != null) {
					shape!!.getPaint().setColor(widgetColor!!.toARGBInt32())
				}
				setBackgroundDrawable(shape)
			}}}
		}
	}
	ELSE IFDEF "target_ios" {
		IFDEF "target_objc" {
			lang "objc" {{{
				[self.layer setCornerRadius:widgetTopLeftRadius];
			}}}
		}
		ELSE IFDEF "target_swift" {
			lang "swift" {{{
				self.layer.cornerRadius = CGFloat(widgetTopLeftRadius)
			}}}
		}
		if widgetTopLeftRadius != widgetTopRightRadius || widgetTopLeftRadius != widgetBottomRightRadius || widgetTopLeftRadius != widgetBottomLeftRadius:
			ERROR "Rounded corners with different radiuses per corner are not implemented" // FIXME
	}
	ELSE {
		ERROR "Not implemented"
	}
}

func getWidgetTopLeftRadius as double:
	return widgetTopLeftRadius

func getWidgetTopRightRadius as double:
	return widgetTopRightRadius

func getWidgetBottomRightRadius as double:
	return widgetBottomRightRadius

func getWidgetBottomLeftRadius as double:
	return widgetBottomLeftRadius

func setWidgetRoundingRadiusTopLeft(radius as double #notLiteral)
{
	widgetTopLeftRadius = radius
	updateCanvasRoundingRadius()
}

func setWidgetRoundingRadiusTopRight(radius as double #notLiteral)
{
	widgetTopRightRadius = radius
	updateCanvasRoundingRadius()
}

func setWidgetRoundingRadiusBottomLeft(radius as double #notLiteral)
{
	widgetBottomLeftRadius = radius
	updateCanvasRoundingRadius()
}

func setWidgetRoundingRadiusBottomRight(radius as double #notLiteral)
{
	widgetBottomRightRadius = radius
	updateCanvasRoundingRadius()
}

func setWidgetRoundingRadius(radius as double #notLiteral):
	setWidgetRoundingRadius(radius, radius, radius, radius)

func setWidgetRoundingRadius(lradius as double #notLiteral, rradius as double #notLiteral):
	setWidgetRoundingRadius(lradius, rradius, rradius, lradius)

func setWidgetRoundingRadius(tlradius as double #notLiteral, trradius as double #notLiteral, brradius as double #notLiteral, blradius as double #notLiteral)
{
	widgetTopLeftRadius = tlradius
	widgetTopRightRadius = trradius
	widgetBottomRightRadius = brradius
	widgetBottomLeftRadius = blradius
	updateCanvasRoundingRadius()
}

const BORDER_STYLE_SOLID = 0
const BORDER_STYLE_DASHED = 1
const BORDER_STYLE_DOTTED = 2
const BORDER_STYLE_NONE = 3
const BORDER_STYLE_3D = 4

func setWidgetBorderStyle(style as int) as this
{
	widgetBorderStyle = style
	IFDEF "target_html" {
		if style == BORDER_STYLE_SOLID {
			HTMLDOM.setStyle(element, "border-style", "solid")
		}
		else if style == BORDER_STYLE_DASHED {
			HTMLDOM.setStyle(element, "border-style", "dashed")
		}
		else if style == BORDER_STYLE_DOTTED {
			HTMLDOM.setStyle(element, "border-style", "dotted")
		}
		else if style == BORDER_STYLE_NONE {
			HTMLDOM.setStyle(element, "border-style", "none")
		}
		else if style == BORDER_STYLE_3D {
			HTMLDOM.setStyle(this.element, "border-style", "groove")
		}
		else {
			Log.warning(widgetContext, "Unsupported image scale method: " .. String.forInteger(style))
			HTMLDOM.setStyle(element, "border-style", "solid")
		}
	}
	ELSE IFDEF "target_ios" {
        IFDEF "target_objc" {
            if style == BORDER_STYLE_SOLID {
                lang "objc" {{{
                    border.lineDashPattern = nil;
                }}}
            }
            else if style == BORDER_STYLE_DASHED {
                lang "objc" {{{
                    border.lineDashPattern = @[@10, @5];
                }}}
            }
            else if style == BORDER_STYLE_DOTTED {
                lang "objc" {{{
                    border.lineDashPattern = @[@2, @5];
                }}}
            }
            else if style == BORDER_STYLE_NONE {
                lang "objc" {{{
                    [border removeFromSuperlayer];
                }}}
            }
        }
    }
	ELSE IFDEF "target_android" {
		IFDEF "target_java" {
			if widgetOutlineWidth > 0 {
				lang "java" {{{
					if(widgetBorderStyle == BORDER_STYLE_DASHED) {
						border.setStroke(widgetOutlineWidth, widgetOutlineColor.toARGBInt32(), 10,5);
					}
					else if(widgetBorderStyle == BORDER_STYLE_DOTTED) {
						border.setStroke(widgetOutlineWidth, widgetOutlineColor.toARGBInt32(), 3,5);
					}
					else if(widgetBorderStyle == BORDER_STYLE_SOLID) {
						border.setStroke(widgetOutlineWidth, widgetOutlineColor.toARGBInt32());
					}
					if(android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.JELLY_BEAN) {
						this.setBackgroundDrawable(null);
					}
					else {
						this.setBackground(null);
					}
				}}}
			}
		}
	}
	ELSE {
		ERROR "Not implemented"
	}
	return this
}
