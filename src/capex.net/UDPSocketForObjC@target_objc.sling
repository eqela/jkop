
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is UDPSocket is FileDescriptor:

depend "objc-header-m:<unistd.h>"
depend "objc-header-m:<sys/types.h>"
depend "objc-header-m:<sys/socket.h>"
depend "objc-header-m:<netinet/in.h>"
depend "objc-header-m:<string.h>"
depend "objc-header-m:<errno.h>"
depend "objc-header-m:<arpa/inet.h>"
depend "objc-header-m:<sys/time.h>"

var fileDescriptor = -1

ctor
{
	lang "objc" {{{
		fileDescriptor = socket(PF_INET, SOCK_DGRAM, 0);
	}}}
}

dtor
{
	close()
}

func getFileDescriptor as int:
	return fileDescriptor

func close override
{
	if(fileDescriptor >= 0) {
		lang "objc" {{{
			close(fileDescriptor);
		}}}
		fileDescriptor = -1
	}
}

func send(message as buffer, address as string, port as int) override as int
{
	if(address == null) {
		return -1
	}
	if(message == null || fileDescriptor < 0) {
		return 0
	}
	var v = 0
	lang "objc" {{{
		struct sockaddr_in server_addr;
		memset(&server_addr, 0, sizeof(struct sockaddr_in));
		server_addr.sin_family = AF_INET;
		server_addr.sin_addr.s_addr = inet_addr([address UTF8String]);
		server_addr.sin_port = htons(port);
		v = sendto(fileDescriptor, [message bytes], [message length], 0, (struct sockaddr*)(&server_addr), sizeof(struct sockaddr_in));
	}}}
	return v
}

func sendBroadcast(message as buffer, address as string, port as int) override as int
{
	var v = 0
	var flag = 1
	lang "objc" {{{
		setsockopt(fileDescriptor, SOL_SOCKET, SO_BROADCAST, (void*)&flag, sizeof(int));
	}}}
	v = send(message, address, port)
	flag = 0
	lang "objc" {{{
		setsockopt(fileDescriptor, SOL_SOCKET, SO_BROADCAST, (void*)&flag, sizeof(int));
	}}}
	return v
}

func waitForData(timeout as int) as bool
{
	var v = false
	if(fileDescriptor < 0) {
		return false
	}
	lang "objc" {{{
		fd_set fdset;
		FD_ZERO(&fdset);
		FD_SET(fileDescriptor, &fdset);
	}}}
	var r = -1
	if(timeout < 0) {
		lang "objc" {{{
			r = select(fileDescriptor+1, &fdset, (void*)0, (void*)0, (void*)0);
		}}}
	}
	else {
		lang "objc" {{{
			struct timeval tv;
			tv.tv_sec = timeout / 1000000;
			tv.tv_usec = timeout % 1000000;
			r = select(fileDescriptor+1, &fdset, (void*)0, (void*)0, &tv);
		}}}
	}
	if(r > 0) {
		lang "objc" {{{
			if(FD_ISSET(fileDescriptor, &fdset) != 0) {
				v = YES;
			}
		}}}
	}
	if(r < 0) {
		var err as string
		lang "objc" {{{
			if(errno != EINTR) {
				const char* ep = strerror(errno);
				if(ep != NULL) {
					err = [[NSString alloc] initWithUTF8String:ep];
				}
			}
		}}}
		if(err != null) {
			PRINT("select() returned error status " .. String.forInteger(r) .. ": " .. err)
		}
	}
	return v
}

func receive(buffer as buffer, timeout as int) override as int
{
	if(buffer == null || fileDescriptor < 0) {
		return 0
	}
	var v = 0
	if(waitForData(timeout)) {
		lang "objc" {{{
			socklen_t l = (socklen_t)sizeof(struct sockaddr_in);
			struct sockaddr_in client_addr;
			v = recvfrom(fileDescriptor, [buffer mutableBytes], [buffer length], 0, (struct sockaddr*)(&client_addr), &l);
		}}}
	}
	return v
}

func bind(port as int) override as bool
{
	if(fileDescriptor < 0) {
		return false
	}
	var v = 0
	lang "objc" {{{
		struct sockaddr_in server_addr;
		memset(&server_addr, 0, sizeof(struct sockaddr_in));
		server_addr.sin_family = AF_INET;
		server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
		server_addr.sin_port = htons(port);
		v = bind(fileDescriptor, (struct sockaddr*)(&server_addr), sizeof(struct sockaddr_in));
	}}}
	if(v != 0) {
		close()
		return false
	}
	return true
}

func getLocalAddress override as string
{
	var r as int
	lang "objc" {{{
		socklen_t s = (socklen_t)sizeof(struct sockaddr_in);
		struct sockaddr_in new_addr;
		r = getsockname(fileDescriptor, (struct sockaddr*)(&new_addr), &s);
	}}}
	if(r < 0) {
		return null
	}
	var v as string = null
	lang "objc" {{{
		char* adds = (char*)inet_ntoa(new_addr.sin_addr);
		if(adds != NULL) {
			v = [[NSString alloc] initWithUTF8String:adds];
		}
	}}}
	return v
}

func getLocalPort override as int
{
	var r as int
	lang "objc" {{{
		socklen_t s = (socklen_t)sizeof(struct sockaddr_in);
		struct sockaddr_in new_addr;
		r = getsockname(fileDescriptor, (struct sockaddr*)(&new_addr), &s);
	}}}
	if(r < 0) {
		return 0
	}
	lang "objc" {{{
		r = ntohs(new_addr.sin_port);
	}}}
	return r
}
