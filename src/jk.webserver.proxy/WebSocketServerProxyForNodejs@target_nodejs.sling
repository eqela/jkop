
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.nodejs
import jk.webserver

class is WebSocketServerProxy:

depend "npm:ws:8.9.0"

func handleRequest(request as WebServerRequest, targetUrl as string) override async
{
	var wsr = request as WebServerForNodejs.WebSocketServerRequestForNodejs
	if not wsr:
		throw Exception.forErrorCode("invalidRequestObject")
	var socket = wsr.socket
	var ws = NodeModule.require("ws")
	lang "js" {{{
		const client = new ws.WebSocket(targetUrl, [ "websocket" ], {
			origin: request.getHeader("origin")
		})
		const stream = ws.createWebSocketStream(client, { encoding: "utf8" })
		const promise = new Promise((resolve, reject) => {
			const p1 = stream.pipe(socket)
			p1.on("error", (error) => {
				reject(error)
			})
			p1.on("close", () => {
				resolve()
			})
			const p2 = socket.pipe(stream)
			p2.on("error", (error) => {
				reject(error)
			})
			p2.on("close", () => {
				resolve()
			})
		})
	}}}
	return lang "js" promise {{{ promise }}}
}
