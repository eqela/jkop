
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is ContainerWidget #widget:

class MyChildEntry
{
	var widget public as Widget
	var weight public as double
}

func forContext(context as GuiApplicationContext, widgetMargin as int #notLiteral = 0, widgetSpacing as int #notLiteral = 0) static as this
{
	var v = new this(context)
	v.widgetMarginLeft = widgetMargin
	v.widgetMarginRight = widgetMargin
	v.widgetMarginTop = widgetMargin
	v.widgetMarginBottom = widgetMargin
	v.widgetSpacing = widgetSpacing
	return v
}

var children as vector<MyChildEntry>
prop widgetSpacing #notLiteral = 0
var widgetMarginLeft protected = 0
var widgetMarginRight protected = 0
var widgetMarginTop protected = 0
var widgetMarginBottom protected = 0
var widgetWidthRequest = 0
var widgetMaximumWidthRequest = 0

ctor(ctx as cave.GuiApplicationContext)
{
	base(ctx)
	children = new vector<MyChildEntry>
}

func setWidgetMargin(margin as int #notLiteral) as this
{
	widgetMarginLeft = margin
	widgetMarginRight = margin
	widgetMarginTop = margin
	widgetMarginBottom = margin
	Widget.onLayoutChanged(this)
	return this
}

func getWidgetMarginLeft as int:
	return widgetMarginLeft

func setWidgetMarginLeft(value as int #notLiteral) as this
{
	widgetMarginLeft = value
	Widget.onLayoutChanged(this)
	return this
}

func getWidgetMarginRight as int:
	return widgetMarginRight

func setWidgetMarginRight(value as int #notLiteral) as this
{
	widgetMarginRight = value
	Widget.onLayoutChanged(this)
	return this
}

func getWidgetMarginTop as int:
	return widgetMarginTop

func setWidgetMarginTop(value as int #notLiteral) as this
{
	widgetMarginTop = value
	Widget.onLayoutChanged(this)
	return this
}

func getWidgetMarginBottom as int:
	return widgetMarginBottom

func setWidgetMarginBottom(value as int #notLiteral) as this
{
	widgetMarginBottom = value
	Widget.onLayoutChanged(this)
	return this
}

func setWidgetWidthRequest(request as int #notLiteral) as this
{
	widgetWidthRequest = request
	Widget.onLayoutChanged(this)
	return this
}

func getWidgetWidthRequest as int:
	return widgetWidthRequest

func setWidgetMaximumWidthRequest(width as int #notLiteral) as this
{
	widgetMaximumWidthRequest = width
	if Widget.getWidth(this) > width:
		Widget.onLayoutChanged(this)
	return this
}

func getWidgetMaximumWidthRequest as int:
	return widgetMaximumWidthRequest

func computeWidgetLayout(widthConstraint as int #notLiteral) override
{
	var wc = -1
	if widthConstraint < 0 && widgetWidthRequest > 0:
		wc = widgetWidthRequest - widgetMarginLeft - widgetMarginRight
	if wc < 0 && widthConstraint >= 0 {
		wc = widthConstraint - widgetMarginLeft - widgetMarginRight
		if wc < 0:
			wc = 0
	}
	var widest = 0
	var childCount = 0
	var y = widgetMarginTop
	if wc < 0 {
		foreach child in children {
			Widget.layout(child.widget, -1)
			var ww = Widget.getWidth(child.widget)
			if ww > wc:
				wc = ww
		}
	}
	foreach child in children {
		if childCount > 0:
			y += widgetSpacing
		childCount ++
		Widget.layout(child.widget, wc)
		Widget.move(child.widget, widgetMarginLeft, y)
		var ww = Widget.getWidth(child.widget)
		if wc < 0 && widgetMaximumWidthRequest > 0 && ww + widgetMarginLeft + widgetMarginRight > widgetMaximumWidthRequest {
			Widget.layout(child.widget, widgetMaximumWidthRequest - widgetMarginLeft - widgetMarginRight)
			ww = Widget.getWidth(child.widget)
		}
		if ww > widest:
			widest = ww
		y += Widget.getHeight(child.widget)
	}
	y += widgetMarginBottom
	var mywidth = widest + widgetMarginLeft + widgetMarginRight
	if widthConstraint >= 0:
		mywidth = widthConstraint
	Widget.setLayoutSize(this, mywidth, y)
	onWidgetHeightChanged(y)
}

func onWidgetHeightChanged(height as int) override
{
	base.onWidgetHeightChanged(height)
	var totalWeight = 0.0
	var availableHeight = height - widgetMarginTop - widgetMarginBottom
	var childCount = 0
	foreach child in children {
		childCount ++
		if child.weight > 0.0 {
			totalWeight += child.weight
		}
		else {
			availableHeight -= Widget.getHeight(child.widget)
		}
	}
	if childCount > 1 && widgetSpacing > 0:
		availableHeight -= (childCount-1) * widgetSpacing
	if availableHeight < 0:
		availableHeight = 0
	var y = widgetMarginTop
	foreach child in children {
		Widget.move(child.widget, widgetMarginLeft, y)
		if child.weight > 0.0 {
			var hh = (availableHeight * child.weight / totalWeight) as int
			Widget.resizeHeight(child.widget, hh)
		}
		var hh = Widget.getHeight(child.widget)
		y += hh
		y += widgetSpacing
	}
}

func onChildWidgetsRemoved(widgets as vector<Widget>) override
{
	REMOVE_WIDGETS_FROM_VECTOR(widgets, children)
	base.onChildWidgetsRemoved(widgets)
}

func addWidget(widget as Widget) override as ContainerWidget:
	return addWidget(widget, 0.0)

func removeAllChildren:
	Widget.removeChildrenOf(this)

func addWidget(widget as Widget, weight as double) as this
{
	if widget {
		var ee = new MyChildEntry()
		ee.widget = widget
		ee.weight = weight
		children += ee
		Widget.addChild(this, widget)
	}
	return this
}
