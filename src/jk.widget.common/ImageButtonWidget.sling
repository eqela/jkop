
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is LayerWidget #widget:

func forImage(context as GuiApplicationContext, image as Image, handler as function) static as this
{
	var v = new this(context)
	v.setWidgetImage(image)
	v.setWidgetClickHandler(handler)
	return v
}

func forImageResource(context as GuiApplicationContext, resName as string, handler as function) static as this
{
	var v = new this(context)
	v.setWidgetImageResource(resName)
	v.setWidgetClickHandler(handler)
	return v
}

ctor(ctx as GuiApplicationContext)
{
	base(ctx)
	widgetContext = ctx
}

var widgetContext as GuiApplicationContext
var widgetImage as Image
var widgetImageResource as string
var widgetClickHandler as function
pvar widgetImageScale #notLiteral = 0
pvar widgetButtonWidth #notLiteral = 0
pvar widgetButtonHeight #notLiteral = 0
var imageWidget as ImageWidget

func setWidgetImage(image as Image) as this
{
	widgetImage = image
	widgetImageResource = null
	updateImageWidget()
	return this
}

func setWidgetImageResource(resName as string) as this
{
	widgetImageResource = resName
	widgetImage = null
	updateImageWidget()
	return this
}

func setWidgetClickHandler(handler as function) as this
{
	widgetClickHandler = handler
	Widget.setWidgetClickHandler(this, handler)
	return this
}

func updateImageWidget private
{
	assert imageWidget
	if widgetImage {
		imageWidget.setWidgetImage(widgetImage)
	}
	else {
		imageWidget.setWidgetImageResource(widgetImageResource)
	}
}

func initializeWidget override
{
	base.initializeWidget()
	imageWidget = new ImageWidget(context)
	imageWidget.setWidgetImageScaleMethod(widgetImageScale)
	imageWidget.setWidgetImageWidth(widgetButtonWidth)
	imageWidget.setWidgetImageHeight(widgetButtonHeight)
	addWidget(imageWidget)
	updateImageWidget()
	IFDEF "target_html" {
		HTMLDOM.setStyle(element, "cursor", "pointer")
	}
}
