
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.time
import jk.random

class:

model PasswordProperties public
{
	length as int
	includeUppercaseCharacters as bool
	includeLowercaseCharacters as bool
	includeDigits as bool
	includeSpecialCharacters as bool
}

func generateUppercaseCharacter(random as Random) static private as char:
	return 'A' + random.nextIntegerWithMaximum('z' - 'a')

func generateLowercaseCharacter(random as Random) static private as char:
	return 'a' + random.nextIntegerWithMaximum('z' - 'a')

func generateDigit(random as Random) static private as char:
	return '0' + random.nextIntegerWithMaximum(10)

func generateSpecialCharacter(random as Random) static private as char
{
	var characters = "!@#$%^&*_+=-.,"
	return String.getChar(characters, random.nextIntegerWithMaximum(String.getLength(characters)))
}

func generateRandomPassword(properties as PasswordProperties = null) static as string
{
	var props = properties
	if not props {
		props = new PasswordProperties()
		props.includeLowercaseCharacters = true
		props.includeDigits = true
		props.length = 16
	}
	if props.includeUppercaseCharacters == false && props.includeDigits == false && props.includeSpecialCharacters == false:
		props.includeLowercaseCharacters = true
	var minlength = 0
	if props.includeUppercaseCharacters:
		minlength ++
	if props.includeLowercaseCharacters:
		minlength ++
	if props.includeDigits:
		minlength ++
	if props.includeSpecialCharacters:
		minlength ++
	var ll = props.length
	if ll < minlength:
		ll = minlength
	var nUppercaseCharacters = 0
	var nLowercaseCharacters = 0
	var nDigits = 0
	var nSpecialCharacters = 0
	var random = Random.getSharedInstance()
	var sb = new StringBuilder()
	while sb.count() < ll {
		if ll - sb.count() <= minlength {
			if props.includeUppercaseCharacters && nUppercaseCharacters < 1 {
				sb.appendCharacter(generateUppercaseCharacter(random))
				continue
			}
			if props.includeLowercaseCharacters && nLowercaseCharacters < 1 {
				sb.appendCharacter(generateLowercaseCharacter(random))
				continue
			}
			if props.includeDigits && nDigits < 1 {
				sb.appendCharacter(generateDigit(random))
				continue
			}
			if props.includeSpecialCharacters && nSpecialCharacters < 1 {
				sb.appendCharacter(generateSpecialCharacter(random))
				continue
			}
		}
		var index = random.nextIntegerWithMaximum(minlength)
		var n = 0
		if props.includeUppercaseCharacters {
			if index == n {
				sb.appendCharacter(generateUppercaseCharacter(random))
				continue
			}
			n ++
		}
		if props.includeLowercaseCharacters {
			if index == n {
				sb.appendCharacter(generateLowercaseCharacter(random))
				continue
			}
			n ++
		}
		if props.includeDigits {
			if index == n {
				sb.appendCharacter(generateDigit(random))
				continue
			}
			n ++
		}
		if props.includeSpecialCharacters {
			if index == n {
				sb.appendCharacter(generateSpecialCharacter(random))
				continue
			}
			n ++
		}
		// never here, but fall back to this anyway..
		sb.appendCharacter(generateLowercaseCharacter(random))
	}
	return sb.toString()
}
