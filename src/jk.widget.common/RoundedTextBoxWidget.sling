
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class #widget:

ui LayerWidget
{
	margin = context.getHeightValue("1px")
	CanvasWidget outline {
		color = Color.instance("#BCBEC0")
		roundingRadius = context.getHeightValue("2000um")
	}
	LayerWidget {
		CanvasWidget background {
			color = Color.white()
			roundingRadius = context.getHeightValue("2000um")
		}
		margin = context.getHeightValue("1px")
		AlignWidget {
			LayerWidget : 0.0, 0.5, true {
				margin = context.getHeightValue("3px")
				TextInputWidget textInput {
					fontSize = context.getHeightValue("2000um")
				}
			}
		}
	}
}

ctor(ctx as GuiApplicationContext)
{
	base(ctx)
	forceCreateWidget()
}

func setWidgetEnabled(enable as bool) as this
{
	Widget.setEnabled(textInput, enable)
	return this
}

func setWidgetFontSize(fontsize as double #notLiteral) as this
{
	textInput.setWidgetFontSize(fontsize)
	return this
}

func setWidgetPlaceholder(str as string) as this
{
	textInput.setWidgetPlaceholder(str)
	return this
}

func setWidgetTextChangeHandler(handler as function<void, string>) as this
{
	assert handler
	var hnd final = handler
	textInput.setWidgetTextChangeHandler(func {
		hnd(textInput.getWidgetText())
	})
	return this
}

func setWidgetText(str as string) as this
{
	textInput.setWidgetText(str)
	return this
}

func getWidgetText as string:
	return textInput.getWidgetText()
