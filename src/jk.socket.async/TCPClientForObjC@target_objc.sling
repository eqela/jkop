
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is TCPClient is ConnectedSocket implements !"NSStreamDelegate":

class ReadQueueItem
{
	ctor(buffer as buffer, size as int)
	{
		setBuffer(buffer)
		setSize(size)
	}

	pvar buffer as buffer
	pvar size as int
}

class SendTask
{
	pvar data as buffer
	pvar size as int
	pvar callback as function<void, Error>
}

var inputStream private as !"NSInputStream*"
var outputStream private as !"NSOutputStream*"
var sendTaskQueue private as vector<SendTask>
var sendTaskQueueMaxSize private = 1024 * 1024
var connectCallback private as function<void, Error>
var receiveCallback private as function<void, buffer, int>
var readQueue as Queue<ReadQueueItem>

lang "objc" {{{
	-(void)stream:(NSStream *)theStream handleEvent:(NSStreamEvent)streamEvent
	{
		if(streamEvent == NSStreamEventNone) {
		}
		else if(streamEvent == NSStreamEventOpenCompleted) {
			if(theStream == outputStream) {
				[self onStreamOpened];
			}
		}
		else if(streamEvent == NSStreamEventHasBytesAvailable) {
			[self onBytesAvailable];
		}
		else if(streamEvent == NSStreamEventHasSpaceAvailable) {
			[self onSpaceAvailable];
		}
		else if(streamEvent == NSStreamEventErrorOccurred) {
			[self onStreamError:[[theStream streamError] localizedDescription]];
		}
		else if(streamEvent == NSStreamEventEndEncountered) {
			[self onStreamClosed];
		}
		else {
		}
	}
}}}

ctor:
	readQueue = new Queue<ReadQueueItem>()

dtor
{
	close()
	readQueue = null
	sendTaskQueue = null
	connectCallback = null
	receiveCallback = null
}

func onStreamOpened private
{
	assert connectCallback
	connectCallback(null)
}

func onStreamError(error as string)
{
	close()
	if connectCallback {
		connectCallback(Error.forCode("streamError", error))
	}
	else if receiveCallback {
		receiveCallback(null, 0)
	}
}

func onStreamClosed private
{
	close()
	if connectCallback:
		connectCallback(Error.forCode("streamError", "Connection closed"))
}

func onBytesAvailable private
{
	var rb = malloc 64 * 1024
	var r = read(rb)
	if r < 0:
		close()
	var rqi = new ReadQueueItem(rb, r)
	readQueue.push(rqi)
	onReadUpdate()
}

func onReadUpdate private
{
	assert receiveCallback
	var rqi = assert readQueue.pop()
	var rcb = receiveCallback
	receiveCallback = null
	rcb(rqi.getBuffer(), rqi.getSize())
}

func read(data as buffer) private as int
{
	var v as int
	lang "objc" {{{
		v = (int)[inputStream read:[data mutableBytes] maxLength:[data length]];
	}}}
	return v
}

func onSpaceAvailable private
{
	assert sendTaskQueue
	var stq = sendTaskQueue
	sendTaskQueue = null
	foreach st as SendTask in stq:
		onSendTask(st)
}

func onSendTask(st as SendTask) private
{
	assert st
	assert outputStream
	var data #used = st.getData()
	var sz = st.getSize()
	var cb = st.getCallback()
	if sz < 0 {
		lang "objc" {{{
			sz = [data length];
		}}}
	}
	if lang "objc" bool {{{ outputStream.hasSpaceAvailable }}} == false {
		if sendTaskQueue == null:
			sendTaskQueue = new vector<SendTask>
		if Vector.getSize(sendTaskQueue) > sendTaskQueueMaxSize {
			if cb:
				cb(Error.forMessage("Output stream has no space available, and output queue max size has been exceeded"))
			return
		}
		sendTaskQueue += st
		return
	}
	var v as int
	lang "objc" {{{
		v = (int)[outputStream write:[data bytes] maxLength:sz];
	}}}
	if v < 0 {
		close()
		if cb:
			cb(Error.forMessage("Failed to send"))
		return
	}
	if cb:
		cb(null)
}

func close private
{
	if inputStream {
		lang "objc" {{{
			[inputStream close];
			[inputStream setDelegate:nil];
			[inputStream removeFromRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];
			// [inputStream release]; // FIXME: ARC forbids explicit message send of 'release'
		}}}
		inputStream = null
	}
	if outputStream {
		lang "objc" {{{
			[outputStream close];
			[outputStream setDelegate:nil];
			[outputStream removeFromRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];
			// [outputStream release]; // FIXME: ARC forbids explicit message send of 'release'
		}}}
		outputStream = null
	}
}

func connectSSL(address as string, port as int, callback as function<void,Error>) override
{
	assert callback
	assert address:
		callback(Error.forCode("noAddress"))
	connectCallback = callback
	close()
	lang "objc" {{{
		CFReadStreamRef readStream;
		CFWriteStreamRef writeStream;
		CFStreamCreatePairWithSocketToHost(NULL, (__bridge CFStringRef)address, port, &readStream, &writeStream); 
		inputStream = (__bridge_transfer NSInputStream *)readStream;
		outputStream = (__bridge_transfer NSOutputStream *)writeStream;
		[inputStream setDelegate:self];
		[outputStream setDelegate:self];
		[inputStream scheduleInRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];
		[outputStream scheduleInRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];
		[inputStream setProperty:NSStreamSocketSecurityLevelNegotiatedSSL forKey:NSStreamSocketSecurityLevelKey];
		[outputStream setProperty:NSStreamSocketSecurityLevelNegotiatedSSL forKey:NSStreamSocketSecurityLevelKey];
		[inputStream open];
		[outputStream open];
	}}}
}

func connect(address as string, port as int, callback as function<void,Error>) override
{
	assert callback
	assert address:
		callback(Error.forCode("noAddress"))
	connectCallback = callback
	close()
	lang "objc" {{{
		CFReadStreamRef readStream;
		CFWriteStreamRef writeStream;
		CFStreamCreatePairWithSocketToHost(NULL, (__bridge CFStringRef)address, port, &readStream, &writeStream); 
		inputStream = (__bridge_transfer NSInputStream *)readStream;
		outputStream = (__bridge_transfer NSOutputStream *)writeStream;
		[inputStream setDelegate:self];
		[outputStream setDelegate:self];
		[inputStream scheduleInRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];
		[outputStream scheduleInRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];
		[inputStream open];
		[outputStream open];
	}}}
}

func receive(callback as function<void,buffer,int>) override
{
	assert (callback && inputStream)
	receiveCallback = callback
	onReadUpdate()
}

func send(data as buffer, size as int, callback as function<void,Error>) override
{
	assert callback
	assert inputStream:
		callback(Error.forCode("noConnection"))
	assert data:
		callback(Error.forCode("noData"))
	onSendTask(new SendTask().setData(data).setSize(size).setCallback(callback))
}

func disconnect(callback as function<void,Error>) override
{
	assert callback
	assert (inputStream && outputStream):
		callback(Error.forCode("noConnection"))
	close()
	callback(null)
}
