
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class implements !"UIApplicationDelegate" depends "objc-header-h:<UIKit/UIKit.h>" imports cape:

var window protected as !"UIWindow*"
var viewController protected as !"UIViewController*"
var ctx protected as cave.GuiApplicationContextForIOS
prop openURLhandler as function<bool, !"UIApplication", !"NSURL", !"NSDictionary", !"NSString", object>

ctor:
	ctx = createContext()

func createContext virtual as GuiApplicationContextForIOS:
	return new GuiApplicationContextForIOS()

func createMainScreen(ctx as cave.GuiApplicationContextForIOS) virtual as !"UIViewController*":
	return null

func applicationDidFinishLaunching(application as !"UIApplication*")
{
	lang "objc" {{{
		window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
	}}}
	var cc = createMainScreen(ctx)
	if cc {
		if cc is ScreenWithContext:
			(cc as! ScreenWithContext).setContext(ctx)
		viewController = cc
		lang "objc" {{{
			window.rootViewController = viewController;
		}}}
	}
	lang "objc" {{{
		[window makeKeyAndVisible];
	}}}
}

func applicationDidBecomeActive(application as !"UIApplication*") virtual
{
	lang "objc" {{{
		id vc = viewController;
		if([vc respondsToSelector:@selector(applicationDidBecomeActive:)]) {
			[vc applicationDidBecomeActive:application];
		}
	}}}
}

func applicationWillResignActive(application as !"UIApplication*") virtual
{
	lang "objc" {{{
		id vc = viewController;
		if([vc respondsToSelector:@selector(applicationWillResignActive:)]) {
			[vc applicationWillResignActive:application];
		}
	}}}
}

func applicationDidEnterBackground(application as !"UIApplication*")
{
	lang "objc" {{{
		id vc = viewController;
		if([vc respondsToSelector:@selector(applicationDidEnterBackground:)]) {
			[vc applicationDidEnterBackground:application];
		}
	}}}
}

func applicationWillEnterForeground(application as !"UIApplication*")
{
	lang "objc" {{{
		id vc = viewController;
		if([vc respondsToSelector:@selector(applicationWillEnterForeground:)]) {
			[vc applicationWillEnterForeground:application];
		}
	}}}
}

func applicationWillTerminate(application as !"UIApplication*")
{
	lang "objc" {{{
		id vc = viewController;
		if([vc respondsToSelector:@selector(applicationWillTerminate:)]) {
			[vc applicationWillTerminate:application];
		}
	}}}
}

lang "objc" {{{
	- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary *)options
	{
		if(self->openURLhandler != nil) {
			return(self->openURLhandler(app, url, options, nil, nil));
		}
		return(NO);
	}

	- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation
	{
		if(self->openURLhandler != nil) {
			return(self->openURLhandler(app, url, nil, sourceApplication, annotation));
		}
		return(NO);
	}
}}}
