
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is Image:

func forKotlinBitmap(bitmap as !"android.graphics.Bitmap") static as this
{
	if !bitmap:
		return null
	var v = new this()
	v.bitmap = bitmap
	return v
}

func forSize(width as int, height as int) static as this
{
	var v = new this()
	lang "kotlin" {{{
		try {
			v.bitmap = android.graphics.Bitmap.createBitmap(width, height, android.graphics.Bitmap.Config.ARGB_8888)
		}
		catch(e: Exception) {
			v.bitmap = null
		}
		if(v.bitmap == null) {
			return(null)
		}
	}}}
	return v
}

func forFile(file as File) static as this
{
	ERROR("Not implemented")
	return null
}

func forBuffer(buffer as buffer) static as this
{
	if !buffer:
		return null
	var bm as !"android.graphics.Bitmap"
	lang "kotlin" {{{
		bm = android.graphics.BitmapFactory.decodeByteArray(buffer, 0, buffer.size)
	}}}
	if !bm:
		return null
	return forKotlinBitmap(bm)
}

var bitmap public as !"android.graphics.Bitmap"

func getKotlinBitmap as !"android.graphics.Bitmap":
	return bitmap

func getPixelWidth override as int
{
	var v = 0
	if bitmap:
		v = bitmap.getWidth() as int
	return v
}

func getPixelHeight override as int
{
	var v = 0
	if bitmap:
		v = bitmap.getHeight() as int
	return v
}

func scaleToSize(width as int, height as int) override as Image
{
	if width < 0 || height < 0:
		return this
	var bm as !"android.graphics.Bitmap"
	lang "kotlin" {{{
		try {
			bm = android.graphics.Bitmap.createScaledBitmap(bitmap, width, height, true)
		}
		catch(e: Exception) {
			bm = null
		}
	}}}
	if !bm:
		return null
	return forKotlinBitmap(bm)
}

func scaleToSize(w as int, h as int, callback as function<void, Image>) override
{
	assert callback
	callback(scaleToSize(w, h))
}

func scaleToWidth(w as int) override as Image:
	return scaleToSize(w, getProportionalHeight(w))

func scaleToWidth(w as int, callback as function<void, Image>) override
{
	assert callback
	callback(scaleToWidth(w))
}

func scaleToHeight(h as int) override as Image:
	return scaleToSize(getProportionalWidth(h), h)

func scaleToHeight(h as int, callback as function<void, Image>) override
{
	assert callback
	callback(scaleToHeight(h))
}

func crop(x as int, y as int, w as int, h as int) override as Image
{
	if !bitmap:
		return null
	var bm as !"android.graphics.Bitmap"
	lang "kotlin" {{{
		bm = android.graphics.Bitmap.createBitmap(bitmap, x, y, w, h, null, false)
	}}}
	if !bm:
		return null
	return forKotlinBitmap(bm)
}

func crop(x as int, y as int, w as int, h as int, callback as function<void, Image>) override
{
	assert callback
	callback(crop(x, y, w, h))
}

func toJPGData override as buffer
{
	assert bitmap
	var buf as buffer
	lang "kotlin" {{{
		var baStream = java.io.ByteArrayOutputStream()
		var cf = android.graphics.Bitmap.CompressFormat.JPEG
		if(bitmap.compress(cf, 100, baStream)) {
			buf = baStream.toByteArray()
		}
	}}}
	return buf
}

func toPNGData override as buffer
{
	if !bitmap:
		return null
	var buf as buffer
	lang "kotlin" {{{
		var baStream = java.io.ByteArrayOutputStream()
		var cf = android.graphics.Bitmap.CompressFormat.PNG
		if(bitmap.compress(cf, 70, baStream)) {
			buf = baStream.toByteArray()
		}
	}}}
	return buf
}

func toRGBAData override as buffer
{
	ERROR("Not implemented")
	return null
}

func releaseImage override
{
	ERROR("Not implemented")
	return null
}
