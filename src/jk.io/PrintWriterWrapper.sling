
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is Writer is PrintWriter is Closable is FlushableWriter:

func forWriter(writer as Writer) static as PrintWriter
{
	if writer == null:
		return null
	if writer is PrintWriter:
		return writer as! PrintWriter
	var v = new this()
	v.setWriter(writer)
	return v
}

func closeWriter(writer as PrintWriter) static as PrintWriter
{
	var wc = assert writer as Closable
	wc.close()
	return null
}

pvar writer as Writer

func print(str as string) as bool
{
	if str == null:
		return false
	var buffer = String.toUTF8Buffer(str)
	if buffer == null:
		return false
	var sz = Buffer.getSize(buffer) as int
	if writer.write(buffer, -1) != sz:
		return false
	return true
}

func println(str as string) as bool:
	return print(str .. "\n")

func writeWholeBuffer(buf as buffer) as int:
	return write(buf, -1)

func write(buf as buffer, size as int) as int
{
	if writer == null:
		return -1
	return writer.write(buf, size)
}

func close
{
	var cw = writer as Closable
	if cw:
		cw.close()
}

func flush
{
	var cw = writer as FlushableWriter
	if cw:
		cw.flush()
}
