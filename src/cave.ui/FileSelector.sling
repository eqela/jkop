/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class imports capex.util:

IFDEF "target_android"
{
	depend "androidPermission:android.permission.READ_EXTERNAL_STORAGE"
	depend "androidPermission:android.permission.WRITE_EXTERNAL_STORAGE"
}

ELSE IFDEF "target_kotlin"
{
	depend "androidPermission:android.permission.READ_EXTERNAL_STORAGE"
	depend "androidPermission:android.permission.WRITE_EXTERNAL_STORAGE"
}

ELSE IFDEF "target_ios"
{
	depend "plist: { \"NSPhotoLibraryUsageDescription\" : \"This app requires access to the photo library.\" }"
	depend "plist: { \"NSCameraUsageDescription\" : \"This app requires access to the camera.\" }"
	depend "objc-header-h:<UIKit/UIKit.h>"

	class MyPickerDelegate implements !"UIImagePickerControllerDelegate" implements !"UINavigationControllerDelegate"
	{
		prop callback as function<void, buffer, string, string, Error>

		lang "objc" {{{
			- (void)imagePickerController:(UIImagePickerController*)picker didFinishPickingMediaWithInfo:(NSDictionary*)info
			{
				UIImage *image = [info objectForKey:UIImagePickerControllerEditedImage];
				NSURL *url = [info objectForKey:UIImagePickerControllerReferenceURL];
				[self onImagePicked:image filepath:url.path];
				objc_removeAssociatedObjects(picker);
				[picker dismissViewControllerAnimated:YES completion:NULL];
			}
		}}}

		func onImagePicked(image as !"UIImage", filepath as string)
		{
			if callback {
				var file = cape.File.forPath(filepath)
				var mtype as string
				var buf as buffer
				var error as Error
				if image {
					var img = ImageForIOS.forUIImage(image)
					if file.hasExtension("jpeg") || file.hasExtension("jpg") {
						mtype = "image/jpeg"
						buf = img.toJPGData()
					}
					else if file.hasExtension("png") {
						mtype = "image/png"
						buf = img.toPNGData()
					}
				}
				if not buf {
					buf = file.getContentsBuffer()
					if buf {
						mtype = MimeTypeRegistry.determineTypeForFile(file)
					}
					else {
						mtype = null
						buf = null
						error = Error.forCode("failedToReadFile")
					}
				}
				callback(buf, file.getBasename(), mtype, error)
			}
		}
	}
}

ELSE IFDEF "target_swift"
{
	depend "swift-import:UIKit"

	class MyPickerDelegate implements !"UIImagePickerControllerDelegate" implements !"UINavigationControllerDelegate"
	{
		prop callback as function<void, buffer, string, string, Error>

		lang "swift" {{{
			func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
				let image = info[.editedImage] as? UIImage
				let url = info[.referenceURL] as? URL
				onImagePicked(image, url?.path)
				objc_removeAssociatedObjects(picker)
				picker.dismiss(animated: true)
			}
		}}}

		func onImagePicked(image as !"UIImage", filepath as string)
		{
			if callback {
				var file = File.forPath(filepath)
				var mtype as string
				var buf as buffer
				var error as Error
				if image {
					var img = ImageForSwift.forUIImage(image)
					if file.hasExtension("jpeg") || file.hasExtension("jpg") {
						mtype = "image/jpeg"
						buf = img.toJPGData()
					}
					else if file.hasExtension("png") {
						mtype = "image/png"
						buf = img.toPNGData()
					}
				}
				if not buf {
					buf = file.getContentsBuffer()
					if buf {
						mtype = MimeTypeRegistry.determineTypeForFile(file)
					}
					else {
						mtype = null
						buf = null
						error = Error.forCode("failedToReadFile")
					}
				}
				callback(buf, file.getBasename(), mtype, error)
			}
		}
	}
}

ELSE IFDEF "target_html" {
	var inputElement as object
}

var context as GuiApplicationContext

ctor(context as GuiApplicationContext)
{
	this.context = context
	IFDEF("target_html") {
		inputElement = HTMLDOM.createElement("input")
		HTMLDOM.setAttribute(inputElement, "type", "file")
	}
}

func openFileDialog(widget as Widget, type as string, callback as function<void, buffer, string, string, Error>)
{
	var cb final #used = callback
	IFDEF("target_android") {
		var screen = ScreenForWidget.findScreenForWidget(widget)
		if(screen == null) {
			if(cb != null) {
				cb(null, null, null, Error.forCode("noScreenFound"))
			}
			return
		}
		var actx = (context as GuiApplicationContextForAndroid).getAndroidActivityContext()
		var ctx final = actx
		screen.setAndroidActivityResultHandler(func(requestCode as int, resultCode as int, data as !"android.content.Intent") {
			if(requestCode != 0) {
				if(cb != null) {
					cb(null, null, null, Error.forCode("invalidRequestCode"))
				}
				return
			}
			if(resultCode != lang "java" int {{{ android.app.Activity.RESULT_OK }}}) {
				assert cb
				if resultCode == lang "java" int {{{ android.app.Activity.RESULT_CANCELED }}} {
					cb(null, null, null, Error.forCode("canceled"))
				}
				else {
					cb(null, null, null, Error.forCode("unknownResult"))
				}
				return
			}
			lang "java" {{{
				android.net.Uri uri = data.getData();
				if("content".equalsIgnoreCase(uri.getScheme())) {
					android.database.Cursor cursor = null;
					long fileSize = 0;
					String fileName = null;
					String fileType = null;
					byte[] fileBuffer = null;
					try {
						cursor = ctx.getContentResolver().query(uri, null, null, null, null);
						if(cursor.moveToFirst()) {
							fileName = cursor.getString(cursor.getColumnIndex(android.provider.OpenableColumns.DISPLAY_NAME));
							fileType = ctx.getContentResolver().getType(uri);
							fileSize = cursor.getLong(cursor.getColumnIndex(android.provider.OpenableColumns.SIZE));
							fileBuffer = cape.Buffer.allocate(fileSize);
							cursor.close();
						}
						java.io.InputStream inputStream = ctx.getContentResolver().openInputStream(uri);
						int v = inputStream.read(fileBuffer);
						if(cb != null) {
							if(v == fileSize) {
								cb.execute(fileBuffer, fileName, fileType, null);
							}
							else {
								cb.execute(null, null, null, cape.Error.forCode("invalidFileData"));
							}
						}
					}
					catch (java.lang.Exception e) {
						e.printStackTrace();
						if(cb != null) {
							cb.execute(null, null, null, cape.Error.forCode("noFileData"));
						}
					}
				}
				else if("file".equalsIgnoreCase(uri.getScheme())) {
					cape.File fl = cape.File.forPath(uri.getPath());
					if(fl == null) {
						cb.execute(null, null, null, cape.Error.forCode("noFileData"));
					}
					else {
						cb.execute(fl.getContentsBuffer(), fl.getBasename(), capex.util.MimeTypeRegistry.typeForFile(fl), null);
					}
				}
			}}}
		})
		var act = (context as GuiApplicationContextForAndroid).getAndroidActivityContext() as !"android.app.Activity"
		var activity final = act
		var perms = new string[] { "android.permission.WRITE_EXTERNAL_STORAGE", "android.permission.READ_EXTERNAL_STORAGE" }
		var aac = context as AndroidApplicationContext
		var ctxAac final = aac
		var ty final #used = type
		ctxAac.requestPermissions(perms, func(status as bool) {
			if(status == false) {
				return
			}
			lang "java" {{{
				android.content.Intent intent = new android.content.Intent(android.content.Intent.ACTION_GET_CONTENT);
				intent.setType(ty);
				intent.addCategory(android.content.Intent.CATEGORY_OPENABLE);
				try {
					activity.startActivityForResult(android.content.Intent.createChooser(intent, "Select a file"), 0);
				}
				catch(android.content.ActivityNotFoundException ex) {
				}
			}}}
		})
	}
	ELSE IFDEF("target_kotlin") {
		var screen = ScreenForWidget.findScreenForWidget(widget)
		if(screen == null) {
			if(cb != null):
				cb(null, null, null, Error.forCode("noScreenFound"))
			return
		}
		var ctx = (context as GuiApplicationContextForKotlin).getAndroidActivityContext()
		screen.setAndroidActivityResultHandler(func(requestCode as int, resultCode as int, data as !"android.content.Intent") {
			PRINT resultCode
			if(requestCode != 0) {
				if(cb != null):
					cb(null, null, null, Error.forCode("invalidRequestCode"))
				return
			}
			if(resultCode != lang "kotlin" int {{{ android.app.Activity.RESULT_OK }}}) {
				assert cb
				if resultCode == lang "kotlin" int {{{ android.app.Activity.RESULT_CANCELED }}} {
					cb(null, null, null, Error.forCode("canceled"))
				}
				else {
					cb(null, null, null, Error.forCode("unknownResult"))
				}
				return
			}
			lang "kotlin" {{{
				val uri: android.net.Uri = data!!.getData()
				if ("content".equals(uri!!.getScheme(), ignoreCase = true)) {
					var cursor: android.database.Cursor? = null
					var fileSize: Long = 0
					var fileName: String? = null
					var fileType: String? = null
					var fileBuffer: UByteArray? = null
					try {
						cursor = ctx!!.getContentResolver().query(uri, null, null, null, null)
						if (cursor!!.moveToFirst()) {
							fileName = cursor.getString(cursor.getColumnIndex(android.provider.OpenableColumns.DISPLAY_NAME))
							fileType = ctx.getContentResolver().getType(uri)
							fileSize = cursor.getLong(cursor.getColumnIndex(android.provider.OpenableColumns.SIZE))
							fileBuffer = cape.Buffer.allocate(fileSize)
							cursor.close()
						}
						val inputStream: java.io.InputStream = ctx.getContentResolver().openInputStream(uri)
						val buff = fileBuffer!!.toByteArray()
						val v : kotlin.Int = inputStream.read(buff)
						if (cb != null) {
							if (v.toLong() == fileSize) {
								cb.invoke(buff.toUByteArray(), fileName, fileType, null)
							} else {
								cb.invoke(null, null, null, cape.Error.forCode("invalidFileData"))
							}
						}
					}
					catch (e: java.lang.Exception) {
						e.printStackTrace()
						if (cb != null) {
							cb.invoke(null, null, null, cape.Error.forCode("noFileData"))
						}
					}
				}
				else if ("file".equals(uri.getScheme(), ignoreCase = true)) {
					var fl = cape.File.forPath(uri.getPath())
					if(fl == null) {
						cb!!.invoke(null, null, null, cape.Error.forCode("noFileData"))
					}
					else {
						cb!!.invoke(fl.getContentsBuffer(), fl.getBasename(), capex.util.MimeTypeRegistry.typeForFile(fl), null)
					}
				}
			}}}
		})
		var activity = (context as GuiApplicationContextForKotlin).getAndroidActivityContext() as !"android.app.Activity"
		var perms = new string[] { "android.permission.WRITE_EXTERNAL_STORAGE", "android.permission.READ_EXTERNAL_STORAGE" }
		var ctxAac = context as KotlinApplicationContext
		ctxAac.requestPermissions(perms, func(status as bool) {
			if(status == false):
				return
			lang "kotlin" {{{
				val intent = android.content.Intent(android.content.Intent.ACTION_GET_CONTENT)
				intent.setType(type)
				intent.addCategory(android.content.Intent.CATEGORY_OPENABLE)
				try	{
					activity!!.startActivityForResult(android.content.Intent.createChooser(intent, "Select a file"), 0)
				}
				catch (ex: android.content.ActivityNotFoundException) {
				}
			}}}
		})
	}
	ELSE IFDEF("target_html") {
		HTMLDOM.setAttribute(inputElement, "accept", type)
		lang "js" {{{
			var elm = this.inputElement;
			elm.addEventListener("change", function fileHandler() {
				var files = elm.files;
				if(typeof files === "undefined" || files === null) {
					console.log("undefined files");
					return;
				}
				var file = files[0];
				if(typeof file === "undefined" || file === null) {
					console.log("undefined file");
					return;
				}
				var mimeType = file.type;
				var path = elm.value;
				var filename = path.substring(path.lastIndexOf("\\")+1);
				var reader = new FileReader();
				reader.onload = function(res) {
					if(reader.readyState === 2) {
						var result = res.target.result;
						if(cb != null) {
							if(result === null) {
								cb(null, null, Error.forCode("noFileData"));
							}
							else {
								cb(result, filename, mimeType, null);
							}
							elm.removeEventListener("change", fileHandler);
						}
					}
				};
				reader.readAsArrayBuffer(file);
			});
			elm.click();
		}}}
	}
	ELSE IFDEF("target_iosoc") {
		var screen = ScreenForWidget.findScreenForWidget(widget)
		if(screen == null) {
			if(cb != null) {
				cb(null, null, null, Error.forCode("no_screen_found"))
			}
			return
		}
		var delegate = new MyPickerDelegate()
		delegate.setCallback(cb)
		lang "objc" {{{
			UIImagePickerController *picker = [[UIImagePickerController alloc] init];
			picker.delegate = delegate;
			picker.allowsEditing = YES;
			picker.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;
			picker.modalPresentationStyle = UIModalPresentationFullScreen;
			objc_setAssociatedObject(picker, "_pickerDelegate", delegate, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
			[screen presentViewController:picker animated:YES completion:nil];
		}}}
	}
	ELSE IFDEF "target_swift" {
		var screen = ScreenForWidget.findScreenForWidget(widget)
		if !screen {
			if cb:
				cb(null, null, null, Error.forCode("no_screen_found"))
			return
		}
		var delegate = new MyPickerDelegate()
		delegate.setCallback(cb)
		lang "swift" {{{
			let picker = UIImagePickerController()
			picker.delegate = delegate
			picker.allowsEditing = true
			picker.sourceType = UIImagePickerController.SourceType.photoLibrary
			picker.modalPresentationStyle = UIModalPresentationStyle.fullScreen
			objc_setAssociatedObject(picker, "_pickerDelegate", delegate, objc_AssociationPolicy.OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			screen?.present(picker, animated: true)
		}}}
	}
	ELSE {
		ERROR("Not implemented")
		if cb:
			cb(null, null, null, Error.forCode("notSupported"))
	}
}
