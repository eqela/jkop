
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.socket.io
import jk.server
import jk.log

class is NetworkServer:

pvar createConnectionHandlerObject as function<WSServerConnectionHandler>
pvar maintenanceTimerDelay as long = 7 * 60
var maintenanceTimer as IOManagerTimer

ctor:
	setPort(8080)

func createConnectionObject override as NetworkConnection
{
	assert createConnectionHandlerObject:
		logError("No 'createConnectionHandlerObject' set. Cannot create connection object handlers!")
	var handler = assert createConnectionHandlerObject():
		logError("Failed to create connection object. No connection handler object returned!")
	var connection = new WSServerConnection()
	connection.setConnectionHandler(handler)
	handler.setConnection(connection)
	handler.setLogContext(logContext)
	return connection
}

func logError(message as string):
	Log.error(logContext, message)

func logWarning(message as string):
	Log.warning(logContext, message)

func logInfo(message as string):
	Log.info(logContext, message)

func logDebug(message as string):
	Log.debug(logContext, message)

func onMaintenanceTimer private as bool
{
	onMaintenance()
	return true
}

func onMaintenance virtual
{
	forEachConnection(func(connection as NetworkConnection) {
		var wsConnection = assert connection as WSServerConnection
		wsConnection.onMaintenance()
	})
}

func initialize override as bool
{
	assert base.initialize()
	if maintenanceTimerDelay < 1 {
		logDebug("Maintenance timer disabled")
	}
	else {
		logDebug("Starting a maintenance timer with a " .. String.forInteger(maintenanceTimerDelay) .. " second delay.")
		maintenanceTimer = ioManager.startTimer(maintenanceTimerDelay * 1000000, onMaintenanceTimer)
		if maintenanceTimer == null:
			logError("Failed to start maintenance timer")
	}
	return true
}

func cleanup override:
	base.cleanup()
