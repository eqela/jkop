
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func forUTCNow static as string:
	return forDateTime(DateTime.forUTCNow())

func forNow static as string:
	return forDateTime(DateTime.forNow())

func forDateTime(dd as DateTime) static as string
{
	if not dd:
		return "NODATE"
	var sb = new StringBuilder()
	sb.append(getShortDayName(dd.getWeekDay()))
	sb.append(", ")
	sb.append(String.forInteger(dd.getDayOfMonth()))
	sb.append(' ')
	sb.append(getShortMonthName(dd.getMonth()))
	sb.append(' ')
	sb.append(String.forInteger(dd.getYear()))
	sb.append(' ')
	sb.append(String.forIntegerWithPadding(dd.getHours(), 2, "0"))
	sb.append(':')
	sb.append(String.forIntegerWithPadding(dd.getMinutes(), 2, "0"))
	sb.append(':')
	sb.append(String.forIntegerWithPadding(dd.getSeconds(), 2, "0"))
	var offset = dd.getTimezoneOffset()
	if offset == 0 {
		sb.append(" +0000")
	}
	else {
		var hr = (offset / 3600) as! int
		var mm = ((offset - (hr * 3600)) / 60) as! int
		if hr <= 0 {
			sb.append(" +")
			hr = -hr
		}
		else {
			sb.append(" -")
		}
		sb.append(String.forIntegerWithPadding(hr, 2, "0"))
		sb.append(String.forIntegerWithPadding(mm, 2, "0"))
	}
	return sb.toString()
}

func getTimeStringForDateTime(dd as DateTime, includeTimeZone as bool = false, excludeSeconds as bool = false) static as string
{
	if not dd:
		return "NOTIME"
	var sb = new StringBuilder()
	sb.append(String.forIntegerWithPadding(dd.getHours(), 2, "0"))
	sb.append(':')
	sb.append(String.forIntegerWithPadding(dd.getMinutes(), 2, "0"))
	if not excludeSeconds {
		sb.append(':')
		sb.append(String.forIntegerWithPadding(dd.getSeconds(), 2, "0"))
	}
	if includeTimeZone:
		sb.append(" GMT")
	return sb.toString()
}

func getDateStringForDateTime(dd as DateTime) static as string
{
	if not dd:
		return "NODATE"
	var sb = new StringBuilder()
	sb.append(getLongMonthName(dd.getMonth()))
	sb.append(' ')
	sb.append(String.forInteger(dd.getDayOfMonth()))
	sb.append(", ")
	sb.append(String.forInteger(dd.getYear()))
	return sb.toString()
}

func getShortDayName(n as int) static as string
{
	switch n {
		case 1: {
			return "Sun"
		}
		case 2: {
			return "Mon"
		}
		case 3: {
			return "Tue"
		}
		case 4: {
			return "Wed"
		}
		case 5: {
			return "Thu"
		}
		case 6: {
			return "Fri"
		}
		case 7: {
			return "Sat"
		}
	}
	return null
}

func getLongDayName(n as int) static as string
{
	switch n {
		case 1: {
			return "Sunday"
		}
		case 2: {
			return "Monday"
		}
		case 3: {
			return "Tuesday"
		}
		case 4: {
			return "Wednesday"
		}
		case 5: {
			return "Thursday"
		}
		case 6: {
			return "Friday"
		}
		case 7: {
			return "Saturday"
		}
	}
	return null
}

func getShortMonthName(n as int) static as string
{
	switch n {
		case 1: {
			return "Jan"
		}
		case 2: {
			return "Feb"
		}
		case 3: {
			return "Mar"
		}
		case 4: {
			return "Apr"
		}
		case 5: {
			return "May"
		}
		case 6: {
			return "Jun"
		}
		case 7: {
			return "Jul"
		}
		case 8: {
			return "Aug"
		}
		case 9: {
			return "Sep"
		}
		case 10: {
			return "Oct"
		}
		case 11: {
			return "Nov"
		}
		case 12: {
			return "Dec"
		}
	}
	return null
}

func getLongMonthName(n as int) static as string
{
	switch n {
		case 1: {
			return "January"
		}
		case 2: {
			return "February"
		}
		case 3: {
			return "March"
		}
		case 4: {
			return "April"
		}
		case 5: {
			return "May"
		}
		case 6: {
			return "June"
		}
		case 7: {
			return "July"
		}
		case 8: {
			return "August"
		}
		case 9: {
			return "September"
		}
		case 10: {
			return "October"
		}
		case 11: {
			return "November"
		}
		case 12: {
			return "December"
		}
	}
	return null
}
