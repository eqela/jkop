
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class #widget:

const ALIGN_LEFT = 0
const ALIGN_CENTER = 1
const ALIGN_RIGHT = 2
const ALIGN_JUSTIFY = 3

const WORD_WRAP = 0
const NO_WRAP = 1

func forText(context as GuiApplicationContext, text as string) static as this
{
	var v = new this(context)
	v.setWidgetText(text)
	return v
}

IFDEF "target_android"
{
	basetype !"android.widget.TextView" type extends
	basetype Widget type isAlso
}

ELSE IFDEF "target_iosoc"
{
	basetype !"UILabel" type extends
	basetype Widget type isAlso
}

ELSE IFDEF "target_macosoc"
{
	basetype !"NSTextField" type extends
	basetype Widget type isAlso
}

ELSE IFDEF "target_reactjs"
{
	depend "js:React:react"
	basetype !"React.Component" type extends
	basetype Widget type isAlso

	lang "js" {{{
		render() {
			return(<div style="font-size: 20px;">{this.widgetText}</div>);
		}
	}}}
}

ELSE IFDEF "target_html"
{
	basetype Widget

	func createElement override as object:
		return HTMLDOM.createElement("div")

	func prepareElement(v as object) override
	{
		base.prepareElement(v)
		HTMLDOM.setStyle(v, "pointer-events", "inherit")
		HTMLDOM.setStyle(v, "font-size", "20px")
	}
}

ELSE IFDEF "target_uwp"
{
	basetype !"Windows.UI.Xaml.Controls.UserControl" type extends
	basetype Widget type isAlso
	var textBlock as !"Windows.UI.Xaml.Controls.TextBlock"
}

ELSE
{
	basetype Widget
}

var widgetContext as GuiApplicationContext
var widgetText as string
var widgetTextColor as Color
var widgetFontSize as double
var widgetFontBold as bool
var widgetFontFamily as string
var widgetFontResource as string
var widgetTextAlign as int
var widgetFontUnderline as bool
var widgetFontItalic as bool
var widgetPaddingLeft = 0
var widgetPaddingTop = 0
var widgetPaddingRight = 0
var widgetPaddingBottom = 0
prop widgetMaximumNumberOfLines as int

ctor(context as GuiApplicationContext)
{
	IFDEF "target_android" {
		base((context as! cave.GuiApplicationContextForAndroid).getActivityContext())
	}
	widgetContext = context
	setWidgetStyle(VALUE "__THIS__")
	IFDEF "target_iosoc" {
		lang "objc" {{{
			[self setNumberOfLines:0];
			[self setTextAlignment:UITextAlignmentLeft];
		}}}
	}
	ELSE IFDEF "target_android" {
		lang "java" {{{
			setGravity(android.view.Gravity.LEFT);
		}}}
	}
	IFDEF "target_uwp" {
		textBlock = new !"Windows.UI.Xaml.Controls.TextBlock"()
		lang "cs" {{{
			this.Content = textBlock;
		}}}
	}
}

func setWidgetText(text as string) as this
{
	widgetText = text
	if not widgetText:
		widgetText = ""
	IFDEF "target_android" {
		lang "java" {{{
			setText(widgetText);
		}}}
	}
	ELSE IFDEF "target_iosoc" {
		lang "objc" {{{
			[self setText:widgetText];
		}}}
	}
	ELSE IFDEF "target_html" {
		HTMLDOM.setInnerHTML(element, widgetText)
	}
	ELSE IFDEF "target_uwp" {
		lang "cs" {{{
			textBlock.Text = widgetText;
		}}}
	}
	ELSE IFDEF "target_reactjs" {
		lang "js" {{{
			this.forceUpdate();
		}}}
	}
	ELSE {
		ERROR "Not implemented"
	}
	Widget.onLayoutChanged(this)
	return this
}

func getWidgetText as string:
	return widgetText

func setWidgetTextAlign(align as int) as this
{
	widgetTextAlign = align
	IFDEF "target_html" {
		if align == ALIGN_LEFT {
			HTMLDOM.setStyle(element, "text-align", "left")
		}
		else if align == ALIGN_CENTER {
			HTMLDOM.setStyle(element, "text-align", "center")
		}
		else if align == ALIGN_RIGHT {
			HTMLDOM.setStyle(element, "text-align", "right")
		}
		else if align == ALIGN_JUSTIFY {
			HTMLDOM.setStyle(element, "text-align", "justify")
		}
		else {
			HTMLDOM.setStyle(element, "text-align", "left")
		}
	}
	ELSE IFDEF "target_android" {
		if align == ALIGN_LEFT {
			lang "java" {{{
				setGravity(android.view.Gravity.LEFT);
			}}}
		}
		else if align == ALIGN_CENTER {
			lang "java" {{{
				setGravity(android.view.Gravity.CENTER);
			}}}
		}
		else if align == ALIGN_RIGHT {
			lang "java" {{{
				setGravity(android.view.Gravity.RIGHT);
			}}}
		}
		else if align == ALIGN_JUSTIFY {
			lang "java" {{{
				setGravity(android.view.Gravity.CENTER);
			}}}
		}
		else {
			lang "java" {{{
				setGravity(android.view.Gravity.LEFT);
			}}}
		}
	}
	ELSE IFDEF "target_iosoc" {
		if align == ALIGN_LEFT {
			lang "objc" {{{
				[self setTextAlignment:UITextAlignmentLeft];
			}}}
		}
		else if align == ALIGN_CENTER {
			lang "objc" {{{
				[self setTextAlignment:UITextAlignmentCenter];
			}}}
		}
		else if align == ALIGN_RIGHT {
			lang "objc" {{{
				[self setTextAlignment:UITextAlignmentRight];
			}}}
		}
		else if align == ALIGN_JUSTIFY {
			lang "objc" {{{
				[self setTextAlignment:NSTextAlignmentJustified];
			}}}
		}
		else {
			lang "objc" {{{
				[self setTextAlignment:UITextAlignmentLeft];
			}}}
		}
	}
	ELSE IFDEF "target_uwp" {
		if align == ALIGN_LEFT {
			lang "cs" {{{
				textBlock.TextAlignment = Windows.UI.Xaml.TextAlignment.Left;
			}}}
		}
		else if align == ALIGN_CENTER {
			lang "cs" {{{
				textBlock.TextAlignment = Windows.UI.Xaml.TextAlignment.Center;
			}}}
		}
		else if align == ALIGN_RIGHT {
			lang "cs" {{{
				textBlock.TextAlignment = Windows.UI.Xaml.TextAlignment.Right;
			}}}
		}
		else if align == ALIGN_JUSTIFY {
			lang "cs" {{{
				textBlock.TextAlignment = Windows.UI.Xaml.TextAlignment.Justify;
			}}}
		}
		else {
			lang "cs" {{{
				textBlock.TextAlignment = Windows.UI.Xaml.TextAlignment.Left;
			}}}
		}
	}
	ELSE {
		ERROR("Not implemented")
	}
	return(this)
}

func getWidgetTextAlign as int
{
	return(widgetTextAlign)
}

func setWidgetWordWrapping(wrap as int) as this
{
	if wrap == NO_WRAP {
		IFDEF "target_android" {
			lang "java" {{{
				setSingleLine(true);
				setEllipsize(android.text.TextUtils.TruncateAt.END);
			}}}
		}
		ELSE IFDEF "target_iosoc" {
			lang "objc" {{{
				[self setNumberOfLines:1];
				[self setLineBreakMode: NSLineBreakByTruncatingTail];
			}}}
		}
		ELSE {
			ERROR "Not implemented"
		}
	}
	else if wrap == WORD_WRAP {
		IFDEF "target_android" {
			lang "java" {{{
				setSingleLine(false);
				if(widgetMaximumNumberOfLines > 0) {
					setMaxLines(widgetMaximumNumberOfLines);
					setEllipsize(android.text.TextUtils.TruncateAt.END);
				}
				else {
					setMaxLines(java.lang.Integer.MAX_VALUE);
					setEllipsize(null);
				}
			}}}
		}
		ELSE IFDEF "target_iosoc" {
			lang "objc" {{{
				NSLineBreakMode* lineBreak = NSLineBreakByWordWrapping;
				if(self->widgetMaximumNumberOfLines > 0) {
					[self setNumberOfLines:self->widgetMaximumNumberOfLines];
					lineBreak = NSLineBreakByTruncatingTail;
				}
				else {
					[self setNumberOfLines:0];
				}
				[self setLineBreakMode: lineBreak];
			}}}
		}
		ELSE {
			ERROR "Not implemented"
		}
	}
	return this
}

func setWidgetTextColor(color as Color) as this
{
	widgetTextColor = color
	updateWidgetFont(false)
	return(this)
}

func getWidgetTextColor as Color
{
	return(widgetTextColor)
}

func setWidgetFontSize(fontSize as double #notLiteral) as this
{
	widgetFontSize = fontSize
	updateWidgetFont(true)
	return(this)
}

func getFontSize as double
{
	return(widgetFontSize)
}

func setWidgetFontBold(bold as bool) as this
{
	widgetFontBold = bold
	updateWidgetFont(true)
	return(this)
}

func setWidgetFontUnderline(underline as bool) as this
{
	widgetFontUnderline = underline
	updateWidgetFont(true)
	return this
}

func setWidgetFontItalic(italic as bool) as this
{
	widgetFontItalic = italic
	updateWidgetFont(true)
	return this
}

func setWidgetFontFamily(font as string) as this
{
	widgetFontFamily = font
	updateWidgetFont(true)
	return(this)
}

func setWidgetFontResource(res as string) as this
{
	widgetFontResource = res
	updateWidgetFont(true)
	return(this)
}

func setWidgetStyle(style as string) as this
{
	widgetFontFamily = widgetContext.getStyleString(style, "fontFamily")
	if String.isEmpty(widgetFontFamily):
		widgetFontFamily = "Arial"
	widgetFontResource = widgetContext.getStyleString(style, "fontResource")
	widgetTextColor = widgetContext.getStyleColor(style, "textColor")
	if not widgetTextColor:
		widgetTextColor = Color.forRGB(0, 0, 0)
	widgetFontSize = widgetContext.getStylePixels(style, "fontSize")
	if widgetFontSize < 1.0:
		widgetFontSize = widgetContext.getHeightValue("3mm")
	widgetFontBold = Boolean.asBoolean(widgetContext.getStyleString(style, "fontBold"))
	setWidgetPadding(widgetContext.getStylePixels(style, "padding"))
	updateWidgetFont(true)
	return this
}

func updateWidgetFont(changesLayout as bool) private
{
	var fs = widgetFontSize
	if fs < 1.0:
		fs = 1.0
	IFDEF "target_android" {
		if widgetTextColor {
			lang "java" {{{
				setTextColor(widgetTextColor.toARGBInt32());
			}}}
		}
		else {
			lang "java" {{{
				setTextColor(0);
			}}}
		}
		lang "java" {{{
			setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, (float)fs);
			int style = android.graphics.Typeface.NORMAL;
			if(widgetFontBold) {
				style = android.graphics.Typeface.BOLD;
			}
			if(widgetFontResource != null) {
				android.content.Context ctx = ((cave.GuiApplicationContextForAndroid)widgetContext).getActivityContext();
				try {
					setTypeface(android.graphics.Typeface.createFromAsset(ctx.getAssets(), widgetFontResource), style);
				}
				catch(java.lang.Exception e) {
					System.out.println(e.toString());
				}
			}
			else {
				setTypeface(android.graphics.Typeface.create(widgetFontFamily, style));
			}
		}}}
	}
	ELSE IFDEF "target_html" {
		HTMLDOM.setFontFamily(element, widgetFontFamily)
		HTMLDOM.setStyle(element, "font-size", String.forDouble(fs) .. "px")
		if widgetFontBold:
			HTMLDOM.setStyle(element, "font-weight", "bold")
		if widgetFontItalic:
			HTMLDOM.setStyle(element, "font-style", "italic")
		if widgetFontUnderline:
			HTMLDOM.setStyle(element, "text-decoration", "underline")
		HTMLDOM.setStyle(element, "color", HTMLDOM.colorToRGBA(widgetTextColor))
	}
	ELSE IFDEF("target_iosoc") {
		var ff = widgetFontFamily
		if String.isEmpty(ff):
			ff = "Arial"
		lang "objc" {{{
			UIFont* font = [UIFont fontWithName:ff size:fs];
			if(font == nil) {
				font = [UIFont fontWithName:@"Arial" size:fs];
			}
			if(widgetFontBold == YES) {
				UIFontDescriptor * fontD = [font.fontDescriptor fontDescriptorWithSymbolicTraits:UIFontDescriptorTraitBold];
				font = [UIFont fontWithDescriptor:fontD size:fs];
			}
			[self setFont:font];
		}}}
		if widgetTextColor {
			lang "objc" {{{
				[self setTextColor:[widgetTextColor toUIColor]];
			}}}
		}
		else {
			lang "objc" {{{
				[self setTextColor:nil];
			}}}
		}
	}
	ELSE IFDEF "target_uwp" {
		lang "cs" {{{
			this.FontSize = (double)fs;
		}}}
		if widgetFontFamily {
			lang "cs" {{{
				this.FontFamily = new Windows.UI.Xaml.Media.FontFamily(widgetFontFamily);
			}}}
		}
		else {
			lang "cs" {{{
				this.FontFamily = Windows.UI.Xaml.Media.FontFamily.XamlAutoFontFamily;
			}}}
		}
		if widgetFontBold {
			lang "cs" {{{
				this.FontWeight = Windows.UI.Text.FontWeights.Bold;
			}}}
		}
		else {
			lang "cs" {{{
				this.FontWeight = Windows.UI.Text.FontWeights.Normal;
			}}}
		}
		if widgetTextColor {
			lang "cs" {{{
				this.Foreground = widgetTextColor.toBrush();
			}}}
		}
		else {
			lang "cs" {{{
				this.Foreground = null;
			}}}
		}
	}
	ELSE {
		ERROR "Not implemented"
	}
	if changesLayout:
		Widget.onLayoutChanged(this)
}

func setWidgetPadding(padding as int #notLiteral) as this:
	return setWidgetPadding(padding, padding, padding, padding)

func setWidgetPaddingLeft(value as int #notLiteral) as this:
	return setWidgetPadding(value, widgetPaddingTop, widgetPaddingRight, widgetPaddingBottom)

func setWidgetPaddingTop(value as int #notLiteral) as this:
	return setWidgetPadding(widgetPaddingLeft, value, widgetPaddingRight, widgetPaddingBottom)

func setWidgetPaddingRight(value as int #notLiteral) as this:
	return setWidgetPadding(widgetPaddingLeft, widgetPaddingTop, value, widgetPaddingBottom)

func setWidgetPaddingBottom(value as int #notLiteral) as this:
	return setWidgetPadding(widgetPaddingLeft, widgetPaddingTop, widgetPaddingRight, value)

func setWidgetPadding(l as int #notLiteral, t as int #notLiteral, r as int #notLiteral, b as int #notLiteral) as this
{
	if l < 0 || t < 0 || r < 0 || b < 0:
		return this
	if widgetPaddingLeft == l && widgetPaddingTop == t && widgetPaddingRight == r && widgetPaddingBottom == b:
		return this
	widgetPaddingLeft = l
	widgetPaddingTop = t
	widgetPaddingRight = r
	widgetPaddingBottom = b
	updateWidgetPadding()
	return this
}

func updateWidgetPadding private
{
	IFDEF "target_html" {
		HTMLDOM.setStyle(element, "padding", String.forInteger(widgetPaddingTop) .. "px" ..
			" " .. String.forInteger(widgetPaddingRight) .. "px" .. " " ..
			String.forInteger(widgetPaddingBottom) .. "px" .. " " ..
			String.forInteger(widgetPaddingLeft) .. "px")
		HTMLDOM.setStyle(element, "box-sizing", "border-box")
	}
	ELSE IFDEF "target_android" {
		lang "java" {{{
			setPadding(widgetPaddingLeft, widgetPaddingTop, widgetPaddingRight, widgetPaddingBottom);
		}}}
	}
	ELSE {
		ERROR "Not implemented"
	}
}
