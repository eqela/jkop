
/*
 * This file is part of Jkop
 * Copyright (c) 2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is LoggingContext is RefLogContext:

prop messages as vector<Message>
var errors = 0
var warnings = 0
var infos = 0
var debugs = 0

func onMessage(message as Message)
{
	assert message
	if messages == null:
		messages = new vector<Message>
	messages += message
	if message is ErrorMessage {
		errors ++
	}
	else if message is WarningMessage {
		warnings ++
	}
	else if message is InfoMessage {
		infos ++
	}
	else if message is DebugMessage {
		debugs ++
	}
}

func logError(message as string):
	onMessage(ErrorMessage.forText(message, null, true, null))

func logWarning(message as string):
	onMessage(WarningMessage.forText(message, null))

func logInfo(message as string):
	onMessage(InfoMessage.forText(message, null))

func logDebug(message as string):
	onMessage(DebugMessage.forText(message, null))

func logStatus(message as string):
	onMessage(StatusMessage.forText(message))

func isInDebugMode as bool:
	return true

func getErrorCount as int:
	return errors

func getWarningCount as int:
	return warnings

func getInfoCount as int:
	return infos

func getDebugCount as int:
	return debugs

func resetCounters
{
	errors = 0
	warnings = 0
	infos = 0
	debugs = 0
}
