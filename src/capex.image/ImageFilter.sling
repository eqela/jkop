
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

const RESIZE_TYPE_BILINEAR = 0
const RESIZE_TYPE_BICUBIC = 1

func resizeImage(bmpbuf as BitmapBuffer, nw as int = -1, nh as int = -1, type as int = 0) static as BitmapBuffer
{
	if(bmpbuf == null) {
		return null
	}
	if(type == RESIZE_TYPE_BICUBIC) {
		return ImageResizer.resizeBicubic(bmpbuf, nw, nh)
	}
	return ImageResizer.resizeBilinear(bmpbuf, nw, nh)
}

func filterGreyscale(bmpbuf as BitmapBuffer) static as BitmapBuffer
{
	if(bmpbuf == null) {
		return null
	}
	return GreyscaleImage.createGreyscale(bmpbuf)
}

func filterRedSepia(bmpbuf as BitmapBuffer) static as BitmapBuffer
{
	if(bmpbuf == null) {
		return null
	}
	return GreyscaleImage.createRedSepia(bmpbuf)
}

func filterBlur(bmpbuf as BitmapBuffer) static as BitmapBuffer
{
	if(bmpbuf == null) {
		return null
	}
	var array = new double[] {
		0.0, 0.0, 1.0, 0.0, 0.0,
		0.0, 1.0, 1.0, 1.0, 0.0,
		1.0, 1.0, 1.0, 1.0, 1.0,
		0.0, 1.0, 1.0, 1.0, 0.0,
		0.0, 0.0, 1.0, 0.0, 0.0
	}
	return ImageFilterUtil.createForArrayFilter(bmpbuf, array, 5, 5, 1.0/13.0)
}

func filterSharpen(bmpbuf as BitmapBuffer) static as BitmapBuffer
{
	if(bmpbuf == null) {
		return null
	}
	var array = new double[] {
		-1.0, -1.0, -1.0,
		-1.0, 9.0, -1.0,
		-1.0, -1.0, -1.0
	}
	return ImageFilterUtil.createForArrayFilter(bmpbuf, array, 3, 3)
}

func filterEmboss(bmpbuf as BitmapBuffer) static as BitmapBuffer
{
	if(bmpbuf == null) {
		return null
	}
	var array = new double[] {
		-2.0, -1.0, 0.0,
		-1.0, 1.0, 1.0,
		0.0, 1.0, 2.0
	}
	return ImageFilterUtil.createForArrayFilter(bmpbuf, array, 3, 3, 2.0, 0.0)
}

func filterMotionBlur(bmpbuf as BitmapBuffer) static as BitmapBuffer
{
	if(bmpbuf == null) {
		return null
	}
	var array = new double[] {
		1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
		0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0
	}
	return ImageFilterUtil.createForArrayFilter(bmpbuf, array, 9, 9, 1.0/9.0)
}
