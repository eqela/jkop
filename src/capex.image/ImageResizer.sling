
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import capex.util

class:

func li(src1 as double, src2 as double, a as double) static as int
{
	var v = ((a*src2) + (1-a)*src1) as int
	return v
}

func bilinearInterpolation(q11 as int, q21 as int, q12 as int, q22 as int, tx as double, ty as double) static as double
{
	return li(
		li(q11, q21, tx),
		li(q12, q22, tx),
		ty
	)
}

func resizeBilinear(bmpbuf as BitmapBuffer, anw as int, anh as int) static as BitmapBuffer
{
	if(anw == 0 || anh == 0) {
		return null
	}
	if(anw < 0 && anh < 0) {
		return bmpbuf
	}
	var src = bmpbuf.getBuffer()
	if(src == null) {
		return null
	}
	var sz as int = Buffer.getSize(src)
	var ow = bmpbuf.getWidth()
	var oh = bmpbuf.getHeight()
	if(ow == anw && oh == anh) {
		return bmpbuf
	}
	if(sz != ow*oh*4) {
		return null
	}
	var nw = anw
	var nh = anh
	var scaler = 1.0
	if(nw < 0) {
		scaler = (nh as double) / (oh as double)
	}
	else if(nh < 0) {
		scaler = (nw as double) / (ow as double)
	}
	if(scaler != 1.0) {
		nw = ((ow as double) * scaler) as int
		nh = ((oh as double) * scaler) as int
	}
	var dest = MALLOC(nw*nh*4)
	if(dest == null) {
		return null
	}
	var desp = dest
	var srcp = src
	var dx as int
	var dy as int
	var stepx as double = (ow-1.0) / (nw-1.0)
	var stepy as double = (oh-1.0) / (nh-1.0)
	for(dy = 0; dy < nh; dy++) {
		for(dx = 0; dx < nw; dx++) {
			var ptx as double = dx * stepx
			var pty as double = dy * stepy
			var ix = ptx as int
			var iy = pty as int
			var q11i = (iy*ow+ix)*4
			var q21i = (iy*ow+(ix+1))*4
			var q12i = ((iy+1)*ow+ix)*4
			var q22i = ((iy+1)*ow+(ix+1))*4
			var rq11 = ImageFilterUtil.getSafeByte(srcp, sz, q11i+0)
			var gq11 = ImageFilterUtil.getSafeByte(srcp, sz, q11i+1)
			var bq11 = ImageFilterUtil.getSafeByte(srcp, sz, q11i+2)
			var aq11 = ImageFilterUtil.getSafeByte(srcp, sz, q11i+3)
			var rq21 = ImageFilterUtil.getSafeByte(srcp, sz, q21i+0)
			var gq21 = ImageFilterUtil.getSafeByte(srcp, sz, q21i+1)
			var bq21 = ImageFilterUtil.getSafeByte(srcp, sz, q21i+2)
			var aq21 = ImageFilterUtil.getSafeByte(srcp, sz, q21i+3)
			var rq12 = ImageFilterUtil.getSafeByte(srcp, sz, q12i+0)
			var gq12 = ImageFilterUtil.getSafeByte(srcp, sz, q12i+1)
			var bq12 = ImageFilterUtil.getSafeByte(srcp, sz, q12i+2)
			var aq12 = ImageFilterUtil.getSafeByte(srcp, sz, q12i+3)
			var rq22 = ImageFilterUtil.getSafeByte(srcp, sz, q22i+0)
			var gq22 = ImageFilterUtil.getSafeByte(srcp, sz, q22i+1)
			var bq22 = ImageFilterUtil.getSafeByte(srcp, sz, q22i+2)
			var aq22 = ImageFilterUtil.getSafeByte(srcp, sz, q22i+3)
			var resr = bilinearInterpolation(rq11, rq21, rq12, rq22, ptx-ix, pty-iy) as int
			var resg = bilinearInterpolation(gq11, gq21, gq12, gq22, ptx-ix, pty-iy) as int
			var resb = bilinearInterpolation(bq11, bq21, bq12, bq22, ptx-ix, pty-iy) as int
			var resa = bilinearInterpolation(aq11, aq21, aq12, aq22, ptx-ix, pty-iy) as int
			Buffer.setByte(desp,(dy*nw+dx)*4+0, resr)
			Buffer.setByte(desp,(dy*nw+dx)*4+1, resg)
			Buffer.setByte(desp,(dy*nw+dx)*4+2, resb)
			Buffer.setByte(desp,(dy*nw+dx)*4+3, resa)
		}
	}
	return BitmapBuffer.create(dest, nw, nh)
}

func untransformCoords(m as Matrix33, ix as int, iy as int, tu as double[], tv as double[], tw as double[]) static as void
{
	var x as double = ix + 0.5
	var y as double = iy + 0.5
	tu[0] = m.v[0] * (x+0) + m.v[3] * (y+0) + m.v[6]
	tv[0] = m.v[1] * (x+0) + m.v[4] * (y+0) + m.v[7]
	tw[0] = m.v[2] * (x+0) + m.v[5] * (y+0) + m.v[8]
	tu[1] = m.v[0] * (x-1) + m.v[3] * (y+0) + m.v[6]
	tv[1] = m.v[1] * (x-1) + m.v[4] * (y+0) + m.v[7]
	tw[1] = m.v[2] * (x-1) + m.v[5] * (y+0) + m.v[8]
	tu[2] = m.v[0] * (x+0) + m.v[3] * (y-1) + m.v[6]
	tv[2] = m.v[1] * (x+0) + m.v[4] * (y-1) + m.v[7]
	tw[2] = m.v[2] * (x+0) + m.v[5] * (y-1) + m.v[8]
	tu[3] = m.v[0] * (x+1) + m.v[3] * (y+0) + m.v[6]
	tv[3] = m.v[1] * (x+1) + m.v[4] * (y+0) + m.v[7]
	tw[3] = m.v[2] * (x+1) + m.v[5] * (y+0) + m.v[8]
	tu[4] = m.v[0] * (x+0) + m.v[3] * (y+1) + m.v[6]
	tv[4] = m.v[1] * (x+0) + m.v[4] * (y+1) + m.v[7]
	tw[4] = m.v[2] * (x+0) + m.v[5] * (y+1) + m.v[8]
}

func normalizeCoords(count as int, tu as double[], tv as double[], tw as double[], su as double[], sv as double[]) static
{
	var i as int
	for(i = 0; i < count; i++) {
		if(tw[i] != 0.0) {
			su[i] = tu[i] / tw[i] - 0.5
			sv[i] = tv[i] / tw[i] - 0.5
		}
		else {
			su[i] = tu[i]
			sv[i] = tv[i]
		}
	}
}

const FIXED_SHIFT = 10
var unit static as int

func initFixedUnit static
{
	unit = 1 << FIXED_SHIFT
}

func double2Fixed(val as double) static as int
{
	initFixedUnit()
	var v = (val * unit) as int
	return v
}

func fixed2Double(val as double) static as double
{
	initFixedUnit()
	return val / unit
}

func superSampleDtest(x0 as double, y0 as double, x1 as double, y1 as double, x2 as double, y2 as double, x3 as double, y3 as double) static as bool
{
	return Math.abs(x0-x1) > Math.M_SQRT2 ||
		Math.abs(x1-x2) > Math.M_SQRT2 ||
		Math.abs(x2-x3) > Math.M_SQRT2 ||
		Math.abs(x3-x0) > Math.M_SQRT2 ||
		Math.abs(y0-y1) > Math.M_SQRT2 ||
		Math.abs(y1-y2) > Math.M_SQRT2 ||
		Math.abs(y2-y3) > Math.M_SQRT2 ||
		Math.abs(y3-y0) > Math.M_SQRT2
}

func supersampleTest(x0 as double, y0 as double, x1 as double, y1 as double, x2 as double, y2 as double, x3 as double, y3 as double) static as bool
{
	initFixedUnit()
	return Math.abs(x0-x1) > unit ||
		Math.abs(x1-x2) > unit ||
		Math.abs(x2-x3) > unit ||
		Math.abs(x3-x0) > unit ||
		Math.abs(y0-y1) > unit ||
		Math.abs(y1-y2) > unit ||
		Math.abs(y2-y3) > unit ||
		Math.abs(y3-y0) > unit
}

func lerp(v1 as int, v2 as int, r as int) static as int
{
	initFixedUnit()
	var v = (v1 * (unit - r) + v2 * r) >> FIXED_SHIFT
	return v
}

func sampleBi(pixels as RGBAPixelIntegerBuffer, x as int, y as int, color as int[]) static
{
	initFixedUnit()
	var xscale = (x & (unit-1))
	var yscale = (y & (unit-1))
	var x0 = x >> FIXED_SHIFT
	var y0 = y >> FIXED_SHIFT
	var x1 = x0+1
	var y1 = y0+1
	var i as int
	var c0 = pixels.getRgbaPixel(x0, y0, true)
	var c1 = pixels.getRgbaPixel(x1, y0, true)
	var c2 = pixels.getRgbaPixel(x0, y1, true)
	var c3 = pixels.getRgbaPixel(x1, y1, true)
	color[3] = lerp(
		lerp(c0[3], c1[3], yscale),
		lerp(c2[3], c3[3], yscale),
		xscale)
	if(color[3] !=0) {
		for(i = 0; i < 3; i++) {
			color[i] = lerp(
				lerp(
					c0[i] * c0[3] / 255,
					c1[i] * c1[3] / 255, yscale),
				lerp(
					c2[i] * c2[3] / 255,
					c3[i] * c3[3] / 255, yscale),
				xscale
			)
		}
	}
	else {
		for(i = 0; i < 3; i++) {
			color[i] = 0
		}
	}
}

func getSample(pixels as RGBAPixelIntegerBuffer, xc as int, yc as int, x0 as int, y0 as int, x1 as int, y1 as int,x2 as int, y2 as int, x3 as int, y3 as int, cciv as int, level as int, color as int[]) static
{
	if(level == 0 || supersampleTest(x0, y0, x1, y1, x2, y2, x3, y3) == false) {
		var i as int
		var c = new int[4]
		sampleBi(pixels, xc, yc, c)
		for(i = 0; i < 4; i++) {
			color[i] = color[i] + c[i]
		}
	}
	else {
		var tx as int
		var lx as int
		var rx as int
		var bx as int
		var tlx as int
		var trx as int
		var blx as int
		var brx as int
		var ty as int
		var ly as int
		var ry as int
		var by as int
		var tly as int
		var trz as int
		var bly as int
		var bry as int
		tx  = (x0 + x1) / 2
		tlx = (x0 + xc) / 2
		trx = (x1 + xc) / 2
		lx  = (x0 + x3) / 2
		rx  = (x1 + x2) / 2
		blx = (x2 + xc) / 2
		brx = (x3 + xc) / 2
		bx  = (x3 + x2) / 2
		ty  = (y0 + y1) / 2
		tly = (y0 + yc) / 2
		trz = (y1 + yc) / 2
		ly  = (y0 + y3) / 2
		ry  = (y1 + y2) / 2
		bly = (y3 + yc) / 2
		bry = (y2 + yc) / 2
		by  = (y3 + y2) / 2
		getSample(pixels, tlx, tly,
			x0, y0, tx, ty, xc, yc, lx, ly,
			cciv, level-1, color)
		getSample(pixels, trx, trz,
			tx, ty, x1, y1, rx, ry, xc, yc,
			cciv, level-1, color)
		getSample(pixels, brx, bry,
			xc, yc, rx, ry, x2, y2, bx, by,
			cciv, level-1, color)
		getSample(pixels, blx, bly,
			lx, ly, xc, yc, bx, by, x3, y3,
			cciv, level-1, color)
	}
}

func sampleAdapt(src as RGBAPixelIntegerBuffer, xc as double, yc as double, x0 as double, y0 as double, x1 as double,
	y1 as double, x2 as double, y2 as double, x3 as double, y3 as double, dest as IndexMovingBuffer) static as void
{
	var cc as int
	var i as int
	var c = new int[4]
	var cciv as int
	getSample(src,
		double2Fixed(xc), double2Fixed(yc),
		double2Fixed(x0), double2Fixed(y0),
		double2Fixed(x1), double2Fixed(y1),
		double2Fixed(x2), double2Fixed(y2),
		double2Fixed(x3), double2Fixed(y3),
		cciv, 3, c
	)
	cc = cciv
	if( cc == 0) {
		cc = 1
	}
	var aa = c[3]/cc
	Buffer.setByte(dest.getBuf(),3, aa)
	if(aa != 0) {
		for(i = 0; i < 3; i++) {
			Buffer.setByte(dest.getBuf(), i, ((c[i]/cc) * 255) / aa)
		}
	}
	else {
		for(i = 0; i < 3; i++) {
			Buffer.setByte(dest.getBuf(), i, 0)
		}
	}
}

func drawableTransformCubic(x as double, jm1 as int, j as int, jp1 as int, jp2 as int) static as double
{
	return j + 0.5 * x*(jp1 - jm1 + x*(2.0*jm1 - 5.0*j + 4.0*jp1 - jp2 + x*(3.0*(j - jp1) + jp2 - jm1)))
}

class IndexMovingBuffer public
{
	prop buf as buffer
	prop index as long

	func move(n as int) as this
	{
		var v = new this()
		v.setBuf(buf)
		v.setIndex(v.getIndex() + n)
		return v
	}
}

func cubicRow(dx as double, row as IndexMovingBuffer) static as int
{
	return drawableTransformCubic(
		dx, Buffer.getByte(row.getBuf(), 0), Buffer.getByte(row.getBuf(), 4), Buffer.getByte(row.getBuf(), 8), Buffer.getByte(row.getBuf(), 12)
	) as int
}

func cubicScaledRow(dx as double, row as IndexMovingBuffer, arow as IndexMovingBuffer) static as int
{
	return drawableTransformCubic(
		dx,
		Buffer.getByte(row.getBuf(), 0) * Buffer.getByte(arow.getBuf(), 0),
		Buffer.getByte(row.getBuf(), 4) * Buffer.getByte(arow.getBuf(), 4),
		Buffer.getByte(row.getBuf(), 8) * Buffer.getByte(arow.getBuf(), 8),
		Buffer.getByte(row.getBuf(), 12) * Buffer.getByte(arow.getBuf(), 12)
	) as int
}

func sampleCubic(src as PixelRegionBuffer, su as double, sv as double, dest as IndexMovingBuffer) static
{
	var aval as double
	var arecip as double
	var i as int
	var iu = Math.floor(su) as int
	var iv = Math.floor(sv) as int
	var stride = src.getStride()
	var du as double
	var dv as double
	var br = src.getBufferRegion(iu - 1, iv -1)
	if(br == null) {
		return
	}
	dest.setBuf(br)
	du = su - iu
	dv = sv - iv
	aval = drawableTransformCubic(dv,
		cubicRow(du, dest.move(3 + stride * 0)),
		cubicRow(du, dest.move(3 + stride * 1)),
		cubicRow(du, dest.move(3 + stride * 2)),
		cubicRow(du, dest.move(3 + stride * 3)))
	if(aval <= 0) {
		arecip = 0.0
		Buffer.setByte(dest.getBuf(), 3, 0)
	}
	else if(aval > 255.0) {
		arecip = 1.0/aval
		Buffer.setByte(dest.getBuf(), 3, 255)
	}
	else {
		arecip = 1.0/aval
		Buffer.setByte(dest.getBuf(), 3, Math.round(aval) as int)
	}
	for(i = 0; i < 3; i++) {
		var v = Math.round((arecip *
			drawableTransformCubic(dv,
				cubicScaledRow(du, dest.move(i + stride * 0), dest.move(3 + stride * 0)),
				cubicScaledRow(du, dest.move(i + stride * 1), dest.move(3 + stride * 1)),
				cubicScaledRow(du, dest.move(i + stride * 2), dest.move(3 + stride * 2)),
				cubicScaledRow(du, dest.move(i + stride * 3), dest.move(3 + stride * 3))))
		) as int
		Buffer.setByte(dest.getBuf(), i, ImageFilterUtil.clamp(v))
	}
}

func resizeBicubic(bb as BitmapBuffer, anw as int, anh as int) static as BitmapBuffer
{
	if(anw == 0 || anh == 0) {
		return null
	}
	if(anw < 0 && anh < 0) {
		return bb
	}
	var sb = bb.getBuffer()
	if(sb == null) {
		return null
	}
	var w = bb.getWidth()
	var h = bb.getHeight()
	var scaler = 1.0
	var nw = anw
	var nh = anh
	if(nw < 0 ) {
		scaler = (nh as double) / (h as double)
	}
	else if (nh < 0) {
		scaler = (nw as double) / (w as double)
	}
	if(scaler != 1.0) {
		nw = ((w as double) * scaler) as int
		nh = ((h as double) * scaler) as int
	}
	var v = MALLOC(nw*nh*4)
	var destp as IndexMovingBuffer
	destp.setBuf(v)
	var y as int
	var sx = (nw as double) / (w as double)
	var sy = (nh as double) / (h as double)
	var matrix = Matrix33.forScale(sx, sy)
	matrix = Matrix33.invertMatrix(matrix)
	var uinc = matrix.v[0]
	var vinc = matrix.v[1]
	var winc = matrix.v[2]
	var pixels = RGBAPixelIntegerBuffer.create(sb, w, h)
	var pixrgn = PixelRegionBuffer.forRgbaPixels(pixels, 4, 4)
	var tu = new double[5]
	var tv = new double[5]
	var tw = new double[5]
	var su = new double[5]
	var sv = new double[5]
	for(y = 0; y < nh; y++) {
		untransformCoords(matrix, 0, y, tu, tv, tw)
		var width = nw
		while(width-- > 0) {
			var i as int
			normalizeCoords(5, tu, tv, tw, su, sv)
			if(superSampleDtest(su[1], sv[1], su[2], sv[2], su[3], sv[3], su[4], sv[4])) {
				sampleAdapt(pixels, su[0], sv[0], su[1], sv[1], su[2], sv[2], su[3], sv[3], su[4], sv[4], destp)
			}
			else {
				sampleCubic(pixrgn, su[0], sv[0], destp)
			}
			destp = destp.move(4)
			for(i = 0; i < 5; i++) {
				tu[i] = tu[i] + uinc
				tv[i] = tv[i] + vinc
				tw[i] = tw[i] + winc
			}
		}
	}
	return BitmapBuffer.create(v, nw, nh)
}
