
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.gfx.util

class abstract:

func createSpriteLayer abstract as SpriteLayer
func createImageFromResource(name as string) abstract as Image
func createTextureForImage(image as Image) abstract as Texture
func createTextureForColor(color as Color) abstract as Texture
func deleteSpriteLayer(layer as SpriteLayer) abstract
func deleteTexture(texture as Texture) abstract

func deleteTextureSheet(textures as vector<Texture>) virtual
{
	assert textures
	foreach texture in textures:
		deleteTexture(texture)
	Vector.clear(textures)
}

func createTextureForImageResource(name as string) virtual as Texture
{
	assert name
	var img = assert createImageFromResource(name)
	var v = assert createTextureForImage(img)
	return v
}

func createTextureSheet(resourceId as string, props as TextureSheetProperties) virtual as vector<Texture>
{
	var img = assert createImageFromResource(resourceId)
	var imgs = new ImageSheet()
	imgs.setSheet(img)
	imgs.setCols(props.getCols())
	imgs.setRows(props.getRows())
	imgs.setSourceSkipX(props.getSourceSkipX())
	imgs.setSourceSkipY(props.getSourceSkipY())
	imgs.setSourceImageWidth(props.getSourceImageWidth())
	imgs.setSourceImageHeight(props.getSourceImageHeight())
	imgs.setMaxImages(props.getMaxImages())
	var images = assert imgs.toImages(props.getResizeToWidth(), props.getResizeToHeight())
	var v = new vector<Texture>
	foreach image in images {
		var txt = createTextureForImage(image)
		if txt:
			v += txt
	}
	return v
}
