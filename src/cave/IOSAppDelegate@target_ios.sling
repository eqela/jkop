
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class imports cape:

IFDEF "target_objc" {
	depend "objc-header-h:<UIKit/UIKit.h>"
}
ELSE IFDEF "target_swift" {
	depend "swift-import:UIKit"
	basetype !"NSObject" type extends
}

basetype !"UIApplicationDelegate" type implements

var window protected as !"UIWindow"
var viewController protected as !"UIViewController"
var ctx protected as cave.GuiApplicationContextForIOS
prop statusBarHandler as function
IFDEF "target_objc" {
	prop openURLhandler as function<bool, !"UIApplication", !"NSURL", !"NSDictionary", !"NSString", object>

	ctor:
		ctx = createContext()
}
ELSE IFDEF "target_swift" {
	prop openURLhandler as function<bool, !"UIApplication", !"URL", !"[UIApplication.OpenURLOptionsKey : Any]", !"String", object>

	ctor override
	{
		IFDEF "target_swift" {
			lang "swift" {{{
				super.init()
			}}}
		}
	}
}

func createContext virtual as GuiApplicationContextForIOS:
	return new GuiApplicationContextForIOS()

IFDEF "target_objc" {
	func createMainScreen(ctx as cave.GuiApplicationContextForIOS) virtual as !"UIViewController*":
		return null
}
ELSE IFDEF "target_swift" {
	func createMainScreen(ctx as cave.GuiApplicationContextForIOS) virtual as !"UIViewController":
		return null
}

IFDEF "target_objc" {
	lang "objc" {{{
		- (BOOL)application:(UIApplication *)application willFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
			return [self doApplicationWillFinishLaunchingWithOptions:application launchOptions:launchOptions];
		}

		- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {
			id vc = viewController;
			[vc application:application didReceiveRemoteNotification:userInfo];
		}

		- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {
			id vc = viewController;
			[vc application:application didReceiveRemoteNotification:userInfo fetchCompletionHandler:completionHandler];
			completionHandler(UIBackgroundFetchResultNewData);
		}

		- (void)application:(UIApplication *)application didChangeStatusBarFrame:(CGRect *)oldStatusBarFrame {
			if(self->statusBarHandler != nil) {
				self->statusBarHandler();
			}
		}
	}}}
}
ELSE IFDEF "target_swift" {
	lang "swift" {{{
		public func application(_ application: UIApplication, willFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool {
			return self.doApplicationWillFinishLaunchingWithOptions(application, launchOptions)
		}

		public func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any]) {
			(viewController as? CaveUiScreenForWidget)!.application(application, didReceiveRemoteNotification:userInfo)
		}

		public func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {
			(viewController as? CaveUiScreenForWidget)!.applicationWithCompletionHandler(application, didReceiveRemoteNotification:userInfo, fetchCompletionHandler:completionHandler)
			completionHandler(UIBackgroundFetchResult.newData)
		}

		public func application(_ application: UIApplication, didChangeStatusBarFrame oldStatusBarFrame: CGRect) {
			if(self.statusBarHandler != nil) {
				self.statusBarHandler!()
			}
		}
	}}}
}

func getAppDelegate static as this
{
	var uiApplication as object
	IFDEF "target_objc" {
		uiApplication = lang "objc" object {{{ [[UIApplication sharedApplication] delegate] }}}
	}
	ELSE IFDEF "target_swift" {
		uiApplication = lang "swift" object {{{ UIApplication.shared.delegate }}}
	}
	var appdelegate as this
	if uiApplication is this:
		appdelegate = uiApplication as! this
	return appdelegate
}

IFDEF "target_objc" {

	func doApplicationWillFinishLaunchingWithOptions(application as !"UIApplication*", launchOptions as !"NSDictionary*") as bool
	{
		var cc = assert createMainScreen(ctx)
		if cc is ScreenWithContext:
			(cc as! ScreenWithContext).setContext(ctx)
		viewController = cc
		lang "objc" {{{
			id vc = viewController;
			[vc application:application willFinishLaunchingWithOptions:launchOptions];
		}}}
		return true
	}

	func applicationDidFinishLaunching(application as !"UIApplication*")
	{
		lang "objc" {{{
			window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
			window.rootViewController = viewController;
			[window makeKeyAndVisible];
		}}}
	}

	func applicationDidBecomeActive(application as !"UIApplication*") virtual
	{
		lang "objc" {{{
			id vc = viewController;
			if([vc respondsToSelector:@selector(applicationDidBecomeActive:)]) {
				[vc applicationDidBecomeActive:application];
			}
		}}}
	}

	func applicationWillResignActive(application as !"UIApplication*") virtual
	{
		lang "objc" {{{
			id vc = viewController;
			if([vc respondsToSelector:@selector(applicationWillResignActive:)]) {
				[vc applicationWillResignActive:application];
			}
		}}}
	}

	func applicationDidEnterBackground(application as !"UIApplication*")
	{
		lang "objc" {{{
			id vc = viewController;
			if([vc respondsToSelector:@selector(applicationDidEnterBackground:)]) {
				[vc applicationDidEnterBackground:application];
			}
		}}}
	}

	func applicationWillEnterForeground(application as !"UIApplication*")
	{
		lang "objc" {{{
			id vc = viewController;
			if([vc respondsToSelector:@selector(applicationWillEnterForeground:)]) {
				[vc applicationWillEnterForeground:application];
			}
		}}}
	}

	func applicationWillTerminate(application as !"UIApplication*")
	{
		lang "objc" {{{
			id vc = viewController;
			if([vc respondsToSelector:@selector(applicationWillTerminate:)]) {
				[vc applicationWillTerminate:application];
			}
		}}}
	}

	lang "objc" {{{
		- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary *)options
		{
			if(self->openURLhandler != nil) {
				return(self->openURLhandler(app, url, options, nil, nil));
			}
			return(NO);
		}

		- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation
		{
			if(self->openURLhandler != nil) {
				return(self->openURLhandler(app, url, nil, sourceApplication, annotation));
			}
			return(NO);
		}
	}}}
}
ELSE IFDEF "target_swift" {
	func doApplicationWillFinishLaunchingWithOptions(application as !"UIApplication", launchOptions as !"[UIApplication.LaunchOptionsKey : Any]") as bool
	{
		var cc = assert createMainScreen(ctx)
		if cc is ScreenWithContext:
			(cc as! ScreenWithContext).setContext(ctx)
		viewController = cc
		lang "swift" {{{
			(viewController as? CaveUiScreenForWidget)!.applicationWithLaunchOptions(application!, willFinishLaunchingWithOptions:launchOptions)
		}}}
		return true
	}

	lang "swift" {{{
		public func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
			window = UIWindow(frame: UIScreen.main.bounds)
			window.rootViewController = viewController
			window.makeKeyAndVisible()
			return true
		}

		public func applicationDidBecomeActive(_ application: UIApplication) {
			let vc : CaveUiScreenForWidget = viewController as! CaveUiScreenForWidget
			vc.applicationDidBecomeActive(application)
		}

		public func applicationWillResignActive(_ application: UIApplication) {
			let vc : CaveUiScreenForWidget = viewController as! CaveUiScreenForWidget
			vc.applicationWillResignActive(application)
		}

		public func applicationDidEnterBackground(_ application: UIApplication) {
			let vc : CaveUiScreenForWidget = viewController as! CaveUiScreenForWidget
			vc.applicationDidEnterBackground(application)
		}

		public func applicationWillEnterForeground(_ application: UIApplication) {
			let vc : CaveUiScreenForWidget = viewController as! CaveUiScreenForWidget
			vc.applicationWillEnterForeground(application)
		}

		public func applicationWillTerminate(_ application: UIApplication) {
			let vc : CaveUiScreenForWidget = viewController as! CaveUiScreenForWidget
			vc.applicationWillTerminate(application)
		}

		private func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {
			if(self.openURLhandler != nil) {
				return self.openURLhandler!(app, url, options, nil, nil)
			}
			return false
		}

		private func application(_ application: UIApplication, open url: URL, sourceApplication: String?, annotation: Any) -> Bool {
			if(self.openURLhandler != nil) {
				return self.openURLhandler!(application, url, nil, sourceApplication, annotation as AnyObject)
			}
			return false
		}
	}}}
}
