
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.process
import jk.fs

class is HTTPServerResponseWorker:

func forProcessLauncher(launcher as ProcessLauncher) static as this
{
	var v = new this()
	v.setLauncher(launcher)
	return v
}

func forFile(file as File) static as this:
	return forProcessLauncher(ProcessLauncher.forFile(file))

func forCommand(command as string) static as this:
	return forProcessLauncher(ProcessLauncher.forCommand(command))

pvar launcher as ProcessLauncher
var mimeType as string

ctor:
	mimeType = "text/plain"

func setMimeType(value as string):
	mimeType = value

func getMimeType override as string:
	return mimeType

func getWorkerDescription override as string:
	return VALUE "__THIS__"

class MyDataReceiver is BufferDataReceiver
{
	pvar session as HTTPServerResponseSession

	func onBufferData(data as buffer, size as long) as bool
	{
		if not session.writeData(data, size):
			return false
		return true
	}
}

func execute override
{
	assert launcher
	var md = new MyDataReceiver()
	md.setSession(session)
	launcher.executeToPipe(md)
}
