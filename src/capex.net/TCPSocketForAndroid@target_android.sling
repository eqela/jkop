
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is TCPSocket:

IFDEF "target_android" {
	depend "androidPermission:android.permission.INTERNET"
}

var socket as !"java.net.Socket"
var serverSocket as !"java.net.ServerSocket"
var blocking private = true

func getJavaClientSocket as !"java.net.Socket":
	return socket

func getJavaServerSocket as !"java.net.ServerSocket":
	return serverSocket

func getRemoteAddress override as string
{
	assert socket
	var a as !"java.net.InetAddress"
	a = socket.getInetAddress() as! !"java.net.InetAddress"
	assert a
	return a.getHostAddress() as string
}

func getRemotePort override as int
{
	if socket == null:
		return(0)
	return socket.getPort() as int
}

func getLocalAddress override as string
{
	var a as !"java.net.InetAddress"
	if socket:
		a = socket.getLocalAddress() as! !"java.net.InetAddress"
	if serverSocket:
		a = serverSocket.getInetAddress() as! !"java.net.InetAddress"
	assert a
	return a.getHostAddress() as string
}

func getLocalPort override as int
{
	if socket:
		return socket.getLocalPort() as int
	if serverSocket:
		return serverSocket.getLocalPort() as int
	return -1
}

func connect(address as string, port as int) override as bool
{
	var v = true
	lang "java" {{{
		try {
			java.net.InetAddress serverAddress = java.net.InetAddress.getByName(address);
			socket = new java.net.Socket(serverAddress, port);
			socket.setKeepAlive(true);
		}
		catch(java.lang.Exception e) {
			e.printStackTrace();
			v = false;
		}
	}}}
	return v
}

func listen(port as int) override as bool
{
	var v = true
	lang "java" {{{
		try {
			serverSocket = new java.net.ServerSocket(port);
		}
		catch(java.lang.Exception e) {
			e.printStackTrace();
			v = false;
		}
	}}}
	return v
}

func accept override as TCPSocket
{
	assert serverSocket
	var nsocket as !"java.net.Socket"
	lang "java" {{{
		try {
			nsocket = serverSocket.accept();
		}
		catch(java.lang.Exception e) {
			e.printStackTrace();
			nsocket = null;
		}
	}}}
	if nsocket {
		var v = new this()
		v.socket = nsocket
		return v
	}
	return null
}

func setBlocking(blocking as bool) override as bool
{
	this.blocking = blocking
	return true
}

func getBlocking override as bool:
	return blocking

func close override
{
	lang "java" {{{
		try {
			if(socket != null) {
				socket.close();
				socket = null;
			}
			if(serverSocket != null) {
				serverSocket.close();
				serverSocket = null;
			}
		}
		catch(java.io.IOException e) {
			e.printStackTrace();
		}
	}}}
}

func read(buffer as buffer) override as int
{
	if buffer == null:
		return -1
	var v = 0
	lang "java" {{{
		try {
			java.io.InputStream ins = socket.getInputStream();
			if(blocking == false && ins.available() < 1) {
				return(0);
			}
			else {
				v = ins.read(buffer);
			}
		}
		catch(java.lang.Exception e) {
			e.printStackTrace();
			v = -1;
		}
	}}}
	if v < 1 {
		close()
		v = -1
	}
	return v
}

func write(buffer as buffer, size as int) override as int
{
	if buffer == null:
		return -1
	var v = 0
	lang "java" {{{
		try {
			java.io.OutputStream os = socket.getOutputStream();
			os.write(buffer);
			os.flush();
			v = size;
		}
		catch(java.lang.Exception e)
		{
			e.printStackTrace();
			v = -1;
		}
	}}}
	if v < 1 {
		close()
		v = -1
	}
	return v
}
