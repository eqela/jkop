
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.xml

class:

pvar indentWithTab = true

func addField(xml as XMLMaker, name as string, value as string) private
{
	assert name && value
	xml.textElement(name, value)
}

func addDependency(v as XMLMaker, dep as POM.Dependency) private
{
	v.start("dependency")
	addField(v, "groupId", dep.getGroupId())
	addField(v, "artifactId", dep.getArtifactId())
	addField(v, "version", dep.getVersion())
	addField(v, "type", dep.getType())
	addField(v, "scope", dep.getScope())
	addField(v, "optional", dep.getOptional())
	var excls = dep.getExclusions()
	if excls {
		v.start("exclusions")
		foreach excl in excls {
			v.start("exclusion")
			addField(v, "groupId", excl.getGroupId())
			addField(v, "artifactId", excl.getArtifactId())
			v.end("exclusion")
		}
		v.end("exclusions")
	}
	v.end("dependency")
}

func addBuildResource(v as XMLMaker, rs as POM.BuildResource, name as string) private
{
	v.start(name)
	addField(v, "targetPath", rs.getTargetPath())
	addField(v, "filtering", rs.getFiltering())
	addField(v, "directory", rs.getDirectory())
	var includes = rs.getIncludes()
	if includes {
		v.start("includes")
		foreach include in includes:
			addField(v, "include", include)
		v.end("includes")
	}
	var excludes = rs.getIncludes()
	if excludes {
		v.start("excludes")
		foreach exclude in excludes:
			addField(v, "exclude", exclude)
		v.end("excludes")
	}
	v.end(name)
}

func addConfiguration(v as XMLMaker, config as POM.Configuration, name as string) private
{
	assert config
	var nn = name
	if String.isEmpty(nn):
		nn = config.getName()
	assert String.isNotEmpty(nn)
	v.startWithDynamicAttributeMap(nn, config.getParams())
	var vals = config.getValues()
	if vals {
		var it as Iterator<KeyValuePair<string,string>> #force = vals.iterate()
		while it {
			var f = it.next()
			if not f:
				break
			addField(v, f.key, f.value)
		}
	}
	var ccs = config.getChildren()
	if ccs {
		foreach cc in ccs:
			addConfiguration(v, cc, null)
	}
	v.end(nn)
}

func addExecution(v as XMLMaker, xx as POM.BuildExecution) private
{
	v.start("execution")
	addField(v, "id", xx.getId())
	var goals = xx.getGoals()
	if goals {
		v.start("goals")
		foreach goal in goals:
			addField(v, "goal", goal)
		v.end("goals")
	}
	addField(v, "phase", xx.getPhase())
	addField(v, "inherited", xx.getInherited())
	addConfiguration(v, xx.getConfiguration(), "configuration")
	v.end("execution")
}

func addPlugins(v as XMLMaker, plugins as vector<POM.BuildPlugin>) private
{
	v.start("plugins")
	foreach plugin in plugins {
		v.start("plugin")
		addField(v, "groupId", plugin.getGroupId())
		addField(v, "artifactId", plugin.getArtifactId())
		addField(v, "version", plugin.getVersion())
		addField(v, "extensions", plugin.getExtensions())
		addField(v, "inherited", plugin.getInherited())
		addConfiguration(v, plugin.getConfiguration(), "configuration")
		var deps = plugin.getDependencies()
		if deps {
			v.start("dependencies")
			foreach dep in deps:
				addDependency(v, dep)
			v.end("dependencies")
		}
		var xxs = plugin.getExecutions()
		if xxs {
			v.start("executions")
			foreach xx in xxs:
				addExecution(v, xx)
			v.end("executions")
		}
		v.end("plugin")
	}
	v.end("plugins")
}

func addPerson(v as XMLMaker, pp as POM.Person, name as string) private
{
	v.start(name)
	addField(v, "id", pp.getId())
	addField(v, "name", pp.getName())
	addField(v, "email", pp.getEmail())
	addField(v, "url", pp.getUrl())
	addField(v, "organization", pp.getOrganization())
	addField(v, "organizationUrl", pp.getOrganizationUrl())
	var roles = pp.getRoles()
	if roles {
		v.start("roles")
		foreach role in roles:
			addField(v, "role", role)
		v.end("roles")
	}
	addField(v, "timezone", pp.getTimezone())
	var props = pp.getProperties()
	if props {
		v.start("properties")
		var it as Iterator<KeyValuePair<string,string>> #force = props.iterate()
		while it {
			var pp = it.next()
			if not pp:
				break
			addField(v, pp.key, pp.value)
		}
		v.end("properties")
	}
	v.end(name)
}

func addRepositoryComponent(v as XMLMaker, cc as POM.RepositoryComponent, tagName as string) private
{
	assert cc
	v.start(tagName)
	addField(v, "enabled", cc.getEnabled())
	addField(v, "updatePolicy", cc.getUpdatePolicy())
	addField(v, "checksumPolicy", cc.getChecksumPolicy())
	v.end(tagName)
}

func addRepository(v as XMLMaker, repo as POM.Repository, tagName as string) private
{
	assert repo
	v.start(tagName)
	addField(v, "id", repo.getId())
	addField(v, "name", repo.getName())
	addField(v, "url", repo.getUrl())
	addField(v, "layout", repo.getLayout())
	addRepositoryComponent(v, repo.getReleases(), "releases")
	addRepositoryComponent(v, repo.getSnapshots(), "snapshots")
	v.end(tagName)
}

func toXMLMaker(pom as POM) as XMLMaker
{
	assert pom
	var v = new XMLMaker()
	v.setIndentWithTab(indentWithTab)
	v.startWithAttributeMap("project", new map {
		xmlns "http://maven.apache.org/POM/4.0.0"
		@{"xmlns:xsi"} "http://www.w3.org/2001/XMLSchema-instance"
		@{"xsi:schemaLocation"} "http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"
	})

	// Basic information

	addField(v, "modelVersion", pom.getModelVersion())
	addField(v, "groupId", pom.getGroupId())
	addField(v, "artifactId", pom.getArtifactId())
	addField(v, "version", pom.getVersion())
	addField(v, "name", pom.getName())
	addField(v, "description", pom.getDescription())
	addField(v, "url", pom.getUrl())
	addField(v, "inceptionYear", pom.getInceptionYear())
	addField(v, "packaging", pom.getPackaging())

	// dependencies

	var deps = pom.getDependencies()
	if deps {
		v.start("dependencies")
		foreach dep in deps:
			addDependency(v, dep)
		v.end("dependencies")
	}

	// parent

	var parent = pom.getParent()
	if parent {
		v.start("parent")
		addField(v, "groupId", parent.getGroupId())
		addField(v, "artifactId", parent.getArtifactId())
		addField(v, "version", parent.getVersion())
		addField(v, "relativePath", parent.getRelativePath())
		v.end("parent")
	}

	// dependencyManagement

	var depm = pom.getDependencyManagement()
	if depm {
		v.start("dependencyManagement")
		v.start("dependencies")
		foreach dep in depm:
			addDependency(v, dep)
		v.end("dependencies")
		v.end("dependencyManagement")
	}

	// modules

	var mods = pom.getModules()
	if mods {
		v.start("modules")
		foreach mod in mods:
			addField(v, "module", mod)
		v.end("modules")
	}

	// properties

	var props = pom.getProperties()
	if props {
		v.start("properties")
		var it as Iterator<KeyValuePair<string,string>> #force = props.iterate()
		while it {
			var pp = it.next()
			if not pp:
				break
			addField(v, pp.key, pp.value)
		}
		v.end("properties")
	}

	// build

	var build = pom.getBuild()
	if build {
		v.start("build")
		addField(v, "defaultGoal", build.getDefaultGoal())
		addField(v, "directory", build.getDirectory())
		addField(v, "finalName", build.getFinalName())
		var filters = build.getFilters()
		if filters {
			v.start("filters")
			foreach filter in filters:
				addField(v, "filter", filter)
			v.end("filters")
		}
		var rss = build.getResources()
		if rss {
			v.start("resources")
			foreach rs in rss:
				addBuildResource(v, rs, "resource")
			v.end("resources")
		}
		var trs = build.getTestResources()
		if trs {
			v.start("testResources")
			foreach tr in trs:
				addBuildResource(v, tr, "testResource")
			v.end("testResources")
		}
		var plugins = build.getPlugins()
		if plugins:
			addPlugins(v, plugins)
		var pluginManagement = build.getPluginManagement()
		if pluginManagement {
			v.start("pluginManagement")
			addPlugins(v, pluginManagement)
			v.end("pluginManagement")
		}
		addField(v, "sourceDirectory", build.getSourceDirectory())
		addField(v, "scriptSourceDirectory", build.getScriptSourceDirectory())
		addField(v, "testSourceDirectory", build.getTestSourceDirectory())
		addField(v, "outputDirectory", build.getOutputDirectory())
		addField(v, "testOutputDirectory", build.getTestOutputDirectory())
		var xxs = build.getExtensions()
		if xxs {
			v.start("extensions")
			foreach xx in xxs {
				v.start("extension")
				addField(v, "groupId", xx.getGroupId())
				addField(v, "artifactId", xx.getArtifactId())
				addField(v, "version", xx.getVersion())
				v.end("extension")
			}
			v.end("extensions")
		}
		v.end("build")
	}

	// licenses

	var licences = pom.getLicenses()
	if licences {
		v.start("licenses")
		foreach license in licences {
			v.start("license")
			addField(v, "name", license.getName())
			addField(v, "url", license.getUrl())
			addField(v, "distribution", license.getDistribution())
			addField(v, "comments", license.getComments())
			v.end("license")
		}
		v.end("licenses")
	}

	// organization

	var org = pom.getOrganization()
	if org {
		v.start("organization")
		addField(v, "name", org.getName())
		addField(v, "url", org.getUrl())
		v.end("organization")
	}

	// developers

	var devs = pom.getDevelopers()
	if devs {
		v.start("developers")
		foreach dev in devs:
			addPerson(v, dev, "developer")
		v.end("developers")
	}

	// contributors

	var contrs = pom.getContributors()
	if contrs {
		v.start("contributors")
		foreach contr in contrs:
			addPerson(v, contr, "contributor")
		v.end("contributors")
	}

	// issueManagement

	var im = pom.getIssueManagement()
	if im {
		v.start("issueManagement")
		addField(v, "system", im.getSystem())
		addField(v, "url", im.getUrl())
		v.end("issueManagement")
	}

	// ciManagement

	var cim = pom.getCiManagement()
	if cim {
		v.start("ciManagement")
		addField(v, "system", cim.getSystem())
		addField(v, "url", cim.getUrl())
		var nots = cim.getNotifiers()
		if nots {
			v.start("notifiers")
			foreach nn in nots {
				v.start("notifier")
				addField(v, "type", nn.getType())
				addField(v, "sendOnError", nn.getSendOnError())
				addField(v, "sendOnFailure", nn.getSendOnFailure())
				addField(v, "sendOnSuccess", nn.getSendOnWarning())
				addField(v, "sendOnWarning", nn.getSendOnWarning())
				addConfiguration(v, nn.getConfiguration(), "configuration")
				v.end("notifier")
			}
			v.end("notifiers")
		}
		v.end("ciManagement")
	}

	// mailingLists

	var mls = pom.getMailingLists()
	if mls {
		v.start("mailingLists")
		foreach ml in mls {
			v.start("mailingList")
			addField(v, "name", ml.getName())
			addField(v, "subscribe", ml.getSubscribe())
			addField(v, "unsubscribe", ml.getUnsubscribe())
			addField(v, "post", ml.getPost())
			addField(v, "archive", ml.getArchive())
			var oas = ml.getOtherArchives()
			if oas {
				v.start("otherArchives")
				foreach oa in oas:
					addField(v, "otherArchive", oa)
				v.end("otherArchives")
			}
			v.end("mailingList")
		}
		v.end("mailingLists")
	}

	// scm

	var scm = pom.getScm()
	if scm {
		v.start("scm")
		addField(v, "connection", scm.getConnection())
		addField(v, "developerConnection", scm.getDeveloperConnection())
		addField(v, "tag", scm.getTag())
		addField(v, "url", scm.getUrl())
		v.end("scm")
	}

	// prerequisites

	var preqs = pom.getPrerequisites()
	if preqs {
		v.start("prerequisites")
		var it as Iterator<KeyValuePair<string,string>> #force = preqs.iterate()
		while it {
			var f = it.next()
			if not f:
				break
			addField(v, f.key, f.value)
		}
		v.end("prerequisites")
	}

	// repositories

	var repos = pom.getRepositories()
	if repos {
		v.start("repositories")
		foreach repo in repos:
			addRepository(v, repo, "repository")
		v.end("repositories")
	}

	// pluginRepositories

	var plrs = pom.getPluginRepositories()
	if plrs {
		v.start("pluginRepositories")
		foreach plr in plrs:
			addRepository(v, plr, "pluginRepository")
		v.end("pluginRepositories")
	}

	// End of project

	v.end("project")
	return v
}

func toXML(pom as POM) as string
{
	var xm = assert toXMLMaker(pom)
	return xm.toString()
}
