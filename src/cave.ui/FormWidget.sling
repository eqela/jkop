
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is LayerWidget #widget:

class Action
{
	var label public as string
	var handler public as function
}

class MyStringListInputWidget is TextInputWidget #widget
{
	ctor(context as GuiApplicationContext)
	{
		base(context)
	}

	func setWidgetValue(value as object) override
	{
		var vv = value as DynamicVector
		if(vv == null) {
			return
		}
		var sb = new StringBuilder()
		foreach(v as string in vv.toVector()) {
			if(sb.count() > 0) {
				sb.append(", ")
			}
			sb.append(v)
		}
		setWidgetText(sb.toString())
	}

	func getWidgetValue override as object
	{
		var v = new DynamicVector()
		foreach(string in String.split(getWidgetText(), ',')) {
			v.append(String.strip(string))
		}
		return(v)
	}
}

class StaticTextWidget is LayerWidget is WidgetWithValue #widget
{
	func forText(context as GuiApplicationContext, text as string) static as this
	{
		var v = new this(context)
		v.setWidgetValue(text)
		return(v)
	}

	ctor(context as GuiApplicationContext)
	{
		base(context)
	}

	prop backgroundColor as Color
	prop textColor as Color
	var label as LabelWidget
	var labeltext as string

	func initializeWidget override
	{
		base.initializeWidget()
		label = LabelWidget.forText(context, labeltext)
		var color = textColor
		if(color == null) {
			if(backgroundColor.isLightColor()) {
				color = Color.forRGB(0, 0, 0)
			}
			else {
				color = Color.forRGB(0xff, 0xff, 0xff)
			}
		}
		label.setWidgetTextColor(color)
		addWidget(CanvasWidget.forColor(context, backgroundColor))
		addWidget(LayerWidget.forWidget(context, label, context.getHeightValue("1500um")))
	}

	func setWidgetValue(value as object)
	{
		labeltext = String.asString(value)
		if(label != null) {
			label.setWidgetText(labeltext)
		}
	}

	func getWidgetValue as object
	{
		if(label == null) {
			return(null)
		}
		return(label.getWidgetText())
	}
}

func forDeclaration(context as GuiApplicationContext, form as FormDeclaration) static as this
{
	var v = new this(context)
	v.setFormDeclaration(form)
	return(v)
}

var formDeclaration as FormDeclaration
var fieldsById as map<string,Widget>
var actions as vector<Action>
prop elementSpacing as int #notLiteral
prop formMargin as int #notLiteral
var alignWidget as AlignWidget
prop enableFieldLabels = true
prop fieldLabelBelow = false
prop formWidth as int #notLiteral
prop fieldLabelFontSize as int #notLiteral
prop fieldLabelFontFamily as string
prop fieldLabelFontResource as string
var customFooterWidget as LayerWidget
var queueData as DynamicMap
prop widgetBackgroundColor as Color
prop enableScrolling = true
prop fillContainerWidget = false
var preservedFormData as DynamicMap
var preserveUnknownValuesForQueuedData as bool
var actionHandlers as map<string,function>

ctor(context as GuiApplicationContext)
{
	base(context)
	fieldsById = new map<string,Widget>
	formMargin = context.getHeightValue("1mm")
	formWidth = context.getWidthValue("120mm")
	fieldLabelFontSize = context.getHeightValue("2000um")
	fieldLabelFontFamily = "Arial"
	elementSpacing = formMargin
	customFooterWidget = new LayerWidget(context)
	widgetBackgroundColor = Color.forString("#EEEEEE")
}

func getCustomFooterWidget as LayerWidget
{
	return customFooterWidget
}

func getFormDeclaration virtual as FormDeclaration
{
	return formDeclaration
}

func setFormDeclaration(value as FormDeclaration) as this
{
	formDeclaration = value
	return this
}

func addActions virtual #deprecated
{
}

func addAction(label as string, handler as function) #deprecated
{
	assert label
	if not actions:
		actions = new vector<Action>
	var v = new Action()
	v.label = label
	v.handler = handler
	actions += v
}

func setStyleForTextInputWidget(widget as TextInputWidget, allowReplace as bool) virtual as Widget
{
	widget.setWidgetBackgroundColor(Color.white())
	widget.setWidgetPadding(context.getHeightValue("1500um"))
	widget.setWidgetFontSize(context.getHeightValue("3000um"))
	return widget
}

func setStyleForTextButtonWidget(widget as TextButtonWidget, allowReplace as bool) virtual as Widget
{
	widget.setWidgetBackgroundColor(Color.forString("blue"))
	Widget.setAlpha(widget, 0.9)
	return widget
}

func setStyleForSelectWidget(widget as SelectWidget, allowReplace as bool) virtual as Widget
{
	widget.setWidgetBackgroundColor(Color.white())
	widget.setWidgetPadding(context.getHeightValue("1500um"))
	widget.setWidgetFontSize(context.getHeightValue("3000um"))
	return widget
}

func setStyleForTextAreaWidget(widget as TextAreaWidget, allowReplace as bool) virtual as Widget
{
	widget.setWidgetBackgroundColor(Color.white())
	widget.setWidgetPadding(context.getHeightValue("1500um"))
	widget.setWidgetFontSize(context.getHeightValue("3000um"))
	return widget
}

func setStyleForDateSelectorWidget(widget as DateSelectorWidget, allowReplace as bool) virtual as Widget
{
	foreach child in Widget.getChildren(widget) {
		setStyleForWidget(child, false)
	}
	return widget
}

func setStyleForRadioButtonGroupWidget(widget as RadioButtonGroupWidget, allowReplace as bool) virtual as Widget
{
	if not allowReplace:
		return widget
	return LayerWidget.forWidget(context, widget, context.getHeightValue("1500um"))
}

func setStyleForCheckBoxWidget(widget as CheckBoxWidget, allowReplace as bool) virtual as Widget
{
	if not allowReplace:
		return widget
	return LayerWidget.forWidget(context, widget, context.getHeightValue("1500um"))
}

func setStyleForWidget(widget as Widget, allowReplace as bool) virtual as Widget
{
	if widget is TextInputWidget {
		return setStyleForTextInputWidget(widget as! TextInputWidget, allowReplace)
	}
	if widget is TextButtonWidget {
		return setStyleForTextButtonWidget(widget as! TextButtonWidget, allowReplace)
	}
	if widget is SelectWidget {
		return setStyleForSelectWidget(widget as! SelectWidget, allowReplace)
	}
	if widget is TextAreaWidget {
		return setStyleForTextAreaWidget(widget as! TextAreaWidget, allowReplace)
	}
	if widget is DateSelectorWidget {
		return setStyleForDateSelectorWidget(widget as! DateSelectorWidget, allowReplace)
	}
	if widget is RadioButtonGroupWidget {
		return setStyleForRadioButtonGroupWidget(widget as! RadioButtonGroupWidget, allowReplace)
	}
	if widget is CheckBoxWidget {
		return setStyleForCheckBoxWidget(widget as! CheckBoxWidget, allowReplace)
	}
	foreach child in Widget.getChildren(widget) {
		setStyleForWidget(child, false)
	}
	return widget
}

func asPlaceHolder(str as string) as string
{
	if enableFieldLabels:
		return null
	return str
}

func getBackgroundColorForElement(element as FormDeclaration.Element) virtual as cave.Color
{
	if element.isType("GroupContainer"):
		return Color.black()
	return Color.white()
}

func getForegroundColorForElement(element as FormDeclaration.Element) virtual as cave.Color
{
	return null
}

func getAdjustedForegroundColor(element as FormDeclaration.Element, backgroundColor as Color) as Color
{
	var v = getForegroundColorForElement(element)
	if v:
		return v
	if not backgroundColor:
		return Color.black()
	if backgroundColor.isWhite():
		return Color.forRGB(100,100,100)
	if backgroundColor.isDarkColor():
		return Color.white()
	return Color.black()
}

func setActionHandlers(handlers as map)
{
	assert handlers
	actionHandlers = new map<string, function>
	var keys as Iterator<object> #force = assert Map.iterateKeys(handlers)
	loop {
		var key = keys.next()
		if not key:
			break
		if key is string:
			actionHandlers[key as! string] = Map.get(handlers, key) as! function
	}
}

func setActionHandler(actionName as string, handler as function)
{
	assert actionName
	assert handler
	if not actionHandlers:
		actionHandlers = new map<string,function>
	actionHandlers[actionName] = handler
}

func getActionHandler(actionName as string) as function
{
	assert actionHandlers
	assert actionName
	return Map.get(actionHandlers, actionName)
}

func createWidgetForElement(element as FormDeclaration.Element) virtual as Widget
{
	assert element
	if element.isType("TextInput") {
		return TextInputWidget.forType(context, TextInputWidget.TYPE_DEFAULT, asPlaceHolder(element.getLabel()))
	}
	if element.isType("TextButton") {
		return TextButtonWidget.forText(context, element.getPropertyString("text"), getActionHandler(element.getPropertyString("action")))
	}
	if element.isType("RawTextInput") {
		return TextInputWidget.forType(context, TextInputWidget.TYPE_NONASSISTED, asPlaceHolder(element.getLabel()))
	}
	if element.isType("PasswordInput") {
		return TextInputWidget.forType(context, TextInputWidget.TYPE_PASSWORD, asPlaceHolder(element.getLabel()))
	}
	if element.isType("NameInput") {
		return TextInputWidget.forType(context, TextInputWidget.TYPE_NAME, asPlaceHolder(element.getLabel()))
	}
	if element.isType("EmailAddressInput") {
		return TextInputWidget.forType(context, TextInputWidget.TYPE_EMAIL_ADDRESS, asPlaceHolder(element.getLabel()))
	}
	if element.isType("PhoneNumberInput") {
		return TextInputWidget.forType(context, TextInputWidget.TYPE_PHONE_NUMBER, asPlaceHolder(element.getLabel()))
	}
	if element.isType("StreetAddressInput") {
		return TextInputWidget.forType(context, TextInputWidget.TYPE_STREET_ADDRESS, asPlaceHolder(element.getLabel()))
	}
	if element.isType("TextAreaInput") {
		return TextAreaWidget.forPlaceholder(context, asPlaceHolder(element.getLabel()), element.getPropertyInteger("rows"))
	}
	if element.isType("CodeInput") {
		var v = TextAreaWidget.forPlaceholder(context, asPlaceHolder(element.getLabel()), element.getPropertyInteger("rows"))
		v.configureMonospaceFont()
		return v
	}
	if element.isType("StaticTextElement") {
		var st = StaticTextWidget.forText(context, asPlaceHolder(element.getLabel()))
		var bgc = getBackgroundColorForElement(element)
		var fgc = getAdjustedForegroundColor(element, bgc)
		st.setBackgroundColor(bgc)
		st.setTextColor(fgc)
		return st
	}
	if element.isType("RadioGroupInput") {
		var items = element.getPropertyDynamicVector("items")
		if not items:
			items = new DynamicVector()
		IFDEF("target_ios_objc") {
			return SelectWidget.forStringList(context, items)
		}
		ELSE {
			return RadioButtonGroupWidget.forGroup(context, element.getPropertyString("groupName"), items.toVectorOfStrings())
		}
	}
	if element.isType("MultipleChoiceInput") {
		var kvl = new KeyValueList<string,string>()
		var values = element.getPropertyVector("values")
		foreach value as DynamicMap in values {
			var key = value.getString("key")
			var val = value.getString("value")
			if key:
				kvl.add(key, val)
		}
		return SelectWidget.forKeyValueList(context, kvl)
	}
	if element.isType("CheckBoxInput") {
		var cbx = CheckBoxWidget.forText(context, element.getPropertyString("text"))
		cbx.setWidgetChecked(element.getPropertyBoolean("isChecked"))
		return cbx
	}
	if element.isType("DateInput") {
		var v = DateSelectorWidget.forContext(context)
		v.setSkipYears(element.getPropertyInteger("skipYears"))
		return(v)
	}
	if element.isType("StringListInput") {
		var v = new MyStringListInputWidget(context)
		v.setWidgetPlaceholder(element.getLabel())
		return(v)
	}
	var container as ContainerWidget
	if element.isType("VerticalContainer") {
		var vb = VerticalBoxWidget.forContext(context)
		if(formWidth > 0) {
			vb.setWidgetWidthRequest(formWidth)
		}
		vb.setWidgetSpacing(elementSpacing)
		var mgn = element.getPropertyString("margin")
		if String.isNotEmpty(mgn):
			vb.setWidgetMargin(context.getHeightValue(mgn))
		container = vb
	}
	else if element.isType("HorizontalContainer") {
		var hb = HorizontalBoxWidget.forContext(context)
		hb.setWidgetSpacing(elementSpacing)
		container = hb
	}
	else if element.isType("GroupContainer") {
		var vb = VerticalBoxWidget.forContext(context)
		if(formWidth > 0) {
			vb.setWidgetWidthRequest(formWidth)
		}
		vb.setWidgetSpacing(elementSpacing)
		var wlayer = LayerWidget.forContext(context)
		var bgc = getBackgroundColorForElement(element)
		wlayer.addWidget(CanvasWidget.forColor(context, bgc))
		var groupLabel = LabelWidget.forText(context, element.getPropertyString("title"))
		groupLabel.setWidgetTextColor(getAdjustedForegroundColor(element, bgc))
		wlayer.addWidget(LayerWidget.forWidget(context, groupLabel, context.getHeightValue("2mm")))
		vb.addWidget(wlayer)
		container = vb
	}
	if not container {
		// FIXME: Proper error reporting
		PRINT "Unsupported form declaration container encountered: `" .. element.getType() .. "'"
		return null
	}
	foreach child in element.getChildren() {
		var ww = createAndRegisterWidget(child)
		if not ww:
			continue
		var label = child.getLabel()
		if enableFieldLabels && not String.isEmpty(label) {
			var wlayer = LayerWidget.forContext(context)
			var bgc = getBackgroundColorForElement(child)
			wlayer.addWidget(CanvasWidget.forColor(context, bgc))
			var wbox = VerticalBoxWidget.forContext(context)
			var lw = LabelWidget.forText(context, label)
			lw.setWidgetTextColor(getAdjustedForegroundColor(child, bgc))
			lw.setWidgetFontSize(fieldLabelFontSize)
			if fieldLabelFontResource {
				lw.setWidgetFontResource(fieldLabelFontResource)
			}
			else {
				lw.setWidgetFontFamily(fieldLabelFontFamily)
			}
			var ss = context.getHeightValue("1mm")
			if not fieldLabelBelow {
				wbox.addWidget(LayerWidget.forWidget(context, lw)
					.setWidgetMarginLeft(ss)
					.setWidgetMarginRight(ss)
					.setWidgetMarginTop(ss))
				wbox.addWidget(ww, child.getPropertyDouble("weight"))
			}
			else {
				wbox.addWidget(ww, child.getPropertyDouble("weight"))
				wbox.addWidget(LayerWidget.forWidget(context, lw)
					.setWidgetMarginLeft(ss)
					.setWidgetMarginRight(ss)
					.setWidgetMarginTop(ss))
			}
			wlayer.addWidget(wbox)
			addToContainerWithWeight(container, wlayer, child.getPropertyDouble("weight"))
		}
		else {
			addToContainerWithWeight(container, ww, child.getPropertyDouble("weight"))
		}
	}
	return container
}

func addToContainerWithWeight(container as ContainerWidget, child as Widget, weight as double)
{
	if weight <= 0.0 {
		container.addWidget(child)
	}
	else if container is HorizontalBoxWidget {
		(container as! HorizontalBoxWidget).addWidget(child, weight)
	}
	else if container is VerticalBoxWidget {
		(container as! VerticalBoxWidget).addWidget(child, weight)
	}
	else {
		ERROR("Tried to add a widget with weight to a container that is not a box. Ignoring weight.")
		container.addWidget(child)
	}
}

func createAndRegisterWidget(element as FormDeclaration.Element) as Widget
{
	var v = assert createWidgetForElement(element)
	var vv = setStyleForWidget(v, true)
	var id = element.getId()
	if not String.isEmpty(id) {
		fieldsById[id] = v
	}
	return(vv)
}

func computeWidgetLayout(widthConstraint as int #notLiteral) override
{
	if alignWidget {
		if widthConstraint >= context.getWidthValue("120mm") {
			alignWidget.setAlignForIndex(0, 0.5, 0.5)
		}
		else {
			alignWidget.setAlignForIndex(0, 0.5, 0)
		}
	}
	base.computeWidgetLayout(widthConstraint)
}

func initializeWidget override
{
	base.initializeWidget()
	var declaration = assert getFormDeclaration()
	var root = assert declaration.getRoot()
	if widgetBackgroundColor:
		addWidget(CanvasWidget.forColor(context, widgetBackgroundColor))
	var box = VerticalBoxWidget.forContext(context)
	box.setWidgetMargin(formMargin)
	box.setWidgetSpacing(formMargin)
	var topWidget = createAndRegisterWidget(root)
	if topWidget:
		box.addWidget(topWidget, 1.0)
	if queueData:
		setFormData(queueData, preserveUnknownValuesForQueuedData)
	if not actions:
		addActions()
	if actions {
		var hbox = HorizontalBoxWidget.forContext(context)
		hbox.setWidgetSpacing(context.getHeightValue("1mm"))
		foreach action in actions {
			var button = TextButtonWidget.forText(context, action.label, action.handler)
			var bb = setStyleForTextButtonWidget(button, true)
			hbox.addWidget(bb, 1)
		}
		box.addWidget(hbox)
	}
	box.addWidget(customFooterWidget)
	var finalWidget as Widget
	if fillContainerWidget {
		finalWidget = box
	}
	else {
		alignWidget = AlignWidget.forWidget(context, box, 0.5, 0.5, 0)
		finalWidget = alignWidget
	}
	if enableScrolling {
		var scroller = VerticalScrollerWidget.forWidget(context, finalWidget)
		addWidget(scroller)
	}
	else {
		addWidget(finalWidget)
	}
}

func setFormData(data as DynamicMap, preserveUnknownValues as bool = false)
{
	if Map.count(fieldsById) < 1 {
		queueData = data
		preserveUnknownValuesForQueuedData = preserveUnknownValues
	}
	else {
		var keys as vector<string> #force = Map.getKeys(fieldsById)
		foreach key in keys {
			var value as object
			if data:
				value = data.get(key)
			setFieldData(key, value)
		}
		if preserveUnknownValues && data {
			preservedFormData = data.duplicateMap()
			preserveUnknownValuesForQueuedData = false
		}
	}
}

func setFieldData(id as string, value as object)
{
	var widget = assert Map.get(fieldsById, id) as WidgetWithValue
	widget.setWidgetValue(value)
}

func getFormDataTo(data as DynamicMap) virtual
{
	if not data:
		return
	if preservedFormData {
		var keys as vector<string> #force = preservedFormData.getKeys()
		foreach key in keys {
			data.set(key, preservedFormData.get(key))
		}
	}
	var keys as vector<string> #force = Map.getKeys(fieldsById)
	foreach key in keys {
		var widget = Map.get(fieldsById, key) as WidgetWithValue
		if not widget:
			continue
		data.set(key, widget.getWidgetValue())
	}
}

func getFormData as DynamicMap
{
	var v = new DynamicMap()
	getFormDataTo(v)
	return(v)
}

func clearFormData
{
	var clearData = new DynamicMap()
	var keys as vector<string> #force = Map.getKeys(fieldsById)
	foreach(key in keys) {
		clearData.set(key, null)
	}
	setFormData(clearData)
}

func getElementAsWidget(id as string) as Widget
{
	if not id:
		return null
	var widget = Map.get(fieldsById, id)
	if not widget:
		return null
	return widget
}
