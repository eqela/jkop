
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is Image:

depend "swift-import:UIKit"
depend "swift-import:CoreGraphics"
depend "swift-import:ImageIO"

func forUIImage(uiImage as !"UIImage") static as this
{
	var v = new this()
	v.uiImage = uiImage
	return v
}

func forBuffer(data as buffer) static as this
{
	var v = new this()
	assert v.readFromBuffer(data)
	return v
}

var uiImage public as !"UIImage"

func readFromBuffer(data as buffer) as bool
{
	assert data
	var img as !"UIImage"
	lang "swift" {{{
		img = UIImage(data: data as! Data)
	}}}
	assert img
	this.uiImage = img
	return true
}

func getPixelWidth override as int
{
	if uiImage == null:
		return 0
	var v as int
	lang "swift" {{{
		v = Int(uiImage?.size.width ?? 0)
	}}}
	return v
}

func getPixelHeight override as int
{
	if uiImage == null:
		return 0
	var v as int
	lang "swift" {{{
		v = Int(uiImage?.size.height ?? 0)
	}}}
	return v
}

func scaleToSize(w as int, h as int) override as Image
{
	if w < 0 || h < 0:
		return this
	var imageData #used = toPNGData()
	var img as !"UIImage"
	var maxSize = w
	if maxSize < h:
		maxSize = h
	lang "swift" {{{
		let cgImageSrcRef = CGImageSourceCreateWithData(imageData! as CFData, nil)
		let options = [
			kCGImageSourceCreateThumbnailWithTransform: true,
			kCGImageSourceCreateThumbnailFromImageAlways: true,
			kCGImageSourceThumbnailMaxPixelSize: maxSize] as? CFDictionary?
		let cgImageRefInput = CGImageSourceCreateThumbnailAtIndex(cgImageSrcRef!, 0, options!)!
		let cgSize = CGSize(width: w, height: h)
		let cgContextRef = CGContext(data: nil, width: Int(cgSize.width), height: Int(cgSize.height), bitsPerComponent: 8, bytesPerRow: 0, space: CGColorSpaceCreateDeviceRGB(), bitmapInfo: CGImageAlphaInfo.premultipliedLast.rawValue)
		let cgRect = CGRect(x: 0, y: 0, width: w, height: h)
		cgContextRef?.draw(cgImageRefInput, in: cgRect)
		let cgImageRefOutput = cgContextRef!.makeImage()
		img = UIImage(cgImage: cgImageRefOutput!)
	}}}
	if !img:
		return null
	return forUIImage(img)
}

func scaleToSize(w as int, h as int, callback as function<void, Image>) override
{
	assert callback
	callback(scaleToSize(w, h))
}

func scaleToWidth(w as int) override as Image:
	return scaleToSize(w, getProportionalHeight(w))

func scaleToWidth(w as int, callback as function<void, Image>) override
{
	assert callback
	callback(scaleToWidth(w))
}

func scaleToHeight(h as int) override as Image:
	return scaleToSize(getProportionalWidth(h), h)

func scaleToHeight(h as int, callback as function<void, Image>) override
{
	assert callback
	callback(scaleToHeight(h))
}

func crop(x as int, y as int, w as int, h as int) override as Image
{
	var img as !"UIImage"
	lang "swift" {{{
		var rect = CGRect(x: x, y: y, width: w, height: h)
		var imageRef = uiImage?.cgImage?.cropping(to: rect)
		img = UIImage(cgImage: imageRef!)
	}}}
	return forUIImage(img)
}

func crop(x as int, y as int, w as int, h as int, callback as function<void, Image>) override
{
	assert callback
	callback(crop(x, y, w, h))
}

func toRGBAData override stub as buffer

func toJPGData override as buffer
{
	if !uiImage:
		return null
	var v as buffer
	lang "swift" {{{
		v = NSMutableData(data: (uiImage?.jpegData(compressionQuality: 1.0))!)

	}}}
	return v
}

func toPNGData override as buffer
{
	if !uiImage:
		return null
	var v as buffer
	lang "swift" {{{
		if(!(uiImage?.imageOrientation == UIImage.Orientation.up || uiImage?.imageOrientation == UIImage.Orientation.upMirrored))
		{
			let imgsize = uiImage?.size
			UIGraphicsBeginImageContext(imgsize!)
			uiImage?.draw(in: CGRect(x: 0.0, y: 0.0, width: imgsize!.width, height: imgsize!.height))
			uiImage = UIGraphicsGetImageFromCurrentImageContext()
			UIGraphicsEndImageContext()
		}
		v = NSMutableData(data: (uiImage?.pngData())!)
	}}}
	return v
}

func releaseImage override:
	uiImage = null

func forFile(file as File) static as this
{
	var v = new this()
	assert v.readFromFile(file)
	return v
}

func readFromFile(file as File) as bool
{
	assert file
	var pp = file.getPath()
	assert String.isNotEmpty(pp)
	var img as !"UIImage"
	lang "swift" {{{
		img = UIImage(contentsOfFile: pp!)
	}}}
	assert img
	this.uiImage = img
	return true
}

func getSwiftBitmap as !"UIImage":
	return uiImage
