
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is ScreenAwareWidget #widget:

IFDEF "target_android"
{
	depend "gradle:com.google.android.gms:play-services-maps:11.0.0"
	depend "gradle:com.google.android.gms:play-services-location:11.0.0"
	depend "androidPermission:android.permission.INTERNET"
	depend "androidPermission:android.permission.ACCESS_NETWORK_STATE"
	basetype !"com.google.android.gms.maps.StreetViewPanoramaView" type extends
	basetype !"com.google.android.gms.maps.OnStreetViewPanoramaReadyCallback" type implements
	basetype Widget type isAlso
	basetype ResizeAwareWidget type implements

	func onWidgetResized
	{
		var thisWidth #used = Widget.getWidth(this)
		var thisHeight #used = Widget.getHeight(this)
		var thisX #used = Widget.getX(this)
		var thisY #used = Widget.getY(this)
		IFDEF "target_java" {
			lang "java" {{{
				if(thisWidth > 0 && thisHeight > 0) {
					int msw = android.view.View.MeasureSpec.UNSPECIFIED;
					int msh = android.view.View.MeasureSpec.UNSPECIFIED;
					msw = android.view.View.MeasureSpec.makeMeasureSpec(thisWidth, android.view.View.MeasureSpec.EXACTLY);
					msh = android.view.View.MeasureSpec.makeMeasureSpec(thisHeight, android.view.View.MeasureSpec.EXACTLY);
					measure(msw, msh);
					layout(thisX, thisY, thisWidth+thisX, thisHeight+thisY);
				}
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				if (thisWidth > 0 && thisHeight > 0) {
					var msw : kotlin.Int = android.view.View.MeasureSpec.UNSPECIFIED
					var msh : kotlin.Int = android.view.View.MeasureSpec.UNSPECIFIED
					msw = android.view.View.MeasureSpec.makeMeasureSpec(thisWidth, android.view.View.MeasureSpec.EXACTLY)
					msh = android.view.View.MeasureSpec.makeMeasureSpec(thisHeight, android.view.View.MeasureSpec.EXACTLY)
					measure(msw, msh)
					layout(thisX, thisY, thisWidth + thisX, thisHeight + thisY)
				}
			}}}
		}
	}

	func onStreetViewPanoramaReady (streetView as !"com.google.android.gms.maps.StreetViewPanorama")
	{
		IFDEF "target_java" {
			lang "java" {{{
				streetView.setPanningGesturesEnabled(true);
				streetView.setStreetNamesEnabled(true);
				streetView.setUserNavigationEnabled(true);
				streetView.setZoomGesturesEnabled(true);
				com.google.android.gms.maps.model.LatLng pos = new com.google.android.gms.maps.model.LatLng(14.4306972, 121.0361416);
				streetView.setPosition(pos);
				com.google.android.gms.maps.model.StreetViewPanoramaCamera.Builder cambuilder = new com.google.android.gms.maps.model.StreetViewPanoramaCamera.Builder();
				cambuilder.zoom(streetView.getPanoramaCamera().zoom);
				cambuilder.tilt((float)30);
				cambuilder.bearing((float)20);
				streetView.animateTo(cambuilder.build(), 20);
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				streetView!!.setPanningGesturesEnabled(true)
				streetView!!.setStreetNamesEnabled(true)
				streetView!!.setUserNavigationEnabled(true)
				streetView!!.setZoomGesturesEnabled(true)
				var pos : com.google.android.gms.maps.model.LatLng = com.google.android.gms.maps.model.LatLng(14.426148, 121.027623)
				streetView!!.setPosition(pos)
				var cambuilder : com.google.android.gms.maps.model.StreetViewPanoramaCamera.Builder = com.google.android.gms.maps.model.StreetViewPanoramaCamera.Builder()
				cambuilder.zoom(streetView!!.getPanoramaCamera().zoom)
				cambuilder.tilt(30.toFloat())
				cambuilder.bearing(20.toFloat())
				streetView!!.animateTo(cambuilder.build(), 20)
			}}}
		}
	}
}

ELSE IFDEF "target_swift"
{
	depend "swift-import:GoogleMaps"

	basetype !"GMSMapViewDelegate" type implements
	basetype !"GMSPanoramaView" type extends
	basetype Widget type isAlso
}

var context as GuiApplicationContext

ctor(context as GuiApplicationContext)
{
	IFDEF "target_android" {
		base((context as! cave.GuiApplicationContextForAndroid).getActivityContext())
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			super.init(frame: CGRect.zero)
		}}}
	}
	this.context = context
}

func onWidgetAddedToScreen(screen as ScreenForWidget)
{
	IFDEF "target_html" {
	}
	ELSE IFDEF "target_ios_objc" {
	}
	ELSE IFDEF "target_android" {
		var myObject #used = this
		IFDEF "target_java" {
			lang "java" {{{
				onCreate(new android.os.Bundle());
				onResume();
				getStreetViewPanoramaAsync(myObject);
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				onCreate(android.os.Bundle())
				onResume()
				getStreetViewPanoramaAsync(myObject)
			}}}
		}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			self.orientationGestures = true
			self.streetNamesHidden = true
			self.navigationGestures = true
			self.zoomGestures = true
			self.moveNearCoordinate(CLLocationCoordinate2D(latitude: 14.426148, longitude: 121.027623))
			let camera = GMSPanoramaCamera(heading: 20, pitch: 30, zoom: self.camera.zoom)
			self.camera = camera
		}}}
	}
}

func onWidgetRemovedFromScreen(screen as ScreenForWidget)
{
}
