
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is IOManager private:

depend "objc-header-m:<stdio.h>"
depend "objc-header-m:<stdlib.h>"
depend "objc-header-m:<errno.h>"
depend "objc-header-m:<string.h>"
depend "objc-header-m:<sys/select.h>"
depend "objc-header-m:<unistd.h>"

class MyEntry is IOManagerEntry is FileDescriptor
{
	prop fdo as FileDescriptor
	prop master as parent
	var rrl as function
	var wrl as function
	var added = false

	func getFileDescriptor as int
	{
		if(fdo == null) {
			return(-1)
		}
		return(fdo.getFileDescriptor())
	}

	func onReadReady
	{
		var rrl = this.rrl
		if(rrl != null) {
			rrl()
		}
	}

	func onWriteReady
	{
		var wrl = this.wrl
		if(wrl != null) {
			wrl()
		}
	}

	func setListeners(rrl as function, wrl as function)
	{
		this.rrl = rrl
		this.wrl = wrl
		update()
	}

	func setReadListener(rrl as function)
	{
		this.rrl = rrl
		update()
	}

	func setWriteListener(wrl as function)
	{
		this.wrl = wrl
		update()
	}

	func update
	{
		remove()
		if(fdo == null || master == null) {
			return
		}
		if(rrl == null && wrl == null) {
			return
		}
		if(rrl != null) {
			master.addToReadList(this)
		}
		if(wrl != null) {
			master.addToWriteList(this)
		}
		added = true
	}

	func remove
	{
		if(added == false || master == null) {
			return
		}
		master.removeFromReadList(this)
		master.removeFromWriteList(this)
		added = false
	}
}

var exitflag as bool
var running = false
var commpipewritefd = -1
var readlist as vector<IOManagerEntry> = null
var writelist as vector<IOManagerEntry> = null
var listActionQueue as vector<ListAction> = null

ctor
{
	readlist = new vector<IOManagerEntry>
	writelist = new vector<IOManagerEntry>
}

class ListAction
{
	const ADD_TO_READ_LIST = 0
	const REMOVE_FROM_READ_LIST = 1
	const ADD_TO_WRITE_LIST = 2
	const REMOVE_FROM_WRITE_LIST = 3
	var entry public as IOManagerEntry
	var op public as int

	ctor(entry as IOManagerEntry, op as int)
	{
		this.entry = entry
		this.op = op
	}
}

func addToReadList(entry as IOManagerEntry)
{
	if(listActionQueue != null) {
		listActionQueue += new ListAction(entry, ListAction.ADD_TO_READ_LIST)
		return
	}
	readlist += entry
}

func addToWriteList(entry as IOManagerEntry)
{
	if(listActionQueue != null) {
		listActionQueue += new ListAction(entry, ListAction.ADD_TO_WRITE_LIST)
		return
	}
	writelist += entry
}

func removeFromReadList(entry as IOManagerEntry)
{
	if(listActionQueue != null) {
		listActionQueue += new ListAction(entry, ListAction.REMOVE_FROM_READ_LIST)
		return
	}
	Vector.removeValue(readlist, entry)
}

func removeFromWriteList(entry as IOManagerEntry)
{
	if(listActionQueue != null) {
		listActionQueue += new ListAction(entry, ListAction.REMOVE_FROM_WRITE_LIST)
		return
	}
	Vector.removeValue(writelist, entry)
}

func add(o as object) override as IOManagerEntry
{
	var fdo = o as FileDescriptor
	if(fdo == null) {
		return(null)
	}
	return(new MyEntry().setMaster(this).setFdo(fdo))
}

func executeSelect(ctx as LoggingContext, fdr as !"fd_set*", fdw as !"fd_set*", timeout as int) private as bool
{
	var n = 0
	var fd as int
	lang "objc" {{{
		FD_ZERO(fdr);
		FD_ZERO(fdw);
	}}}
	var rc = 0
	var wc = 0
	foreach(o as FileDescriptor in readlist) {
		fd = o.getFileDescriptor()
		if(fd < 0) {
			lang "objc" {{{
				FD_ZERO(fdr);
				FD_ZERO(fdw);
			}}}
			return(true)
		}
		if(fd >= 0) {
			lang "objc" {{{
				FD_SET(fd, fdr);
			}}}
		}
		if(fd > n) {
			n = fd
		}
		rc++
	}
	foreach(o as FileDescriptor in writelist) {
		fd = o.getFileDescriptor()
		if(fd < 0) {
			lang "objc" {{{
				FD_ZERO(fdr);
				FD_ZERO(fdw);
			}}}
			return(true)
		}
		if(fd >= 0) {
			lang "objc" {{{
				FD_SET(fd, fdw);
			}}}
		}
		if(fd > n) {
			n = fd
		}
		wc++
	}
	var nc = 0
	if(n > 0) {
		nc = n + 1
	}
	var r = -1
	if(timeout < 0) {
		lang "objc" {{{ r = select(nc, fdr, fdw, (void*)0, (void*)0); }}}
	}
	else {
		lang "objc" {{{
			struct timeval tv;
			tv.tv_sec = (long)timeout / 1000000;
			tv.tv_usec = (long)timeout % 1000000;
			r = select(nc, fdr, fdw, (void*)0, &tv);
		}}}
	}
	var v = false
	if(r < 0) {
		var err as string
		lang "objc" {{{
			if(errno != EINTR) {
				char* ee = strerror(errno);
				if(ee != NULL) {
					err = [[NSString alloc] initWithUTF8String:ee];
				}
			}
		}}}
		if(err != null) {
			Log.error(ctx, "Call to select() returned error status " .. String.forInteger(r) .. ": " .. err)
		}
	}
	else if(r > 0) {
		v = true
	}
	return(v)
}

func doExecute(ctx as LoggingContext) override as bool
{
	exitflag = false
	running = true
	var prd = -1
	var pfd = -1
	lang "objc" {{{
		int pipes[2];
		if(pipe(pipes) != 0) {
			[CapeLog error:ctx message:@"SelectEngine: Failed to create controller pipe"];
			return(FALSE);
		}
		prd = pipes[0];
		pfd = pipes[1];
		if(prd < 0 || pfd < 0) {
			[CapeLog error:ctx message:@"SelectEngine: One of the controller pipes was invalid"];
			return(FALSE);
		}
	}}}
	var ee = add(StaticFileDescriptor.forFileDescriptor(prd))
	if(ee != null) {
		ee.setReadListener(func {
			var fd #used = prd
			lang "objc" {{{
				char b[16];
				read(fd, b, 16);
			}}}
		})
	}
	var fdsetr as !"fd_set*"
	var fdsetw as !"fd_set*"
	lang "objc" {{{
		fd_set fdr;
		fd_set fdw;
		fdsetr = &fdr;
		fdsetw = &fdw;
	}}}
	commpipewritefd = pfd
	Log.debug(ctx, "SelectEngine started")
	while(exitflag == false) {
		if(executeSelect(ctx, fdsetr, fdsetw, -1) == false) {
			continue
		}
		listActionQueue = new vector<ListAction>
		foreach(ele as MyEntry in readlist) {
			var fd #used = ele.getFileDescriptor()
			lang "objc" {{{
				if(fd < 0 || FD_ISSET(fd, fdsetr) != 0) {
					if(fd >= 0) {
						FD_CLR(fd, fdsetr);
					}
					[ele onReadReady];
				}
			}}}
		}
		foreach(ele as MyEntry in writelist) {
			var fd #used = ele.getFileDescriptor()
			lang "objc" {{{
				if(fd < 0 || FD_ISSET(fd, fdsetw) != 0) {
					if(fd >= 0) {
						FD_CLR(fd, fdsetw);
					}
					[ele onWriteReady];
				}
			}}}
		}
		var lq = listActionQueue
		listActionQueue = null
		foreach(action as ListAction in lq) {
			if(action.op == ListAction.ADD_TO_READ_LIST) {
				addToReadList(action.entry)
			}
			else if(action.op == ListAction.REMOVE_FROM_READ_LIST) {
				removeFromReadList(action.entry)
			}
			else if(action.op == ListAction.ADD_TO_WRITE_LIST) {
				addToWriteList(action.entry)
			}
			else if(action.op == ListAction.REMOVE_FROM_WRITE_LIST) {
				removeFromWriteList(action.entry)
			}
		}
	}
	lang "objc" {{{
		close(pipes[0]);
		close(pipes[1]);
	}}}
	commpipewritefd = -1
	running = false
	Log.debug(ctx, "SelectEngine ended")
	return(true)
}

func stop override
{
	exitflag = true
	if(commpipewritefd >= 0) {
		lang "objc" {{{
			char c = 1;
			write(commpipewritefd, &c, 1);
		}}}
	}
}

func isRunning as bool
{
	return(running)
}
