
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.os
import jk.fs
import jk.env
import jk.process

class:

func generate static as this
{
	var openssl = ExternalCommand.findInPath("openssl")
	if not openssl:
		Error.throw("commandNotFound", "openssl")
	var pl = ProcessLauncher.forFile(openssl)
	if not pl:
		Error.throw("failedToCreate", "ProcessLauncher")
    pl.setDetachFromTerminal(true)
	var dir = TemporaryDirectory.create()
	if not dir:
		Error.throw("failedToCreate", "TemporaryDirectory")
    var privateFile = dir.entry("private.key")
    var publicFile = dir.entry("public.key")
	pl.addToParams("genrsa")
	pl.addToParams("-out")
	pl.addToParams(privateFile.getPath())
	pl.addToParams("2048")
	pl.setCwd(dir)
	pl.executeSilent()
    if not privateFile.isFile() {
        dir.removeRecursive()
        Error.throw("failedToGenerate", "rsaPrivateKey")
    }
	pl = ProcessLauncher.forFile(openssl)
	if not pl {
        dir.removeRecursive()
		Error.throw("failedToCreate", "ProcessLauncher")
    }
    pl.setDetachFromTerminal(true)
	pl.addToParams("rsa")
	pl.addToParams("-in")
	pl.addToParams(privateFile.getPath())
	pl.addToParams("-pubout")
	pl.addToParams("-out")
	pl.addToParams(publicFile.getPath())
	pl.executeSilent()
    if not publicFile.isFile() {
        dir.removeRecursive()
        Error.throw("failedToGenerate", "rsaPublicKey")
    }
    var v = new this()
    v.privateKey = privateFile.getContentsUTF8()
    v.publicKey = publicFile.getContentsUTF8()
	dir.removeRecursive()
	return v
}

prop privateKey as string
prop publicKey as string
