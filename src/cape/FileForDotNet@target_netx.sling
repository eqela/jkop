
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is File private:

lang "cs" {{{
	[System.Runtime.InteropServices.DllImport("kernel32.dll", SetLastError = true)]
	[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.Bool)]
	static extern bool DeleteFileW([System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.LPWStr)]string lpFileName);

	[System.Runtime.InteropServices.DllImport("kernel32.dll", SetLastError = true)]
	[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.Bool)]
	static extern bool RemoveDirectoryW([System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.LPWStr)]string lpFileName);

	[System.Runtime.InteropServices.DllImport("kernel32.dll")]
	[return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.I4)]
	static extern int GetLastError();
}}}

class MyFileReader is DotNetStreamReader
{
	prop file as parent

	func initialize(fileName as string) as bool
	{
		assert fileName
		var v = true
		lang "cs" {{{
			try {
				setStream(System.IO.File.OpenRead(fileName));
			}
			catch(System.Exception e) {
				file.onError(e.ToString());
				setStream(null);
				v = false;
			}
		}}}
		return v
	}
}

class MyFileWriter is FileWriter is DotNetStreamWriter
{
	prop append as bool
	prop file as parent

	func initialize(fileName as string) as bool
	{
		assert fileName
		var v = true
		lang "cs" {{{
			try {
				if(append) {
					setStream(System.IO.File.Open(fileName, System.IO.FileMode.Append));
				}
				else {
					setStream(System.IO.File.Open(fileName, System.IO.FileMode.Create));
				}
			}
			catch(System.Exception e) {
				file.onError(e.ToString());
				setStream(null);
				v = false;
			}
		}}}
		return v
	}
}

func forPath(path as string) static as File
{
	var v = new this()
	v.setCompletePath(path)
	return v
}

var completePath as string

func withExtension(ext as string) override as File
{
	if not ext:
		return this
	var v = new this()
	if completePath:
		v.setCompletePathRaw(completePath .. "." .. ext)
	return v
}

func setCompletePathRaw(v as string):
	completePath = v

func setCompletePath(v as string)
{
	if String.isEmpty(v) {
		completePath = null
		return
	}
	var x = v
	lang "cs" {{{
		string delim = new System.String(System.IO.Path.DirectorySeparatorChar, 1);
		while(x.EndsWith(delim) && x.Length > 1) {
			x = x.Substring(0, x.Length-1);
		}
	}}}
	if OS.isWindows() {
		var l = String.getLength(x)
		var c1 = String.getChar(x, 1)
		if l == 2 && c1 == ':' {
			completePath = x .. "\\"
			return
		}
		if l == 3 && c1 == ':' && String.getChar(x, 2) == '\\' {
			completePath = x
			return
		}
	}
	lang "cs" {{{
		try {
			completePath = System.IO.Path.GetFullPath(x);
		}
		catch(System.Exception e) {
			onError(e.ToString());
			completePath = x;
		}
	}}}
}

func entry(name as string) override as File
{
	onError(null)
	if name == null || String.getLength(name) < 1:
		return this
	var v = new this()
	if completePath == null {
		v.setCompletePath(name)
	}
	else {
		v.setCompletePath(lang "cs" string {{{ System.IO.Path.Combine(completePath, name) }}})
	}
	return v
}

func getParent override as File
{
	onError(null)
	var v as string
	lang "cs" {{{
		if(completePath != null) {
			var di = System.IO.Directory.GetParent(completePath);
			if(di != null) {
				v = di.FullName;
			}
		}
		if(v == null) {
			v = completePath;
		}
	}}}
	var r = new this()
	r.setCompletePathRaw(v)
	return r
}

class MyIterator is Iterator<File>
{
	prop completePath as string
	prop file as parent

	lang "cs"
	{{{
		public System.Collections.IEnumerator it;
	}}}

	func next as File
	{
		var str as string
		lang "cs"
		{{{
			try {
				if(it == null) {
					return(null);
				}
				if(it.MoveNext() == false) {
					return(null);
				}
				str = it.Current as string;
				if(str == null) {
					return(null);
				}
				str = System.IO.Path.Combine(completePath, str);
			}
			catch(System.Exception e) {
				file.onError(e.ToString());
				return(null);
			}
		}}}
		var v = new parent()
		v.setCompletePathRaw(str)
		return v
	}
}

func entries override as Iterator<File>
{
	onError(null)
	assert completePath
	var v = new MyIterator()
	v.setFile(this)
	v.setCompletePath(completePath)
	lang "cs" {{{
		try {
			System.Collections.IEnumerable cc = System.IO.Directory.EnumerateFileSystemEntries(completePath);
			v.it = cc.GetEnumerator();
		}
		catch(System.Exception e) {
			onError(e.ToString());
			return(null);
		}
	}}}
	return v
}

func move(dest as File, replace as bool) override as bool
{
	onError(null)
	if not dest {
		onError("null destination")
		return false
	}
	if dest.exists() {
		if not replace {
			onError("target file already exists")
			return false
		}
		if dest.remove() == false {
			onError("Error when removing `" .. dest.getPath() .. "': " .. dest.getLastErrorDescription())
			return false
		}
	}
	var destf = assert dest as this
	var v = true
	lang "cs" {{{
		try {
			if(System.IO.Directory.Exists(completePath)) {
				System.IO.Directory.Move(completePath, destf.completePath);
			}
			else {
				System.IO.File.Move(completePath, destf.completePath);
			}
		}
		catch(System.Exception e) {
			onError(e.ToString());
			v = false;
		}
	}}}
	return v
}

func touch override as bool
{
	onError(null)
	assert completePath
	var v = true
	lang "cs"
	{{{
		try {
			var fi = new System.IO.FileInfo(completePath);
			if(fi.Exists) {
				System.IO.File.SetLastWriteTime(completePath, System.DateTime.Now);
			}
			else {
				System.IO.File.Create(completePath).Dispose();
			}
		}
		catch(System.Exception e) {
			onError(e.ToString());
			v = false;
		}
	}}}
	return v
}

func getMyReader private as MyFileReader
{
	onError(null)
	var v = new MyFileReader()
	v.setFile(this)
	assert v.initialize(completePath)
	return v
}

func read override as FileReader
{
	onError(null)
	return getMyReader()
}

func write override as FileWriter
{
	onError(null)
	var v = new MyFileWriter()
	v.setFile(this)
	lang "cs"
	{{{
		if(v.initialize(completePath) == false) {
			v = null;
		}
	}}}
	return v
}

func append override as FileWriter
{
	onError(null)
	var v = new MyFileWriter()
	v.setFile(this)
	v.setAppend(true)
	lang "cs"
	{{{
		if(v.initialize(completePath) == false) {
			v = null;
		}
	}}}
	return v
}

func makeExecutable override as bool
{
	onError(null)
	if OS.isLinux() || OS.isMacOS() {
		var pl = ProcessLauncher.forCommand("chmod")
		pl.addToParams("+x")
		pl.addToParams(completePath)
		if pl.executeSilent() == 0:
			return true
	}
	lang "cs" {{{
		if(System.Type.GetType("Mono.Runtime") != null) {
			try {
				System.IO.File.SetAttributes(completePath, (System.IO.FileAttributes)((int)System.IO.File.GetAttributes(completePath) | 0x80000000));
			}
			catch(System.Exception e) {
				onError(e.ToString());
				return false;
			}
		}
	}}}
	return true
}

func setMode(mode as int) override as bool
{
	onError(null)
	if OS.isLinux() || OS.isMacOS() {
		var pl = ProcessLauncher.forCommand("chmod")
		if pl {
			pl.addToParams(String.forIntegerOctal(mode))
			pl.addToParams(completePath)
			assert pl.executeSilent() == 0:
				onError("Failed to execute chmod")
			return true
		}
	}
	return false
}

func setOwnerUser(uid as int) override as bool
{
	onError(null)
	if OS.isLinux() || OS.isMacOS() {
		var pl = ProcessLauncher.forCommand("chown")
		if pl {
			pl.addToParams(String.forInteger(uid))
			pl.addToParams(completePath)
			assert pl.executeSilent() == 0:
				onError("Failed to execute chown")
			return true
		}
	}
	return false
}

func setOwnerGroup(gid as int) override as bool
{
	onError(null)
	if OS.isLinux() || OS.isMacOS() {
		var pl = ProcessLauncher.forCommand("chgrp")
		if pl {
			pl.addToParams(String.forInteger(gid))
			pl.addToParams(completePath)
			assert pl.executeSilent() == 0:
				onError("Failed to execute chgrp")
			return true
		}
	}
	return false
}

class MyFileInfo is FileInfo
{
	var statsUpdated = false

	func getCompletePath as string
	{
		var f = assert getFile()
		return f.getPath()
	}

	func updateStats
	{
		assert statsUpdated == false
		assert OS.isLinux() || OS.isMacOS()
		var pl = assert ProcessLauncher.forCommand("stat")
		if OS.isMacOS() {
			pl.addToParams("-f")
			pl.addToParams("%Xp %u %g")
		}
		else {
			pl.addToParams("-c")
			pl.addToParams("%f %u %g")
		}
		pl.addToParams(getCompletePath())
		var ss = assert String.strip(pl.executeToString())
		var comps = assert String.split(ss, ' ')
		var mode = Vector.get(comps, 0)
		var uid = Vector.get(comps, 1)
		var gid = Vector.get(comps, 2)
		if mode:
			setMode(String.toIntegerFromHex(mode) & 0x1FF)
		if uid:
			setOwnerUser(String.toInteger(uid))
		if gid:
			setOwnerGroup(String.toInteger(gid))
		statsUpdated = true
	}

	func getMode override as int
	{
		updateStats()
		return base.getMode()
	}

	func getOwnerUser override as int
	{
		updateStats()
		return base.getOwnerUser()
	}

	func getOwnerGroup override as int
	{
		updateStats()
		return base.getOwnerGroup()
	}

	func getExecutable override as bool
	{
		if OS.isLinux() || OS.isMacOS() {
			var mode = getMode()
			if mode & 0x40:
				return true
			return false
		}
		return true
	}
}

func stat override as FileInfo
{
	onError(null)
	var v = new MyFileInfo()
	v.setFile(this)
	v.setLink(false)
	v.setType(FileInfo.FILE_TYPE_UNKNOWN)
	if completePath {
		lang "cs" {{{
			try {
				var attrs = System.IO.File.GetAttributes(completePath);
				if(attrs.HasFlag(System.IO.FileAttributes.Directory)) {
					v.setType(FileInfo.FILE_TYPE_DIR);
					if(attrs.HasFlag(System.IO.FileAttributes.ReparsePoint)) {
						v.setLink(true);
					}
				}
				else {
					v.setType(FileInfo.FILE_TYPE_FILE);
				}
			}
			catch(System.Exception e) {
				onError(e.ToString());
			}
		}}}
		if v.getType() == FileInfo.FILE_TYPE_FILE {
			lang "cs" {{{
				try {
					var dnfi = new System.IO.FileInfo(completePath);
					v.setSize((int)dnfi.Length);
					v.setCreateTime((long)dnfi.CreationTime.Subtract(new System.DateTime(1970, 1, 1)).TotalSeconds);
					v.setAccessTime((long)dnfi.LastAccessTime.Subtract(new System.DateTime(1970, 1, 1)).TotalSeconds);
					v.setModifyTime((long)dnfi.LastWriteTime.Subtract(new System.DateTime(1970, 1, 1)).TotalSeconds);
				}
				catch(System.Exception e) {
					onError(e.ToString());
				}
			}}}
		}
	}
	return v
}

func createDirectory override as bool
{
	onError(null)
	var v = false
	lang "cs"
	{{{
		try {
			System.IO.Directory.CreateDirectory(completePath);
			v = true;
		}
		catch(System.Exception e) {
			onError(e.ToString());
			v = false;
		}
	}}}
	return v
}

func createDirectoryRecursive override as bool
{
	onError(null)
	return createDirectory()
}

func remove override as bool
{
	onError(null)
	var v = true
	if OS.isWindows() {
		var ec as int
		var ff as string
		lang "cs" {{{
			ff = @"\\?\" + completePath;
			v = DeleteFileW(ff);
			if(v == false) {
				ec = GetLastError();
			}
		}}}
		if v == false:
			onError("Failed to DeleteFileW: `" .. ff .. "': " .. String.forInteger(ec))
	}
	else {
		lang "cs"
		{{{
			try {
				System.IO.File.Delete(completePath);
			}
			catch(System.Exception e) {
				onError(e.ToString());
				v = false;
			}
		}}}
	}
	return v
}

func removeDirectory override as bool
{
	onError(null)
	var v = true
	if OS.isWindows() {
		var ff as string
		var ec as int
		lang "cs" {{{
			ff = @"\\?\" + completePath;
			v = RemoveDirectoryW(ff);
			if(v == false) {
				ec = GetLastError();
			}
		}}}
		if v == false:
			onError("Failed to RemoveDirectoryW: `" .. ff .. "'" .. String.forInteger(ec))
	}
	else {
		lang "cs"
		{{{
			try {
				System.IO.Directory.Delete(completePath);
			}
			catch(System.Exception e) {
				onError(e.ToString());
				v = false;
			}
		}}}
	}
	return v
}

func getPath override as string:
	return completePath

func getBasename override as string
{
	onError(null)
	var path = assert completePath
	var rs = String.lastIndexOf(path, lang "cs" char {{{ System.IO.Path.DirectorySeparatorChar }}})
	if rs < 0:
		return path
	return String.subString(path, rs+1)
}

func getContentsBuffer override as buffer
{
	onError(null)
	assert completePath
	var buffer as buffer
	try {
		buffer = lang "cs" buffer {{{ System.IO.File.ReadAllBytes(completePath) }}}
	}
	catch e as exception {
		lang "cs" {{{
			onError(e.ToString());
		}}}
	}
	return buffer
}

func getContentsString(encoding as string) override as string
{
	onError(null)
	assert completePath
	var v as string
	if encoding == null {
		lang "cs" {{{
			try {
				v = System.IO.File.ReadAllText(completePath);
			}
			catch(System.Exception e) {
				onError(e.ToString());
				v = null;
			}
		}}}
	}
	else if encoding == "UTF-8" {
		lang "cs" {{{
			try {
				v = System.IO.File.ReadAllText(completePath, System.Text.Encoding.UTF8);
			}
			catch(System.Exception e) {
				onError(e.ToString());
				v = null;
			}
		}}}
	}
	else if encoding == "ASCII" {
		lang "cs" {{{
			try {
				v = System.IO.File.ReadAllText(completePath, System.Text.Encoding.ASCII);
			}
			catch(System.Exception e) {
				onError(e.ToString());
				v = null;
			}
		}}}
	}
	else if encoding == "UCS2" {
		lang "cs" {{{
			try {
				v = System.IO.File.ReadAllText(completePath, System.Text.Encoding.Unicode);
			}
			catch(System.Exception e) {
				onError(e.ToString());
				v = null;
			}
		}}}
	}
	else if encoding == "UTF-7" {
		lang "cs" {{{
			try {
				v = System.IO.File.ReadAllText(completePath, System.Text.Encoding.UTF7);
			}
			catch(System.Exception e) {
				onError(e.ToString());
				v = null;
			}
		}}}
	}
	else if encoding == "UTF-32" {
		lang "cs" {{{
			try {
				v = System.IO.File.ReadAllText(completePath, System.Text.Encoding.UTF32);
			}
			catch(System.Exception e) {
				onError(e.ToString());
				v = null;
			}
		}}}
	}
	else if encoding == "ANSI" {
		lang "cs" {{{
			try {
				v = System.IO.File.ReadAllText(completePath, System.Text.Encoding.Default);
			}
			catch(System.Exception e) {
				onError(e.ToString());
				v = null;
			}
		}}}
	}
	else {
		lang "cs" {{{
			try {
				v = System.IO.File.ReadAllText(completePath);
			}
			catch(System.Exception e) {
				onError(e.ToString());
				v = null;
			}
		}}}
	}
	return v
}

func setContentsBuffer(buf as buffer) override as bool
{
	onError(null)
	assert buf
	lang "cs"
	{{{
		try {
			System.IO.File.WriteAllBytes(completePath, buf);
		}
		catch(System.Exception e) {
			onError(e.ToString());
			return(false);
		}
	}}}
	return true
}

func setContentsString(str as string, encoding as string) override as bool
{
	onError(null)
	assert str
	lang "cs"
	{{{
		System.Text.Encoding ee;
		if(encoding == null || encoding.Equals("UTF-8") || encoding.Equals("UTF8")) {
			ee = new System.Text.UTF8Encoding(false);
		}
		else if(encoding.Equals("ASCII")) {
			ee = System.Text.Encoding.ASCII;
		}
		else if(encoding.Equals("UCS-2") || encoding.Equals("UCS2")) {
			ee = new System.Text.UnicodeEncoding(false, false);
		}
		else {
			return(false);
		}
		try {
			System.IO.File.WriteAllText(completePath, str, ee);
		}
		catch(System.Exception e) {
			onError(e.ToString());
			return(false);
		}
	}}}
	return true
}
