
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is LayerWidget #widget:

func forItems(ctx as GuiApplicationContext, items as vector<Widget>, color as Color = null) static as this
{
	var v = new this(ctx)
	v.setWidgetItems(items)
	v.setWidgetBackgroundColor(color)
	return v
}

pvar defaultActionItemWidgetBackgroundColor as Color
pvar defaultActionItemWidgetTextColor as Color
pvar widgetBackgroundColor as Color
pvar widgetItems as vector<Widget>
var overlayWidget as LayerWidget

func addToWidgetItems(widget as Widget)
{
	if not widget:
		return
	if not widgetItems:
		widgetItems = new vector<Widget>
	widgetItems += widget
}

func determineBackgroundColor as Color
{
	var wc = widgetBackgroundColor
	if not wc:
		wc = Color.white()
	return wc
}

func determineTextColor(backgroundColor as Color, textColor as Color, defaultTextColor as Color) private as Color
{
	var tc = textColor
	if not tc:
		tc = defaultTextColor
	if not tc {
		var cc = determineBackgroundColor()
		if cc.isDarkColor() {
			tc = Color.white()
		}
		else {
			tc = Color.black()
		}
	}
	return tc
}

func addActionItem(text as string, resName as string, handler as function, textColor as Color = null) as Widget
{
	var iconWidget = ImageWidget.forImageResource(context, resName)
	iconWidget.setWidgetImageScaleMethod(ImageWidget.FIT)
	iconWidget.setWidgetImageHeight(context.getHeightValue("5mm"))
	iconWidget.setWidgetImageWidth(context.getWidthValue("5mm"))
	var tc = determineTextColor(widgetBackgroundColor, textColor, defaultActionItemWidgetTextColor)
	var mm2 = context.getHeightValue("2mm")
	var lbl = LabelWidget.forText(context, text)
	lbl.setWidgetFontSize(mm2)
	lbl.setWidgetTextColor(tc)
	var vbox = VerticalBoxWidget.forContext(context, 0, context.getHeightValue("1mm"))
	vbox.addWidget(AlignWidget.forWidget(context, iconWidget))
	vbox.addWidget(AlignWidget.forWidget(context, lbl))
	if handler != null:
		Widget.setWidgetClickHandler(vbox, handler)
	addToWidgetItems(vbox)
	return this
}

func addOverlay(widget as Widget):
	overlayWidget.addWidget(widget)

func removeOverlay as bool
{
	if not overlayWidget:
		return false
	Widget.removeChildrenOf(overlayWidget)
	return true
}

func initializeWidget override
{
	base.initializeWidget()
	overlayWidget = new LayerWidget(context)
	var bgc = widgetBackgroundColor
	if not bgc:
		bgc = defaultActionItemWidgetBackgroundColor
	if bgc:
		addWidget(CanvasWidget.forColor(context, bgc))
	var hbox = HorizontalBoxWidget.forContext(context, 0)
	foreach w in widgetItems:
		hbox.addWidget(AlignWidget.forWidget(context, w), 1.0)
	addWidget(LayerWidget.forWidget(context, hbox, context.getHeightValue("1mm")))
	addWidget(overlayWidget)
}
