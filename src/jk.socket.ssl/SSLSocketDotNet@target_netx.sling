
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is SSLSocket:

prop ctx as LoggingContext
prop socket as TCPSocket
prop serverAddress as string
var acceptInvalidCertificate as bool
var requireClientCertificate = false
var sslStream private as !"System.Net.Security.SslStream"

func setAcceptInvalidCertificate(v as bool) override:
	acceptInvalidCertificate = v

func setRequireClientCertificate(v as bool) override:
	requireClientCertificate = v

func getNetSocket as !"System.Net.Sockets.Socket"
{
	var s = assert socket as TCPSocketForDotnet
	return s.getNetSocket()
}

lang "cs" {{{
	public bool ValidateServerCertificate(object sender, System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Security.Cryptography.X509Certificates.X509Chain chain, System.Net.Security.SslPolicyErrors sslPolicyErrors) {
		if(sslPolicyErrors == System.Net.Security.SslPolicyErrors.None) {
			return(true);
		}
		if(acceptInvalidCertificate) {
			System.Console.WriteLine("Certificate error: {0} (but accepting it)", sslPolicyErrors);
			return(true);
		}
		System.Console.WriteLine("Certificate error: {0} (rejecting it)", sslPolicyErrors);
		return(false);
	}
}}}

func open(cSocket as ConnectedSocket, certFile as File = null, keyFile as File = null, isServer as bool = false, passphrase as string = null) as bool
{
	socket = cSocket as TCPSocket
	assert socket
	var nsocket = (socket as! TCPSocketForDotnet).getNetSocket()
	lang "cs" {{{
		nsocket.Blocking = true;
	}}}
	if isServer {
		assert certFile
		var path #used = certFile.getPath()
		lang "cs" {{{
			sslStream = new System.Net.Security.SslStream(new System.Net.Sockets.NetworkStream(nsocket), false);
			try {
				System.Security.Cryptography.X509Certificates.X509Certificate cert = System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromCertFile(path);
				sslStream.AuthenticateAsServer(cert, clientCertificateRequired: false, checkCertificateRevocation: true);
			}
			catch (System.Exception e)
			{
				System.Console.WriteLine("Exception: {0}", e.ToString());
				System.Console.WriteLine ("Authentication failed - closing the connection.");
				close();
				return(false);
			}
		}}}
	}
	else {
		lang "cs" {{{
			sslStream = new System.Net.Security.SslStream(new System.Net.Sockets.NetworkStream(nsocket), false, new System.Net.Security.RemoteCertificateValidationCallback (ValidateServerCertificate), null);
			try {
				sslStream.AuthenticateAsClient(serverAddress);
			}
			catch (System.Security.Authentication.AuthenticationException e)
			{
				System.Console.WriteLine("Exception: {0}", e.Message);
				if(e.InnerException != null)
				{
					System.Console.WriteLine("Inner exception: {0}", e.InnerException.Message);
				}
				System.Console.WriteLine ("Authentication failed - closing the connection.");
				close();
				return(false);
			}
		}}}
	}
	lang "cs" {{{
		nsocket.Blocking = false;
	}}}
	return true
}

func read(buffer as buffer) override as int:
	return readWithTimeout(buffer, -1)

func close override
{
	lang "cs" {{{
		if(sslStream != null) {
			sslStream.Close();
			sslStream = null;
		}
	}}}
	if socket != null {
		socket.close()
		socket = null
	}
}

func readWithTimeout(buffer as buffer, timeout as int) override as int
{
	if buffer == null:
		return 0
	var v = 0
	lang "cs" {{{
		if(sslStream != null && socket != null) {
			try {
				sslStream.ReadTimeout = timeout;
				v = sslStream.Read(buffer, 0, buffer.Length);
			}
			catch(System.Exception e) {
				v = -1;
			}
			if(v < 1) {
				close();
				v = -1;
			}
		}
	}}}
	return v
}

func write(buffer as buffer, size as int) override as int
{
	var sz = size
	lang "cs" {{{
		if(sslStream != null && socket != null) {
			try {
				if(size < 0) {
					sslStream.Write(buffer, 0, buffer.Length);
					sz = buffer.Length;
				}
				else {
					sslStream.Write(buffer, 0, size);
				}
			}
			catch (System.Security.Authentication.AuthenticationException e)
			{
				System.Console.WriteLine("Exception: {0}", e.Message);
				if (e.InnerException != null)
				{
					System.Console.WriteLine("Inner exception: {0}", e.InnerException.Message);
				}
				System.Console.WriteLine ("Authentication failed - closing the connection.");
				close();
				return(-1);
			}
		}
	}}}
	return sz
}

func getSocket override as ConnectedSocket:
	return socket
