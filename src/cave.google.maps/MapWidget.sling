
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is ScreenAwareWidget imports capex.map #widget:

IFDEF("target_android")
{
	depend "gradle:com.google.android.gms:play-services-maps:11.0.0"
	depend "gradle:com.google.android.gms:play-services-location:11.0.0"
	depend "androidPermission:android.permission.INTERNET"
	depend "androidPermission:android.permission.ACCESS_NETWORK_STATE"
	basetype !"com.google.android.gms.maps.MapView" type extends
	basetype !"com.google.android.gms.maps.OnMapReadyCallback" type implements
	basetype Widget type isAlso
	basetype ResizeAwareWidget type implements
	var created = false
	var gmap as !"com.google.android.gms.maps.GoogleMap"
	var markers as map<string, MapMarker>
	var hasSize as bool
	var isDone as bool

	func onWidgetResized
	{
		var thisWidth #used = Widget.getWidth(this)
		var thisHeight #used = Widget.getHeight(this)
		var thisX #used = Widget.getX(this)
		var thisY #used = Widget.getY(this)
		lang "java" {{{
			if(thisWidth > 0 && thisHeight > 0) {
				int msw = android.view.View.MeasureSpec.UNSPECIFIED;
				int msh = android.view.View.MeasureSpec.UNSPECIFIED;
				msw = android.view.View.MeasureSpec.makeMeasureSpec(thisWidth, android.view.View.MeasureSpec.EXACTLY);
				msh = android.view.View.MeasureSpec.makeMeasureSpec(thisHeight, android.view.View.MeasureSpec.EXACTLY);
				measure(msw, msh);
				layout(thisX, thisY, thisWidth+thisX, thisHeight+thisY);
			}
		}}}
		if not hasSize:
			hasSize = true
		hasSizeAndMapInitialize()
	}

	func hasSizeAndMapInitialize
	{
		if isDone:
			return
		if hasSize && mapInitialized {
			placeQueuedMarkers()
			if coordinateQueue:
				doZoomToCoordinates()
			if centerQueue:
				doMoveToCenter()
			isDone = true
		}
	}

	func onMapReady(map as !"com.google.android.gms.maps.GoogleMap")
	{
		gmap = map
		lang "java" {{{
			com.google.android.gms.maps.UiSettings settings = map.getUiSettings();
			settings.setAllGesturesEnabled(true);
			settings.setCompassEnabled(true);
			settings.setIndoorLevelPickerEnabled(true);
			settings.setMapToolbarEnabled(true);
			settings.setMyLocationButtonEnabled(false);
			settings.setRotateGesturesEnabled(mapSettings.getCanRotate());
			settings.setTiltGesturesEnabled(mapSettings.getCanTilt());
			settings.setZoomGesturesEnabled(mapSettings.getCanZoom());
			settings.setScrollGesturesEnabled(true);
			settings.setZoomControlsEnabled(true);
			map.setBuildingsEnabled(true);
			map.setIndoorEnabled(true);
			try {
				map.setMyLocationEnabled(mapSettings.getMapHasMyLocation());
			}
			catch(java.lang.SecurityException e) {
				context.logError("Location permission is not granted.");
			}
			mapSettings.setSettingObject(settings);
			mapSettings.setMapObject(gmap);
			if(zoomInCenter) {
				com.google.android.gms.maps.model.CameraPosition cameraPosition = new com.google.android.gms.maps.model.CameraPosition.Builder()
					.target(new com.google.android.gms.maps.model.LatLng(centerLat, centerLon))
					.zoom(defaultZoomLevel)
					.bearing(0)
					.tilt(45)
					.build();
				map.animateCamera(com.google.android.gms.maps.CameraUpdateFactory.newCameraPosition(cameraPosition));
			}
			map.setOnMapClickListener(new com.google.android.gms.maps.GoogleMap.OnMapClickListener() {
				public void onMapClick(com.google.android.gms.maps.model.LatLng loc) {
					onMapClicked(loc.latitude, loc.longitude);
				}
			});
			map.setOnInfoWindowClickListener(new com.google.android.gms.maps.GoogleMap.OnInfoWindowClickListener() {
				public void onInfoWindowClick (com.google.android.gms.maps.model.Marker marker) {
					MyMapMarker mkr = (MyMapMarker)cape.Map.get(markers, marker.getId());
					mkr.infoWindowClickHandler.execute();
				}
			});
			map.setInfoWindowAdapter(new com.google.android.gms.maps.GoogleMap.InfoWindowAdapter() {
				public android.view.View getInfoContents(com.google.android.gms.maps.model.Marker marker) {
					MyMapMarker mkr = (MyMapMarker)cape.Map.get(markers, marker.getId());
					if(mkr.details == null) {
						return(null);
					}
					cave.ui.LabelWidget tx = cave.ui.LabelWidget.forText(context, mkr.details);
					return(tx);
				}

				public android.view.View getInfoWindow(com.google.android.gms.maps.model.Marker marker) {
					return(null);
				}
			});
			map.setOnCameraMoveStartedListener(new com.google.android.gms.maps.GoogleMap.OnCameraMoveStartedListener() {
				public void onCameraMoveStarted(int reason) {
					onCameraStartMoving();
				}
			});
			map.setOnCameraMoveListener(new com.google.android.gms.maps.GoogleMap.OnCameraMoveListener() {
				public void onCameraMove() {
					onCameraMoving();
				}
			});
			map.setOnCameraIdleListener(new com.google.android.gms.maps.GoogleMap.OnCameraIdleListener() {
				public void onCameraIdle() {
					onCameraStopMoving();
				}
			});
		}}}
		if mapInitialized == false:
			mapInitialized = true
		hasSizeAndMapInitialize()
	}
}

IFDEF("target_html")
{
	basetype Widget type extends
	basetype GeoCoder type implements

	var mapCounter static = 0
	var sdkIncluded static = false
	var sdkLoaded static = false
	var mapViewWaiting static as this
	var addressQueryWaiting static as string
	var addressQueryWaitingListener static as GeoCoderLocationListener
	var myId as string
	var mapObject as object #used

	func initializeHtmlWidget
	{
		myId = "GoogleMapWidget" .. String.forInteger(mapCounter++)
		HTMLDOM.setAttribute(element, "id", myId)
		if(sdkLoaded) {
			context.startTimer(0, func {
				initializeMapForWidget()
			})
		}
		else {
			if(sdkIncluded) {
				PRINT("Google Maps SDK included but not yet loaded. Cannot proceed.")
				return
			}
			mapViewWaiting = this
			var googleScript = HTMLDOM.createElement("script")
			HTMLDOM.setAttribute(googleScript, "src", "https://maps.googleapis.com/maps/api/js?key=" .. URLEncoder.encode(webApiKey) .. "&callback=CaveGoogleMapsMapWidget.onGoogleMapLoaded")
			HTMLDOM.setAttribute(googleScript, "async", "")
			HTMLDOM.setAttribute(googleScript, "defer", "")
			HTMLDOM.appendChild(HTMLDOM.getDocumentBody(), googleScript)
			sdkIncluded = true
		}
	}

	func onGoogleMapLoaded static
	{
		sdkLoaded = true
		var vv = mapViewWaiting
		mapViewWaiting = null
		if(vv != null) {
			vv.initializeMapForWidget()
			if(addressQueryWaiting != null) {
				vv.queryLocation(addressQueryWaiting, addressQueryWaitingListener)
				addressQueryWaiting = null
				addressQueryWaitingListener = null
			}
		}
	}

	func physicalAddressForResults(results as object) as PhysicalAddress
	{
		var v = new PhysicalAddress()
		lang "js" {{{
			var result = results[0];
			v.setCompleteAddress(result.formatted_address);
			var comps = result.address_components;
			for(var n=0; n<comps.length; n++) {
				var comp = comps[n];
				var types = comp.types;
				for(var m=0; m<types.length; m++) {
					var type = types[m];
					if(type === "street_number") {
						v.setStreetAddressDetail(comp.long_name);
					}
					else if(type === "route") {
						v.setStreetAddress(comp.long_name);
					}
					else if(type === "sublocality") {
						v.setSubLocality(comp.long_name);
					}
					else if(type === "locality") {
						v.setLocality(comp.long_name);
					}
					else if(type === "country") {
						v.setCountry(comp.long_name);
						v.setCountryCode(comp.short_name);
					}
					else if(type === "postal_code") {
						v.setPostalCode(comp.long_name);
					}
					else if(type === "administrative_area_level_1") {
						v.setAdministrativeArea(comp.long_name);
					}
					else if(type === "administrative_area_level_2") {
						v.setSubAdministrativeArea(comp.long_name);
					}
				}
			}
		}}}
		return(v)
	}

	func queryAddress(latitude as double, longitude as double, listener as GeoCoderAddressListener) as bool
	{
		if(listener == null) {
			return(false)
		}
		var error #used = cape.Error.forCode("geocoding_failed")
		var myObject #used = this
		lang "js" {{{
			var geoCoder = new google.maps.Geocoder();
			geoCoder.geocode({'location': { lat: latitude, lng : longitude }}, function(results, status) {
				if(status != "OK" || !results) {
					listener.onQueryAddressErrorReceived(error);
				}
				else {
					console.log(JSON.stringify(results, null, 4));
					var pa = myObject.physicalAddressForResults(results);
					pa.setLatitude(latitude);
					pa.setLongitude(longitude);
					listener.onQueryAddressCompleted(pa);
				}
			});
		}}}
		return(true)
	}

	func queryLocation(address as string, listener as GeoCoderLocationListener) as bool
	{
		if(listener == null) {
			return(false)
		}
		if(sdkLoaded == false) {
			addressQueryWaiting = address
			addressQueryWaitingListener = listener
			return(true)
		}
		var error #used = cape.Error.forCode("geocoding_failed")
		var r #used = new GeoLocation()
		lang "js" {{{
			var geoCoder = new google.maps.Geocoder();
			geoCoder.geocode({'address': address }, function(results, status) {
				if(status != "OK" || !results) {
					listener.onQueryLocationErrorReceived(error);
				}
				else {
					console.log(JSON.stringify(results, null, 4));
					r.setLatitude(results[0].geometry.location.lat());
					r.setLongitude(results[0].geometry.location.lng());
					listener.onQueryLocationCompleted(r);
				}
			});
		}}}
		return(true)
	}

	func initializeMapForWidget private
	{
		if(mapInitialized) {
			return
		}
		var myObject #used = this
		lang "js" {{{
			var map = new google.maps.Map(document.getElementById(this.myId), {
				zoom: this.defaultZoomLevel,
				center: { lat: this.centerLat, lng: this.centerLon }
			});
			this.mapObject = map;
			this.mapObject.infoWindow = null;
			google.maps.event.addListener(map, 'click', function(evt) {
				myObject.onMapClicked(evt.latLng.lat(), evt.latLng.lng());
			});
		}}}
		mapInitialized = true
		placeQueuedMarkers()
		if(coordinateQueue != null) {
			doZoomToCoordinates()
		}
		if(centerQueue != null) {
			doMoveToCenter()
		}
	}
}

IFDEF("target_iosoc")
{
	basetype !"GMSMapView" type extends
	basetype !"GMSMapViewDelegate" type implements
	basetype GeoCoder type implements
	basetype Widget type isAlso
	depend "objc-header-h:<GoogleMaps/GoogleMaps.h>"
	depend "objc-framework:GoogleMapsBase"
	depend "objc-framework:GoogleMaps"
	depend "objc-framework:GoogleMapsCore"
	depend "objc-framework:Accelerate"
	depend "objc-framework:CoreData"
	depend "objc-framework:CoreGraphics"
	depend "objc-framework:CoreLocation"
	depend "objc-framework:CoreText"
	depend "objc-framework:GLKit"
	depend "objc-framework:ImageIO"
	depend "ldlib:c++"
	depend "ldlib:z"
	depend "objc-framework:OpenGLES"
	depend "objc-framework:QuartzCore"
	depend "objc-framework:SystemConfiguration"
	depend "objc-framework:UIKit"
	depend "objc-framework:Security"
	var googleMapsApiInitialized static = false

	lang "objc" {{{
		- (void)mapView:(GMSMapView *)mapView didTapAtCoordinate:(CLLocationCoordinate2D)coordinate
		{
			[self onMapClicked:coordinate.latitude lon:coordinate.longitude];
		}

		- (void) mapViewSnapshotReady:(GMSMapView *)mapView
		{
			if(self->mapInitialized == false) {
				self->mapInitialized = true;
				[self placeQueuedMarkers];
				if(self->coordinateQueue != nil) {
					[self doZoomToCoordinates];
				}
				if(self->centerQueue != nil) {
					[self doMoveToCenter];
				}
			}
		}

		- (void) mapView:(GMSMapView *)mapView willMove:(BOOL)gesture
		{
			[self onCameraStartMoving];
		}

		- (void) mapView:(GMSMapView *)mapView didChangeCameraPosition:(GMSCameraPosition *)position
		{
			[self onCameraMoving];
		}

		- (void) mapView:(GMSMapView *)mapView idleAtCameraPosition:(GMSCameraPosition *)position
		{
			[self onCameraStopMoving];
		}
	}}}

	func onGeoCoderAddress(resp as !"GMSReverseGeocodeResponse", latitude as double, longitude as double, listener as GeoCoderAddressListener)
	{
		var addLine1 as string
		var addLine2 as string
		var country as string
		var administrativeArea as string
		var locality as string
		var subLocality as string
		var streetAddress as string
		var postalCode as string
		lang "objc" {{{
			addLine1 = resp.firstResult.addressLine1;
			addLine2 = resp.firstResult.addressLine2;
			country = resp.firstResult.country;
			administrativeArea = resp.firstResult.administrativeArea;
			locality = resp.firstResult.locality;
			subLocality = resp.firstResult.subLocality;
			streetAddress = resp.firstResult.thoroughfare;
			postalCode = resp.firstResult.postalCode;
		}}}
		var sb = new StringBuilder()
		if(addLine1 != null) {
			sb.append(addLine1)
		}
		if(cape.String.isEmpty(addLine2) == false) {
			if(sb.count() > 0) {
				sb.append(' ')
			}
			sb.append(addLine2)
		}
		var v = new PhysicalAddress()
		v.setCompleteAddress(sb.toString())
		v.setLatitude(latitude)
		v.setLongitude(longitude)
		v.setCountry(country)
		v.setAdministrativeArea(administrativeArea)
		v.setLocality(locality)
		v.setSubLocality(subLocality)
		v.setStreetAddress(streetAddress)
		v.setPostalCode(postalCode)
		if(listener != null) {
			listener.onQueryAddressCompleted(v)
		}
	}

	func queryAddress(latitude as double, longitude as double, listener as GeoCoderAddressListener) as bool
	{
		var myObject #used = this
		lang "objc" {{{
			GMSGeocoder* gc = [GMSGeocoder geocoder];
			[gc reverseGeocodeCoordinate:CLLocationCoordinate2DMake(latitude, longitude) completionHandler:^(GMSReverseGeocodeResponse *resp, NSError *error) {
				if(error != nil) {
					NSLog(@"MapWidget: Error: %@", [error localizedDescription]);
				}
				[myObject onGeoCoderAddress:resp latitude:latitude longitude:longitude listener:listener];
			}];
		}}}
		return(true)
	}

	func queryLocation(address as string, listener as GeoCoderLocationListener) as bool
	{
		return(true)
	}
}

class MyMapMarker is MapMarker
{
	prop lat as double
	prop lon as double
	prop anchorX as double
	prop anchorY as double
	prop label as string
	prop title as string
	prop icon as Image
	var markerObject public as object
	prop removed = false

	IFDEF("target_html") {
		var mapObject as object #used
	}
	ELSE IFDEF("target_android") {
		var infoWindowClickHandler as function
		var details as string
	}

	func move(lat as double, lon as double)
	{
		this.lat = lat
		this.lon = lon
		if markerObject {
			IFDEF("target_html") {
				lang "js" {{{
					this.markerObject.setPosition({ lat: lat, lng: lon });
				}}}
			}
			ELSE IFDEF("target_android") {
				lang "java" {{{
					com.google.android.gms.maps.model.LatLng pos = new com.google.android.gms.maps.model.LatLng(this.lat, this.lon);
					((com.google.android.gms.maps.model.Marker)markerObject).setPosition(pos);
				}}}
			}
			ELSE IFDEF("target_iosoc") {
				lang "objc" {{{
					[(GMSMarker*)self->markerObject setPosition:CLLocationCoordinate2DMake(lat, lon)];
				}}}
			}
			ELSE {
				ERROR "Not implemented."
			}
		}
	}

	func remove
	{
		if markerObject {
			IFDEF("target_html") {
				lang "js" {{{
					this.markerObject.setMap(null);
				}}}
			}
			ELSE IFDEF("target_android") {
				lang "java" {{{
					((com.google.android.gms.maps.model.Marker)markerObject).remove();
				}}}
			}
			ELSE IFDEF "target_iosoc" {
				lang "objc" {{{
					[(GMSMarker*)self->markerObject setMap:nil];
				}}}
			}
			ELSE {
				ERROR "Not implemented."
			}
		}
		removed = true
	}

	func rotate(deg as double)
	{
		if markerObject {
			IFDEF "target_android" {
				lang "java" {{{
					((com.google.android.gms.maps.model.Marker)markerObject).setRotation((float)deg);
				}}}
			}
			ELSE IFDEF "target_iosoc" {
				lang "objc" {{{
					[(GMSMarker*)self->markerObject setRotation:deg];
				}}}
			}
		}
	}

	func setAnchor(x as double, y as double)
	{
		anchorX = x
		anchorY = y
		if markerObject {
			IFDEF "target_android" {
				lang "java" {{{
					((com.google.android.gms.maps.model.Marker)markerObject).setAnchor((float)x, (float)y);
				}}}
			}
			ELSE {
				ERROR "Not yet implemented"
			}
		}
	}

	func setInfoDetail(dtl as string, callback as function)
	{
		IFDEF("target_html") {
			lang "js" {{{
				this.markerObject.addListener('click', function() {
					if(this.mapObject.infoWindow) {
						this.mapObject.infoWindow.close();
					}
					this.mapObject.infoWindow = new google.maps.InfoWindow({
						content: dtl
					});
					this.mapObject.infoWindow.open(this.mapObject, this.markerObject);
					var elems = document.getElementsByClassName("gm-style-iw");
					for(var i = 0; i < elems.length; i++) {
						elems[i].addEventListener("click", function() {
							callback();
						});
					}
				}.bind(this));
			}}}
		}
		ELSE IFDEF("target_android") {
			details = dtl
			infoWindowClickHandler = callback
		}
	}
}

class MapCamera public
{
	prop angle as double
	prop bearing as double
	prop zoom as double
	prop latitude as double
	prop longitude as double
}

class MyMapSettings public
{
	var canZoom = true
	var canTilt = true
	var canRotate = true
	var mapHasMyLocation = false
	prop settingObject as object
	prop mapObject as object

	func setCanZoom(enable as bool)
	{
		canZoom = enable
		if settingObject {
			IFDEF "target_android" {
				lang "java" {{{
					((com.google.android.gms.maps.UiSettings)settingObject).setZoomGesturesEnabled(canZoom);
				}}}
			}
			ELSE IFDEF "target_iosoc" {
				lang "objc" {{{
					[(GMSUISettings*)self->settingObject setZoomGestures:canZoom];
				}}}
			}
			ELSE {
				"Not implemented"
			}
		}
	}

	func setCanTilt(enable as bool)
	{
		canTilt = enable
		if settingObject {
			IFDEF "target_android" {
				lang "java" {{{
					((com.google.android.gms.maps.UiSettings)settingObject).setTiltGesturesEnabled(canTilt);
				}}}
			}
			ELSE IFDEF "target_iosoc" {
				lang "objc" {{{
					[(GMSUISettings*)self->settingObject setTiltGestures:canTilt];
				}}}
			}
			ELSE {
				"Not implemented"
			}
		}
	}

	func setCanRotate(enable as bool)
	{
		canRotate = enable
		if settingObject {
			IFDEF "target_android" {
				lang "java" {{{
					((com.google.android.gms.maps.UiSettings)settingObject).setRotateGesturesEnabled(canRotate);
				}}}
			}
			ELSE IFDEF "target_iosoc" {
				lang "objc" {{{
					[(GMSUISettings*)self->settingObject setRotateGestures:canRotate];
				}}}
			}
			ELSE {
				"Not implemented"
			}
		}
	}

	func setMapHasMyLocation(enable as bool)
	{
		mapHasMyLocation = enable
		if settingObject {
			IFDEF "target_android" {
				lang "java" {{{
					((com.google.android.gms.maps.GoogleMap)mapObject).setMyLocationEnabled(mapHasMyLocation);
				}}}
			}
			ELSE IFDEF "target_iosoc" {
				lang "objc" {{{
					((GMSMapView*)self->mapObject).myLocationEnabled = mapHasMyLocation;
				}}}
			}
			ELSE {
				"Not implemented"
			}
		}
	}

	func getCanZoom as bool:
		return canZoom

	func getCanTilt as bool:
		return canTilt

	func getCanRotate as bool:
		return canRotate

	func getMapHasMyLocation as bool:
		return mapHasMyLocation
}

func forApiKeys(context as GuiApplicationContext, webApiKey as string, iosApiKey as string) static as this
{
	IFDEF("target_iosoc") {
		if(googleMapsApiInitialized == false) {
			lang "objc" {{{
				[GMSServices provideAPIKey:iosApiKey];
			}}}
			googleMapsApiInitialized = true
		}
	}
	var v = new this(context)
	v.setWebApiKey(webApiKey)
	return(v)
}

prop webApiKey as string
prop centerLat = 0.0
prop centerLon = 0.0
prop defaultZoomLevel = 14
prop zoomInCenter = true
prop streetViewEnabled as bool
prop markerSize as int
prop widgetMapCameraStartMovingHandler as function
prop widgetMapCameraMovingHandler as function
prop widgetMapCameraStopMovingHandler as function
var context as GuiApplicationContext
var mapClickHandler as function<void,double,double>
var mapMarkers as vector<MyMapMarker>
var markerQueue as vector<MyMapMarker>
var coordinateQueue as vector<DynamicMap>
var coordinateQueueMoveWithAnimation as bool
var centerQueue as GeoLocation
var centerQueueMoveWithAnimation as bool
var mapSettings as MyMapSettings
var mapInitialized = false

ctor(context as GuiApplicationContext) private
{
	IFDEF("target_android") {
		base((context as! cave.GuiApplicationContextForAndroid).getActivityContext())
		lang "java" {{{
			setBackgroundColor(0xff000000);
		}}}
	}
	this.context = context
	markerSize = context.getHeightValue("6mm")
	mapSettings = new MyMapSettings()
}

func onWidgetAddedToScreen(screen as ScreenForWidget)
{
	IFDEF("target_html") {
		initializeHtmlWidget()
	}
	ELSE IFDEF("target_iosoc") {
		lang "objc" {{{
			self.delegate = self;
			GMSUISettings* settings = [self settings];
			[settings setAllGesturesEnabled:YES];
			[settings setCompassButton:YES];
			[settings setIndoorPicker:YES];
			[settings setMyLocationButton:NO];
			[settings setRotateGestures:[mapSettings getCanRotate]];
			[settings setScrollGestures:YES];
			[settings setTiltGestures:[mapSettings getCanTilt]];
			[settings setZoomGestures:[mapSettings getCanZoom]];
			self.buildingsEnabled = YES;
			self.indoorEnabled = YES;
			self.myLocationEnabled = [mapSettings getMapHasMyLocation];
			[mapSettings setSettingObject: settings];
			[mapSettings setMapObject: self];
		}}}
		if(zoomInCenter) {
			lang "objc" {{{
				GMSCameraPosition *camera = [GMSCameraPosition cameraWithLatitude:self->centerLat longitude:self->centerLon zoom:self->defaultZoomLevel
					bearing:0 viewingAngle:45];
				[self animateToCameraPosition:camera];
			}}}
		}
	}
	ELSE IFDEF("target_android") {
		var myObject #used = this
		if(created == false) {
			created = true
			lang "java" {{{
				onCreate(new android.os.Bundle());
				onResume();
				getMapAsync(myObject);
			}}}
		}
	}
}

func onWidgetRemovedFromScreen(screen as ScreenForWidget)
{
}

func onMapClicked(lat as double, lon as double) private
{
	if(mapClickHandler != null) {
		mapClickHandler(lat, lon)
	}
}

func addMapClickHandler(handler as function<void,double,double>)
{
	mapClickHandler = handler
}

func addMapMarker(lat as double, lon as double, label as string, title as string, icon as Image = null) as MapMarker
{
	var v = new MyMapMarker()
	v.setLat(lat)
	v.setLon(lon)
	v.setLabel(label)
	v.setTitle(title)
	v.setIcon(icon)
	if(mapInitialized) {
		doAddMapMarker(v)
	}
	else {
		if(markerQueue == null) {
			markerQueue = new vector<MyMapMarker>
		}
		markerQueue += v
	}
	return(v)
}

func placeQueuedMarkers
{
	foreach(marker in markerQueue) {
		if(marker.getRemoved() == false) {
			doAddMapMarker(marker)
		}
	}
	markerQueue = null
}

func doAddMapMarker(marker as MyMapMarker) private
{
	IFDEF("target_html") {
		var ico #used = marker.getIcon() as ImageForBrowser
		var msz #used = markerSize
		lang "js" {{{
			var mkropt = { position: { lat: marker.getLat(), lng: marker.getLon() },
				map: this.mapObject,
				title : marker.getTitle(),
				label : marker.getLabel()
			};
			if(ico != null) {
				var icon = { url: ico.getSource(),
					scaledSize: { width: msz, height: msz}
				};
				mkropt.icon = icon;
			}
			var mo = new google.maps.Marker(mkropt);
			marker.markerObject = mo;
			marker.mapObject = this.mapObject;
		}}}
	}
	ELSE IFDEF("target_android") {
		var markerId as string
		lang "java" {{{
			com.google.android.gms.maps.model.LatLng pos = new com.google.android.gms.maps.model.LatLng(marker.getLat(), marker.getLon());
			com.google.android.gms.maps.model.MarkerOptions mkropt = new com.google.android.gms.maps.model.MarkerOptions()
				.position(pos)
				.anchor((float)marker.getAnchorX(), (float)marker.getAnchorY())
				.title(marker.getTitle())
				.visible(true);
			cave.Image ico = marker.getIcon();
			if(ico != null) {
				cave.ImageForAndroid ic = (cave.ImageForAndroid)ico.scaleToSize(markerSize, markerSize);
				mkropt.icon(com.google.android.gms.maps.model.BitmapDescriptorFactory.fromBitmap(ic.getAndroidBitmap()));
			}
			else {
				mkropt.icon(com.google.android.gms.maps.model.BitmapDescriptorFactory.defaultMarker(com.google.android.gms.maps.model.BitmapDescriptorFactory.HUE_ORANGE));
			}
			marker.markerObject = gmap.addMarker(mkropt);
			markerId = ((com.google.android.gms.maps.model.Marker)marker.markerObject).getId();
		}}}
		if(markers == null) {
			markers = new map<string, MapMarker>
		}
		markers[markerId]= marker
	}
	ELSE IFDEF("target_iosoc") {
		var img as ImageForIOS
		if marker.getIcon() {
			img = marker.getIcon().scaleToSize(markerSize, markerSize) as! ImageForIOS
		}
		lang "objc" {{{
			GMSMarker* mm = [GMSMarker markerWithPosition:CLLocationCoordinate2DMake([marker getLat], [marker getLon])]; 
			mm.title = [marker getTitle];
			// mm.label = [marker getLabel];
			if(img != nil) {
				mm.icon = img->uiImage;
			}
			mm.map = self;
			marker->markerObject = mm;
		}}}
	}
	ELSE {
		ERROR("Not implemented")
	}
	if not mapMarkers:
		mapMarkers = new vector<MyMapMarker>
	mapMarkers += marker
}

func moveToCenter(lat as double, lon as double, animated as bool = false)
{
	centerQueue = new GeoLocation().setLatitude(lat).setLongitude(lon)
	centerQueueMoveWithAnimation = animated
	if mapInitialized:
		doMoveToCenter()
}

func doMoveToCenter private
{
	assert centerQueue
	moveCamera(new MapCamera()
		.setLatitude(centerQueue.getLatitude())
		.setLongitude(centerQueue.getLongitude())
		.setZoom(defaultZoomLevel)
		.setAngle(45)
		.setBearing(0), centerQueueMoveWithAnimation)
}

func moveCamera(camera as MapCamera, animated as bool)
{
	assert camera
	IFDEF "target_android" {
		lang "java" {{{
			com.google.android.gms.maps.model.CameraPosition cameraPosition = new com.google.android.gms.maps.model.CameraPosition.Builder()
				.target(new com.google.android.gms.maps.model.LatLng(camera.getLatitude(), camera.getLongitude()))
				.zoom((float)camera.getZoom())
				.bearing((float)camera.getBearing())
				.tilt((float)camera.getAngle())
				.build();
			com.google.android.gms.maps.CameraUpdate update = com.google.android.gms.maps.CameraUpdateFactory.newCameraPosition(cameraPosition);
			if(animated) {
				gmap.animateCamera(update);
			}
			else {
				gmap.moveCamera(update);
			}
		}}}
	}
	ELSE IFDEF("target_html") {
		lang "js" {{{
			var latlon = { "lat" : camera.getLatitude(), "lng" : camera.getLongitude() };
			if(animated) {
				this.mapObject.panTo(latlon);
			}
			else {
				this.mapObject.setCenter(latlon);
			}
		}}}
	}
	ELSE IFDEF "target_iosoc" {
		lang "objc" {{{
			GMSCameraPosition *camerapos = [GMSCameraPosition cameraWithLatitude:[camera getLatitude] longitude:[camera getLongitude] zoom:[camera getZoom]
				bearing:[camera getBearing] viewingAngle:[camera getAngle]];
			if(animated) {
				[self animateToCameraPosition:camerapos];
			}
			else {
				[self moveCamera:[GMSCameraUpdate setCamera:camerapos]];
			}
		}}}
	}
	ELSE {
		ERROR "Not implemented"
	}
}

func zoomToCoordinates(coors as vector<DynamicMap>, animated as bool = true)
{
	if(mapInitialized) {
		coordinateQueue = coors
		coordinateQueueMoveWithAnimation = animated
		doZoomToCoordinates()
	}
	else {
		coordinateQueue = coors
	}
}

func doZoomToCoordinates
{
	IFDEF("target_android") {
		lang "java" {{{
			com.google.android.gms.maps.model.LatLngBounds.Builder llbounds = new com.google.android.gms.maps.model.LatLngBounds.Builder();
			for(cape.DynamicMap coor : coordinateQueue) {
				double lat = (double)coor.getDouble("latitude");
				double lon = (double)coor.getDouble("longitude");
				com.google.android.gms.maps.model.LatLng pos = new com.google.android.gms.maps.model.LatLng(lat, lon);
				llbounds.include(pos);
			}
			com.google.android.gms.maps.CameraUpdate update = com.google.android.gms.maps.CameraUpdateFactory.newLatLngBounds(llbounds.build(), 70);
			if(coordinateQueueMoveWithAnimation) {
				gmap.animateCamera(update);
			}
			else {
				gmap.moveCamera(update);
			}
		}}}
	}
	ELSE IFDEF("target_html") {
		lang "js" {{{
			var bounds = new google.maps.LatLngBounds();
			for(var i = 0; i < this.coordinateQueue.length; i++) {
				var bound = this.coordinateQueue[i];
				var latlon = new google.maps.LatLng({ lat: bound.getDouble("latitude"), lng: bound.getDouble("longitude")});
				bounds.extend(latlon);
			}
			if(this.coordinateQueueMoveWithAnimation) {
				this.mapObject.panToBounds(bounds);
			}
			else {
				this.mapObject.fitBounds(bounds);
			}
		}}}
	}
	ELSE IFDEF("target_iosoc") {
		lang "objc" {{{
			GMSMutablePath *path = [GMSMutablePath path];
			for(CapeDynamicMap *coor in coordinateQueue) {
				if(coor == nil) {
					continue;
				}
				[path addCoordinate:CLLocationCoordinate2DMake([coor getDouble:@"latitude" defval:0.0], [coor getDouble:@"longitude" defval:0.0])];
			}
			GMSCoordinateBounds *bounds = [[GMSCoordinateBounds alloc] initWithPath:path];
			GMSCameraUpdate* update = [GMSCameraUpdate fitBounds:bounds withPadding:70.0f];
			if(coordinateQueueMoveWithAnimation) {
				[self animateWithCameraUpdate:update];
			}
			else {
				[self moveCamera:update];
			}
		}}}
	}
	ELSE {
		ERROR("Not implemented")
	}
}

func getMapCenterLatitude as double
{
	IFDEF "target_android" {
		assert isDone
		return lang "java" double {{{ gmap.getCameraPosition().target.latitude }}}
	}
	ELSE IFDEF "target_iosoc" {
		assert mapInitialized
		return lang "objc" double {{{ [self camera].target.latitude }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0.0
	}
}

func getMapCenterLongitude as double
{
	IFDEF "target_android" {
		assert isDone
		return lang "java" double {{{ gmap.getCameraPosition().target.longitude }}}
	}
	ELSE IFDEF "target_iosoc" {
		assert mapInitialized
		return lang "objc" double {{{ [self camera].target.longitude }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0.0
	}
}

func clearMapMarkers
{
	foreach marker in mapMarkers:
		marker.remove()
}

func getMapCenterLocationAsDynamicMap as DynamicMap:
	return new DynamicMap().set("latitude", getMapCenterLatitude()).set("longitude", getMapCenterLongitude())

func onCameraStartMoving
{
	if widgetMapCameraStartMovingHandler:
		widgetMapCameraStartMovingHandler()
}

func onCameraMoving
{
	if widgetMapCameraMovingHandler:
		widgetMapCameraMovingHandler()
}

func onCameraStopMoving
{
	if widgetMapCameraStopMovingHandler:
		widgetMapCameraStopMovingHandler()
}

func setMapCanBeZoom(enable as bool):
	mapSettings.setCanZoom(enable)

func setMapCanBeTilt(enable as bool):
	mapSettings.setCanTilt(enable)

func setMapCanBeRotate(enable as bool):
	mapSettings.setCanRotate(enable)

func setMapHasMyLocation(enable as bool):
	mapSettings.setMapHasMyLocation(enable)
