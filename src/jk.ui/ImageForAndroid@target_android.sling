
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is Image:

var resourceCache static as map<string,this>

func forAndroidBitmap(bitmap as !"android.graphics.Bitmap") static as this
{
	assert bitmap
	var v = new this()
	v.bitmap = bitmap
	return v
}

func forSize(width as int, height as int) static as this
{
	var v = new this()
	lang "java" {{{
		try {
			v.bitmap = android.graphics.Bitmap.createBitmap(width, height, android.graphics.Bitmap.Config.ARGB_8888);
		}
		catch(Exception e) {
			v.bitmap = null;
		}
		if(v.bitmap == null) {
			return(null);
		}
	}}}
	return v
}

func sanitizeResourceName(n as string) static private as string
{
	assert n
	var sb = new StringBuilder()
	var it = String.iterate(n)
	var c as char
	while (c = it.getNextChar()) > 0 {
		if c >= 'A' && c <= 'Z' {
			sb.append(('a' + c - 'A') as char)
		}
		else if c >= 'a' && c <= 'z' {
			sb.append(c)
		}
		else if c >= '0' && c <= '9' {
			sb.append(c)
		}
		else {
			sb.append('_')
		}
	}
	return sb.toString()
}

func forResource(name as string, context as !"android.content.Context") static as this
{
	if name == null || context == null:
		return null
	if resourceCache {
		var v = Map.getValue(resourceCache, name)
		if v:
			return v
	}
	var bm as !"android.graphics.Bitmap"
	var rid #used = (context.getPackageName() as! string) .. ":drawable/" .. sanitizeResourceName(name)
	lang "java" {{{
		android.content.res.Resources res = context.getResources();
		if(res != null) {
			int aid = res.getIdentifier(rid, null, null);
			if(aid > 0) {
				android.graphics.drawable.Drawable d = res.getDrawable(aid);
				if(d != null && d instanceof android.graphics.drawable.BitmapDrawable) {
					bm =((android.graphics.drawable.BitmapDrawable)d).getBitmap();
				}
			}
		}
	}}}
	assert bm
	var v = new this()
	v.bitmap = bm
	if resourceCache == null:
		resourceCache = new map<string,this>
	resourceCache[name] = v
	return v
}

func forFile(file as File) static as this
{
	ERROR "Not implemented"
	return null
}

func forBuffer(buffer as buffer) static as this
{
	assert buffer
	var bm as !"android.graphics.Bitmap"
	lang "java" {{{
		bm = android.graphics.BitmapFactory.decodeByteArray(buffer, 0, buffer.length);
	}}}
	assert bm
	return forAndroidBitmap(bm)
}

var bitmap public as !"android.graphics.Bitmap"

func getAndroidBitmap as !"android.graphics.Bitmap":
	return bitmap

func getPixelWidth override as int
{
	var v = 0
	if bitmap:
		v = bitmap.getWidth() as int
	return v
}

func getPixelHeight override as int
{
	var v = 0
	if bitmap:
		v = bitmap.getHeight() as int
	return v
}

func scaleToSize(width as int, height as int) override as Image
{
	if width < 0 || height < 0:
		return this
	var bm as !"android.graphics.Bitmap"
	lang "java" {{{
		try {
			bm = android.graphics.Bitmap.createScaledBitmap(bitmap, width, height, true);
		}
		catch(Exception e) {
			bm = null;
		}
	}}}
	assert bm
	return forAndroidBitmap(bm)
}

func scaleToSize(w as int, h as int, callback as function<void, Image>) override
{
	assert callback
	callback(scaleToSize(w, h))
}

func scaleToWidth(w as int) override as Image:
	return scaleToSize(w, getProportionalHeight(w))

func scaleToWidth(w as int, callback as function<void, Image>) override
{
	assert callback
	callback(scaleToWidth(w))
}

func scaleToHeight(h as int) override as Image:
	return scaleToSize(getProportionalWidth(h), h)

func scaleToHeight(h as int, callback as function<void, Image>) override
{
	assert callback
	callback(scaleToHeight(h))
}

func crop(x as int, y as int, w as int, h as int) override as Image
{
	assert bitmap
	var bm as !"android.graphics.Bitmap"
	lang "java" {{{
		bm = android.graphics.Bitmap.createBitmap(bitmap, x, y, w, h, null, false);
	}}}
	assert bm
	return forAndroidBitmap(bm)
}

func crop(x as int, y as int, w as int, h as int, callback as function<void, Image>) override
{
	assert callback
	callback(crop(x, y, w, h))
}

func toJPGData override as buffer
{
	assert bitmap
	var buf as buffer
	lang "java" {{{
		java.io.ByteArrayOutputStream baStream = new java.io.ByteArrayOutputStream();
		android.graphics.Bitmap.CompressFormat cf = android.graphics.Bitmap.CompressFormat.JPEG;
		if(bitmap.compress(cf, 100, baStream)) {
			buf = baStream.toByteArray();
		}
	}}}
	return buf
}

func toPNGData override as buffer
{
	assert bitmap
	var buf as buffer
	lang "java" {{{
		java.io.ByteArrayOutputStream baStream = new java.io.ByteArrayOutputStream();
		android.graphics.Bitmap.CompressFormat cf = android.graphics.Bitmap.CompressFormat.PNG;
		if(bitmap.compress(cf, 70, baStream)) {
			buf = baStream.toByteArray();
		}
	}}}
	return buf
}

func toRGBAData override as buffer
{
	ERROR "Not implemented"
	return null
}

func releaseImage override
{
	if bitmap:
		bitmap.recycle()
	bitmap = null
}
