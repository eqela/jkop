
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log

class abstract:

meta
{
	description [[
		SQL database connection. This is the base class and abstraction for all
		database-specific driver classes.
	]]
}

prop ctx as LoggingContext

func closeConnection async abstract
func getDatabaseTypeId abstract as string
func getLastInsertId(table as string) abstract async as long
func getIdentityColumnName(table as string) abstract async as string
func getPrimaryKeyColumnName(table as string) abstract async as string
func prepareStatement(sql as string) async abstract as SQLStatement
func executeStatement(stmt as SQLStatement) abstract async as bool
func executeUpdateDeleteStatement(stmt as SQLStatement) abstract async as int
func executeQueryStatement(stmt as SQLStatement) abstract async as SQLResultSetIterator
func executeSingleRowQueryStatement(stmt as SQLStatement) abstract async as DynamicMap
func checkIfTableExists(table as string) abstract async as bool
func checkIfColumnExists(table as string, name as string) abstract async as bool
func checkIfColumnTypeMatches(table as string, column as SQLTableColumnInfo) abstract async as bool
func getAllTableNames abstract async as vector<string>
func prepareCreateTableStatement(table as string, columns as vector<SQLTableColumnInfo>) async abstract as SQLStatement
func prepareDeleteTableStatement(table as string) async abstract as SQLStatement
func prepareCreateColumnStatement(table as string, column as SQLTableColumnInfo) async abstract as SQLStatement
func prepareUpdateColumnTypeStatement(table as string, column as SQLTableColumnInfo) async abstract as SQLStatement

func ensureColumnsExistInTable(tableName as string, columns as vector<SQLTableColumnInfo>) async as bool
{
	meta {
		description [[
			Checks if the database table exists and creates it if it does not exist.
			Returns false if something went wrong.
		]]
	}
	foreach column as SQLTableColumnInfo in columns {
		if await checkIfColumnExists(tableName, column.getName()) {
			if not await checkIfColumnTypeMatches(tableName, column):
				assert await executeStatement(await prepareUpdateColumnTypeStatement(tableName, column))
		}
		else {
			assert await executeStatement(await prepareCreateColumnStatement(tableName, column))
		}
	}
	return true
}

func ensureTableExists(table as SQLTableInfo) virtual async as bool
{
	meta {
		description [[
			Checks if the database table exists and creates it if it does not exist.
		]]
	}
	assert table
	var name = table.getName()
	assert String.isNotEmpty(name)
	if await checkIfTableExists(name) {
		var v = await ensureColumnsExistInTable(name, table.getColumns())
		if v:
			return true
		return false
	}
	assert await executeStatement(await prepareCreateTableStatement(name, table.getColumns()))
	foreach cii as SQLTableColumnIndexInfo in table.getIndexes() {
		if not await executeStatement(await prepareCreateIndexStatement(name, cii.getColumns(), cii.getUnique())):
			await executeStatement(await prepareDeleteTableStatement(name))
	}
	return true
}

func prepareCreateIndexStatement(table as string, columns as vector<string>, unique as bool) async virtual as SQLStatement
{
	meta {
		description [[
			Prepares a CREATE INDEX statement as a string for the supplied table name, column name and a boolean flag which
			indicates if the index will be unique.
		]]
	}
	assert String.isNotEmpty(table) && Vector.isNotEmpty(columns)
	var namesb = new StringBuilder()
	namesb.appendString(table)
	foreach column in columns {
		namesb.appendCharacter('_')
		namesb.appendString(column)
	}
	var idxname = prepareColumnName(namesb.toString())
	var unq = ""
	if unique:
		unq = "UNIQUE "
	var sqlsb = new StringBuilder()
	sqlsb.appendString("CREATE ")
	sqlsb.appendString(unq)
	sqlsb.appendString("INDEX ")
	sqlsb.appendString(idxname)
	sqlsb.appendString(" ON ")
	sqlsb.appendString(prepareTableName(table))
	sqlsb.appendString(" (")
	var first = true
	foreach column in columns {
		if first {
			sqlsb.appendString(" ")
		}
		else {
			sqlsb.appendString(", ")
		}
		first = false
		sqlsb.appendString(prepareColumnName(column))
	}
	sqlsb.appendString(" )")
	return await prepareStatement(sqlsb.toString())
}

func createColumnSelectionString(columns as vector<string>) private as string
{
	meta {
		description [[
			Creates the column selection part of an SQL select statement
			in string from the supplied array of column name(s).
		]]
	}
	if not columns || sizeof columns < 1:
		return "*"
	var sb = new StringBuilder()
	var first = true
	foreach column in columns {
		if not first:
			sb.appendString(", ")
		sb.appendString(prepareColumnName(column))
		first = false
	}
	return sb.toString()
}

func createOrderByString(order as vector<SQLOrderingRule>) private as string
{
	meta {
		description [[
			Creates the order by part of an SQL select statement
			in string from the supplied array of column name(s)
			or instance(s) of SQLOrderingRule class.
		]]
	}
	assert order && sizeof order > 0
	var sb = new StringBuilder()
	sb.appendString(" ORDER BY ")
	var first = true
	foreach sr in order {
		if not first:
			sb.appendString(", ")
		sb.appendString(prepareColumnName(sr.getColumn()))
		sb.appendCharacter(' ')
		if sr.getDescending() {
			sb.appendString("DESC")
		}
		else {
			sb.appendString("ASC")
		}
		first = false
	}
	return sb.toString()
}

func prepareSelectAllStatement(table as string, columns as vector<string> = null, order as vector<SQLOrderingRule> = null) async virtual as SQLStatement
{
	meta {
		description [[
			Creates an instance of SQLStatement for select statement with the specified
			database table name, an array of column name(s) and an array of column
			name(s) or instance(s) of SQLOrderingRule for order by clause.
		]]
	}
	var sb = new StringBuilder()
	sb.appendString("SELECT ")
	sb.appendString(createColumnSelectionString(columns))
	sb.appendString(" FROM ")
	sb.appendString(prepareTableName(table))
	sb.appendString(createOrderByString(order))
	sb.appendString(";")
	return await prepareStatement(sb.toString())
}

func prepareSelectWithCriteriaStatement(table as string, criteria as DynamicMap, limit as int = 0, offset as int = 0, columns as vector<string> = null, order as vector<SQLOrderingRule> = null, likeOperator as bool = false) async virtual as SQLStatement
{
	meta {
		description [[
			Creates an instance of SQLStatement for select statement
			with the specified database table name, a map of criteria,
			limit, offset, an array of column name(s), an array of column
			name(s) or instance(s) of SQLOrderingRule for order by clause
			and a flag to use LIKE operator.
		]]
	}
	var sb = new StringBuilder()
	sb.appendString("SELECT ")
	sb.appendString(createColumnSelectionString(columns))
	sb.appendString(" FROM ")
	sb.appendString(prepareTableName(table))
	var first = true
	var keys as vector<string>
	if criteria {
		keys = criteria.getKeys()
		foreach key as string in keys {
			if first {
				sb.appendString(" WHERE ")
				first = false
			}
			else {
				sb.appendString(" AND ")
			}
			sb.appendString(prepareColumnName(key))
			var value = criteria.getString(key)
			if value == null {
				sb.appendString(" IS NULL")
			}
			else {
				if likeOperator {
					sb.appendString(" LIKE ?")
				}
				else {
					sb.appendString(" = ?")
				}
			}
		}
	}
	sb.appendString(createOrderByString(order))
	if limit > 0 {
		sb.appendString(" LIMIT ")
		sb.appendString(String.forInteger(limit))
	}
	if offset > 0 {
		sb.appendString(" OFFSET ")
		sb.appendString(String.forInteger(offset))
	}
	sb.appendCharacter(';')
	var sql = sb.toString()
	var stmt = await prepareStatement(sql)
	if not stmt:
		return null
	if keys {
		foreach key as string in keys {
			var val = criteria.getString(key)
			if val == null:
				continue
			if likeOperator {
				stmt.addParamString("%" .. val .. "%")
			}
			else {
				stmt.addParamString(val)
			}
		}
	}
	return stmt
}

func prepareCountRecordsStatement(table as string, criteria as DynamicMap, likeOperator as bool = false) async virtual as SQLStatement
{
	meta {
		description [[
			Creates an instance of SQLStatement for select count statement
			with the specified database table name and a map of criteria.
		]]
	}
	var sb = new StringBuilder()
	sb.appendString("SELECT COUNT(*) AS count FROM ")
	sb.appendString(prepareTableName(table))
	var first = true
	var keys as vector<string>
	if criteria {
		keys = criteria.getKeys()
		foreach key as string in keys {
			if first {
				sb.appendString(" WHERE ")
				first = false
			}
			else {
				sb.appendString(" AND ")
			}
			sb.appendString(prepareColumnName(key))
			var value = criteria.getString(key)
			if value == null {
				sb.appendString(" IS NULL")
			}
			else {
				if likeOperator {
					sb.appendString(" LIKE ?")
				}
				else {
					sb.appendString(" = ?")
				}
			}
		}
	}
	sb.appendCharacter(';')
	var stmt = assert await prepareStatement(sb.toString())
	if keys {
		foreach key as string in keys {
			var val = criteria.getString(key)
			if val == null:
				continue
			if likeOperator {
				stmt.addParamString("%" .. val .. "%")
			}
			else {
				stmt.addParamString(val)
			}
		}
	}
	return stmt
}

func prepareSelectDistinctValuesStatement(table as string, column as string) async virtual as SQLStatement
{
	meta {
		description [[
			Creates an instance of SQLStatement for query distinct values
			with the specified database table name and column name.
		]]
	}
	assert String.isNotEmpty(table) && String.isNotEmpty(column)
	var sb = new StringBuilder()
	sb.appendString("SELECT DISTINCT ")
	sb.appendString(prepareColumnName(column))
	sb.appendString(" FROM ")
	sb.appendString(prepareTableName(table))
	sb.appendString(";")
	return await prepareStatement(sb.toString())
}

func prepareInsertStatement(table as string, data as DynamicMap) async virtual as SQLStatement
{
	meta {
		description [[
			Creates an instance of SQLStatement for insert statement with the
			specified database table name and an instance of DynamicMap for values.
		]]
	}
	assert String.isNotEmpty(table) && data && data.getCount() > 0
	var sb = new StringBuilder()
	sb.appendString("INSERT INTO ")
	sb.appendString(prepareTableName(table))
	sb.appendString(" ( ")
	var first = true
	var keys = data.getKeys()
	foreach key in keys {
		if not first:
			sb.appendCharacter(',')
		sb.appendString(prepareColumnName(key as string))
		first = false
	}
	sb.appendString(" ) VALUES ( ")
	first = true
	foreach key in keys {
		if not first:
			sb.appendCharacter(',')
		if data.get(key) == null {
			sb.appendString("NULL")
		}
		else {
			sb.appendCharacter('?')
		}
		first = false
	}
	sb.appendString(" );")
	var stmt = assert await prepareStatement(sb.toString())
	foreach key in keys {
		var o = data.get(key)
		if o == null:
			continue
		if o is string || o is StringObject {
			stmt.addParamString(String.asString(o))
		}
		else if o is IntegerObject {
			stmt.addParamInteger(Integer.asInteger(o))
		}
		else if o is LongIntegerObject {
			stmt.addParamLongInteger(LongInteger.asLong(o))
		}
		else if o is DoubleObject {
			stmt.addParamDouble(Double.asDouble(o))
		}
		else if o is BufferObject {
			stmt.addParamBlob((o as! BufferObject).toBuffer())
		}
		else if o is buffer {
			stmt.addParamBlob(o as buffer)
		}
		else if o is BooleanObject {
			stmt.addParamInteger(((o as! BooleanObject).toBoolean()) ? 1 : 0)
		}
		else {
			var s = String.asString(o)
			if not s:
				s = ""
			stmt.addParamString(s)
		}
	}
	return stmt
}

func prepareUpdateStatement(table as string, criteria as DynamicMap, data as DynamicMap) async virtual as SQLStatement
{
	meta {
		description [[
			Creates an instance of SQLStatement for update statement with the
			specified database table name, an instance of DynamicMap for
			criteria and an instance of DynamicMap for values.
		]]
	}
	assert String.isNotEmpty(table) && data && data.getCount() > 0
	var sb = new StringBuilder()
	sb.appendString("UPDATE ")
	sb.appendString(prepareTableName(table))
	sb.appendString(" SET ")
	var params = new vector<object>
	var first = true
	var keys = data.iterateKeys()
	while keys {
		var key = keys.next()
		if not key:
			break
		if not first:
			sb.appendString(", ")
		sb.appendString(prepareColumnName(key))
		var value = data.get(key)
		if value == null {
			sb.appendString(" = NULL")
		}
		else {
			sb.appendString(" = ?")
			params += value
		}
		first = false
	}
	if criteria && criteria.getCount() > 0 {
		sb.appendString(" WHERE ")
		first = true
		var criterias = criteria.iterateKeys()
		while criterias {
			var criterium = criterias.next()
			if not criterium:
				break
			if not first:
				sb.appendString(" AND ")
			sb.appendString(prepareColumnName(criterium))
			var value = criteria.get(criterium)
			if value == null {
				sb.appendString(" IS NULL")
			}
			else {
				sb.appendString(" = ?")
				params += value
			}
			first = false
		}
	}
	sb.appendCharacter(';')
	var stmt = assert await prepareStatement(sb.toString())
	foreach o in params {
		if o is BufferObject {
			stmt.addParamBlob((o as! BufferObject).toBuffer())
		}
		else if o is buffer {
			stmt.addParamBlob(o as! buffer)
		}
		else if o is BooleanObject {
			stmt.addParamInteger(((o as! BooleanObject).toBoolean()) ? 1 : 0)
		}
		else {
			var s = String.asString(o)
			if not s:
				s = ""
			stmt.addParamString(s)
		}
	}
	return stmt
}

func prepareDeleteStatement(table as string, criteria as DynamicMap) async virtual as SQLStatement
{
	meta {
		description [[
			Creates an instance of SQLStatement for delete statement with the
			specified database table name, an instance of DynamicMap for
			criteria and an instance of DynamicMap for values.
		]]
	}
	assert String.isNotEmpty(table)
	var sb = new StringBuilder()
	sb.appendString("DELETE FROM ")
	sb.appendString(prepareTableName(table))
	var params = new vector<object>
	if criteria && criteria.getCount() > 0 {
		sb.appendString(" WHERE ")
		var first = true
		var criterias = criteria.iterateKeys()
		while criterias {
			var criterium = criterias.next()
			if not criterium:
				break
			if not first:
				sb.appendString(" AND ")
			sb.appendString(prepareColumnName(criterium))
			sb.appendString(" = ?")
			first = false
			params += criteria.get(criterium)
		}
	}
	sb.appendCharacter(';')
	var stmt = await prepareStatement(sb.toString())
	if not stmt:
		return null
	foreach o in params {
		if o is BufferObject {
			stmt.addParamBlob((o as! BufferObject).toBuffer())
		}
		else if o is buffer {
			stmt.addParamBlob(o as! buffer)
		}
		else if o is BooleanObject {
			stmt.addParamInteger(((o as! BooleanObject).toBoolean()) ? 1 : 0)
		}
		else {
			var s = String.asString(o)
			if not s:
				s = ""
			stmt.addParamString(s)
		}
	}
	return stmt
}

func prepareTableName(tableName as string) virtual as string:
	return tableName

func prepareColumnName(columnName as string) virtual as string:
	return columnName
