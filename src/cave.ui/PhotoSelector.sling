
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

IFDEF "target_ios"
{
	depend "plist: { \"NSPhotoLibraryUsageDescription\" : \"This app requires access to the photo library.\" }"
	IFDEF "target_objc" {
		depend "objc-header-h:<UIKit/UIKit.h>"
	}
	ELSE IFDEF "target_swift" {
		depend "swift-import:UIKit"
	}

	class MyImagePickerDelegate implements !"UIImagePickerControllerDelegate" implements !"UINavigationControllerDelegate"
	{
		IFDEF "target_swift" {
			basetype !"NSObject" type extends

			ctor override:
				;
		}

		prop callback as function<void, Image, string, Error>

		IFDEF "target_objc" {
			lang "objc" {{{
				- (void)imagePickerController:(UIImagePickerController*)picker didFinishPickingMediaWithInfo:(NSDictionary*)info
				{
					UIImage *image = [info objectForKey:UIImagePickerControllerEditedImage];
					NSURL *url = [info objectForKey:UIImagePickerControllerReferenceURL];
					[self onImagePicked:image filepath:url.path];
					objc_removeAssociatedObjects(picker);
					[picker dismissViewControllerAnimated:YES completion:NULL];
				}
			}}}
		}
		ELSE IFDEF "target_swift" {
			lang "swift" {{{
				func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any])
				{
					var image = info[.editedImage] as? UIImage
					var url = info[.referenceURL] as? URL
					self.onImagePicked(image, url!.path)
					objc_removeAssociatedObjects(picker)
					picker.dismiss(animated: true)
				}
			}}}
		}

		func onImagePicked(image as !"UIImage", filepath as string)
		{
			if callback {
				var file = File.forPath(filepath)
				if image:
					callback(ImageForIOS.forUIImage(image), file.getBasename(), null)
			}
		}
	}
}

var context as GuiApplicationContext

ctor(context as GuiApplicationContext)
{
	this.context = context
}

func openPhotoDialog(widget as Widget, callback as function<void, Image, string, Error>)
{
	var cb final #used = callback
	IFDEF "target_android" {
		var screen = ScreenForWidget.findScreenForWidget(widget)
		if(screen == null) {
			if(cb != null) {
				cb(null, null, Error.forCode("no_screen_found"))
			}
			return
		}
		var actx = (context as GuiApplicationContextForAndroid).getAndroidActivityContext()
		var ctx final = actx
		screen.setAndroidActivityResultHandler(func(requestCode as int, resultCode as int, data as !"android.content.Intent") {
			if(requestCode != 0) {
				if(cb != null) {
					cb(null, null, Error.forCode("invalid_request_code"))
				}
				return
			}
			var ok as int
			IFDEF "target_java" {
				ok = lang "java" int {{{ android.app.Activity.RESULT_OK }}}
			}
			ELSE IFDEF "target_kotlin" {
				ok = lang "kotlin" int {{{ android.app.Activity.RESULT_OK }}}
			}
			if(resultCode != ok) {
				if(cb != null) {
					cb(null, null, null)
				}
				return
			}
			var img as Image
			var imgName as string
			IFDEF "target_java" {
				lang "java" {{{
					android.net.Uri uri = data.getData();
					android.database.Cursor returnCursor = ctx.getContentResolver().query(uri, null, null, null, null);
					int nameIndex = returnCursor.getColumnIndex(android.provider.OpenableColumns.DISPLAY_NAME);
					returnCursor.moveToFirst();
					imgName = returnCursor.getString(nameIndex);
					try {
						java.io.InputStream stream = ctx.getContentResolver().openInputStream(data.getData());
						android.graphics.Bitmap bitmap = android.graphics.BitmapFactory.decodeStream(stream);
						stream.close();
						img = cave.ImageForAndroid.forAndroidBitmap(bitmap);
					} catch (java.io.FileNotFoundException e) {
						e.printStackTrace();
					} catch (java.io.IOException e) {
						e.printStackTrace();
					}
				}}}
			}
			ELSE IFDEF "target_kotlin" {
				lang "kotlin" {{{
					val uri: android.net.Uri = data!!.getData()
					val returnCursor: android.database.Cursor = ctx!!.getContentResolver()!!.query(uri, null, null, null, null)
					val nameIndex = returnCursor!!.getColumnIndex(android.provider.OpenableColumns.DISPLAY_NAME)
					returnCursor!!.moveToFirst()
					imgName = returnCursor!!.getString(nameIndex)
					try {
						val stream: java.io.InputStream = ctx!!.getContentResolver()!!.openInputStream(data.getData())
						val bitmap = android.graphics.BitmapFactory.decodeStream(stream)
						stream!!.close()
						img = cave.ImageForAndroid.forAndroidBitmap(bitmap)
					}
					catch (e: java.io.FileNotFoundException) {
						e.printStackTrace()
					}
					catch (e: java.io.IOException) {
						e.printStackTrace()
					}
				}}}
			}
			if(cb != null) {
				if(img == null) {
					cb(null, null, Error.forCode("no_photo_data"))
				}
				else {
					cb(img, imgName, null)
				}
			}
		})
		var act = (context as GuiApplicationContextForAndroid).getAndroidActivityContext() as !"android.app.Activity"
		var activity final = act
		IFDEF "target_java" {
			lang "java" {{{
				android.content.Intent intent = new android.content.Intent(android.content.Intent.ACTION_GET_CONTENT);
				intent.setType("image/*");
				try {
					activity.startActivityForResult(android.content.Intent.createChooser(intent, "Select a photo"), 0);
				}
				catch(android.content.ActivityNotFoundException ex) {
				}
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				val intent = android.content.Intent(android.content.Intent.ACTION_GET_CONTENT)
				intent!!.setType("image/*")
				try {
					activity!!.startActivityForResult(android.content.Intent.createChooser(intent, "Select a photo"), 0)
				}
				catch (ex: android.content.ActivityNotFoundException) {
					ex.printStackTrace()
				}
			}}}
		}
	}
	ELSE IFDEF "target_html" {
		var img as Image #used
		var m as object #used
		lang "js" {{{
			var fileSelector = document.createElement('input');
			fileSelector.setAttribute('type', "file");
			fileSelector.setAttribute('accept', "image/*");
			fileSelector.addEventListener("change", function handleFiles() {
				var files = fileSelector.files;
				if(typeof files === "undefined" || files === null) {
					console.log("undefined files");
					return;
				}
				var file = files[0];
				if(typeof file === "undefined" || file === null) {
					console.log("undefined file");
					return;
				}
				var reader = new FileReader();
				m = new Image();
				reader.onload = function(event) {
					if(reader.readyState === 2) {
						m.src = event.target.result;
						m.onload = function() {
							img = CaveImageForBrowser.NEW();
							img.image = m;
							var path = fileSelector.value;
							var filename = path.substring(path.lastIndexOf("\\")+1);
							console.log("Filename: " + filename);
							if(cb != null) {
								if(filename == null) {
									cb(null, null, Error.forCode("no_file_data"))
								}
								else {
									cb(img, filename, null)
								}
							}
						}
					}
				};
				reader.readAsDataURL(file);
			});
			fileSelector.click();
		}}}
	}
	ELSE IFDEF "target_ios" {
		var screen = ScreenForWidget.findScreenForWidget(widget)
		if !screen {
			if cb:
				cb(null, null, Error.forCode("no_screen_found"))
			return
		}
		var delegate = new MyImagePickerDelegate()
		delegate.setCallback(cb)
		IFDEF "target_objc" {
			lang "objc" {{{
				UIImagePickerController *picker = [[UIImagePickerController alloc] init];
				picker.delegate = delegate;
				picker.allowsEditing = YES;
				picker.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;
				objc_setAssociatedObject(picker, "_pickerDelegate", delegate, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
				[screen presentViewController:picker animated:YES completion:nil];
			}}}
		}
		ELSE IFDEF "target_swift" {
			lang "swift" {{{
				var picker = UIImagePickerController()
				picker.delegate = delegate
				picker.allowsEditing = true
				picker.sourceType = UIImagePickerController.SourceType.photoLibrary
				objc_setAssociatedObject(picker, "_pickerDelegate", delegate, objc_AssociationPolicy.OBJC_ASSOCIATION_RETAIN_NONATOMIC)
				screen.present(picker, animated: true)
			}}}
		}
	}
	ELSE {
		ERROR "Not implemented"
		if(cb != null) {
			cb(null, null, Error.forCode("not_supported"))
		}
	}
}
