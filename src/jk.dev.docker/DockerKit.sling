
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.log
import jk.json

class:

var ctx as LoggingContext
var docker as Docker

ctor(ctx as LoggingContext):
	this.ctx = ctx

func getDocker as Docker
{
	if not docker:
		docker = new Docker(ctx)
	return docker
}

func buildImage(params as map<string,object>) as string
{
	var docker = getDocker()
	var dockerfile = File.asFile(Map.get(params, "dockerfile"))
	var context = File.asFile(Map.get(params, "context"))
	var directory = File.asFile(Map.get(params, "directory"))
	var files = File.asFileVector(Map.get(params, "files"))
	var n = 0
	if dockerfile:
		n++
	if directory:
		n++
	if files:
		n++
	if n < 1:
		Error.throw("oneParameterRequired", [ "dockerfile", "directory", "files" ])
	if n > 1:
		Error.throw("onlyOneParameterAllowed", [ "dockerfile", "directory", "files" ])
	var tag = String.asString(Map.get(params, "tag"))
	var entrypoint = String.asString(Map.get(params, "entrypoint"))
	var v as string
	if dockerfile {
		v = docker.buildImageFromDockerfile(dockerfile, context)
	}
	else if directory {
		v = docker.buildImageFromDirectory(directory, entrypoint)
	}
	else if files {
		v = docker.buildImageFromFiles(files, entrypoint)
	}
	if v && tag:
		docker.tag(v, tag)
	return v
}

func toRunner(params as map<string,object>) as DockerImageRunner
{
	var image = String.asString(Map.get(params, "image"))
	if not image:
		Error.throw("missingParameter", "DockerKit:toRunner:image")
	var env = DynamicMap.asDynamicMap(Map.get(params, "env"))
	var ports = DynamicVector.asDynamicVector(Map.get(params, "ports"))
	var port = String.asString(Map.get(params, "port"))
	if String.isNotEmpty(port) {
		if not ports:
			ports = new DynamicVector()
		ports.appendString(port)
	}
	var v = new DockerImageRunner()
	v.setImageId(image)
	if ports:
		v.setPorts(ports.toVectorOfStrings())
	if env:
		v.setEnvironment(env.toStringMap())
	return v
}

func executeImage(params as map<string,object>) as int
{
	var runner = toRunner(params)
	if not runner:
		Error.throw("invalidParameters", params)
	var docker = getDocker()
	return docker.executeRunner(runner)
}
