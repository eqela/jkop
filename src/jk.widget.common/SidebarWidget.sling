
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is LayerWidget #widget:

func forItems(ctx as GuiApplicationContext, items as vector<Widget>, color as Color = null) static as this
{
	var v = new this(ctx)
	v.setWidgetBackgroundColor(color)
	v.setWidgetItems(items)
	return v
}

pvar widgetBackgroundColor as Color
pvar defaultActionItemWidgetBackgroundColor as Color
pvar defaultActionItemWidgetTextColor as Color
pvar defaultLabelItemWidgetBackgroundColor as Color
pvar defaultLabelItemWidgetTextColor as Color
pvar widgetItems as vector<Widget>
pvar widgetScrollEnabled = true

func addToWidgetItems(widget as Widget)
{
	assert widget
	if widgetItems == null:
		widgetItems = new vector<Widget>
	widgetItems += widget
}

func determineBackgroundColor as Color
{
	var wc = widgetBackgroundColor
	if wc == null:
		wc = Color.white()
	return wc
}

func determineTextColor(backgroundColor as Color, textColor as Color, defaultTextColor as Color, lowerBackgroundColor as Color) private as Color
{
	var tc = textColor
	if tc == null:
		tc = defaultTextColor
	if tc == null {
		var cc = lowerBackgroundColor
		if cc == null:
			cc = determineBackgroundColor()
		if cc.isDarkColor() {
			tc = Color.white()
		}
		else {
			tc = Color.black()
		}
	}
	return tc
}

func addLabelItem(text as string, bold as bool = true, backgroundColor as Color = null, textColor as Color = null) as Widget
{
	var v = new LayerWidget(context)
	var bgc = backgroundColor
	if bgc == null:
		bgc = defaultLabelItemWidgetBackgroundColor
	var tc = determineTextColor(backgroundColor, textColor, defaultLabelItemWidgetTextColor, bgc)
	if bgc:
		v.addWidget(CanvasWidget.forColor(context, bgc))
	var mm3 = context.getHeightValue("3mm")
	var lbl = LabelWidget.forText(context, text)
	lbl.setWidgetFontSize(mm3)
	lbl.setWidgetTextColor(tc)
	lbl.setWidgetFontBold(bold)
	v.addWidget(LayerWidget.forWidget(context, lbl, mm3))
	addToWidgetItems(v)
	return this
}

func addActionItem(text as string, handler as function, bold as bool = false, backgroundColor as Color = null, textColor as Color = null) as Widget
{
	var v = new LayerWidget(context)
	var bgc = backgroundColor
	if bgc == null:
		bgc = defaultActionItemWidgetBackgroundColor
	var tc = determineTextColor(backgroundColor, textColor, defaultActionItemWidgetTextColor, bgc)
	if bgc:
		v.addWidget(CanvasWidget.forColor(context, bgc))
	var mm3 = context.getHeightValue("3mm")
	var lbl = LabelWidget.forText(context, text)
	lbl.setWidgetFontSize(mm3)
	lbl.setWidgetTextColor(tc)
	lbl.setWidgetFontBold(bold)
	v.addWidget(LayerWidget.forWidget(context, lbl, mm3))
	if handler:
		Widget.setWidgetClickHandler(v, handler)
	IFDEF "target_html" {
		HTMLDOM.setStyle(v.element, "cursor", "pointer")
	}
	addToWidgetItems(v)
	return this
}

func initializeWidget override
{
	base.initializeWidget()
	var wc = determineBackgroundColor()
	addWidget(CanvasWidget.forColor(context, wc))
	var vbox = VerticalBoxWidget.forContext(context, 0)
	if Vector.isEmpty(widgetItems) == false {
		foreach item in widgetItems:
			vbox.addWidget(item)
	}
	IFNDEF "target_html" {
		var tml = new TopMarginLayerWidget(context)
		tml.addWidget(LayerWidget.forWidgetAndWidth(context, vbox, context.getWidthValue("50mm")))
		applyScroller(tml)
	}
	ELSE {
		applyScroller(LayerWidget.forWidgetAndWidth(context, vbox, context.getWidthValue("50mm")))
	}
}

func applyScroller(widget as Widget) private
{
	assert widget
	if not widgetScrollEnabled {
		addWidget(widget)
	}
	else {
		var scroller = VerticalScrollerWidget.forWidget(context, widget)
		scroller.setWidgetScrollBarDisabled(true)
		addWidget(scroller)
	}
}
