
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.gfx
import jk.render

class is CommonGraphRenderer:

pvar barFillColor = Color.forString("#8080FF")
pvar barOutlineColor = Color.black()

func renderGraph(ctx as RenderingContext, ox as double, ooy as double, width as double, oheight as double) override
{
	var values = getValues()
	if values == null || sizeof values < 2:
		return
	var labels = getLabels()
	var oy = ooy
	var height = oheight
	var valueCount = sizeof values
	var high = values[0]
	var low = values[0]
	var labelheight = height * 0.015
	for(var n=0; n<valueCount; n++) {
		if values[n] < low:
			low = values[n]
		if values[n] > high:
			high = values[n]
	}
	if low >= 0 {
		low = 0
		if labels:
			height -= labelheight * 2
	}
	if high <= 0 {
		high = 0
		if labels {
			oy += labelheight * 2
			height -= labelheight * 2
		}
	}
	var range = high - low
	var baseliney as double
	if low >= 0 {
		baseliney = height
	}
	else {
		baseliney = height - (-low / range) * height
	}
	ctx.setStrokeStyle(barOutlineColor)
	ctx.setFillStyle(barFillColor)
	var blockSize = (width / valueCount)
	for(var n=0; n<valueCount; n++) {
		var x = (n as double) * blockSize
		var y as double
		var h as double
		if values[n] >= 0 {
			h = (values[n] / range) * height
			y = baseliney - h
		}
		else {
			y = baseliney
			h = (-values[n] / range) * height
		}
		var barmargin = blockSize * 0.1
		var barwidth = blockSize - barmargin*2
		ctx.fillRect(ox + x + barmargin, oy + y, barwidth, h)
		ctx.strokeRect(ox + x + barmargin, oy + y, barwidth, h)
		var label = Vector.get(labels, n)
		if String.isNotEmpty(label) {
			ctx.save()
			var labelFont = FontDescription.forName("Arial")
			labelFont.setSize(Length.forPoints(labelheight))
			ctx.setFillStyle(Color.forString("#686868"))
			ctx.setFont(labelFont)
			ctx.setTextAlign(RenderingContext.ALIGN_CENTER)
			ctx.setTextBaseline(RenderingContext.BASELINE_MIDDLE)
			var lx = ox + x + barmargin + barwidth / 2
			var ly as double
			if values[n] >= 0 {
				ly = oy + baseliney + labelheight + labelheight/2
			}
			else {
				ly = oy + baseliney - labelheight - labelheight/2
			}
			ctx.fillText(label, lx, ly, 0)
			ctx.restore()
		}
	}
	ctx.stroke()
}
