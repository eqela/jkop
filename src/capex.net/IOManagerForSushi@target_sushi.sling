
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is IOManager:

class MyEntry is IOManagerEntry
{
	prop epollfd as int
	prop fd as int
	var objref = 0
	var rrl as function
	var wrl as function

	func onReadReady
	{
		var rrl = this.rrl
		assert rrl
		rrl()
	}

	func onWriteReady
	{
		var wrl = this.wrl
		assert wrl
		wrl()
	}

	func onReadWriteReady
	{
		var rrl = this.rrl
		var wrl = this.wrl
		if rrl:
			rrl()
		if wrl:
			wrl()
	}

	func setListeners(rrl as function, wrl as function)
	{
		this.rrl = rrl
		this.wrl = wrl
		update()
	}

	func setReadListener(rrl as function)
	{
		this.rrl = rrl
		update()
	}

	func setWriteListener(wrl as function)
	{
		this.wrl = wrl
		update()
	}

	func update
	{
		var epollfd = this.epollfd
		var fd = this.fd
		var myself = this
		var mode = -1
		if rrl && wrl {
			mode = 2
		}
		else if wrl {
			mode = 1
		}
		else if rrl {
			mode = 0
		}
		if mode < 0 {
			remove()
		}
		else {
			if objref > 0 {
				var objref = this.objref
				lang "lua" {{{
					_net:update_io_listener(epollfd, fd, mode, objref)
				}}}
			}
			else {
				var objref = 0
				lang "lua" {{{
					objref = _net:register_io_listener(epollfd, fd, mode, myself)
				}}}
				this.objref = objref
			}
		}
	}

	func remove
	{
		assert objref > 0
		var epollfd = this.epollfd
		var fd = this.fd
		var objref = this.objref
		lang "lua" {{{
			_net:remove_io_listener(epollfd, fd, objref)
		}}}
		this.objref = 0
	}
}

var exitflag as bool
var running = false
var epollfd = -1

ctor
{
	epollfd = lang "lua" int {{{ _net:create_io_manager() }}}
}

dtor
{
	close()
}

func close
{
	lang "lua" {{{
		_net:close_io_manager()
	}}}
}

func doExecute(ctx as LoggingContext) override as bool
{
	var epollfd = this.epollfd
	assert epollfd >= 0:
		Log.error(ctx, VALUE "__THIS__" .. ": Failed to initialize epoll file descriptor")
	exitflag = false
	running = true
	Log.debug(ctx, VALUE "__THIS__" .. " started")
	while exitflag == false {
		lang "lua" {{{
			_net:execute_io_manager(epollfd, -1)
		}}}
	}
	running = false
	Log.debug(ctx, VALUE "__THIS__" .. " ended")
	return true
}

func stop override
{
	exitflag = true
}

func isRunning as bool:
	return running

func add(o as object) override as IOManagerEntry
{
	assert epollfd >= 0
	var fdo = assert o as FileDescriptor
	var fd = fdo.getFileDescriptor()
	assert fd >= 0
	var v = new MyEntry()
	v.setEpollfd(epollfd)
	v.setFd(fd)
	return v
}
