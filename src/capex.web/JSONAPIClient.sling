
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class imports cape:

prop apiUrl as string

func getFullURL(api as string) virtual as string
{
	var url = apiUrl
	if String.isEmpty(url):
		url = "/"
	if url == "/" {
		if String.startsWith(api, "/"):
			return api
		return url .. api
	}
	if String.endsWith(url, "/") {
		if String.startsWith(api, "/"):
			return url .. String.getSubString(api, 1)
		return url .. api
	}
	if String.startsWith(api, "/"):
		return url .. api
	return url .. "/" .. api
}

func toUTF8Buffer(data as DynamicMap) private as buffer
{
	assert data
	return String.toUTF8Buffer(JSONEncoder.encode(data))
}

func customizeRequestHeaders(headers as KeyValueList<string,string>) virtual
{
}

func onStartSendRequest virtual
{
}

func onEndSendRequest virtual
{
}

func onDefaultErrorHandler(error as Error) virtual
{
}

func handleAsError(response as DynamicMap, callback as function<void,Error> = null) as bool
{
	var error = toError(response)
	if error {
		onError(error, callback)
		return true
	}
	return false
}

func toError(response as DynamicMap) as Error
{
	if not response:
		return Error.forCode("noServerResponse")
	if response.getString("status") == "error" {
		var v = new Error()
		v.setCode(response.getString("code"))
		v.setMessage(response.getString("message"))
		v.setDetail(response.getString("detail"))
		return v
	}
	return null
}

func onError(error as Error, callback as function<void,Error>) virtual
{
	assert callback:
		onDefaultErrorHandler(error)
	callback(error)
}

func onError(error as Error) virtual:
	onError(error, null)

func sendRequest(method as string, url as string, headers as KeyValueList<string,string>, data as buffer, callback as function<void,DynamicMap>, errorCallback as function<void,Error> = null)
{
	assert callback
	var ll final = callback
	var ecb final = errorCallback
	doSendRequest(method, url, headers, data, func(responseHeaders as KeyValueList<string,string>, body as buffer) {
		assert body:
			onError(Error.forCode("failedToConnect"), ecb)
		var jsonResponseBody = assert JSONParser.parse(String.forUTF8Buffer(body)) as DynamicMap:
			onError(Error.forCode("invalidServerResponse"), ecb)
		if not handleAsError(jsonResponseBody, ecb):
			ll(jsonResponseBody)
	}, ecb)
}

func doSendRequest(method as string, url as string, headers as KeyValueList<string,string>, data as buffer, callback as function<void, KeyValueList<string,string>, buffer>, errorCallback as function<void,Error> = null)
{
	assert callback
	var hrs = headers
	if not hrs {
		hrs = new KeyValueList<string,string>()
		hrs.add("Content-Type", "application/json")
	}
	var webClient = assert NativeWebClient.instance():
		onError(Error.forCode("noWebClient"), errorCallback)
	var ll final = callback
	customizeRequestHeaders(hrs)
	onStartSendRequest()
	var ecb final = errorCallback
	webClient.query(method, url, hrs, data, func(status as string, responseHeaders as KeyValueList<string,string>, body as buffer) {
		onEndSendRequest()
		assert body:
			onError(Error.forCode("failedToConnect"), ecb)
		ll(responseHeaders, body)
	})
}

func doGetFile(url as string, callback as function<void, KeyValueList<string,string>, buffer>, errorCallback as function<void, Error> = null):
	doSendRequest("GET", getFullURL(url), null, null, callback, errorCallback)

func doGet(url as string, callback as function<void, DynamicMap>, errorCallback as function<void, Error> = null):
	sendRequest("GET", getFullURL(url), null, null, callback, errorCallback)

func doPost(url as string, data as DynamicMap, callback as function<void, DynamicMap>, errorCallback as function<void, Error> = null):
	sendRequest("POST", getFullURL(url), null, toUTF8Buffer(data), callback, errorCallback)

func doPut(url as string, data as DynamicMap, callback as function<void, DynamicMap>, errorCallback as function<void, Error> = null):
	sendRequest("PUT", getFullURL(url), null, toUTF8Buffer(data), callback, errorCallback)

func doDelete(url as string, callback as function<void, DynamicMap>, errorCallback as function<void, Error> = null):
	sendRequest("DELETE", getFullURL(url), null, null, callback, errorCallback)

func uploadFile(url as string, data as buffer, mimeType as string, callback as function<void, DynamicMap>, errorCallback as function<void, Error> = null)
{
	var mt = mimeType
	if(String.isEmpty(mt)) {
		mt = "application/octet-stream"
	}
	var hdrs = new KeyValueList<string,string>()
	hdrs.add("content-type", mt)
	sendRequest("POST", getFullURL(url), hdrs, data, callback, errorCallback)
}
