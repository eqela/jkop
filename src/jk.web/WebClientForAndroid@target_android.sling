
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is WebClient:

depend "androidPermission:android.permission.INTERNET"

func query(method as string, url as string, requestHeaders as KeyValueList<string,string>, body as buffer, callback as function<void, string, KeyValueList<string,string>, buffer>) override
{
	if String.isEmpty(method) || String.isEmpty(url) {
		callback(null, null, null)
		return
	}
	if String.startsWith(url, "http://") == false && String.startsWith(url, "https://") == false {
		callback(null, null, null)
		return
	}
	var req #used = new WebClientRequest().setMethod(method).setUrl(url).setRequestHeaders(requestHeaders).setBody(body)
	IFDEF "target_java" {
		lang "java" {{{
			new WebClientTask(callback).executeOnExecutor(android.os.AsyncTask.THREAD_POOL_EXECUTOR, req);
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" {{{
			WebClientTask(callback).executeOnExecutor(android.os.AsyncTask.THREAD_POOL_EXECUTOR, req)
		}}}
	}
}

class WebClientRequest
{
	pvar method as string
	pvar url as string
	pvar requestHeaders as KeyValueList<string,string>
	pvar body as buffer
}

class WebClientResponse
{
	pvar responseCode as string
	pvar responseHeaders as KeyValueList<string, string>
	pvar responseBody as buffer
}

class WebClientTask is !"android.os.AsyncTask<WebClientRequest, Void, WebClientResponse>"
{
	var callback as function<void, string, KeyValueList<string,string>, buffer> #used
	var reader as !"java.io.InputStream" #used

	ctor(cb as function<void, string, KeyValueList<string,string>, buffer>)
	{
		callback = cb
	}

	func getConnectionForURL(url as string) private as !"java.net.HttpURLConnection"
	{
		var conn as !"java.net.HttpURLConnection" = null
		IFDEF "target_java" {
			lang "java" {{{
				try {
					conn = (java.net.HttpURLConnection)new java.net.URL(url).openConnection();
					conn.setReadTimeout(30000);
				}
				catch(Exception e) {
					e.printStackTrace();
					conn = null;
				}
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				try {
					conn = java.net.URL(url).openConnection() as java.net.HttpURLConnection
					conn.setReadTimeout(30000)
				}
				catch(e: Exception) {
					conn = null
				}
			}}}
		}
		return conn
	}

	func setRequestHeaders(conn as !"java.net.HttpURLConnection", requestHeaders as KeyValueList<string,string>) private
	{
		if requestHeaders {
			var iter = requestHeaders.iterate()
			loop {
				var nh as KeyValuePair<string,string> #force = iter.next()
				if nh == null:
					break
				var key #used = nh.key
				var value #used = nh.value
				IFDEF "target_java" {
					lang "java" {{{
						conn.setRequestProperty(key, value);
					}}}
				}
				ELSE IFDEF "target_kotlin" {
					lang "kotlin" {{{
						conn?.setRequestProperty(key, value)
					}}}
				}
			}
		}
	}

	func close
	{
		IFDEF "target_java" {
			lang "java" {{{
				try {
					reader.close();
				}
				catch(Exception e) {
					e.printStackTrace();
				}
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				try {
					reader?.close()
				}
				catch(e: Exception) {
					e.printStackTrace()
				}
			}}}
		}
	}

	func processResponse(conn as !"java.net.HttpURLConnection") private as WebClientResponse
	{
		var responseHeaders = new KeyValueList<string,string>()
		var responseCode as int #used
		var length as int #used
		IFDEF "target_java" {
			lang "java" {{{
				try {
					java.util.Map<String, java.util.List<String>> respHeaders = conn.getHeaderFields();
					for(java.util.Map.Entry<String, java.util.List<String>> rh : respHeaders.entrySet()) {
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				try {
					val respHeaders = conn!!.getHeaderFields()
					for (rh in respHeaders!!.entries) {
			}}}
		}
		var key as string
		IFDEF "target_java" {
			key = lang "java" string {{{ rh.getKey() }}}
		}
		ELSE IFDEF "target_kotlin" {
			key = lang "kotlin" string {{{ rh?.key }}}
		}
		if String.isEmpty(key):
			continue
		key = String.toLowerCase(key)
		var val as string #used = null
		IFDEF "target_java" {
			lang "java" {{{
				for(String s : rh.getValue()) {
					val = s;
				}
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				for (s in rh.value) {
					_val = s
				}
			}}}
		}
		responseHeaders.add(key, val)
		IFDEF "target_java" {
			lang "java" {{{
					}
					responseCode = conn.getResponseCode();
				}
				catch(Exception e) {
					e.printStackTrace();
				}
				try {
					reader = conn.getInputStream();
				}
				catch(Exception e) {
					e.printStackTrace();
					reader = null;
				}
				if(reader == null) {
					return(null);
				}
				byte[] buf = new byte[1024*32];
				byte[] responseBuffer = new byte[(1024 * 1024) * 2];
				while(true) {
					try {
						int r = reader.read(buf);
						if(r < 1) {
							break;
						}
						System.arraycopy(buf, 0, responseBuffer, length, r);
						length += r;
					}
					catch(Exception e) {
						e.printStackTrace();
						break;
					}
				}
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
					}
					responseCode = conn!!.getResponseCode()
				}
				catch(e: Exception) {
					e.printStackTrace()
				}
				try {
					reader = conn!!.getInputStream()
				}
				catch(e: Exception) {
					e.printStackTrace()
					reader = null
				}
				if(reader == null) {
					return(null)
				}
				var buf = kotlin.ByteArray(1024*32)
				var responseBuffer = kotlin.ByteArray(1024 * 1024 * 2)
				while(true) {
					try {
						val rdr = reader
						var r = rdr!!.read(buf)
						if(r < 1) {
							break
						}
						System.arraycopy(buf, 0, responseBuffer, length, r)
						length += r
					}
					catch(e: Exception) {
						e.printStackTrace()
						break
					}
				}
			}}}
		}
		var bb = malloc length
		var i = 0
		while true {
			if i > length-1:
				break
			var c as int
			IFDEF "target_java" {
				c = lang "java" int {{{ (int)(responseBuffer[i] & 0xFF) }}}
				jk.lang.Buffer.setByte(bb, i, c)
			}
			ELSE IFDEF "target_kotlin" {
				lang "kotlin" {{{
					c = responseBuffer[i].toInt() and 0xFF as kotlin.Int
					jk.lang.Buffer.setByte(bb, i.toLong(), c.toUByte())
				}}}
			}
			i++
		}
		IFDEF "target_java" {
			lang "java" {{{
				conn.disconnect();
				conn = null;
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				conn!!.disconnect()
			}}}
		}
		if responseCode == 0:
			responseCode = 404
		var response = new WebClientResponse()
		response.setResponseCode(String.forInteger(responseCode))
		response.setResponseHeaders(responseHeaders)
		response.setResponseBody(bb)
		return response
	}

	IFDEF "target_java" {
		lang "java" {{{
			protected WebClientResponse doInBackground(WebClientRequest... req) {
				java.lang.String url = req[0].getUrl();
				java.lang.String method = req[0].getMethod();
				jk.lang.KeyValueList<java.lang.String, java.lang.String> requestHeaders = req[0].getRequestHeaders();
				byte[] body = req[0].getBody();

				java.net.HttpURLConnection conn = getConnectionForURL(url);
				if(conn == null) {
					return(null);
				}
				setRequestHeaders(conn, requestHeaders);
				try {
					conn.setRequestMethod(method);
				}
				catch(Exception e) {
					e.printStackTrace();
				}
				if(method.equalsIgnoreCase("POST") || method.equalsIgnoreCase("PUT")) {
					java.io.OutputStream writer = null;
					try {
						writer = conn.getOutputStream();
						writer.write(body);
						writer.flush();
					}
					catch(Exception e) {
						e.printStackTrace();
					}
					finally {
						try {
							writer.close();
						}
						catch(Exception e) {
							e.printStackTrace();
						}
					}
				}
				return(processResponse(conn));
			}

			protected void onProgressUpdate(Void... progress) {
			}

			protected void onPostExecute(WebClientResponse res) {
				java.lang.String responseCode = "404";
				jk.lang.KeyValueList<java.lang.String, java.lang.String> responseHeaders = null;
				byte[] body = null;
				if(res != null) {
					responseCode = res.getResponseCode();
					responseHeaders = res.getResponseHeaders();
					body = res.getResponseBody();
				}
				if(callback != null) {
					callback.execute(responseCode, responseHeaders, body);
				}
				close();
			}
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" {{{
			protected override fun doInBackground(vararg req: WebClientRequest): WebClientResponse? {
				var url = req[0].getUrl()
				var method = req[0].getMethod()
				var requestHeaders = req[0].getRequestHeaders()
				var body = req[0].getBody()
				var conn = getConnectionForURL(url)
				if (conn == null) {
					return null
				}
				setRequestHeaders(conn, requestHeaders)
				try {
					conn.setRequestMethod(method)
				}
				catch (e:Exception) {
					e.printStackTrace()
				}
				if (method.equals("POST", ignoreCase = true) || method.equals("PUT", ignoreCase = true)) {
					val w: java.io.OutputStream? = null
					var writer = w
					try {
						writer = conn.getOutputStream()
						writer.write(body?.toByteArray())
						writer.flush()
					}
					catch (e:Exception) {
						e.printStackTrace()
					}
					finally {
						try {
							writer?.close()
						}
						catch (e: Exception) {
							e.printStackTrace()
						}
					}
				}
				return (processResponse(conn))
			}

			protected override fun onProgressUpdate(vararg progress: Void) {
			}

			protected override fun onPostExecute(res: WebClientResponse) {
				var responseCode: kotlin.String? = null
				responseCode = "404"
				var responseHeaders: jk.lang.KeyValueList<kotlin.String?, kotlin.String?>? = null
				var body: UByteArray? = null
				if (res != null) {
					responseCode = res.getResponseCode()
					responseHeaders = res.getResponseHeaders()
					body = res?.getResponseBody()
				}
				if (callback != null) {
					callback!!.invoke(responseCode, responseHeaders, body)
				}
				close()
			}
		}}}
	}
}
