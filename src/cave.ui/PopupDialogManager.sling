
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import cave

class:

prop context as GuiApplicationContext
prop parent as Widget
prop backgroundColor as Color
prop headerBackgroundColor as Color
prop headerTextColor as Color
prop messageTextColor as Color
prop positiveButtonColor as Color
prop negativeButtonColor as Color

ctor(context as GuiApplicationContext, parent as Widget)
{
	this.context = context
	this.parent = parent
	positiveButtonColor = Color.forRGB(0x80, 0xcc, 0x80)
	negativeButtonColor = Color.forRGB(0xcc, 0x80, 0x80)
	backgroundColor = null
	headerBackgroundColor = null
	headerTextColor = null
	messageTextColor = null
}

func setButtonColor(color as Color) as this
{
	positiveButtonColor = color
	negativeButtonColor = color
	return(this)
}

func showTextInputDialog(title as string, prompt as string, callback as function<void,string> = null)
{
	checkForDefaultColors()
	var mm2 = context.getWidthValue("2mm")
	var mm3 = context.getWidthValue("3mm")
	var widget = new LayerWidget(context)
	widget.setWidgetWidthRequest(context.getWidthValue("100mm"))
	widget.addWidget(CanvasWidget.forColor(context, backgroundColor))
	var titleLabel = LabelWidget.forText(context, title)
	titleLabel.setWidgetFontSize(mm3)
	titleLabel.setWidgetTextColor(headerTextColor)
	titleLabel.setWidgetFontBold(true)
	var box = new VerticalBoxWidget(context)
	box.addWidget(new LayerWidget(context)
		.addWidget(CanvasWidget.forColor(context, headerBackgroundColor))
		.addWidget(AlignWidget.forWidget(context, titleLabel, 0, 0.5).setWidgetMargin(mm3))
	)
	var sbox = new VerticalBoxWidget(context)
	sbox.setWidgetMargin(mm3)
	sbox.setWidgetSpacing(mm3)
	var messageLabel = LabelWidget.forText(context, prompt)
	messageLabel.setWidgetTextAlign(LabelWidget.ALIGN_CENTER)
	messageLabel.setWidgetFontSize(mm3)
	messageLabel.setWidgetTextColor(messageTextColor)
	sbox.addWidget(messageLabel)
	var input final = new TextInputWidget(context)
	input.setWidgetBackgroundColor(Color.forRGB(200, 200, 200))
	input.setWidgetPadding(context.getHeightValue("2mm"))
	input.setWidgetFontSize(context.getHeightValue("3000um"))
	sbox.addWidget(input)
	var buttons = new HorizontalBoxWidget(context)
	buttons.setWidgetSpacing(mm3)
	var padding = context.getHeightValue("2000um")
	var noButton = TextButtonWidget.forText(context, "Cancel", null)
	noButton.setWidgetBackgroundColor(negativeButtonColor)
	noButton.setWidgetPadding(padding)
	buttons.addWidget(noButton, 1.0)
	var yesButton = TextButtonWidget.forText(context, "OK", null)
	yesButton.setWidgetBackgroundColor(positiveButtonColor)
	yesButton.setWidgetPadding(padding)
	buttons.addWidget(yesButton, 1.0)
	sbox.addWidget(buttons)
	box.addWidget(sbox)
	widget.addWidget(box)
	var pp final = PopupWidget.forContentWidget(context, LayerWidget.forWidget(context, widget, mm2))
	var cb final = callback
	pp.showPopup(parent)
	yesButton.setWidgetClickHandler(func {
		pp.hidePopup()
		if(cb != null) {
			cb(input.getWidgetText())
		}
	})
	noButton.setWidgetClickHandler(func {
		pp.hidePopup()
		if(cb != null) {
			cb(null)
		}
	})
}

func showMessageDialog(title as string, message as string, callback as function = null)
{
	checkForDefaultColors()
	var mm2 = context.getWidthValue("2mm")
	var mm3 = context.getWidthValue("3mm")
	var widget = new LayerWidget(context)
	widget.setWidgetWidthRequest(context.getWidthValue("100mm"))
	widget.addWidget(CanvasWidget.forColor(context, Color.white()))
	var titleLabel = LabelWidget.forText(context, title)
	titleLabel.setWidgetFontSize(mm3)
	titleLabel.setWidgetTextColor(headerTextColor)
	titleLabel.setWidgetFontBold(true)
	var box = new VerticalBoxWidget(context)
	box.addWidget(new LayerWidget(context)
		.addWidget(CanvasWidget.forColor(context, headerBackgroundColor))
		.addWidget(AlignWidget.forWidget(context, titleLabel, 0, 0.5).setWidgetMargin(mm3))
	)
	var sbox = new VerticalBoxWidget(context)
	sbox.setWidgetMargin(mm3)
	sbox.setWidgetSpacing(mm3)
	var messageLabel = LabelWidget.forText(context, message)
	messageLabel.setWidgetTextAlign(LabelWidget.ALIGN_CENTER)
	messageLabel.setWidgetFontSize(mm3)
	messageLabel.setWidgetTextColor(messageTextColor)
	sbox.addWidget(messageLabel)
	var buttons = new HorizontalBoxWidget(context)
	buttons.setWidgetSpacing(mm3)
	var okButton = TextButtonWidget.forText(context, "OK", null)
	okButton.setWidgetBackgroundColor(positiveButtonColor)
	okButton.setWidgetPadding(context.getHeightValue("2000um"))
	buttons.addWidget(okButton, 1.0)
	sbox.addWidget(buttons)
	box.addWidget(sbox)
	widget.addWidget(box)
	var pp final = PopupWidget.forContentWidget(context, LayerWidget.forWidget(context, widget, mm2))
	var cb final = callback
	pp.showPopup(parent)
	okButton.setWidgetClickHandler(func {
		pp.hidePopup()
		if(cb != null) {
			cb()
		}
	})
}

func showConfirmDialog(title as string, message as string, okcallback as function, cancelcallback as function)
{
	checkForDefaultColors()
	var mm2 = context.getWidthValue("2mm")
	var mm3 = context.getWidthValue("3mm")
	var widget = new LayerWidget(context)
	widget.setWidgetWidthRequest(context.getWidthValue("100mm"))
	widget.addWidget(CanvasWidget.forColor(context, Color.white()))
	var titleLabel = LabelWidget.forText(context, title)
	titleLabel.setWidgetFontSize(mm3)
	titleLabel.setWidgetTextColor(headerTextColor)
	titleLabel.setWidgetFontBold(true)
	var box = new VerticalBoxWidget(context)
	box.addWidget(new LayerWidget(context)
		.addWidget(CanvasWidget.forColor(context, headerBackgroundColor))
		.addWidget(AlignWidget.forWidget(context, titleLabel, 0, 0.5).setWidgetMargin(mm3))
	)
	var sbox = new VerticalBoxWidget(context)
	sbox.setWidgetMargin(mm3)
	sbox.setWidgetSpacing(mm3)
	var messageLabel = LabelWidget.forText(context, message)
	messageLabel.setWidgetTextAlign(LabelWidget.ALIGN_CENTER)
	messageLabel.setWidgetFontSize(mm3)
	messageLabel.setWidgetTextColor(messageTextColor)
	sbox.addWidget(messageLabel)
	var buttons = new HorizontalBoxWidget(context)
	buttons.setWidgetSpacing(mm3)
	var padding = context.getHeightValue("2000um")
	var noButton = TextButtonWidget.forText(context, "NO", null)
	noButton.setWidgetBackgroundColor(negativeButtonColor)
	noButton.setWidgetPadding(padding)
	buttons.addWidget(noButton, 1.0)
	var yesButton = TextButtonWidget.forText(context, "YES", null)
	yesButton.setWidgetBackgroundColor(positiveButtonColor)
	yesButton.setWidgetPadding(padding)
	buttons.addWidget(yesButton, 1.0)
	sbox.addWidget(buttons)
	box.addWidget(sbox)
	widget.addWidget(box)
	var pp final = PopupWidget.forContentWidget(context, LayerWidget.forWidget(context, widget, mm2))
	var okcb final = okcallback
	var cancelcb final = cancelcallback
	pp.showPopup(parent)
	yesButton.setWidgetClickHandler(func {
		pp.hidePopup()
		if(okcb != null) {
			okcb()
		}
	})
	noButton.setWidgetClickHandler(func {
		pp.hidePopup()
		if(cancelcb != null) {
			cancelcb()
		}
	})
}

func showErrorDialog(message as string, callback as function = null)
{
	showMessageDialog("Error", message, callback)
}

func checkForDefaultColors
{
	var bgc = backgroundColor
	if(bgc == null) {
		backgroundColor = Color.white()
	}
	var hbg = headerBackgroundColor
	if(hbg == null) {
		headerBackgroundColor = Color.black()
	}
	var htc = headerTextColor
	if(htc == null) {
		if(headerBackgroundColor.isDarkColor()) {
			headerTextColor = Color.white()
		}
		else {
			headerTextColor = Color.black()
		}
	}
	var mtc = messageTextColor
	if(mtc == null) {
		if(backgroundColor.isDarkColor()) {
			messageTextColor = Color.white()
		}
		else {
			messageTextColor = Color.black()
		}
	}
}
