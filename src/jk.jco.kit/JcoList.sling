
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class abstract #jco #component:

class ListElement #jco #component
{
	prop clickHandler as function

	markup
	{
		<div var container class="itemContainer">
		{
			foreach child in children:
				render child
		}
		</div>
	}

	func onRendered override
	{
		var cc = container
		if cc {
			lang "js" {{{
				cc.addEventListener('click', (event) => {
					event.stopPropagation();
					event.preventDefault();
					this.onClicked();
				})
			}}}
		}
	}

	func onClicked
	{
		var ch = clickHandler
		if ch:
			ch()
	}
}

prop elements as vector<object>
prop selectHandler as function<void,object>

stylesheet
{
	:host {
		position "relative"
	}
	.listContainer {
		height "100%"
		width "100%"
		overflow-y "auto"
		position "absolute"
	}
}

markup
{
	<div var container  class="listContainer">
	{
		foreach element in elements:
			render createMarkup(element)
	}
	</div>
}

func onSelectElement(element as object)
{
	var sh = selectHandler
	if sh:
		sh(element)
}

func elementToMarkup(element as object) abstract as markup

func addElement(element as object)
{
	var mm = assert createMarkup(element)
	addChild(container, mm)
	if not elements:
		elements = new vector<object>
	elements += element
}

func createMarkup(element as object) as markup
{
	var el = assert elementToMarkup(element)
	return new markup {
		<ListElement clickHandler=@{func => onSelectElement(element)}>
			@{el}
		</ListElement>
	}
}
