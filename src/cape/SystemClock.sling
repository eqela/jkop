
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

IFDEF "target_posix" {
	lang "c" {{{
		#include <time.h>
		#include <sys/time.h>
	}}}
}

IFDEF "target_objc" {
	lang "objc" {{{
		#include <time.h>
		#include <sys/time.h>
	}}}
}

IFDEF "target_win32" {
	lang "c" {{{
		#include <windows.h>
	}}}
}

func getTimezoneOffsetAsSeconds static as long
{
	IFDEF "target_js" {
		var v as long
		lang "js" {{{
			v = -(new Date().getTimezoneOffset());
		}}}
		return v * 60
	}
	ELSE IFDEF "target_cs" {
		return lang "cs" long {{{ (long)(new System.DateTimeOffset(System.DateTime.Now).Offset.TotalSeconds) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" long {{{ (long)(java.util.TimeZone.getDefault().getRawOffset() / 1000) }}}
	}
	ELSE IFDEF "target_kotlin" {
		var sec as long
		lang "kotlin" {{{
			var isec = java.util.TimeZone.getDefault().getRawOffset() / 1000
			sec = isec.toLong()
		}}}
		return sec
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" long {{{ (long)([[NSTimeZone systemTimeZone] secondsFromGMT]) }}}
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" long {{{ _os:get_system_timezone_seconds() }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" long {{{ Swift.Int64(TimeZone.current.secondsFromGMT()) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func asUTCSeconds static as long
{
	IFDEF "target_cs" {
		var v as long
		lang "cs" {{{
			v = (long)((System.DateTime.UtcNow.Subtract(new System.DateTime(1970, 1, 1))).TotalSeconds);
		}}}
		return v
	}
	ELSE {
		return asSeconds() + getTimezoneOffsetAsSeconds()
	}
}

func asSeconds static as long
{
	IFDEF "target_cs" {
		var v as long
		lang "cs" {{{
			var epoch = new System.DateTime(1970, 1, 1);
			var now = System.DateTime.Now.AddTicks(-epoch.Ticks);
			v = (long)(now.Ticks/10000000);
		}}}
		return v
	}
	ELSE IFDEF "target_js" {
		var v as long = 0
		lang "js" {{{
			v = new Date().getTime() / 1000;
		}}}
		return v
	}
	ELSE IFDEF "target_java" {
		var v as long = 0
		lang "java" {{{
			v = java.lang.System.currentTimeMillis() / 1000;
		}}}
		return v
	}
	ELSE IFDEF "target_posix" {
		var v as long = 0
		lang "c" {{{
			v = time(NULL);
		}}}
		return v
	}
	ELSE IFDEF "target_objc" {
		var v as long = 0
		lang "objc" {{{
			v = time(NULL);
		}}}
		return v
	}
	ELSE IFDEF "target_win32" {
		var v as long = 0
		var a as int = 0
		var b as int = 0
		var c as int = 0
		var d as int = 0
		lang "c" {{{
			FILETIME ft;
			unsigned __int64 tm = 0;
			GetSystemTimeAsFileTime(&ft);
			tm |= ft.dwHighDateTime;
			tm <<= 32;
			tm |= ft.dwLowDateTime;
			tm /=10;
			tm-=11644473600000000UL;
			sec = (int)(tm / 1000000UL);
			usec = (int)(tm % 1000000UL);
		}}}
		return v
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" long {{{ (java.lang.System.currentTimeMillis() / 1000) as kotlin.Long }}}
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" long {{{ _os:get_system_time_seconds() }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" long {{{ Swift.Int64(NSDate().timeIntervalSince1970) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func asTimeValue static as TimeValue
{
	var v = new TimeValue()
	update(v)
	return v
}

func asString static as string
{
	var tv = asTimeValue()
	return tv.toString()
}

func update(v as TimeValue) static
{
	assert v
	IFDEF "target_cs" {
		lang "cs" {{{
			var epoch = new System.DateTime(1970, 1, 1).Ticks;
			var now = System.DateTime.Now.AddSeconds(-(epoch/10000000));
			var ct = (long)(now.Ticks)/10;
			v.setSeconds((int)(ct / 1000000));
			long us = ct % 1000000;
			v.setMicroSeconds((int)(us));
		}}}
	}
	ELSE IFDEF "target_browser" {
		lang "js" {{{
			var ct = new Date().getTime();
			var ms = ct % 1000;
			v.setSeconds(parseInt(ct/1000));
			v.setMicroSeconds(parseInt(ms * 1000));
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" {{{
			long ct = java.lang.System.currentTimeMillis();
			v.setSeconds((int)(ct / 1000));
			long ms = ct % 1000;
			v.setMicroSeconds((int)(ms * 1000));
		}}}
	}
	ELSE IFDEF "target_posix" {
		var sec as int
		var usec as int
		lang "c" {{{
			struct timeval tv;
			gettimeofday(&tv, (void*)0);
			sec = tv.tv_sec;
			usec = tv.tv_usec;
		}}}
		v.setSeconds(sec)
		v.setMicroSeconds(usec)
	}
	ELSE IFDEF "target_objc" {
		var sec as int
		var usec as int
		lang "objc" {{{
			struct timeval tv;
			gettimeofday(&tv, (void*)0);
			sec = tv.tv_sec;
			usec = tv.tv_usec;
		}}}
		v.setSeconds(sec)
		v.setMicroSeconds(usec)
	}
	ELSE IFDEF "target_win32" {
		var sec as int
		var usec as int
		lang "c" {{{
			FILETIME ft;
			unsigned __int64 tm = 0;
			GetSystemTimeAsFileTime(&ft);
			tm |= ft.dwHighDateTime;
			tm <<= 32;
			tm |= ft.dwLowDateTime;
			tm /= 10;
			tm-=11644473600000000UL;
			sec = (int)(tm / 1000000UL);
			usec = (int)(tm % 1000000UL);
		}}}
		v.setSecond(sec)
		v.setMicroSeconds(usec)
	}
	ELSE IFDEF "target_kotlin" {
		var sec as long
		var usec as long
		lang "kotlin" {{{
			sec = java.lang.System.currentTimeMillis() / 1000
			usec = sec % 1000;
		}}}
		v.setSeconds(sec)
		v.setMicroSeconds(usec)
	}
	ELSE IFDEF "target_swift" {
		var sec as int
		var usec as int
		lang "swift" {{{
			sec = Int(NSDate().timeIntervalSince1970)
			usec = sec % 1000;
		}}}
		v.setSeconds(sec)
		v.setMicroSeconds(usec)
	}
	ELSE IFDEF "target_sushi" {
		var millis = lang "lua" long {{{ _os:get_system_time_milliseconds() }}}
		var secs = millis / 1000L
		var micros = (millis - secs * 1000L) * 1000L
		v.setSeconds(secs)
		v.setMicroSeconds(micros)
	}
	ELSE {
		ERROR "Not implemented"
	}
}
