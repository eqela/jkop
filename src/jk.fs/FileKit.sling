
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log

class:

var ctx as LoggingContext

ctor(ctx as LoggingContext):
	this.ctx = ctx

func asFile(file as dynamic) as File
{
	var fo = File.asFile(file)
	if not fo:
		Error.throw("invalidParameter", String.asString(file))
	return fo
}

func copy(src as dynamic, dst as dynamic) as File
{
	var srcf = asFile(src)
	var dstf = asFile(dst)
	if dstf.isDirectory():
		dstf = dstf.entry(srcf.getBasename())
	if not srcf.copyFileOrDirectoryTo(dstf):
		Error.throw("failedToCopy", srcf.getPath())
	return dstf
}

func remove(file as dynamic)
{
	var fo = asFile(file)
	if not fo.removeRecursive():
		Error.throw("failedToRemove", fo.getPath())
}

func readAsBuffer(file as dynamic) as buffer
{
	var fo = asFile(file)
	var v = fo.getContentsBuffer()
	if not v:
		Error.throw("failedToRead", fo.getPath())
	return v
}

func readAsString(file as dynamic) as string
{
	var fo = asFile(file)
	var v = fo.getContentsUTF8()
	if not v:
		Error.throw("failedToRead", fo.getPath())
	return v
}

func writeBuffer(file as dynamic, data as buffer)
{
	var fo = asFile(file)
	if not fo.setContentsBuffer(data):
		Error.throw("failedToWrite", fo.getPath())
}

func writeString(file as dynamic, data as dynamic)
{
	var fo = asFile(file)
	if not fo.setContentsUTF8(String.asString(data)):
		Error.throw("failedToWrite", fo.getPath())
}
