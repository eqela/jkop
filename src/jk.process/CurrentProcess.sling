
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs

class:

func terminate(value as int) static
{
	IFDEF "target_uwpcs" {
		lang "cs" {{{
			Windows.UI.Xaml.Application.Current.Exit();
		}}}
	}
	ELSE IFDEF "target_wpcs" {
		lang "cs" {{{
			System.Windows.Application.Current.Terminate();
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" {{{
			kotlin.system.exitProcess(value)
		}}}
	}
	ELSE IFDEF "target_netcore" {
		lang "cs" {{{
			System.Environment.Exit(value);
		}}}
	}
	ELSE {
		ERROR "Not implemented"
	}
}

IFDEF "target_darwin"
{
	depend "objc-header-m:<mach-o/dyld.h>"
}

func getExecutableFile static as File
{
	IFDEF "target_linux" {
		var filepath as string
		lang "c" {{{
			char file[4096];
			int r = readlink("/proc/self/exe", file, 4096);
			if(r > 0) {
				if(r == 4096) {
					r--;
				}
				file[r] = 0;
				filepath = file;
			}
		}}}
		assert filepath
		return File.forPath(filepath)
	}
	ELSE IFDEF "target_darwin" {
		var r = -1
		lang "objc" {{{
			char buffer[PATH_MAX];
			uint32_t bs = PATH_MAX;
			r = _NSGetExecutablePath(buffer, &bs);
		}}}
		if r != 0:
			return null
		var filepath as string
		lang "objc" {{{
			char rp[PATH_MAX];
			char* rpx = realpath(buffer, rp);
			if(rpx == NULL) {
				rpx = buffer;
			}
			filepath = [[NSString alloc] initWithUTF8String:rpx];
		}}}
		assert filepath
		return File.forPath(filepath)
	}
	ELSE IFDEF "target_win32" {
		var filepath as string = null
		lang "c" {{{
			char buffer[1024];
			if(GetModuleFileName(NULL, buffer, 1024) > 0) {
				filepath = buffer;
			}
		}}}
		assert filepath
		return File.forPath(filepath)
	}
	ELSE IFDEF "target_dotnet4cs" {
		var fn as string
		lang "cs" {{{
			var assembly = System.Reflection.Assembly.GetEntryAssembly();
			if(assembly != null) {
				fn = assembly.Location;
			}
			if(fn == null) {
				fn = System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName;
			}
		}}}
		if String.isEmpty(fn):
			return null
		return File.forPath(fn)
	}
	ELSE IFDEF "target_netx" {
		var fn as string
		lang "cs" {{{
			fn = System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName;
		}}}
		if String.isEmpty(fn):
			return null
		return File.forPath(fn)
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			let executablePath = Bundle.main.executablePath!
			return CapeFile.forPath(executablePath)
		}}}
	}
	ELSE IFDEF "target_sushi" {
		return File.forPath(lang "lua" string {{{ _vm.get_sushi_executable_path() }}})
	}
	ELSE {
		return null
	}
}

func getProcessName static as string
{
	var v as string
	var exe = getExecutableFile()
	if exe:
		v = exe.getBasenameWithoutExtension()
	return v
}
