
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is GeoLocationManager:

depend "androidPermission:android.permission.ACCESS_FINE_LOCATION"
depend "androidPermission:android.permission.ACCESS_COARSE_LOCATION"

var instance static as this

func getInstance(ctx as KotlinApplicationContext) static as this
{
	if not instance:
		instance = new this(ctx)
	return instance
}

lang "kotlin" {{{
	private var locationManager: android.location.LocationManager? = null
	private var lcb: LocationCallBack?
}}}
var context as KotlinApplicationContext

ctor(context as KotlinApplicationContext) private
{
	base()
	this.context = context
	var acontext = context.getAndroidActivityContext()
	lang "kotlin" {{{
		lcb = LocationCallBack(this)
		locationManager = acontext?.getSystemService(android.content.Context.LOCATION_SERVICE) as android.location.LocationManager
	}}}
}

func isLocationServiceEnabled override as bool
{
	var isGPSEnabled = lang "kotlin" bool {{{ locationManager!!.isProviderEnabled(android.location.LocationManager.GPS_PROVIDER) }}}
	var isNetworkEnabled = lang "kotlin" bool {{{ locationManager!!.isProviderEnabled(android.location.LocationManager.NETWORK_PROVIDER) }}}
	return isGPSEnabled || isNetworkEnabled
}

func startLocationUpdates(callback as function<void,bool>) override
{
	var perms = new string[] { "android.permission.ACCESS_FINE_LOCATION", "android.permission.ACCESS_COARSE_LOCATION" }
	var cb final = callback
	context.requestPermissions(perms, func(status as bool) {
		if not status {
			if cb:
				cb(false)
			return
		}
		var v = true
		var isGPSEnabled = false
		var isNetworkEnabled = false
		lang "kotlin" {{{
			try {
				isGPSEnabled = locationManager!!.isProviderEnabled(android.location.LocationManager.GPS_PROVIDER)
				isNetworkEnabled = locationManager!!.isProviderEnabled(android.location.LocationManager.NETWORK_PROVIDER)
				if(isGPSEnabled) {
					locationManager!!.requestLocationUpdates(android.location.LocationManager.GPS_PROVIDER, 0.toLong(), 0.toFloat(), lcb)
				}
				else if(isNetworkEnabled) {
					locationManager!!.requestLocationUpdates(android.location.LocationManager.NETWORK_PROVIDER, 0.toLong(), 0.toFloat(), lcb)
				}
				else {
					v = false
				}
			}	
			catch (e: Exception) {
				v = false
			}
		}}}
		if cb:
			cb(v)
	})
}

func stopLocationUpdates override
{
	lang "kotlin" {{{
		if(locationManager != null) {
			locationManager!!.removeUpdates(lcb)
		}
	}}}
}

func getLastLocation(callback as function<void, GeoLocation, Error>) override
{
	ERROR("Not implemented")
}

lang "kotlin" {{{
	class LocationCallBack(self:GeoLocationManagerForKotlin): android.location.LocationListener {
		private var self: GeoLocationManagerForKotlin
		init {
			this.self = self
		}
		override fun onLocationChanged(location: android.location.Location) {
			var l = GeoLocation()
			l?.setLatitude(location!!.getLatitude())
			l?.setLongitude(location!!.getLongitude())
			self?.notifyListeners(l)
		}

		override fun onProviderDisabled(provider: String) {
		}

		override fun onProviderEnabled(provider: String) {
		}

		override fun onStatusChanged(provider: String, status: Int, extras: android.os.Bundle) {
		}
	}
}}}
