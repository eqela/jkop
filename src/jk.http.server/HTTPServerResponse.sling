
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.io
import jk.mime
import jk.time.format
import jk.md5
import jk.json
import jk.mypacket
import jk.http.server.cookie

class:

func forMyPacket(packet as buffer) static as this
{
	assert packet
	var parser = MyPacketParser.forBuffer(packet)
	var v = new this()
	v.setStatus(parser.getLengthEncodedString())
	var nheaders = parser.getLengthEncodedInteger()
	for(var n=0; n<nheaders; n++) {
		var key = parser.getLengthEncodedString()
		var val = parser.getLengthEncodedString()
		if not key:
			key = ""
		v.addHeader(key, val)
	}
	v.setBody(parser.getLengthEncodedBuffer())
	return v
}

func parseBuffer(data as buffer) static as this
{
	assert data
	var version as string
	var statusCode as string
	var statusMessage as string
	var key as string
	var headers as KeyValueList<string,string>
	var hdr as StringBuilder
	var contentLength = 0
	var bodyBuffer as buffer
	var sz = Buffer.getSize(data)
	var p = 0
	while p < sz {
		var c = (Buffer.getByte(data, p) & 0xFF) as! char
		p++
		if c == '\r':
			continue
		if version == null {
			if c == ' ' {
				if hdr != null {
					version = hdr.toString()
					hdr = null
				}
				continue
			}
		}
		else if statusCode == null {
			if c == ' ' {
				if hdr != null {
					statusCode = hdr.toString()
					hdr = null
				}
				continue
			}
		}
		else if statusMessage == null {
			if c == '\n' {
				if hdr != null {
					statusMessage = hdr.toString()
					hdr = null
				}
				continue
			}
		}
		else if key == null {
			if c == ':' {
				if hdr != null {
					key = hdr.toString()
					hdr = null
				}
				continue
			}
			else if c == '\n' {
				if hdr != null:
					return null
				break
			}
		}
		else if c == ' ' && hdr == null {
			continue
		}
		else if c == '\n' {
			var value as string = null
			if hdr != null {
				value = hdr.toString()
				hdr = null
			}
			if headers == null:
				headers = new KeyValueList<string,string>()
			headers.add(key, value)
			if String.equalsIgnoreCase(key, "content-length") && value != null {
				contentLength = Integer.asInteger(value)
			}
			else if String.equalsIgnoreCase(key, "transfer-encoding") && value != null && String.contains(value, "chunked") {
				return null
			}
			key = null
			continue
		}
		if hdr == null:
			hdr = new StringBuilder()
		hdr.appendCharacter(c)
		if hdr.count() > 32 * 1024:
			return null
	}
	if contentLength > 0:
		bodyBuffer = Buffer.getSubBuffer(data, p, -1)
	var resp = new this()
	resp.setStatus(statusCode)
	resp.setMessage(statusMessage)
	resp.setHeaders(headers)
	resp.setBody(bodyBuffer)
	return resp
}

func forFile(file as File, maxCachedSize as int = -1) static as this
{
	if file == null || file.isFile() == false:
		return forHTTPNotFound()
	var bodyset = false
	var resp = new this()
	resp.setStatus("200")
	resp.addHeader("Content-Type", MimeTypeRegistry.getSharedInstance().getTypeForFile(file))
	var st = file.stat()
	if st {
		var lm = st.getModifyTimeUTC()
		if lm > 0 {
			var dts = VerboseDateTimeString.forDateTime(DateTime.forSeconds(lm))
			resp.addHeader("Last-Modified", dts)
			resp.setETag(MD5Encoder.encodeString(dts))
		}
		var mcs = maxCachedSize
		if mcs < 0:
			mcs = 32 * 1024
		if st.getSize() < mcs {
			resp.setBody(file.getContentsBuffer())
			bodyset = true
		}
	}
	if bodyset == false:
		resp.setBody(file)
	return resp
}

func forBuffer(data as buffer, mimetype as string = null) static as this
{
	var mt = mimetype
	if String.isEmpty(mt):
		mt = "application/binary"
	var resp = new this()
	resp.setStatus("200")
	resp.addHeader("Content-Type", mt)
	resp.setBody(data)
	return resp
}

func forOk(mimetype as string = null) static as this
{
	var resp = new this()
	resp.setStatus("200")
	if String.isEmpty(mimetype) == false:
		resp.addHeader("Content-Type", mimetype)
	return resp
}

func forString(text as string, mimetype as string) static as this
{
	var resp = new this()
	resp.setStatus("200")
	if String.isEmpty(mimetype) == false:
		resp.addHeader("Content-Type", mimetype)
	resp.setBody(text)
	return resp
}

func forTextString(text as string) static as this
{
	var resp = new this()
	resp.setStatus("200")
	resp.addHeader("Content-Type", "text/plain; charset=\"UTF-8\"")
	resp.setBody(text)
	return resp
}

func forHTMLString(html as string) static as this
{
	var resp = new this()
	resp.setStatus("200")
	resp.addHeader("Content-Type", "text/html; charset=\"UTF-8\"")
	resp.setBody(html)
	return resp
}

func forXMLString(xml as string) static as this
{
	var resp = new this()
	resp.setStatus("200")
	resp.addHeader("Content-Type", "text/xml; charset=\"UTF-8\"")
	resp.setBody(xml)
	return resp
}

func forJSONObject(o as object) static as this:
	return forJSONString(JSONEncoder.encode(o))

func forJSONString(json as string) static as this
{
	var resp = new this()
	resp.setStatus("200")
	resp.addHeader("Content-Type", "application/json; charset=\"UTF-8\"")
	resp.setBody(json)
	return resp
}

func stringWithMessage(str as string, message as string) private static as string
{
	if String.isEmpty(message):
		return str
	return str .. ": " .. message
}

func forHTTPInvalidRequest(message as string = null) static as this
{
	var resp = forTextString(stringWithMessage("Invalid request", message))
	resp.setStatus("400")
	resp.addHeader("Connection", "close")
	resp.setMessage(message)
	return resp
}

func forHTTPInternalError(message as string = null) static as this
{
	var resp = forTextString(stringWithMessage("Internal server error", message))
	resp.setStatus("500")
	resp.addHeader("Connection", "close")
	resp.setMessage(message)
	return resp
}

func forHTTPNotImplemented(message as string = null) static as this
{
	var resp = forTextString(stringWithMessage("Not implemented", message))
	resp.setStatus("501")
	resp.addHeader("Connection", "close")
	resp.setMessage(message)
	return resp
}

func forHTTPNotAllowed(message as string = null) static as this
{
	var resp = forTextString(stringWithMessage("Not allowed", message))
	resp.setStatus("405")
	resp.setMessage(message)
	return resp
}

func forHTTPNotFound(message as string = null) static as this
{
	var resp = forTextString(stringWithMessage("Not found", message))
	resp.setStatus("404")
	resp.setMessage(message)
	return resp
}

func forHTTPForbidden(message as string = null) static as this
{
	var resp = forTextString(stringWithMessage("Forbidden", message))
	resp.setStatus("403")
	resp.setMessage(message)
	return resp
}

func forRedirect(url as string) static as this:
	return forHTTPMovedTemporarily(url)

func forHTTPMovedPermanently(url as string) static as this
{
	var resp = new this()
	resp.setStatus("301")
	resp.addHeader("Location", url)
	resp.setBody(url)
	return resp
}

func forHTTPMovedTemporarily(url as string) static as this
{
	var resp = new this()
	resp.setStatus("303")
	resp.addHeader("Location", url)
	resp.setBody(url)
	return resp
}

func forHTTPTemporaryRedirect(url as string) static as this
{
	var resp = new this()
	resp.setStatus("307")
	resp.addHeader("Location", url)
	resp.setBody(url)
	return resp
}

func getFullStatus(status as string) static as string
{
	var v as string = null
	if status && String.getIndexOfString(status, " ") < 1 {
		if String.equals("200", status) {
			v = "200 OK"
		}
		else if String.equals("301", status) {
			v = "301 Moved Permanently"
		}
		else if String.equals("303", status) {
			v = "303 See Other"
		}
		else if String.equals("304", status) {
			v = "304 Not Modified"
		}
		else if String.equals("400", status) {
			v = "400 Bad Request"
		}
		else if String.equals("401", status) {
			v = "401 Unauthorized"
		}
		else if String.equals("403", status) {
			v = "403 Forbidden"
		}
		else if String.equals("404", status) {
			v = "404 Not found"
		}
		else if String.equals("405", status) {
			v = "405 Method not allowed"
		}
		else if String.equals("500", status) {
			v = "500 Internal server error"
		}
		else if String.equals("501", status) {
			v = "501 Not implemented"
		}
		else if String.equals("503", status) {
			v = "503 Service unavailable"
		}
		else {
			v = status .. " Unknown"
		}
	}
	else {
		v = status
	}
	return v
}

func forException(e as exception) static as this
{
	var v = new this()
	v.setStatus("500")
	v.setBody(String.asString(e))
	return v
}

prop headers as KeyValueList<string,string>
prop message as string
var status as string
var statusIsOk = false
var body as Reader
var eTag as string

func setETag(eTag as string) as this
{
	this.eTag = eTag
	addHeader("ETag", eTag)
	return this
}

func getETag as string:
	return eTag

func setStatus(status as string) as this
{
	this.status = status
	if status == "200":
		statusIsOk = true
	return this
}

func getStatus as string:
	return status

func enableCORS(req as HTTPServerRequest = null) as this
{
	addHeader("Access-Control-Allow-Origin", "*")
	if req {
		var rqm = req.getHeader("access-control-request-method")
		if String.isNotEmpty(rqm):
			addHeader("Access-Control-Allow-Methods", rqm)
		var rqh = req.getHeader("access-control-request-headers")
		if String.isNotEmpty(rqh):
			addHeader("Access-Control-Allow-Headers", rqh)
	}
	addHeader("Access-Control-Max-Age", "1728000")
	return this
}

func addHeader(key as string, value as string) as this
{
	if not headers:
		headers = new KeyValueList<string, string>()
	headers.add(key, value)
	return this
}

func addCookie(cookie as HTTPServerCookie)
{
	assert cookie
	addHeader("Set-Cookie", cookie.toString())
}

func setBody(buf as buffer) as this
{
	if not buf {
		body = null
		addHeader("Content-Length", "0")
	}
	else {
		body = BufferReader.forBuffer(buf)
		addHeader("Content-Length", String.forInteger(sizeof buf))
	}
	return this
}

func setBody(str as string) as this
{
	if not str {
		body = null
		addHeader("Content-Length", "0")
	}
	else {
		var buf = String.toUTF8Buffer(str)
		body = BufferReader.forBuffer(buf)
		addHeader("Content-Length", String.forInteger(Buffer.getSize(buf)))
	}
	return this
}

func setBody(file as File) as this
{
	if file == null || file.isFile() == false {
		body = null
		addHeader("Content-Length", "0")
	}
	else {
		body = file.read()
		addHeader("Content-Length", String.forInteger(file.getSize()))
	}
	return this
}

func setBody(reader as SizedReader) as this
{
	if reader == null {
		body = null
		addHeader("Content-Length", "0")
	}
	else {
		body = reader
		addHeader("Content-Length", String.forInteger(reader.getSize()))
	}
	return this
}

func getBody as Reader:
	return body
