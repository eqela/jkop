
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is CanvasWidget #widget:

IFDEF("target_android")
{
	lang "java" {{{
		private android.graphics.Path path = new android.graphics.Path();
		private android.graphics.Paint paint = new android.graphics.Paint(android.graphics.Paint.ANTI_ALIAS_FLAG);
		private float lastTouchX;
		private float lastTouchY;
		private final android.graphics.RectF dirtyRect = new android.graphics.RectF();
	}}}

	func onTouchEvent(mevt as !"android.view.MotionEvent") as bool
	{
		lang "java" {{{
			float eventX = mevt.getX();
			float eventY = mevt.getY();
			if (mevt.getAction() == mevt.ACTION_DOWN) {
				path.moveTo(eventX, eventY);
				lastTouchX = eventX;
				lastTouchY = eventY;
				return true;
			}
			else if (mevt.getAction() == mevt.ACTION_MOVE) {
				float dx = Math.abs(lastTouchX - mevt.getX());
				float dy = Math.abs(lastTouchY - mevt.getY());
				if (dx >= 1 || dy >= 1) {
					path.quadTo(lastTouchX, lastTouchY, (mevt.getX() + lastTouchX)/2, (mevt.getY() + lastTouchY)/2);
				}
			}
			else if (mevt.getAction() == mevt.ACTION_UP) {
				resetDirtyRect(eventX, eventY);
				int historySize = mevt.getHistorySize();
				for (int i = 0; i < historySize ; i++) {
					float historicalX = mevt.getHistoricalX(i);
					float historicalY = mevt.getHistoricalY(i);
					expandDirtyRect(historicalX, historicalY);
					path.lineTo(historicalX, historicalY);
				}
				path.lineTo(eventX, eventY);
			}
			invalidate(
				(int) (dirtyRect.left - strokeWidth / 2),
				(int) (dirtyRect.top - strokeWidth / 2),
				(int) (dirtyRect.right + strokeWidth / 2),
				(int) (dirtyRect.bottom + strokeWidth / 2)
			);
			lastTouchX = eventX;
			lastTouchY = eventY;
		}}}
		return true
	}

	func onDraw(canvas as !"android.graphics.Canvas")
	{
		lang "java" {{{
			super.onDraw(canvas);
			canvas.drawPath(path, paint);
		}}}
	}

	lang "java" {{{
		private void expandDirtyRect(float historicalX, float historicalY) {
			if (historicalX < dirtyRect.left) {
				dirtyRect.left = historicalX;
			}
			else if (historicalX > dirtyRect.right) {
				dirtyRect.right = historicalX;
			}
			if (historicalY < dirtyRect.top) {
				dirtyRect.top = historicalY;
			}
			else if (historicalY > dirtyRect.bottom) {
				dirtyRect.bottom = historicalY;
			}
		}

		private void resetDirtyRect(float eventX, float eventY) {
			dirtyRect.left = Math.min(lastTouchX, eventX);
			dirtyRect.right = Math.max(lastTouchX, eventX);
			dirtyRect.top = Math.min(lastTouchY, eventY);
			dirtyRect.bottom = Math.max(lastTouchY, eventY);
		}
	}}}
}

IFDEF("target_kotlin") {
	lang "kotlin" {{{
		private var path : android.graphics.Path = android.graphics.Path()
		private var paint : android.graphics.Paint = android.graphics.Paint(android.graphics.Paint.ANTI_ALIAS_FLAG)
		private var lastTouchX : kotlin.Float = 0f
		private var lastTouchY : kotlin.Float = 0f
		private final var dirtyRect : android.graphics.RectF = android.graphics.RectF()
	}}}

	func onTouchEvent(mevt as !"android.view.MotionEvent") override as bool
	{
		lang "kotlin" {{{
			var eventX : kotlin.Float = mevt!!.getX()
			var eventY : kotlin.Float = mevt!!.getY()
			if(mevt!!.getAction() == android.view.MotionEvent.ACTION_DOWN) {
				path.moveTo(eventX, eventY)
				lastTouchX = eventX
				lastTouchY = eventY
				return true;
			}
			else if(mevt!!.getAction() == android.view.MotionEvent.ACTION_MOVE) {
				var dx : kotlin.Float = Math.abs(lastTouchX - mevt.getX())
				var dy : kotlin.Float = Math.abs(lastTouchY - mevt.getY())
				if (dx >= 1 || dy >= 1) {
					path.quadTo(lastTouchX, lastTouchY, (mevt.getX() + lastTouchX)/2, (mevt.getY() + lastTouchY)/2)
				}
			}
			else if(mevt!!.getAction() == android.view.MotionEvent.ACTION_UP) {
				resetDirtyRect(eventX, eventY)
				var historySize : Int = mevt.getHistorySize()
				for(i in 0 until historySize) {
					var historicalX : kotlin.Float = mevt.getHistoricalX(i)
					var historicalY : kotlin.Float = mevt.getHistoricalY(i)
					expandDirtyRect(historicalX, historicalY)
					path.lineTo(historicalX, historicalY)
				}
				path.lineTo(eventX, eventY)
			}
			invalidate(
				(dirtyRect.left - strokeWidth / 2).toInt(),
				(dirtyRect.top - strokeWidth / 2).toInt(),
				(dirtyRect.right + strokeWidth / 2).toInt(),
				(dirtyRect.bottom + strokeWidth / 2).toInt()
			)
			lastTouchX = eventX
			lastTouchY = eventY
		}}}
		return true
	}

	func onDraw(canvas as !"android.graphics.Canvas") override
	{
		lang "kotlin" {{{
			super.onDraw(canvas)
			canvas!!.drawPath(path, paint)
		}}}
	}

	lang "kotlin" {{{
		fun expandDirtyRect(historicalX : kotlin.Float, historicalY : kotlin.Float) {
			if(historicalX < dirtyRect.left) {
				dirtyRect.left = historicalX
			}
			else if(historicalX > dirtyRect.right) {
				dirtyRect.right = historicalX
			}
			if(historicalY < dirtyRect.top) {
				dirtyRect.top = historicalY
			}
			else if(historicalY > dirtyRect.bottom) {
				dirtyRect.bottom = historicalY
			}
		}

		fun resetDirtyRect(eventX : kotlin.Float, eventY : kotlin.Float) {
			dirtyRect.left = Math.min(lastTouchX, eventX);
			dirtyRect.right = Math.max(lastTouchX, eventX);
			dirtyRect.top = Math.min(lastTouchY, eventY);
			dirtyRect.bottom = Math.max(lastTouchY, eventY);
		}
	}}}
}

IFDEF("target_iosoc")
{
	var incrementalImage as !"UIImage"
	lang "objc" {{{
		UIBezierPath *path;
		UIBezierPath *dot;
		UIPanGestureRecognizer *pan;
		CGPoint previousPoint;
		CGPoint p;

		- (CGPoint)midpoint:(CGPoint)p0 point2:(CGPoint)p1 {
			return (CGPoint) {
				(p0.x + p1.x) / 2.0,
				(p0.y + p1.y) / 2.0
			};
		}

		- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event {
			CGPoint p = [touches.anyObject locationInView:self];
			CGFloat radius = (CGFloat)strokeWidth / 2;
			CGRect rect = CGRectMake(p.x - radius, p.y - radius, 2 * radius, 2 * radius);
			dot = [UIBezierPath bezierPathWithOvalInRect:rect];
			[self constructIncrementalImage];
		}

		- (void)pan:(UIPanGestureRecognizer *)pan {
			CGPoint currentPoint = [pan locationInView:self];
			CGPoint midPoint = [self midpoint:previousPoint point2:currentPoint];
			if (pan.state == UIGestureRecognizerStateBegan) {
				p = [pan locationInView:self];
				[path moveToPoint:p];
			}
			else if (pan.state == UIGestureRecognizerStateChanged) {
				[path moveToPoint:p];
				[path addQuadCurveToPoint:midPoint controlPoint:previousPoint];
			}
			[self constructIncrementalImage];
			p = [path currentPoint];
			[self clearPath];
			previousPoint = currentPoint;
		}

		- (void)drawRect:(CGRect)rect
		{
			[incrementalImage drawInRect:rect];
		}

		- (void)constructIncrementalImage
		{
			if (incrementalImage == NULL) {
				UIGraphicsBeginImageContextWithOptions(self.bounds.size, NO, 0.0);
			}
			else {
				UIGraphicsBeginImageContextWithOptions(incrementalImage.size, NO, 0.0);
			}
			[incrementalImage drawAtPoint:CGPointZero];
			[[UIColor colorWithRed: [strokeColor getRed] green: [strokeColor getGreen] blue: [strokeColor getBlue] alpha: [strokeColor getAlpha]] setStroke];
			path.lineWidth = strokeWidth;
			[path stroke];
			if (dot != NULL) {
				[[UIColor blackColor] setFill];
				[dot fill];
			}
			incrementalImage = UIGraphicsGetImageFromCurrentImageContext();
			UIGraphicsEndImageContext();
			[self setNeedsDisplay];
		}

		- (void)clearPath
		{
			dot = nil;
			path = nil;
			path = [UIBezierPath bezierPath];
		}
	}}}
}

var strokeColor as Color
var strokeWidth as float

ctor(ctx as GuiApplicationContext)
{
	base(ctx)
	setStrokeColor(Color.black())
	setStrokeWidth(2.0 as float)
	IFDEF("target_android") {
		lang "java" {{{
			paint.setAntiAlias(true);
			paint.setColor(android.graphics.Color.BLACK);
			paint.setStyle(android.graphics.Paint.Style.STROKE);
			paint.setStrokeJoin(android.graphics.Paint.Join.ROUND);
			paint.setStrokeWidth(strokeWidth);
		}}}
	}
	IFDEF("target_kotlin") {
		lang "kotlin" {{{
			paint.setAntiAlias(true);
			paint.setColor(android.graphics.Color.BLACK);
			paint.setStyle(android.graphics.Paint.Style.STROKE);
			paint.setStrokeJoin(android.graphics.Paint.Join.ROUND);
			paint.setStrokeWidth(strokeWidth);
		}}}
	}
	IFDEF("target_iosoc") {
		lang "objc" {{{
			path = [UIBezierPath bezierPath];
			pan = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(pan:)];
			pan.maximumNumberOfTouches = pan.minimumNumberOfTouches = 1;
			[self addGestureRecognizer:pan];
			[self setBackgroundColor:[UIColor clearColor]];
		}}}
	}
}

func setStrokeColor(color as Color)
{
	strokeColor = color
	IFDEF("target_android") {
		if (strokeColor == null) {
			lang "java" {{{
				paint.setColor(0);
			}}}
		}
		else {
			lang "java" {{{
				paint.setColor(strokeColor.toARGBInt32());
			}}}
		}
	}
	ELSE IFDEF "target_kotlin" {
		if(!color) {
			lang "kotlin" {{{
				paint.setColor(0);
			}}}
		}
		else {
			lang "kotlin" {{{
				paint.setColor(color.toARGBInt32());
			}}}
		}
	}
	ELSE {
		ERROR("Not implemented.")
	}
}

func setStrokeWidth(width as float)
{
	strokeWidth = width
	IFDEF("target_android") {
		lang "java" {{{
			paint.setStrokeWidth(strokeWidth);
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" {{{
			paint.setStrokeWidth(strokeWidth);
		}}}
	}
	ELSE {
		ERROR("Not implemented.")
	}
}

func clear
{
	IFDEF("target_android") {
		lang "java" {{{
			path.reset();
			invalidate();
		}}}
	}
	ELSE IFDEF("target_iosoc") {
		lang "objc" {{{
			[self clearPath];
			incrementalImage = nil;
			[self setNeedsDisplay];
		}}}
	}
	ELSE IFDEF("target_kotlin") {
		lang "kotlin" {{{
			path.reset();
			invalidate();
		}}}
	}
	ELSE {
		ERROR("Not implemented.")
	}
}

func getSignatureAsImage as Image
{
	var byteArray as buffer #used
	IFDEF("target_android") {
		lang "java" {{{
			android.graphics.Bitmap bitmap = android.graphics.Bitmap.createBitmap(this.getWidth(), this.getHeight(), android.graphics.Bitmap.Config.ARGB_8888);
			android.graphics.Canvas canvas = new android.graphics.Canvas(bitmap);
			this.draw(canvas);
			java.io.ByteArrayOutputStream bufferStream = new java.io.ByteArrayOutputStream();
			bitmap.compress(android.graphics.Bitmap.CompressFormat.PNG, 100, bufferStream);
			byteArray = bufferStream.toByteArray();
		}}}
		return ImageForAndroid.forBuffer(byteArray)
	}
	ELSE IFDEF("target_iosoc") {
		return ImageForIOS.forUIImage(incrementalImage)
	}
	ELSE IFDEF("target_kotlin") {
		lang "kotlin" {{{
			var bitmap : android.graphics.Bitmap = android.graphics.Bitmap.createBitmap(this.getWidth(), this.getHeight(), android.graphics.Bitmap.Config.ARGB_8888)
			var canvas : android.graphics.Canvas = android.graphics.Canvas(bitmap)
			this.draw(canvas)
			var bufferStream : java.io.ByteArrayOutputStream = java.io.ByteArrayOutputStream()
			bitmap.compress(android.graphics.Bitmap.CompressFormat.PNG, 100, bufferStream)
			var bs = bufferStream.toByteArray()
			byteArray = bs.toUByteArray()
		}}}
		return ImageForKotlin.forBuffer(byteArray)
	}
	ELSE {
		ERROR("Not implemented.")
		return (null)
	}
}
