
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.render

class is RenderingContext:

func forElement(element as object) static as this
{
	assert element
	return forContext(lang "js" object {{{ element.getContext("2d") }}})
}

func forContext(ctx as object) static as this
{
	assert ctx
	var v = new this()
	v.setCtx(ctx)
	return v
}

prop ctx as object

func setFillStyle(style as object) override
{
	var fs = style
	if fs {
		if fs is string:
			fs = Color.forString(fs as! string)
		if fs is Color:
			fs = (fs as! Color).toHtmlCompatibleString()
	}
	lang "js" {{{
		this.ctx.fillStyle = fs;
	}}}
}

func setStrokeStyle(style as object) override
{
	var fs = style
	if fs {
		if fs is string:
			fs = Color.forString(fs as! string)
		if fs is Color:
			fs = (fs as! Color).toHtmlCompatibleString()
	}
	lang "js" {{{
		this.ctx.strokeStyle = fs;
	}}}
}

func setShadowColor(color as Color) override
{
	var ccs as string
	if color:
		ccs = color.toHtmlCompatibleString()
	lang "js" {{{
		this.ctx.shadowColor = ccs;
	}}}
}

func setShadowBlur(blur as double) override
{
	lang "js" {{{
		this.ctx.shadowBlur = blur;
	}}}
}

func setShadowOffsetX(offset as double) override
{
	lang "js" {{{
		this.ctx.shadowOffsetX = offset;
	}}}
}

func setShadowOffsetY(offset as double) override
{
	lang "js" {{{
		this.ctx.shadowOffsetY = offset;
	}}}
}

func createLinearGradient(x0 as double, y0 as double, x1 as double, y1 as double) override as object
{
	return lang "js" object {{{ this.ctx.createLinearGradient(x0, y0, x1, y1) }}}
}

func createPattern(image as Image, repeat as int) override as object
{
	var himg as object
	var browserImage = image as ImageForBrowser
	if browserImage:
		himg = browserImage.image
	var rpts as string
	if repeat == RenderingContext.REPEAT_NONE {
		rpts = "no-repeat"
	}
	else if repeat == RenderingContext.REPEAT_X {
		rpts = "repeat-x"
	}
	else if repeat == RenderingContext.REPEAT_Y {
		rpts = "repeat-y"
	}
	else {
		rpts = "repeat"
	}
	return lang "js" object {{{ this.ctx.createPattern(himg, rpts) }}}
}

func createRadialGradient(x0 as double, y0 as double, r0 as double, x1 as double, y1 as double, r1 as double) override as object
{
	return lang "js" object {{{ this.ctx.createRadialGradient(x0, y0, r0, x1, y1, r1) }}}
}

func addColorStop(gradient as object, index as double, color as Color) override
{
	assert gradient
	var ccs as string
	if color:
		ccs = color.toHtmlCompatibleString()
	lang "js "{{{
		gradient.addColorStop(index, ccs)
	}}}
}

func setLineCap(cap as int) override
{
	var v as string
	if cap == RenderingContext.LINE_CAP_SQUARE {
		v = "square"
	}
	else if cap == RenderingContext.LINE_CAP_ROUND {
		v = "round"
	}
	else {
		v = "butt"
	}
	lang "js" {{{
		this.ctx.lineCap = v;
	}}}
}

func setLineJoin(join as int) override
{
	var v as string
	if join == RenderingContext.LINE_JOIN_BEVEL {
		v = "bevel"
	}
	else if join == RenderingContext.LINE_JOIN_ROUND {
		v = "round"
	}
	else {
		v = "miter"
	}
	lang "js" {{{
		this.ctx.lineJoin = v;
	}}}
}

func setLineWidth(width as double) override
{
	lang "js" {{{
		this.ctx.lineWidth = width;
	}}}
}

func setMiterLimit(limit as double) override
{
	lang "js" {{{
		this.ctx.miterLimit = limit;
	}}}
}

func rect(x as double, y as double, width as double, height as double) override
{
	lang "js" {{{
		this.ctx.rect(x, y, width, height);
	}}}
}

func fillRect(x as double, y as double, width as double, height as double) override
{
	lang "js" {{{
		this.ctx.fillRect(x, y, width, height);
	}}}
}

func strokeRect(x as double, y as double, width as double, height as double) override
{
	lang "js" {{{
		this.ctx.strokeRect(x, y, width, height);
	}}}
}

func clearRect(x as double, y as double, width as double, height as double) override
{
	lang "js" {{{
		this.ctx.clearRect(x, y, width, height);
	}}}
}

func fill override
{
	lang "js" {{{
		this.ctx.fill();
	}}}
}

func stroke override
{
	lang "js" {{{
		this.ctx.stroke();
	}}}
}

func beginPath override
{
	lang "js" {{{
		this.ctx.beginPath();
	}}}
}

func moveTo(x as double, y as double) override
{
	lang "js" {{{
		this.ctx.moveTo(x, y);
	}}}
}

func closePath override
{
	lang "js" {{{
		this.ctx.closePath();
	}}}
}

func lineTo(x as double, y as double) override
{
	lang "js" {{{
		this.ctx.lineTo(x, y);
	}}}
}

func clip override
{
	lang "js" {{{
		this.ctx.clip();
	}}}
}

func quadraticCurveTo(cpx as double, cpy as double, x as double, y as double) override
{
	lang "js" {{{
		this.ctx.quadraticCurveTo(cpx, cpy, x, y);
	}}}
}

func bezierCurveTo(cp1x as double, cp1y as double, cp2x as double, cp2y as double, x as double, y as double) override
{
	lang "js" {{{
		this.ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
	}}}
}

func arc(x as double, y as double, r as double, sAngle as double, eAngle as double, counterclockwise as bool) override
{
	lang "js" {{{
		this.ctx.arc(x, y, r, sAngle, eAngle, counterclockwise);
	}}}
}

func arcTo(x1 as double, y1 as double, x2 as double, y2 as double, r as double) override
{
	lang "js" {{{
		this.ctx.arcTo(x1, y1, x2, y2, r);
	}}}
}

func isPointInPath(x as double, y as double) override as bool
{
	return lang "js" bool {{{ this.ctx.isPointInPath(x, y) }}}
}

func scale(scalewidth as double, scaleheight as double) override
{
	lang "js" {{{
		this.ctx.scale(scalewidth, scaleheight);
	}}}
}

func rotate(angle as double) override
{
	lang "js" {{{
		this.ctx.rotate(angle);
	}}}
}

func translate(x as double, y as double) override
{
	lang "js" {{{
		this.ctx.translate(x, y);
	}}}
}

func transform(a as double, b as double, c as double, d as double, e as double, f as double) override
{
	lang "js" {{{
		this.ctx.transform(a, b, c, d, e, f);
	}}}
}

func setTransform(a as double, b as double, c as double, d as double, e as double, f as double) override
{
	lang "js" {{{
		this.ctx.setTransform(a, b, c, d, e, f);
	}}}
}

func toCssCompatibleString(font as FontDescription) private as string
{
	assert font
	var sb = new StringBuilder()
	if font.getItalic() {
		sb.appendString("italic")
	}
	if font.getBold() {
		if sb.count() > 0:
			sb.appendCharacter(' ')
		sb.appendString("bold")
	}
	var size = font.getSize()
	if size {
		if sb.count() > 0:
			sb.appendCharacter(' ')
		sb.appendString(String.forInteger(size.toPoints(96)))
		sb.appendString("px")
	}
	var name = font.getName()
	if String.isNotEmpty(name) {
		if sb.count() > 0:
			sb.appendCharacter(' ')
		sb.appendString(name)
	}
	return sb.toString()
}

func setFont(font as FontDescription) override
{
	var fonts as string
	if font:
		fonts = toCssCompatibleString(font)
	lang "js" {{{
		this.ctx.font = fonts;
	}}}
}

func setTextAlign(align as int) override
{
	var v as string
	if align == RenderingContext.ALIGN_END {
		v = "end"
	}
	else if align == RenderingContext.ALIGN_CENTER {
		v = "center"
	}
	else if align == RenderingContext.ALIGN_LEFT {
		v = "left"
	}
	else if align == RenderingContext.ALIGN_RIGHT {
		v = "right"
	}
	else {
		v = "start"
	}
	lang "js" {{{
		this.ctx.textAlign = v;
	}}}
}

func setTextBaseline(baseline as int) override
{
	var v as string
	if baseline == RenderingContext.BASELINE_TOP {
		v = "top"
	}
	else if baseline == RenderingContext.BASELINE_HANGING {
		v = "hanging"
	}
	else if baseline == RenderingContext.BASELINE_MIDDLE {
		v = "middle"
	}
	else if baseline == RenderingContext.BASELINE_IDEOGRAPHIC {
		v = "ideographic"
	}
	else if baseline == RenderingContext.BASELINE_BOTTOM {
		v = "bottom"
	}
	else {
		v = "alphabetic"
	}
	lang "js" {{{
		this.ctx.textBaseline = v;
	}}}
}

func fillText(text as string, x as double, y as double, maxWidth as double) override
{
	var mw #used = maxWidth
	lang "js" {{{
		if(mw <= 0) {
			mw = undefined;
		}
		this.ctx.fillText(text, x, y, mw);
	}}}
}

func strokeText(text as string, x as double, y as double, maxWidth as double) override
{
	var mw #used = maxWidth
	lang "js" {{{
		if(mw <= 0) {
			mw = undefined;
		}
		this.ctx.strokeText(text, x, y, mw);
	}}}
}

func measureTextHeight(text as string) override as double
{
	if text == null:
		return 0.0
	var sz = lang "js" object {{{ this.ctx.measureText(text) }}}
	if sz == null:
		return 0.0
	var v = 0.0
	lang "js" {{{
		if(sz.fontBoundingBoxAscent && sz.fontBoundingBoxDescent) {
			v = sz.fontBoundingBoxAscent + sz.fontBoundingBoxDescent;
		}
		else {
			var e = document.createElement('div');
			e.style.position = 'fixed';
			e.style.font = this.ctx.font;
			e.style.padding = '0';
			e.style.margin = '0';
			e.textContent = text;
			var b = document.getElementsByTagName('body')[0];
			b.appendChild(e);
			var cs = window.getComputedStyle(e);
			v = parseFloat(cs.getPropertyValue('height'), 10);
			b.removeChild(e);
		}
	}}}
	return v
}

func measureTextWidth(text as string) override as double
{
	if text == null:
		return 0.0
	var sz = lang "js" object {{{ this.ctx.measureText(text) }}}
	if sz == null:
		return 0.0
	var v = 0.0
	lang "js" {{{
		v = sz.width;
	}}}
	return v
}

func drawImage(img as Image, x as double, y as double) override
{
	var bimg = assert img as ImageForBrowser
	var himg = assert bimg.image
	lang "js" {{{
		this.ctx.drawImage(himg, x, y);
	}}}
}

func drawAndScaleImage(img as Image, x as double, y as double, width as double, height as double) override
{
	var bimg = assert img as ImageForBrowser
	var himg = assert bimg.image
	lang "js" {{{
		this.ctx.drawImage(himg, x, y, width, height);
	}}}
}

func drawAndProcessImage(img as Image, sx as double, sy as double, swidth as double, sheight as double, x as double, y as double, width as double, height as double) override
{
	var bimg = assert img as ImageForBrowser
	var himg = assert bimg.image
	lang "js" {{{
		this.ctx.drawImage(himg, sx, sy, swidth, sheight, x, y, width, height);
	}}}
}

func setGlobalAlpha(alpha as double) override
{
	lang "js" {{{
		this.ctx.globalAlpha = alpha;
	}}}
}

func save override
{
	lang "js" {{{
		this.ctx.save();
	}}}
}

func restore override
{
	lang "js" {{{
		this.ctx.restore();
	}}}
}
