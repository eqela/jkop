
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.json
import jk.webclient

class:

func replaceParameters(path as string, parameters as map<string,string>) static as string
{
	// FIXME
	return path
}

func contentTypeAsHeaders(contentType as string) static as KeyValueList<string,string>
{
	var v = new KeyValueList<string,string>()
	v.add("Content-Type", contentType)
	return v
}

func asJsonBuffer(data as dynamic) static as buffer
{
	if data == null:
		return null
	return String.toUTF8Buffer(JSONEncoder.toString(data))
}

func validateResponse(response as WebClient.Response) static
{
	if not response:
		Error.throw("noResponse", null)
	if String.startsWith(response.statusCode, "2") == false:
		Error.throw("httpErrorStatusReceived", response.statusCode)
}

func responseAsString(response as WebClient.Response) static as string
{
	validateResponse(response)
	return response.getBodyAsString()
}

func responseAsBoolean(response as WebClient.Response) static as bool
{
	var r = responseAsString(response)
	var v = Boolean.asObject(r)
	if not v:
		Error.throw("responseIsNotBoolean", response)
	return v.toBoolean()
}

func responseAsLongInteger(response as WebClient.Response) static as long
{
	var r = responseAsString(response)
	var v = LongInteger.asObject(r)
	if not v:
		Error.throw("responseIsNotLongInteger", response)
	return v.toLong()
}

func responseAsInteger(response as WebClient.Response) static as long
{
	var r = responseAsString(response)
	var v = Integer.asObject(r)
	if not v:
		Error.throw("responseIsNotInteger", response)
	return v.toInteger()
}

func responseAsBuffer(response as WebClient.Response) static as buffer
{
	validateResponse(response)
	return response.getBodyAsBuffer()
}

func responseAsDynamicMap(response as WebClient.Response) static as DynamicMap
{
	validateResponse(response)
	return response.getBodyAsDynamicMap()
}
