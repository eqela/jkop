
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

prop redirectionEnabled = false
prop redirectionLimit = 5
prop apiUrl as string
prop webClient as WebClient
prop debugCallback as function<void,string>

**
** Concatenates the API URL string with the supplied API endpoint string and returns it.
**

func getFullURL(api as string) virtual as string
{
	var url = apiUrl
	if String.isEmpty(url):
		url = "/"
	if url == "/" {
		if String.startsWith(api, "/"):
			return api
		return url .. api
	}
	if String.endsWith(url, "/") {
		if String.startsWith(api, "/"):
			return url .. String.getSubString(api, 1)
		return url .. api
	}
	if String.startsWith(api, "/"):
		return url .. api
	return url .. "/" .. api
}

**
** Encodes the supplied instance of DynamicMap class into a JSON formatted string
** then converts it to a UTF8 encoded buffer and finally returns it.
**

func toUTF8Buffer(data as DynamicMap) as buffer
{
	assert data
	return String.toUTF8Buffer(JSONEncoder.encode(data))
}

**
** A virtual method that accepts an instance of KeyValueList<string, string> class
** for request headers customization purposes.
**

func customizeRequestHeaders(headers as KeyValueList<string,string>) virtual
{
}

**
** A virtual method that will be called upon the start of sending the request.
**

func onStartSendRequest virtual
{
}

**
** A virtual method that will be called upon the end of sending the request.
**

func onEndSendRequest virtual
{
}

**
** A virtual method that will be called for default error handling.
**

func onDefaultErrorHandler(error as Error) virtual
{
}

**
** Calls the toError() method passing the supplied instance of DynamicMap class.
** If it returns an instance of Error class, it will call the onError() method
** passing the Error object and the supplied callback function parameter that
** accepts an Error instance then returns a boolean value of true, otherwise,
** it returns the boolean value of false.
**

func handleAsError(response as DynamicMap, callback as function<void,Error> = null) as bool
{
	var error = toError(response)
	if error {
		onError(error, callback)
		return true
	}
	return false
}

**
** Converts the supplied instance of DynamicMap class 
** into an Error object if the instance is null or if
** the value of the key 'status' is equal to 'error'.
**

func toError(response as DynamicMap) as Error
{
	if not response:
		return Error.forCode("noServerResponse")
	if response.getString("status") == "error" {
		var v = new Error()
		v.setCode(response.getString("code"))
		v.setMessage(response.getString("message"))
		v.setDetail(response.getString("detail"))
		return v
	}
	return null
}

**
** Checks if the supplied callback function parameter that accepts an Error object
** is not null then calls it passing the supplied instance of Error class, otherwise,
** it will call the onDefaultErrorHandler() method passing the supplied instance
** of Error class.
**

func onError(error as Error, callback as function<void,Error>) virtual
{
	assert callback:
		onDefaultErrorHandler(error)
	callback(error)
}

**
** Calls the onError() method passing the supplied instance of Error class and above
** null value on the callback function parameter that accepts an Error object.
**

func onError(error as Error) virtual:
	onError(error, null)

**
** Calls the doSendRequest() method passing the supplied HTTP method, URL,
** HTTP headers, and the data buffer. Calls the supplied callback function
** parameter when the response is received. Calls the onError() method
** passing the error object and the supplied error callback function
** parameter if there is an error.
**

func sendRequest(method as string, url as string, headers as KeyValueList<string,string>, data as buffer, callback as function<void,DynamicMap>, errorCallback as function<void,Error> = null)
{
	assert callback
	var ll final = callback
	var ecb final = errorCallback
	doSendRequest(method, url, headers, data, func(responseHeaders as KeyValueList<string,string>, body as buffer) {
		assert body && Buffer.getSize(body) > 0:
			onError(Error.forCode("requestFailed"), ecb)
		var responseString = String.forUTF8Buffer(body)
		if debugCallback:
			debugCallback("Received response: `" .. responseString .. "'")
		var jsonResponseBody = assert JSONParser.parse(responseString) as DynamicMap:
			onError(Error.forCode("invalidServerResponse"), ecb)
		if not handleAsError(jsonResponseBody, ecb):
			ll(jsonResponseBody)
	}, ecb)
}

**
** Sends an HTTP request with the supplied HTTP method, URL, HTTP headers,
** and the data buffer. Calls the supplied callback function parameter
** when the response is received. Calls the onError() method passing
** the error object and the supplied error callback function
** parameter if there is an error.
**

func doSendRequest(method as string, url as string, headers as KeyValueList<string,string>, data as buffer, callback as function<void, KeyValueList<string,string>, buffer>, errorCallback as function<void,Error> = null, redirectCount as int = 0)
{
	assert callback
	assert redirectCount <= redirectionLimit:
		onError(Error.instance("tooManyRedirections", "Too many redirections."), errorCallback)
	var hrs = headers
	if not hrs {
		hrs = new KeyValueList<string,string>()
		hrs.add("Content-Type", "application/json")
	}
	if not webClient:
		webClient = NativeWebClient.instance()
	assert webClient:
		onError(Error.forCode("noWebClient"), errorCallback)
	customizeRequestHeaders(hrs)
	var hrsf final = hrs
	var cb final = callback
	var ecb final = errorCallback
	var urlf final = url
	var dataf final = data
	var methodf final = method
	onStartSendRequest()
	if debugCallback:
		debugCallback("Sending request: `" .. String.forUTF8Buffer(data) .. "'")
	var rdc final = redirectCount
	webClient.query(methodf, urlf, hrsf, dataf, func(statusCode as string, responseHeaders as KeyValueList<string,string>, body as buffer) {
		onEndSendRequest()
		if redirectionEnabled {
			var code = String.toInteger(statusCode)
			if code >= 300 && code <= 399 && responseHeaders {
				var location as string
				var rhs as vector<KeyValuePair<string, string>> #force = responseHeaders.asVector()
				foreach kvp in rhs {
					if String.equalsIgnoreCase(kvp.key, "Location") {
						location = kvp.value
						break
					}
				}
				if String.isNotEmpty(location) {
					if not String.startsWith(location, "http"):
						location = getFullURL(location)
					var o = URL.forString(urlf)
					var n = URL.forString(location)
					if o && n && String.equalsIgnoreCase(o.getHost(), n.getHost()) && o.getPort() != n.getPort() {
						n.setPort(o.getPort())
						location = n.toString()
					}
					doSendRequest(methodf, location, hrsf, dataf, cb, ecb, rdc + 1)
					return
				}
			}
		}
		assert body && Buffer.getSize(body) > 0:
			onError(Error.instance("failedToConnect", "Failed to connect to server. Please check your internet connection and then try again."), ecb)
		cb(responseHeaders, body)
	})
}

**
** Calls the doSendRequest() method passing the 'GET' HTTP method,
** the supplied URL, callback function parameter that accepts an instance
** of KeyValueList<string,string> class and a buffer value, and the error
** callback function parameter that accepts an error object.
**

func doGetFile(url as string, callback as function<void, KeyValueList<string,string>, buffer>, errorCallback as function<void, Error> = null):
	doSendRequest("GET", getFullURL(url), null, null, callback, errorCallback)

**
** Calls the doSendRequest() method passing the 'GET' HTTP method,
** the supplied URL, callback function parameter that accepts an
** instance of DynamicMap class, and the error callback function
** parameter that accepts an error object.
**

func doGet(url as string, callback as function<void, DynamicMap>, errorCallback as function<void, Error> = null):
	sendRequest("GET", getFullURL(url), null, null, callback, errorCallback)

**
** Calls the doSendRequest() method passing the 'POST' HTTP method,
** the supplied URL, instance of DynamicMap class, callback function
** parameter that accepts an instance of DynamicMap class, and the
** error callback function parameter that accepts an error object.
**

func doPost(url as string, data as DynamicMap, callback as function<void, DynamicMap>, errorCallback as function<void, Error> = null):
	sendRequest("POST", getFullURL(url), null, toUTF8Buffer(data), callback, errorCallback)

**
** Calls the doSendRequest() method passing the 'PUT' HTTP method,
** the supplied URL, instance of DynamicMap class, callback function
** parameter that accepts an instance of DynamicMap class, and the
** error callback function parameter that accepts an error object.
**

func doPut(url as string, data as DynamicMap, callback as function<void, DynamicMap>, errorCallback as function<void, Error> = null):
	sendRequest("PUT", getFullURL(url), null, toUTF8Buffer(data), callback, errorCallback)

**
** Calls the doSendRequest() method passing the 'DELETE' HTTP method,
** the supplied URL, callback function parameter that accepts an
** instance of DynamicMap class, and the error callback function
** parameter that accepts an error object.
**

func doDelete(url as string, callback as function<void, DynamicMap>, errorCallback as function<void, Error> = null):
	sendRequest("DELETE", getFullURL(url), null, null, callback, errorCallback)

**
** Calls the sendRequest() method passing the 'POST' HTTP method,
** the supplied URL, data buffer, MIME type, callback function
** parameter that accepts an instance of DynamicMap class, and
** the error callback function parameter that accepts an
** error object.
**

func uploadFile(url as string, data as buffer, mimeType as string, callback as function<void, DynamicMap>, errorCallback as function<void, Error> = null)
{
	var mt = mimeType
	if(String.isEmpty(mt)) {
		mt = "application/octet-stream"
	}
	var hdrs = new KeyValueList<string,string>()
	hdrs.add("content-type", mt)
	sendRequest("POST", getFullURL(url), hdrs, data, callback, errorCallback)
}

**
** Calls the sendRequest() method passing the 'GET' HTTP method,
** the supplied URL, a callback function, and an error callback
** function.
**

func getWithStatus(url as string, callback as function<void, DynamicMap, Error>)
{
	var cb final = callback
	var okcb = func(v as DynamicMap) {
		var data = v.getDynamicMap("data")
		if data == null:
			data = new DynamicMap()
		cb(data, null)
	}
	var errcb = func(err as Error) {
		cb(null, err)
	}
	sendRequest("GET", getFullURL(url), null, null, okcb, errcb)
}

**
** Calls the sendRequest() method passing the 'POST' HTTP method,
** the supplied URL, an instance of DynamicMap class, an instance
** of KeyValueList<string,string> class, a callback function,
** and an error callback function.
**

func postWithStatus(url as string, data as DynamicMap, headers as KeyValueList<string,string>, callback as function<void, DynamicMap, Error>)
{
	var cb final = callback
	var okcb = func(v as DynamicMap) {
		var data = v.getDynamicMap("data")
		if data == null:
			data = new DynamicMap()
		cb(data, null)
	}
	var errcb = func(err as Error) {
		cb(null, err)
	}
	sendRequest("POST", getFullURL(url), headers, toUTF8Buffer(data), okcb, errcb)
}
