
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is AudioManager:

depend "objc-header-m:<AppKit/NSSound.h>"

class MyAudioClip is AudioClip is Runnable
{
	var filePath as string #used

	func run
	{
		lang "objc" {{{
			NSSound* sound = [[NSSound alloc] initWithContentsOfFile:filePath byReference:NO];
			[sound play];
		}}}
	}

	func play as bool
	{
		Thread.start(this)
		return true
	}

	func initialize(clipId as string) as bool
	{
		assert clipId
		var sound as !"NSSound"
		lang "objc" {{{
			filePath = [[NSBundle mainBundle] pathForResource:clipId ofType:@"mp3"];
			if(filePath != nil) {
				sound = [[NSSound alloc] initWithContentsOfFile:filePath byReference:NO];
			}
		}}}
		assert sound
		return true
	}
}

class MyAudioStream is AudioStream
{
	pvar context as GuiApplicationContextForMacOS
	var sound as !"NSSound"

	func initialize(clipId as string) as bool
	{
		assert clipId
		lang "objc" {{{
			NSString* pp = [[NSBundle mainBundle] pathForResource:clipId ofType:@"mp3"];
			if(pp != nil) {
				sound = [[NSSound alloc] initWithContentsOfFile:pp byReference:NO];
			}
		}}}
		assert sound:
			Log.error(context, "Failed to initialize audio player for `" .. clipId .. "'")
		Log.debug(context, "Initialized audio player for `" .. clipId .. "'")
		return true
	}

	func play as bool
	{
		assert sound
		lang "objc" {{{
			if(sound.isPlaying) {
				[sound resume];
			}
			else {
				[sound play];
			}
		}}}
		return true
	}

	func pause as bool
	{
		assert sound
		lang "objc" {{{
			[sound pause];
		}}}
		return true
	}

	func stop as bool
	{
		assert sound
		lang "objc" {{{
			[sound stop];
		}}}
		return true
	}

	func seek(sec as int) as bool
	{
		assert sound
		lang "objc" {{{
			[sound setCurrentTime:sec];
		}}}
		return true
	}

	func getCurrentTime as int
	{
		assert sound
		return lang "objc" int {{{ [sound currentTime] }}}
	}

	func getDuration as int
	{
		assert sound
		return lang "objc" int {{{ [sound duration] }}}
	}

	func setLooping(v as bool) as bool
	{
		assert sound
		if v {
			lang "objc" {{{
				[sound setLoops:YES];
			}}}
		}
		else {
			lang "objc" {{{
				[sound setLoops:NO];
			}}}
		}
		return true
	}

	func setVolume(v as double) as bool
	{
		assert sound
		lang "objc" {{{
			[sound setVolume:v];
		}}}
		return true
	}
}

func forApplication(context as ApplicationContext) static as this
{
	var ctx = assert context as GuiApplicationContextForMacOS:
		Log.error(context, "Context given to " .. VALUE "__THIS__" .. " is not a macOS context")
	var v = new this()
	v.setContext(ctx)
	return v
}

pvar context as GuiApplicationContextForMacOS

func getClipForResource(id as string) override as AudioClip
{
	var v = new MyAudioClip()
	assert v.initialize(id)
	return v
}

func getStreamForResource(id as string) override as AudioStream
{
	var v = new MyAudioStream()
	v.setContext(context)
	assert v.initialize(id)
	return v
}
