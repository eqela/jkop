
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.env
import jk.log
import jk.process
import jk.url

class:

prop executable:_executable as File
{
	get {
		if not _executable:
			_executable = ExternalCommand.findInPath("git")
		if not _executable:
			Error.throw("commandNotFound", "git")
		return _executable
	}
	set {
		_executable = value
	}
}

prop sshCommand as string
prop sshIdentity as File

var ctx as LoggingContext

ctor:
	nop

ctor(ctx as LoggingContext):
	this.ctx = ctx

func getSshCommandString private as string
{
	if String.isEmpty(sshCommand) && sshIdentity == null:
		return null
	var sb = new StringBuilder()
	var cmd = sshCommand
	if String.isEmpty(cmd):
		cmd = "ssh"
	sb.appendString(cmd)
	if sshIdentity {
		sb.appendString(" -i \"")
		sb.appendString(sshIdentity.getPath())
		sb.appendString("\"")
		sb.appendString(" -o IdentitiesOnly=yes")
	}
	return sb.toString()
}

func getProcessLauncher as ProcessLauncher
{
	var gg = executable
	if not gg:
		Error.throw("noGitExecutable", "getProcessLauncher")
	var v = ProcessLauncher.forFile(gg)
	if not v:
		Error.throw("failedToCreate", "ProcessLauncher")
	var ssh = getSshCommandString()
	if String.isNotEmpty(ssh):
		v.setEnvVariable("GIT_SSH_COMMAND", ssh)
	// NOTE: Git needs to be detached from the terminal so that it will not
	// try to ask for eg. username and password interactively.
	v.setDetachFromTerminal(true)
	return v
}

func asWorkdir(dir as dynamic) as File
{
	if dir == null:
		Error.throw("missingParameter", "Git:asWorkdir:dir")
	var diro = File.asFile(dir)
	if not diro:
		Error.throw("invalidParameter", "Git:asWorkdir:dir")
	if not diro.entry(".git").isDirectory():
		Error.throw("notGitWorkingDirectory", diro)
	return diro
}

class CloneParams public
{
	prop depth as int = 0
	prop recursive as bool = false
	prop reference as string
}

func clone(repository as dynamic, targetDir as dynamic = null, params as CloneParams = null) as File
{
	if repository == null:
		Error.throw("missingParameter", "Git:clone:repository")
	var repo = String.asString(repository)
	if String.isEmpty(repo):
		Error.throw("invalidParameter", "Git:clone:repository")
	var tt as File
	if targetDir == null {
		tt = TemporaryDirectory.create()
		if not tt:
			Error.throw("failedToCreateTemporaryDirectory", "Git:clone")
	}
	else {
		tt = File.asFile(targetDir)
		if not tt:
			Error.throw("invalidParameter", "Git:clone:targetDir")
		if tt.exists():
			Error.throw("alreadyExists", tt)
	}
	var pl = getProcessLauncher()
	pl.addToParams("clone")
	if params {
		var dd = params.depth
		if dd > 0 {
			pl.addToParams("--depth")
			pl.addToParams(String.forInteger(dd))
		}
		if params.recursive:
			pl.addToParams("--recursive")
		if String.isNotEmpty(params.reference) {
			pl.addToParams("--branch")
			pl.addToParams(params.reference)
		}
	}
	pl.addToParams(repo)
	pl.addToParams(tt.getPath())
	Log.debug(ctx, String.asString(pl))
	var sb = new StringBuilder()
	var v = pl.executeToStringBuilder(sb)
	if v != 0 {
		tt.removeRecursive()
		Log.error(ctx, "Git output: `" .. sb.toString() .. "'")
		Error.throw("failedToGitClone", repo)
	}
	return tt
}

func checkout(workdir as dynamic, reference as string)
{
	if workdir == null:
		Error.throw("missingParameter", "Git:checkout:workdir")
	var dir = asWorkdir(workdir)
	if not dir:
		Error.throw("invalidParameter", "Git:checkout:workdir")
	if String.isEmpty(reference):
		Error.throw("missingParameter", "Git:checkout:reference")
	var pl = getProcessLauncher()
	pl.setCwd(dir)
	pl.addToParams("checkout")
	pl.addToParams(reference)
	Log.debug(ctx, String.asString(pl))
	var sb = new StringBuilder()
	var v = pl.executeToStringBuilder(sb)
	if v != 0 {
		Log.error(ctx, "Git output: `" .. sb.toString() .. "'")
		Error.throw("failedToCheckout", reference)
	}
}

func pull(workdir as dynamic)
{
	if workdir == null:
		Error.throw("missingParameter", "Git:pull:workdir")
	var dir = asWorkdir(workdir)
	if not dir:
		Error.throw("invalidParameter", "Git:pull:workdir")
	var pl = getProcessLauncher()
	pl.setCwd(dir)
	pl.addToParams("pull")
	Log.debug(ctx, String.asString(pl))
	var sb = new StringBuilder()
	var v = pl.executeToStringBuilder(sb)
	if v != 0 {
		Log.error(ctx, "Git output: `" .. sb.toString() .. "'")
		Error.throw("failedToGitPull", dir)
	}
}

func getCurrentCommitHash(workdir as dynamic) as string
{
	if workdir == null:
		Error.throw("missingParameter", "Git:getCurrentCommitHash:workdir")
	var dir = asWorkdir(workdir)
	if not dir:
		Error.throw("invalidParameter", "Git:getCurrentCommitHash:workdir")
	var pl = getProcessLauncher()
	pl.setCwd(dir)
	pl.addToParams("rev-parse")
	pl.addToParams("HEAD")
	Log.debug(ctx, String.asString(pl))
	var sb = new StringBuilder()
	var v = pl.executeToStringBuilder(sb)
	var str = sb.toString()
	if v != 0 {
		Log.error(ctx, "Git output: `" .. str .. "'")
		Error.throw("failedToGetCurrentCommitHash", dir)
	}
	str = String.strip(str)
	if String.isEmpty(str):
		Error.throw("emptyCommitHash", workdir)
	return str
}

func isRepositoryUrlAccessible(repoUrl as dynamic) as bool
{
	var url = String.asString(repoUrl)
	if String.isEmpty(url):
		return false
	var pl = getProcessLauncher()
	pl.addToParams("ls-remote")
	pl.addToParams(url)
	pl.addToParams("HEAD")
	var sb = new StringBuilder()
	var v = pl.executeToStringBuilder(sb)
	Log.debug(ctx, "isRepositoryUrlAccessible output: `" .. sb.toString() .. "'")
	if v != 0:
		return false
	return true
}

func validateCredentialsForRepository(repository as dynamic, username as string, password as string) as bool
{
	var repoUrl = String.asString(repository)
	if String.isEmpty(repoUrl):
		return false
	var url = URL.forString(repoUrl)
	if username:
		url.setUsername(username)
	if password:
		url.setPassword(password)
	return isRepositoryUrlAccessible(url)
}
