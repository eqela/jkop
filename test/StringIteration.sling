
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is UnitTest:

func testCodeString
{
	var str = "\n/* xxx\n * testing\n */\n"
	var it = String.iterate(str)
	var start = it.getCurrentPosition()
	ASSERT(it.getCurrentChar() < 1)
	ASSERT(it.getNextChar() == '\n')
	ASSERT(it.getCurrentChar() == '\n')
	var pos = it.getCurrentPosition()
	ASSERT(it.getNextChar() == '/')
	ASSERT(it.getNextChar() == '*')
	it.setCurrentPosition(pos)
	ASSERT(it.getCurrentChar() == '\n')
	ASSERT(it.getNextChar() == '/')
	ASSERT(it.getNextChar() == '*')
	ASSERT(it.getNextChar() == ' ')
	ASSERT(it.getNextChar() == 'x')
	ASSERT(it.getNextChar() == 'x')
	ASSERT(it.getNextChar() == 'x')
	ASSERT(it.getNextChar() == '\n')
	ASSERT(it.getNextChar() == ' ')
	it.setCurrentPosition(start)
	ASSERT(it.getCurrentChar() < 1)
	ASSERT(it.getNextChar() == '\n')
}

func testSimpleString
{
	var str = "Simple Test"
	var it = String.iterate(str)
	ASSERT(it.getNextChar() == 'S')
	ASSERT(it.getNextChar() == 'i')
	ASSERT(it.getNextChar() == 'm')
	ASSERT(it.getNextChar() == 'p')
	it.moveToPreviousChar()
	it.moveToPreviousChar()
	ASSERT(it.getCurrentChar() == 'i')
	ASSERT(it.getNextChar() == 'm')
	ASSERT(it.getNextChar() == 'p')
	ASSERT(it.getNextChar() == 'l')
	ASSERT(it.getNextChar() == 'e')
	ASSERT(it.getNextChar() == ' ')
	ASSERT(it.getNextChar() == 'T')
	ASSERT(it.getNextChar() == 'e')
	ASSERT(it.getNextChar() == 's')
	ASSERT(it.getNextChar() == 't')
	ASSERT(it.getNextChar() < 1)
}

func testMultibyteString
{
	var str = "Häviääkö?"
	var it = String.iterate(str)
	ASSERT(it.getNextChar() == 'H')
	ASSERT(it.getNextChar() == 'ä')
	ASSERT(it.getNextChar() == 'v')
	ASSERT(it.getNextChar() == 'i')
	var pos = it.getCurrentPosition()
	ASSERT(it.getNextChar() == 'ä')
	ASSERT(it.getNextChar() == 'ä')
	it.moveToPreviousChar()
	it.moveToPreviousChar()
	it.moveToPreviousChar()
	ASSERT(it.getNextChar() == 'i')
	ASSERT(it.getNextChar() == 'ä')
	ASSERT(it.getNextChar() == 'ä')
	ASSERT(it.getNextChar() == 'k')
	ASSERT(it.getNextChar() == 'ö')
	ASSERT(it.getNextChar() == '?')
	ASSERT(it.getNextChar() < 1)
	it.setCurrentPosition(pos)
	ASSERT(it.getNextChar() == 'ä')
	ASSERT(it.getNextChar() == 'ä')
	ASSERT(it.getNextChar() == 'k')
	ASSERT(it.getNextChar() == 'ö')
	ASSERT(it.getNextChar() == '?')
	ASSERT(it.getNextChar() < 1)
}

func execute override
{
	TEST("code string", testCodeString())
	TEST("simple string", testSimpleString())
	TEST("multibyte string", testMultibyteString())
}
