
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.time
import jk.http.server
import jk.socket

class is HTTPServerRequestHandler is HTTPServerComponent:

class RequestCounter
{
	pvar ipAddress as string
	pvar startCountTimeStamp = 0
	pvar startIgnoreTimeStamp = 0
	var requestCount = 1

	func getCountAfterIncrement as int
	{
		return ++requestCount
	}
}

pvar countLimit = 5
pvar countDuration = 5
pvar ignoreDuration = 60
pvar maintenanceCleanupDelay = 60
var lastCleanupTimeStamp = 0
var addresses as DynamicMap

ctor
{
	addresses = new DynamicMap()
}

func initialize(server as HTTPServerBase)
{
}

func onMaintenance
{
	assert addresses
	var now = SystemClock.asSeconds()
	if (now - lastCleanupTimeStamp) < maintenanceCleanupDelay:
		return
	lastCleanupTimeStamp = now
	var keys = new DynamicVector()
	var itr = assert addresses.iterateValues()
	loop {
		var rc = itr.next() as RequestCounter
		if rc == null:
			break
		if rc.getStartIgnoreTimeStamp() == 0 && (now - rc.getStartCountTimeStamp()) > countDuration:
			keys.appendObject(rc.getIpAddress())
	}
	foreach k as string in keys.toVector():
		addresses.remove(k)
}

func onRefresh
{
}

func cleanup
{
}

func handleRequest(req as HTTPServerRequest, next as function)
{
	if isRequestRejected(req) {
		req.sendJSONObject(HTTPServerJSONResponse.forNotAllowed())
		return
	}
	next()
}

func isRequestRejected(req as HTTPServerRequest) private as bool
{
	var connection = req.getConnection()
	if connection == null:
		return true
	var socket = connection.getSocket()
	if socket == null:
		return true
	var ipAddress as string
	if socket is TCPSocket {
		ipAddress = (socket as! TCPSocket).getRemoteAddress()
	}
	else {
		ipAddress = req.getRemoteAddress()
	}
	if String.isEmpty(ipAddress):
		return true
	var now = SystemClock.asSeconds()
	var rc = addresses.get(ipAddress) as RequestCounter
	if rc == null {
		addresses.setObject(ipAddress, new RequestCounter()
			.setIpAddress(ipAddress)
			.setStartCountTimeStamp(now))
		return false
	}
	if rc.getStartIgnoreTimeStamp() > 0 {
		if (now - rc.getStartIgnoreTimeStamp()) <= ignoreDuration:
			return true
		addresses.remove(ipAddress)
		return false
	}
	if (now - rc.getStartCountTimeStamp()) <= countDuration {
		var count = rc.getCountAfterIncrement()
		if count >= countLimit {
			rc.setStartIgnoreTimeStamp(now)
			return true
		}
		return false
	}
	addresses.remove(ipAddress)
	return false
}
