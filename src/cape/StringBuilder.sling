
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is StringObject:

func forString(initial as string) static as this
{
	var v = new this()
	v.append(initial)
	return v
}

func dup(initial as this) static as this
{
	var v = new this()
	if initial:
		v.append(initial.toString())
	return v
}

IFDEF "target_objc" {
	var data as !"NSMutableString*"
}
ELSE IFDEF "target_cs" {
	var builder as !"System.Text.StringBuilder"
}
ELSE IFDEF "target_java" {
	var builder as !"java.lang.StringBuilder"
}
ELSE IFDEF "target_js" {
	var builder as !"String" #used
}
ELSE IFDEF "target_lua" {
	var builder as string
}
ELSE IFDEF "target_kotlin" {
	var builder as !"kotlin.text.StringBuilder" #used
}
ELSE IFDEF "target_swift" {
	var builder as !"NSMutableString" #used
}

ctor:
	initialize()

func initialize
{
	IFDEF "target_objc" {
		lang "objc" {{{
			data = [[NSMutableString alloc] init];
		}}}
	}
	ELSE IFDEF "target_cs" {
		lang "cs" {{{
			builder = new System.Text.StringBuilder();
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" {{{
			builder = new java.lang.StringBuilder();
		}}}
	}
	ELSE IFDEF "target_js" {
		lang "js" {{{
			this.builder = new String();
		}}}
	}
	ELSE IFDEF "target_lua" {
		this.builder = ""
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" {{{
			builder = kotlin.text.StringBuilder()
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			builder = ""
		}}}
	}
	ELSE {
		ERROR "Not implemented."
	}
}

func clear
{
	IFDEF "target_objc" {
		initialize()
	}
	ELSE IFDEF "target_cs" {
		lang "cs" {{{
			builder.Clear();
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" {{{
			builder.setLength(0);
		}}}
	}
	ELSE IFDEF "target_js" {
		initialize()
	}
	ELSE IFDEF "target_lua" {
		this.builder = ""
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" {{{
			builder!!.clear()
		}}}
	}
	ELSE IFDEF "target_swift" {
		builder = ""
	}
	ELSE {
		ERROR "Not implemented."
	}
}

func count as int
{
	IFDEF "target_objc" {
		return lang "objc" int {{{ [data length] }}}
	}
	ELSE IFDEF "target_cs" {
		return lang "cs" int {{{ builder.Length }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" int {{{ builder.length() }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" int {{{ this.builder.length }}}
	}
	ELSE IFDEF "target_sushi" {
		return lang "lua" int {{{ _sushi.getStringLength(self.builder) }}}
	}
	ELSE IFDEF "target_stdlua" {
		return lang "lua" int {{{ string.len(self.builder) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" int {{{ builder!!.length }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" int {{{ (builder! as NSString).length }}}
	}
	ELSE {
		ERROR "Not implemented."
		return 0
	}
}

func append(c as int) as this:
	return append(String.forInteger(c))

func append(c as char) as this
{
	if c == 0:
		return this
	return append(String.forCharacter(c))
}

func append(c as double) as this:
	return append(String.forDouble(c))

func append(c as float) as this:
	return append(String.forFloat(c))

func append(str as string #used) as this
{
	if str == null:
		return this
	IFDEF "target_objc" {
		lang "objc" {{{
			[data appendString:str];
		}}}
		return this
	}
	ELSE IFDEF "target_cs" {
		lang "cs" {{{
			builder.Append(str);
		}}}
		return this
	}
	ELSE IFDEF "target_java" {
		lang "java" {{{
			builder.append(str);
		}}}
		return this
	}
	ELSE IFDEF "target_js" {
		lang "js" {{{
			this.builder += str;
		}}}
		return this
	}
	ELSE IFDEF "target_lua" {
		builder = builder .. str
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" {{{
			builder!!.append(str)
		}}}
		return this
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			builder.append(str!)
		}}}
		return this
	}
	ELSE {
		ERROR "Not implemented."
		return this
	}
}

func insert(index as int, c as int) as this:
	return insert(index, String.forInteger(c))

func insert(index as int, c as char) as this
{
	if c == 0:
		return this
	return insert(index, String.forCharacter(c))
}

func insert(index as int, c as double) as this:
	return insert(index, String.forDouble(c))

func insert(index as int, c as float) as this:
	return insert(index, String.forFloat(c))

func insert(index as int, str as string) as this
{
	if str == null:
		return this
	IFDEF "target_objc" {
		lang "objc" {{{
			[data insertString:str atIndex:index];
		}}}
		return this
	}
	ELSE IFDEF "target_cs" {
		lang "cs" {{{
			builder.Insert(index, str);
		}}}
		return this
	}
	ELSE IFDEF "target_java" {
		lang "java" {{{
			builder.insert(index, str);
		}}}
		return this
	}
	ELSE IFDEF "target_js" {
		var fp #used
		var lp #used
		lang "js" {{{
			fp = this.builder.substring(0, index);
			lp = this.builder.substring(index, this.builder.length);
			this.builder = fp + str + lp;
		}}}
		return this
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" {{{
			builder!!.insert(index, str)
		}}}
		return this
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			builder.insert(str!, at: index)
		}}}
		return this
	}
	ELSE {
		ERROR "Not implemented."
		return this
	}
}

func remove(index as int, length as int) as this
{
	IFDEF "target_cs" {
		lang "cs" {{{
			builder.Remove(index, length);
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" {{{
			builder.delete(index, index+length);
		}}}
	}
	ELSE IFDEF "target_objc" {
		lang "objc" {{{
			[data deleteCharactersInRange:NSMakeRange(index,length)];
		}}}
		return this
	}
	ELSE IFDEF "target_kotlin" {
		var ss as string
		lang "kotlin" {{{
			var cs = builder!!.removeRange(index, index+length)
			ss = cs.toString()
		}}}
		clear()
		append(ss)
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			builder.deleteCharacters(in: NSMakeRange(index, length))
		}}}
		return this
	}
	ELSE {
		ERROR "Not implemented."
		return this
	}
	return this
}

func removeLastCharacter as this
{
	var c = count()
	if c > 0:
		remove(c-1, 1)
	return this
}

func toString as string
{
	IFDEF "target_objc" {
		return lang "objc" string {{{ [NSString stringWithString:data] }}}
	}
	ELSE IFDEF "target_cs" {
		return lang "cs" string {{{ builder.ToString() }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" string {{{ builder.toString() }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" string {{{ this.builder.toString() }}}
	}
	ELSE IFDEF "target_lua" {
		return builder
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" string {{{ builder!!.toString() }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" string {{{ builder as Swift.String? }}}
	}
	ELSE {
		ERROR "Not implemented."
		return null
	}
}
