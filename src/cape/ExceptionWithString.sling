
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is Exception is StringObject:

func forString(string as string, allowStackTrace as bool = false) static as this
{
	var v = new this()
	v.setExceptionMessage(string)
	if allowStackTrace:
		v.updateStackTrace()
	return v
}

prop exceptionMessage as string
prop stackTraceString as string

func updateStackTrace:
	setStackTraceString(StackTrace.generate())

func toString as string
{
	if not stackTraceString:
		return exceptionMessage
	var v = new StringBuilder()
	v.append(exceptionMessage)
	var ss = stackTraceString
	if String.getLength(ss) > 0 {
		if v.count() > 0:
			v.append('\n')
		v.append(ss)
	}
	return v.toString()
}

IFDEF "target_cs" {
	lang "cs" {{{
		public override string ToString() {
			return new System.Exception(exceptionMessage, this).ToString();
		}
	}}}
}
