
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is Duplicateable is Iterateable<object> is VectorObject<object> is ObjectWithSize:

func asDynamicVector(object as object) static as this
{
	assert object
	if object is this:
		return object as! this
	if object is vector:
		return forObjectVector(object as! vector)
	return null
}

func forStringVector(vector as vector<string>) static as this
{
	var v = new this()
	foreach item in vector:
		v.append(item)
	return v
}

func forObjectVector(vector as vector) static as this
{
	var v = new this()
	foreach item in vector:
		v.append(item)
	return v
}

func forArray(array as array) static as this
{
	var v = new this()
	foreach item in array:
		v.append(item)
	return v
}

var vector as vector<object>

ctor:
	vector = new vector<object>

func toVector as vector<object>:
	return vector

func toVectorOfStrings as vector<string>
{
	var v = new vector<string>
	foreach o in vector {
		var s = String.asString(o)
		if s:
			v += s
	}
	return v
}

func toVectorOfDynamicMaps as vector<DynamicMap>
{
	var v = new vector<DynamicMap>
	foreach o as DynamicMap in vector:
		v += o
	return v
}

func duplicate as object
{
	var v = new this()
	var it = iterate()
	while it {
		var o = it.next()
		if o == null:
			break
		v.append(o)
	}
	return v
}

func mergeDynamicVector(dynamicVector as this) as this
{
	if not dynamicVector || dynamicVector.getSize() < 1:
		return this
	return mergeVector(dynamicVector.toVector())
}

func mergeVector(vector as vector<object>) as this
{
	foreach item in vector:
		append(item)
	return this
}

func append(object as object) as this
{
	vector += object
	return this
}

func append(value as int) as this
{
	vector += Integer.asObject(value)
	return this
}

func append(value as long) as this
{
	vector += LongInteger.asObject(value)
	return this
}

func append(value as bool) as this
{
	vector += Boolean.asObject(value)
	return this
}

func append(value as double) as this
{
	vector += Double.asObject(value)
	return this
}

func set(index as int, object as object) as this
{
	Vector.set(vector, index, object)
	return this
}

func set(index as int, value as int) as this
{
	Vector.set(vector, index, Integer.asObject(value))
	return this
}

func set(index as int, value as long) as this
{
	Vector.set(vector, index, LongInteger.asObject(value))
	return this
}

func set(index as int, value as bool) as this
{
	Vector.set(vector, index, Boolean.asObject(value))
	return this
}

func set(index as int, value as double) as this
{
	Vector.set(vector, index, Double.asObject(value))
	return this
}

func get(index as int) as object:
	return Vector.getAt(vector, index)

func getString(index as int, defval as string = null) as string
{
	var v = String.asString(get(index))
	if v == null:
		return defval
	return v
}

func getInteger(index as int, defval as int = 0) as int
{
	var vv = get(index)
	if vv == null:
		return defval
	return Integer.asInteger(vv)
}

func getLongInteger(index as int, defval as long = 0) as long
{
	var vv = get(index)
	if vv == null:
		return defval
	return LongInteger.asLong(vv)
}

func getBoolean(index as int, defval as bool = false) as bool
{
	var vv = get(index)
	if vv == null:
		return defval
	return Boolean.asBoolean(vv)
}

func getDouble(index as int, defval as double = 0.0) as double
{
	var vv = get(index)
	if vv == null:
		return defval
	return Double.asDouble(vv)
}

func getMap(index as int) as DynamicMap:
	return get(index) as DynamicMap

func getVector(index as int) as this:
	return get(index) as this

func iterate as Iterator<object>
{
	var v as Iterator<object> #force = Vector.iterate(vector)
	return v
}

func iterateReverse as Iterator<object>
{
	var v as Iterator<object> #force = Vector.iterateReverse(vector)
	return v
}

func remove(index as int):
	Vector.remove(vector, index)

func removeValue(value as object):
	Vector.removeValue(vector, value)

func clear:
	Vector.clear(vector)

func contains(object as object) as bool:
	return Vector.contains(vector, object)

func getSize as int:
	return Vector.getSize(vector)

func setCapacity(capacity as int):
	Vector.setCapacity(vector, capacity)

func sort
{
	Vector.sort(vector, func(a as object, b as object) as int {
		return String.compare(String.asString(a), String.asString(b))
	})
}

func sort(comparer as function<int,object,object>)
{
	if(comparer == null) {
		sort()
		return
	}
	Vector.sort(vector, comparer)
}

func sortReverse
{
	Vector.sortReverse(vector, func(a as object, b as object) as int {
		return String.compare(String.asString(a), String.asString(b))
	})
}

func sortReverse(comparer as function<int,object,object>)
{
	if(comparer == null) {
		sortReverse()
		return
	}
	Vector.sortReverse(vector, comparer)
}
