
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is File private:

class MyFileReader is FileReader is SizedReader is Reader is Closable is SeekableReader
{
	var stream as !"java.io.FileInputStream"
	var file as !"java.io.File"

	func initialize as this
	{
		lang "java" {{{
			if(file != null) {
				try {
					stream = new java.io.FileInputStream(file);
				}
				catch(java.io.FileNotFoundException e) {
					System.out.printf("File.read: `%s' : `%s'\n", e.getMessage(), file.getPath());
					return(null);
				}
				return(this);
			}
		}}}
		return(null)
	}

	func read(buffer as buffer) as int
	{
		if(buffer == null) {
			return(0)
		}
		var ptr #used = buffer
		var sz #used = cape.Buffer.getSize(buffer) as int
		var v as int #used
		lang "java" {{{
			try {
				v = stream.read(ptr, 0, sz);
			}
			catch(java.io.IOException e) {
				System.out.printf("Reader.read: `%s' : `%s'\n", e.getMessage(), file.getPath());
			}
		}}}
		return(v)
	}

	func getSize as int
	{
		var v as int
		lang "java" {{{
			try {
				v = stream.available();
			}
			catch(java.io.IOException e) {
				System.out.printf("Reader.get_size: `%s' : `%s'\n", e.getMessage(), file.getPath());
			}
		}}}
		return(v)
	}

	func close
	{
		lang "java" {{{
			try {
				stream.close();
			}
			catch(java.lang.Exception e) {
			}
		}}}
	}

	func setCurrentPosition(n as int64) as bool
	{
		return(false)
	}

	func getCurrentPosition as int64
	{
		return(0)
	}
}

class MyFileWriter is FileWriter is Writer is PrintWriter is Closable is SeekableWriter is FlushableWriter
{
	prop append as bool
	var stream as !"java.io.FileOutputStream"
	var file as !"java.io.File"

	func initialize as this
	{
		lang "java" {{{
			if(file != null) {
				try {
					stream = new java.io.FileOutputStream(file);
				}
				catch(java.io.IOException e) {
					if(append) {
						System.out.printf("File." + (append ? "append " : "write ") + ": `%s' : `%s'\n", e.getMessage(), file.getPath());
					}
				}
				return(this);
			}
		}}}
		return(null)
	}

	func write(buffer as buffer, size as int) as int
	{
		if(buffer == null) {
			return(0)
		}
		var ptr #used = buffer
		var sz #used = size
		if(sz < 1) {
			sz = cape.Buffer.getSize(buffer) as int
		}
		lang "java" {{{
			try {
				stream.write(buffer, 0, sz);
			}
			catch(java.io.IOException e) {
				System.out.printf("Writer.write: `%s' : `%s'\n", e.getMessage(), file.getPath());
			}
		}}}
		return(sz)
	}

	func close
	{
		lang "java" {{{
			try {
				stream.close();
			}
			catch(java.lang.Exception e) {
			}
		}}}
	}

	func print(str as string) as bool
	{
		if(str == null) {
			return(false)
		}
		if(stream == null) {
			return(false)
		}
		var buffer = String.toUTF8Buffer(str)
		if(buffer == null) {
			return(false)
		}
		var sz = SIZE(buffer)
		if(write(buffer, -1) != sz) {
			return(false)
		}
		return(true)
	}

	func println(str as string) as bool
	{
		return(print(str .. "\n"))
	}

	func setCurrentPosition(n as int64) as bool
	{
		return(false)
	}

	func getCurrentPosition as int64
	{
		return(0)
	}

	func flush
	{
		lang "java" {{{
			try {
				stream.flush();
			}
			catch(java.lang.Exception e) {
			}
		}}}
	}
}

var path as !"java.lang.String"

func forPath(path as string) static as File
{
	if(String.isEmpty(path)) {
		return(null)
	}
	var v = new this()
	lang "java" {{{
		v.path = path;
	}}}
	return(v)
}

func stat override as FileInfo
{
	var v #used = new FileInfo()
	lang "java" {{{
		java.io.File f = new java.io.File(path);
		if(f.exists() == false) {
			return(v);
		}
		v.setSize((int)f.length());
		v.setModifyTime((int)f.lastModified());
		if(f.isDirectory()) {
			v.setType(FileInfo.FILE_TYPE_DIR);
		}
		else if(f.isFile()) {
			v.setType(FileInfo.FILE_TYPE_FILE);
		}
	}}}
	return(v)
}

func getPath override as string
{
	lang "java" {{{
		if(path != null) {
			return(path);
		}
	}}}
	return(null)
}

func createDirectoryRecursive override as bool
{
	var v as bool
	lang "java" {{{
		java.io.File f = new java.io.File(path);
		v = f.mkdirs();
	}}}
	return(v)
}

func entry(name as string) override as File
{
	if(String.isEmpty(name)) {
		return(this)
	}
	var v = new this()
	lang "java" {{{
		v.path = path + "/" + name;
	}}}
	return(v)
}

func move(dest as File, replace as bool) override as bool
{
	if(dest.exists()) {
		if(replace == false) {
			return(false)
		}
		dest.remove()
	}
	var destpath as string
	var dp = dest.getPath()
	if(dp == null) {
		return(false)
	}
	destpath = dp
	var v as bool #used
	lang "java" {{{
		java.io.File src = new java.io.File(path);
		java.io.File dst = new java.io.File(destpath);
		v = src.renameTo(dst);
	}}}
	return(v)
}

func touch override as bool
{
	var v as bool #used
	lang "java" {{{
		java.io.File f = new java.io.File(path);
		try {
			v = f.createNewFile();
		}
		catch(java.io.IOException e) {
			e.printStackTrace();
		}
	}}}
	return(v)
}

func read override as FileReader
{
	var v #used = new MyFileReader()
	lang "java" {{{
		v.file = new java.io.File(path);
	}}}
	return(v.initialize())
}

func write override as FileWriter
{
	var v = new MyFileWriter()
	lang "java" {{{
		v.file = new java.io.File(path);
	}}}
	return(v.initialize())
}

func append override as FileWriter
{
	var v = new MyFileWriter().setAppend(true)
	lang "java" {{{
		v.file = new java.io.File(path);
	}}}
	return(v.initialize())
}

func createDirectory override as bool
{
	var v as bool #used
	lang "java" {{{
		java.io.File f = new java.io.File(path);
		v = f.mkdir();
	}}}
	return(v)
}

func isExecutable override as bool
{
	var v as bool #used
	lang "java" {{{
		java.io.File f = new java.io.File(path);
		v = f.canExecute();
	}}}
	return(v)
}

func entries override as Iterator<File>
{
	var files as array<string>
	var v = new vector<File>
	lang "java" {{{
		java.io.File f = new java.io.File(path);
		files = f.list();
	}}}
	if not files:
		return null
	foreach path in files {
		var ff = new this()
		lang "java" {{{
			ff.path = this.path + "/" + path;
		}}}
		Vector.append(v, ff)
	}
	var entries as Iterator<File> #force = Vector.iterate(v)
	return entries
}

func remove override as bool
{
	var v as bool #used
	lang "java" {{{
		java.io.File f = new java.io.File(path);
		v = f.delete();
	}}}
	return v
}

func removeDirectory override stub as bool
func makeExecutable override stub as bool
