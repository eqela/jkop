
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.env
import jk.log
import jk.console

class:

const TYPE_LIBRARY = 0
const TYPE_APPLICATION = 1

class BuildTarget
{
	pvar path as string
	pvar type as int
	pvar options as map
}

prop defaultTarget as string
prop slingVersion as string
prop webCompiler as string
prop sourceDirectory as File
prop disableSushiBuild as bool = false

var targets = new vector<BuildTarget>
var ctx public as ConsoleApplicationContext

ctor
{
	ctx = new ConsoleApplicationContext()
	sourceDirectory = CommonPath.getAppDirectory()
}

func addLibrary(path as string) as this
{
	if String.isEmpty(path):
		Error.throw("missingParameter", "SlingBuilderKit:addLibrary:path")
	var bt = new BuildTarget()
	bt.setPath(path)
	bt.setType(TYPE_LIBRARY)
	targets += bt
	return this
}

func addApplication(path as string, options as map) as this
{
	if String.isEmpty(path):
		Error.throw("missingParameter", "SlingBuilderKit:addApplication:path")
	var bt = new BuildTarget()
	bt.setPath(path)
	bt.setType(TYPE_APPLICATION)
	bt.setOptions(options)
	targets += bt
	return this
}

func escapeString(data as string) as string
{
	var sb = new StringBuilder()
	var it = String.iterate(data)
	while it {
		var c = it.getNextChar()
		if Character.isEOF(c):
			break
		if c == '"' {
			sb.appendString("\\\"")
		}
		else if c == '\\' {
			sb.appendString("\\\\")
		}
		else if c == '\n' {
			sb.appendString("\\n")
		}
		else {
			sb.appendCharacter(c)
		}
	}
	return sb.toString()
}

func translateError(e as Error) as string
{
	assert e
	if e.getCode() == "noCommand" || e.getCode() == "invalidCommand":
		return "Available commands: build, build-sushi, build-web, build-all, release, clean"
	return Error.asString(e)
}

func execute(args as array<string>) as int
{
	var v = 0
	try {
		doExecute(args)
	}
	catch e {
		if e is ExceptionWithError {
			Log.error(ctx, translateError((e as! ExceptionWithError).getError()))
		}
		else {
			Log.error(ctx, Log.asString(ctx, e))
		}
		v = 1
	}
	return v
}

func doExecute(args as array<string>) private
{
	var av = ArgumentVector.forArray(args)
	var flibs = new vector<string>
	var version as string
	var cmd as string
	while av.hasMore() {
		if av.acceptFlag("debug") || av.acceptFlag("vv") {
			ctx.setEnableDebugMessages(true)
		}
		else if av.acceptOption("flib") {
			flibs += av.getOptionValue()
		}
		else if av.acceptOption("v") {
			version = av.getOptionValue()
		}
		else {
			if not cmd {
				cmd = av.requireParameter("command")
			}
			else {
				Error.throw("invalidParameter", av.getCurrent())
			}
		}
	}
	var sc = slingVersion
	var wc = webCompiler
	var buildSushi = false
	var buildWeb = false
	var fargs = new vector<string>
	var enableAllPlatforms = false
	if cmd == "build" {
		var dt = defaultTarget
		if String.isNotEmpty(dt) {
			cmd = "build-" .. dt
		}
		else if disableSushiBuild == false {
			cmd = "build-sushi"
		}
		else {
			Error.throw("notSpecified", "targetPlatform")
		}
	}
	if cmd == "build-sushi" {
		buildSushi = true
		fargs += "build"
	}
	else if cmd == "build-web" {
		buildWeb = true
		fargs += "build"
	}
	else if cmd == "build-all" {
		enableAllPlatforms = true
		fargs += "build"
	}
	else if cmd == "release" {
		enableAllPlatforms = true
		fargs += "release"
		if String.isEmpty(version):
			Error.throw("parameterMissing", "version")
		fargs += "-v"
		fargs += version
	}
	else if cmd == "clean" {
		enableAllPlatforms = true
		fargs += "clean"
	}
	else {
		if String.isEmpty(cmd):
			Error.throw("noCommand", null)
		Error.throw("invalidCommand", cmd)
	}
	if enableAllPlatforms {
		if not disableSushiBuild:
			buildSushi = true
		if String.isNotEmpty(wc):
			buildWeb = true
	}
	if String.isEmpty(sc):
		Error.throw("versionNotDefined", "slingVersion")
	if String.isEmpty(wc) && buildWeb:
		Error.throw("versionNotDefined", "webCompiler")
	var sb = new StringBuilder()
	sb.appendString("#! eqela ss-0.16\n")
	sb.appendString("lib jk-core:0.13.2\n")
	sb.appendString("lib ")
	sb.appendString(sc)
	sb.appendString("\n")
	sb.appendString("import jk.fs\n")
	sb.appendString("import sling.build\n")
	if buildWeb {
		sb.appendString("lib ")
		sb.appendString(wc)
		sb.appendString("\n")
		sb.appendString("import ecf.js.slingc\n")
	}
	sb.appendString("var script = new SlingBuildScript()\n")
	sb.appendString("CurrentDirectory.set(File.forPath(\"")
	sb.appendString(escapeString(sourceDirectory.getPath()))
	sb.appendString("\"))\n")
	foreach target in targets {
		var type = target.getType()
		if type == TYPE_LIBRARY {
			if buildSushi {
				sb.appendString("script.addTarget(SlingToSushiLibraryTarget.forSource(\"")
				sb.appendString(escapeString(target.getPath()))
				sb.appendString("\"))\n")
			}
			if buildWeb {
				sb.appendString("script.addTarget(SlingToWebLibraryTarget.forSource(\"")
				sb.appendString(escapeString(target.getPath()))
				sb.appendString("\"))\n")
			}
		}
		else if type == TYPE_APPLICATION {
			if buildSushi {
				sb.appendString("script.addTarget(SlingToEqelaApplicationTarget.forSource(\"")
				sb.appendString(escapeString(target.getPath()))
				sb.appendString("\"))\n")
			}
			if buildWeb {
				sb.appendString("script.addTarget(SlingToWebApplicationTarget.forSource(\"")
				sb.appendString(escapeString(target.getPath()))
				sb.appendString("\"")
				var options = target.getOptions()
				if options {
					sb.appendString(", ")
					sb.appendString("{\n")
					var first = true
					foreach key as string in Map.getKeys(options) {
						if not first {
							sb.appendString(",\n")
						}
						else {
							first = false
						}
						sb.appendString("\t\"" .. escapeString(key) .. "\"")
						sb.appendString(" : ")
						sb.appendString("\"" .. escapeString(Map.getValue(options, key) as string) .. "\"")
					}
					sb.appendString("\n}")
				}
				else {
					sb.appendString(", null")
				}
				sb.appendString("))\n")
			}
		}
		else {
			Error.throw("unsupportedTarget", Integer.asObject(type))
		}
	}
	sb.appendString("script.execute(args)\n")
	var ss = sb.toString()
	if ctx && ctx.isInDebugMode():
		Log.debug(ctx, "Sling build script: `" .. ss .. "'")
	var tmpdir = TemporaryDirectory.create()
	if not tmpdir:
		Error.throw("failedToCreate", "temporaryDirectory")
	var file = tmpdir.entry("script.ss")
	try {
		file.setContentsUTF8(ss)
	}
	catch e {
		tmpdir.removeRecursive()
		throw e
	}
	var launcher = new EqelaRuntime().getLauncherForFile(file)
	foreach farg in fargs:
		launcher.addToParams(farg)
	foreach flib in flibs {
		launcher.addToParams("-flib")
		launcher.addToParams(flib)
	}
	if ctx.isInDebugMode():
		launcher.setEnvVariable("CONSOLE_LOG_DEBUG", "true")
	var v = launcher.execute()
	tmpdir.removeRecursive()
	if v != 0:
		Error.throw("buildScriptFailed", Integer.asObject(v))
}
