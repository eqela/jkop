
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

pvar text as string
pvar bold as bool
pvar italic as bool
pvar underline as bool
pvar color as string
pvar link as string
pvar reference as string
pvar isInline = false
pvar linkPopup = false

func addMarkupModifiers(sb as StringBuilder)
{
	if bold:
		sb.appendString("**")
	if italic:
		sb.appendString("''")
	if underline:
		sb.appendString("__")
}

func toMarkup as string
{
	var sb = new StringBuilder()
	addMarkupModifiers(sb)
	if String.isEmpty(link) == false {
		sb.appendCharacter('[')
		if isInline:
			sb.appendCharacter('>')
		sb.appendString(link)
		if String.isEmpty(text) ==  false {
			sb.appendCharacter('|')
			sb.appendString(text)
		}
		sb.appendCharacter(']')
	}
	else if String.isEmpty(reference) ==  false {
		sb.appendCharacter('{')
		if isInline:
			sb.appendCharacter('>')
		sb.appendString(reference)
		if String.isEmpty(text) == false {
			sb.appendCharacter('|')
			sb.appendString(text)
		}
		sb.appendCharacter('}')
	}
	else {
		sb.appendString(text)
	}
	addMarkupModifiers(sb)
	return sb.toString()
}

func toJson as DynamicMap
{
	var v = new DynamicMap()
	v.setString("text", text)
	if isInline:
		v.setBoolean("inline", isInline)
	if bold:
		v.setBoolean("bold", bold)
	if italic:
		v.setBoolean("italic", italic)
	if underline:
		v.setBoolean("underline", underline)
	if String.isEmpty(color) == false:
		v.setString("color", color)
	if String.isEmpty(link) == false:
		v.setString("link", link)
	if String.isEmpty(reference) == false:
		v.setString("reference", reference)
	return v
}

func toHtml(refs as RichTextDocumentReferenceResolver) as string
{
	var sb = new StringBuilder()
	var aOpen = false
	var text = getText()
	var link = getLink()
	if String.isEmpty(link) == false {
		if getIsInline() {
			// FIXME: Should allow other content types as well, not just images
			sb.appendString("<img src=\"" .. HTMLString.sanitize(link) .. "\" />")
		}
		else {
			var targetblank = ""
			if getLinkPopup():
				targetblank = " target=\"_blank\""
			sb.appendString("<a" .. targetblank .. " class=\"urlLink\" href=\"" .. HTMLString.sanitize(link) .. "\">")
			aOpen = true
		}
	}
	if String.isEmpty(getReference()) == false {
		var ref = getReference()
		var href as string
		if refs {
			href = refs.getReferenceHref(ref)
			if String.isEmpty(text):
				text = refs.getReferenceTitle(ref)
		}
		if String.isEmpty(href) == false {
			if String.isEmpty(text):
				text = ref
			sb.appendString("<a class=\"referenceLink\" href=\"" .. HTMLString.sanitize(href) .. "\">")
			aOpen = true
		}
	}
	if getIsInline() == false {
		if getBold():
			sb.appendString("<b>")
		if getItalic():
			sb.appendString("<i>")
		if getUnderline():
			sb.appendString("<u>")
		if String.isEmpty(getColor()) == false:
			sb.appendString("<span style=\"color: " .. HTMLString.sanitize(getColor()) .. ";\">")
		sb.appendString(HTMLString.sanitize(text))
		if String.isEmpty(getColor()) == false:
			sb.appendString("</span>")
		if getUnderline():
			sb.appendString("</u>")
		if getItalic():
			sb.appendString("</i>")
		if getBold():
			sb.appendString("</b>")
	}
	if aOpen:
		sb.appendString("</a>")
	return sb.toString()
}
