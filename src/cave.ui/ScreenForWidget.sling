
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is cave.ScreenWithContext:

func findScreenForWidget(widget as Widget) static as this:
	return Widget.findScreen(widget) as this

var context protected as GuiApplicationContext
var myWidget as Widget

IFDEF "target_ios" {
	basetype !"UIViewController" type extends
	basetype cave.Screen type isAlso
	IFDEF "target_objc" {
		depend "objc-header-h:<UIKit/UIKit.h>"
		var statusBarStyle = lang "objc" !"UIStatusBarStyle" {{{ UIStatusBarStyleDefault }}}
		var screenOrientation = lang "objc" !"NSUInteger" {{{ UIInterfaceOrientationMaskAll }}}
	}
	ELSE IFDEF "target_swift" {
		depend "swift-import:UIKit"
		var statusBarStyle = lang "swift" !"UIStatusBarStyle" {{{ UIStatusBarStyle.default }}}
		var screenOrientation = lang "swift" !"UInt" {{{ UIInterfaceOrientationMask.all.rawValue }}}
	}

	var keyboardY #used = 0
	var uiApplication private as !"UIApplication"

	ctor
	{
		IFDEF "target_objc" {
			onPrepareScreen()
		}
		ELSE IFDEF "target_swift" {
			lang "swift" {{{
				super.init(nibName: nil, bundle: nil)
			}}}
		}
	}

	func loadView override
	{
		IFDEF "target_swift" {
			onPrepareScreen()
			lang "swift" {{{
				self.view = UIView()
			}}}
		}
		ELSE IFDEF "target_objc" {
			lang "objc" {{{
				self.view = [[UIView alloc] init];
			}}}
		}
		initialize()
	}

	func viewDidLayoutSubviews override
	{
		updateContentViewSize()
	}

	func getUIApplication as !"UIApplication"
	{
		return uiApplication
	}

	func enableDefaultStatusBarStyle
	{
		IFDEF "target_objc" {
			lang "objc" {{{
				statusBarStyle = UIStatusBarStyleDefault;
				[self setNeedsStatusBarAppearanceUpdate];
			}}}
		}
		ELSE IFDEF "target_swift" {
			lang "swift" {{{
				statusBarStyle = UIStatusBarStyle.default
				self.setNeedsStatusBarAppearanceUpdate()
			}}}
		}
	}

	func enableLightStatusBarStyle
	{
		IFDEF "target_objc" {
			lang "objc" {{{
				statusBarStyle = UIStatusBarStyleLightContent;
				[self setNeedsStatusBarAppearanceUpdate];
			}}}
		}
		ELSE IFDEF "target_swift" {
			lang "swift" {{{
				statusBarStyle = UIStatusBarStyle.lightContent
				self.setNeedsStatusBarAppearanceUpdate()
			}}}
		}
	}

	func onPreStartScreenWithData(data as DynamicMap) virtual
	{
	}

	IFDEF "target_objc" {
		lang "objc" {{{
			- (BOOL)application:(UIApplication *)application willFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
				uiApplication = application;

				// FIXME:

				[self onPreStartScreenWithData: NULL];
				return YES;
			}

			- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {
				CapeDynamicMap *data = [[CapeDynamicMap alloc] init];
				NSMutableDictionary *o = [userInfo mutableCopy];
				[data setStringAndObject:@"data" value:o];
				[self onStartScreenWithData:data];
			}

			- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {
				UIApplicationState state = [application applicationState];
				if (state == UIApplicationStateBackground) {
					return;
				}
				CapeDynamicMap *data = [[CapeDynamicMap alloc] init];
				NSMutableDictionary *o = [userInfo mutableCopy];
				[data setStringAndObject:@"data" value:o];
				[self onStartScreenWithData:data];
			}

			- (void)applicationDidBecomeActive:(UIApplication *)application {
				[self onStartScreen];
			}

			- (void)applicationWillResignActive:(UIApplication *)application {
				[self onStopScreen];
			}

			- (NSUInteger)supportedInterfaceOrientations {
				return(self->screenOrientation);
			}

			- (BOOL)shouldAutorotate {
				return YES;
			}

			- (UIStatusBarStyle)preferredStatusBarStyle
			{
				return(self->statusBarStyle);
			}

			- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event {
				[self.view endEditing:YES];
				[super touchesBegan:touches withEvent:event];
			}

			- (void)viewWillAppear:(BOOL)animated
			{
				[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillHide:) name:UIKeyboardWillHideNotification object:nil];
				[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillShow:) name:UIKeyboardWillShowNotification object:nil];
			}

			- (void)viewWillDisappear:(BOOL)animated
			{
				[[NSNotificationCenter defaultCenter] removeObserver:self];
			}

			- (void)keyboardWillHide:(NSNotification *)note
			{
				self->keyboardY = 0;
				[self updateContentViewSize];
			}

			- (void)keyboardWillShow:(NSNotification *)note
			{
				NSDictionary *userInfo = note.userInfo;
				CGRect keyboardFrame = [[userInfo objectForKey:UIKeyboardFrameEndUserInfoKey] CGRectValue];
				self->keyboardY = keyboardFrame.origin.y;
				[self updateContentViewSize];
			}
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			convenience required init?(coder decoder: Foundation.NSCoder) {
				self.init(coder: decoder)
			}

			func supportedInterfaceOrientations() -> UInt {
				return(self.screenOrientation!)
			}

			func shouldAutorotate() -> Bool {
				return true
			}

			func preferredStatusBarStyle() -> UIStatusBarStyle {
				return self.statusBarStyle!
			}

			func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent) {
				self.view.endEditing(true)
				super.touchesBegan(touches, with:event)
			}

			public override func viewWillAppear(_ animated: Bool) {
				NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide(_ :)), name:UIResponder.keyboardWillHideNotification, object:nil)
				NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow(_ :)), name:UIResponder.keyboardWillShowNotification, object:nil)
			}

			public override func viewWillDisappear(_ animated: Bool) {
				NotificationCenter.default.removeObserver(self)
			}

			@objc func keyboardWillHide(_ note: NSNotification) {
				self.keyboardY = 0;
				self.updateContentViewSize()
			}

			@objc func keyboardWillShow(_ note: NSNotification) {
				let userInfo : NSDictionary = note.userInfo! as NSDictionary
				let keyboardFrame : CGRect = (userInfo.object(forKey: UIResponder.keyboardFrameEndUserInfoKey) as! NSValue).cgRectValue
				self.keyboardY = Int(keyboardFrame.origin.y)
				self.updateContentViewSize()
			}
		}}}

		func applicationWillTerminate(application as !"UIApplication"):
			;

		func applicationDidBecomeActive(application as !"UIApplication"):
			onStartScreen()

		func applicationWillResignActive(application as !"UIApplication"):
			onStopScreen()

		func application(application as !"UIApplication", userInfo pname didReceiveRemoteNotification as !"[AnyHashable : Any]")
		{
			var data = new DynamicMap()
			data.set("data", userInfo as object)
			onStartScreenWithData(data)
		}

		func applicationWithCompletionHandler(application as !"UIApplication", userInfo pname didReceiveRemoteNotification as !"[AnyHashable : Any]", completionHandler pname fetchCompletionHandler as !"@escaping (UIBackgroundFetchResult) -> Void")
		{
			var data = new DynamicMap()
			data.set("data", userInfo as object)
			onStartScreenWithData(data)
		}

		func applicationWithLaunchOptions(application as !"UIApplication", launchOptions pname willFinishLaunchingWithOptions as !"[UIApplication.LaunchOptionsKey : Any]" = null) as bool
		{
			uiApplication = application
			onPreStartScreenWithData(null)
			return true
		}

		func applicationDidEnterBackground(application as !"UIApplication"):
			;

		func applicationWillEnterForeground(application as !"UIApplication"):
			;

	}

	func updateContentViewSize
	{
		IFDEF "target_objc" {
			lang "objc" {{{
				if(self->keyboardY > 0) {
					self.view.subviews[0].frame = CGRectMake(0, 0, self.view.frame.size.width, self->keyboardY);
				}
				else {
					self.view.subviews[0].frame = self.view.frame;
				}
			}}}
		}
		ELSE IFDEF "target_swift" {
			lang "swift" {{{
				if(self.keyboardY > 0) {
					self.view.subviews[0].frame = CGRect(x: 0, y: 0, width: self.view.frame.size.width, height: CGFloat(self.keyboardY))
				}
				else {
					self.view.subviews[0].frame = self.view.frame
				}
			}}}
		}
	}
}

IFDEF "target_android"
{
	class AndroidBroadcastReceiver extends !"android.content.BroadcastReceiver"
	{
		prop callback as function<void, DynamicMap>
		prop action as string

		ctor
		{
		}

		func onReceive(context as !"android.content.Context", intent as !"android.content.Intent") override
		{
			assert callback
			var dstr as string
			IFDEF "target_java" {
				dstr = lang "java" string {{{ intent.getStringExtra("data") }}}
			}
			ELSE IFDEF "target_kotlin" {
				dstr = lang "kotlin" string {{{ intent!!.getStringExtra("data") }}}
			}
			var data = assert JSONParser.parse(dstr) as DynamicMap:
				callback(null)
			callback(data)
		}
	}

	basetype !"android.app.Activity" type extends
	basetype cave.Screen type isAlso
	basetype CompatibleAndroidActivity

	prop androidActivityResultHandler as function<void,int,int,!"android.content.Intent">
	var permissionRequestListener as function<void,bool>
	var callbackMap private as DynamicMap

	ctor
	{
	}

	func registerBroadcastReceiver(action as string, callback as function<void, DynamicMap>) as object
	{
		assert String.isNotEmpty(action) && callback
		if not callbackMap:
			callbackMap = new DynamicMap()
		callbackMap.set(action, callback)
		var broadcastReceiver = new AndroidBroadcastReceiver()
		broadcastReceiver.setCallback(callback)
		broadcastReceiver.setAction(action)
		var intentFilter = new !"android.content.IntentFilter"()
		intentFilter.addAction(action)
		IFDEF "target_java" {
			lang "java" {{{
				registerReceiver(broadcastReceiver, intentFilter);
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				registerReceiver(broadcastReceiver, intentFilter)
			}}}
		}
		return broadcastReceiver
	}

	func onResume override
	{
		base.onResume()
		onStartScreen()
	}

	func onStop override
	{
		base.onStop()
		onStopScreen()
	}

	func onDestroy override
	{
		base.onDestroy()
		onDestroyScreen()
	}

	func unregisterBroadcastReceiver(o as object) as bool
	{
		var broadcastReceiver = assert o as AndroidBroadcastReceiver
		var action = broadcastReceiver.getAction()
		assert String.isNotEmpty(action)
		callbackMap.remove(action)
		IFDEF "target_java" {
			lang "java" {{{
				unregisterReceiver(broadcastReceiver);
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				unregisterReceiver(broadcastReceiver)
			}}}
		}
		return true
	}

	func onCreate(savedInstance as !"android.os.Bundle") override
	{
		base.onCreate(savedInstance)
		IFDEF "target_java" {
			lang "java" {{{
				android.app.ActionBar ab = getActionBar();
				if(ab != null) {
					ab.hide();
				}
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				var ab : android.app.ActionBar = getActionBar()
				if(ab != null) {
					ab.hide()
				}
			}}}
		}
		onPrepareScreen()
		initialize()
		var intent as !"android.content.Intent"
		IFDEF "target_java" {
			lang "java" {{{
				intent = getIntent();
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				intent = getIntent()
			}}}
		}
		if intent {
			var extras as !"android.os.Bundle"
			IFDEF "target_java" {
				lang "java" {{{
					extras = intent.getExtras();
				}}}
			}
			ELSE IFDEF "target_kotlin" {
				lang "kotlin" {{{
					extras = intent!!.getExtras()
				}}}
			}
			if extras {
				var data = new DynamicMap()
				IFDEF "target_java" {
					lang "java" {{{
						for(java.lang.String key : extras.keySet()) {
							java.lang.Object value = extras.get(key);
							data.set(key, value);
						}
					}}}
				}
				ELSE IFDEF "target_kotlin" {
					lang "kotlin" {{{
						var keys : java.util.Set<java.lang.String> = extras.keySet() as java.util.Set<java.lang.String>
						var it : java.util.Iterator<java.lang.String> = keys.iterator() as java.util.Iterator<java.lang.String>
						while(it.hasNext()) {
							var key : kotlin.String = it.next() as kotlin.String
							var value : java.lang.Object = extras.get(key) as java.lang.Object
							data!!.set(key, value)
						}
					}}}
				}
				onStartScreenWithData(data)
			}
		}
	}

	func setPermissionRequestListener(listener as function<void,bool>)
	{
		permissionRequestListener = listener
	}

	func onRequestPermissionsResult(requestCode as int, permissions as array<string>, grantResults as array<int>) override
	{
		var listener = permissionRequestListener
		if(listener == null) {
			return
		}
		permissionRequestListener = null
		if SIZE(grantResults) < 1 {
			listener(false)
			return
		}
		var status = true
		var granted as int
		IFDEF "target_java" {
			lang "java" {{{
				granted = android.content.pm.PackageManager.PERMISSION_GRANTED;
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				granted = android.content.pm.PackageManager.PERMISSION_GRANTED
			}}}
		}
		foreach(result in grantResults) {
			if(result != granted) {
				status = false
				break
			}
		}
		listener(status)
	}

	func onBackPressed override
	{
		onBackKeyPressEvent()
	}

	func onActivityResult(requestCode as int, resultCode as int, data as !"android.content.Intent") override
	{
		if(androidActivityResultHandler == null) {
			return
		}
		androidActivityResultHandler(requestCode, resultCode, data)
		androidActivityResultHandler = null
	}

	func dispatchTouchEvent(event as !"android.view.MotionEvent") override as bool
	{
		var actionDown as int
		IFDEF "target_java" {
			actionDown = lang "java" int {{{ android.view.MotionEvent.ACTION_DOWN }}}
		}
		ELSE IFDEF "target_kotlin" {
			actionDown = lang "kotlin" int {{{ android.view.MotionEvent.ACTION_DOWN }}}
		}
		if(event.getAction() == actionDown) {
			var w as Widget
			IFDEF "target_java" {
				w = lang "java" Widget {{{ getCurrentFocus(); }}}
			}
			ELSE IFDEF "target_kotlin" {
				w = lang "kotlin" Widget {{{ getCurrentFocus() }}}
			}
			if(w is TextInputWidget || w is TextAreaWidget) {
				IFDEF "target_java" {
					lang "java" {{{
						android.graphics.Rect rect = new android.graphics.Rect();
						w.getGlobalVisibleRect(rect);
						if (!rect.contains((int)event.getRawX(), (int)event.getRawY())) {
							if(w instanceof TextInputWidget) {
								((TextInputWidget)w).dismissKeyboard();
							}
						}
					}}}
				}
				ELSE IFDEF "target_kotlin" {
					lang "kotlin" {{{
						var rect : android.graphics.Rect = android.graphics.Rect()
						w.getGlobalVisibleRect(rect)
						if (!rect.contains(event!!.getRawX().toInt(), event!!.getRawY().toInt())) {
							if(w is TextInputWidget) {
								(w as TextInputWidget).dismissKeyboard()
							}
						}
					}}}
				}
			}
		}
		var v as bool
		IFDEF "target_java" {
			v = lang "java" bool {{{ super.dispatchTouchEvent(event) }}}
		}
		ELSE IFDEF "target_kotlin" {
			v = lang "kotlin" bool {{{ super.dispatchTouchEvent(event) }}}
		}
		return v
	}
}

IFDEF "target_html"
{
	basetype cave.Screen
}

IFDEF "target_uwp"
{
	basetype cave.Screen

	ctor
	{
		initialize()
	}

	lang "cs" {{{
		protected override void OnNavigatedTo(Windows.UI.Xaml.Navigation.NavigationEventArgs e)
		{
			base.OnNavigatedTo(e);
			var rootFrame = Windows.UI.Xaml.Window.Current.Content as Windows.UI.Xaml.Controls.Frame;
			if(rootFrame == null) {
				return;
			}
			var navm = Windows.UI.Core.SystemNavigationManager.GetForCurrentView();
			if(rootFrame.CanGoBack) {
				navm.AppViewBackButtonVisibility = Windows.UI.Core.AppViewBackButtonVisibility.Visible;
				navm.BackRequested += (sender, be) => {
					if(rootFrame.CanGoBack && be.Handled == false) {
						be.Handled = true;
						rootFrame.GoBack();
					}
				};
			}
			else {
				navm.AppViewBackButtonVisibility = Windows.UI.Core.AppViewBackButtonVisibility.Collapsed;
			}
		}
	}}}
}

IFDEF "target_macosoc"
{
	basetype !"NSWindow" type extends
	basetype cave.Screen type isAlso
	depend "objc-header-h:<AppKit/AppKit.h>"

	ctor
	{
		lang "objc" {{{
			int mask = NSTitledWindowMask|NSClosableWindowMask|NSMiniaturizableWindowMask|NSResizableWindowMask;
			[self setContentSize:CGSizeMake(500, 500)];
			[self setStyleMask:mask];
			[self setPreferredBackingLocation:NSWindowBackingLocationVideoMemory];
			[self setReleasedWhenClosed: NO];
		}}}
	}
}

var keyEvent as KeyEvent

func onBackKeyPressEvent
{
	if not keyEvent:
		keyEvent = new KeyEvent()
	keyEvent.clear()
	keyEvent.setAction(KeyEvent.ACTION_DOWN)
	keyEvent.setKeyCode(KeyEvent.KEY_BACK)
	deliverKeyEventToWidget(keyEvent, getWidget())
	IFDEF "target_android" {
		if keyEvent.isConsumed == false {
			lang "java" {{{
				super.onBackPressed();
			}}}
		}
	}
	ELSE IFDEF "target_kotlin" {
		if keyEvent.isConsumed == false {
			lang "kotlin" {{{
				super.onBackPressed()
			}}}
		}
	}
}

func deliverKeyEventToWidget(event as KeyEvent, widget as Widget)
{
	assert widget
	foreach child in Widget.getChildren(widget) {
		deliverKeyEventToWidget(event, child)
		if event.isConsumed:
			return
	}
	var kl = widget as KeyListener
	if kl {
		kl.onKeyEvent(event)
		if event.isConsumed:
			return
	}
}

func unlockOrientation
{
	IFDEF "target_android" {
		IFDEF "target_java" {
			lang "java" {{{
				setRequestedOrientation(android.content.pm.ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				setRequestedOrientation(android.content.pm.ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED)
			}}}
		}
	}
	ELSE IFDEF "target_ios" {
		IFDEF "target_objc" {
			screenOrientation = lang "objc" !"NSUInteger" {{{ UIInterfaceOrientationMaskAll }}}
		}
		ELSE IFDEF "target_swift" {
			screenOrientation = lang "swift" !"NSUInteger" {{{ UIInterfaceOrientationMask.all.rawValue }}}
		}
	}
	ELSE {
		ERROR "Not implemented"
	}
}

func lockToLandscapeOrientation
{
	IFDEF "target_android" {
		IFDEF "target_java" {
			lang "java" {{{
				setRequestedOrientation(android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				setRequestedOrientation(android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE)
			}}}
		}
	}
	ELSE IFDEF "target_ios" {
		IFDEF "target_objc" {
			screenOrientation = lang "objc" !"NSUInteger" {{{ UIInterfaceOrientationMaskLandscapeLeft }}}
		}
		ELSE IFDEF "target_swift" {
			screenOrientation = lang "swift" !"NSUInteger" {{{ UIInterfaceOrientationMask.landscapeLeft.rawValue }}}
		}
	}
	ELSE {
		ERROR "Not implemented"
	}
}

func lockToPortraitOrientation
{
	IFDEF "target_android" {
		IFDEF "target_java" {
			lang "java" {{{
				setRequestedOrientation(android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				setRequestedOrientation(android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT)
			}}}
		}
	}
	ELSE IFDEF "target_ios" {
		IFDEF "target_objc" {
			screenOrientation = lang "objc" !"NSUInteger" {{{ UIInterfaceOrientationMaskPortrait }}}
		}
		ELSE IFDEF "target_swift" {
			screenOrientation = lang "swift" !"NSUInteger" {{{ UIInterfaceOrientationMask.portrait.rawValue }}}
		}
	}
	ELSE {
		ERROR "Not implemented"
	}
}

func setContext(context as GuiApplicationContext)
{
	this.context = context
}

func getContext as GuiApplicationContext
{
	return context
}

func createContext private as GuiApplicationContext
{
	var v as GuiApplicationContext
	IFDEF "target_ios" {
		v = new GuiApplicationContextForIOS()
	}
	ELSE IFDEF "target_android" {
		v = GuiApplicationContextForAndroid.forActivityContext(this)
	}
	ELSE IFDEF "target_html" {
		v = new GuiApplicationContextForHTML()
	}
	ELSE IFDEF "target_uwp" {
		v = GuiApplicationContextForUWP.getInstance()
	}
	ELSE {
		ERROR "Not implemented"
	}
	return v
}

func onPrepareScreen virtual
{
}

func onStartScreen virtual
{
	Widget.notifyOnStartScreen(myWidget, this)
}

func onStartScreenWithData(data as DynamicMap) virtual
{
}

func onStopScreen virtual
{
	Widget.notifyOnStopScreen(myWidget, this)
}

func onDestroyScreen virtual
{
}

func initialize virtual
{
	if(context == null) {
		context = createContext()
	}
	IFDEF("target_html") {
		var body = HTMLDOM.getDocumentBody()
		HTMLDOM.setStyle(body, "overflow", "hidden")
		lang "js" {{{
			var myObject = this;
			history.pushState({}, "", "#app");
			window.onpopstate = function(event) {
				myObject.onBackKeyPressEvent();
				history.pushState({}, "", "#app");
			};
		}}}
	}
}

func cleanup virtual
{
	IFDEF("target_html") {
		lang "js" {{{
			window.onresize = null;
		}}}
	}
}

func getWidget as Widget
{
	return myWidget
}

func setWidget(widget as ContainerWidget)
{
	assert not myWidget:
		ERROR "Multiple calls to setWidget()"
	assert widget
	myWidget = widget
	widget.setAllowResize(false)
	IFDEF "target_ios" {
		IFDEF "target_objc" {
			lang "objc" {{{
				[self.view addSubview:widget];
			}}}
		}
		ELSE IFDEF "target_swift" {
			lang "swift" {{{
				self.view.addSubview(widget!)
			}}}
		}
		widget.onWidgetAddingToParent()
		widget.setScreenForWidget(this)
		Widget.onWidgetAddedToParent(widget)
	}
	ELSE IFDEF "target_android" {
		IFDEF "target_java" {
			lang "java" {{{
				setContentView(widget);
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				setContentView(widget)
			}}}
		}
		widget.onWidgetAddingToParent()
		Widget.onWidgetAddedToParent(widget)
	}
	ELSE IFDEF "target_html" {
		lang "js" {{{
			widget.element.screenObject = this;
		}}}
		Widget.addToDomElement(widget, HTMLDOM.getDocumentBody())
	}
	ELSE IFDEF "target_uwp" {
		lang "cs" {{{
			this.Content = widget;
		}}}
		widget.onWidgetAddingToParent()
		Widget.onWidgetAddedToParent(widget)
	}
	ELSE {
		ERROR "Not implemented"
	}
	Widget.notifyOnAddedToScreen(widget, this)
}
