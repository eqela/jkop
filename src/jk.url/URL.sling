
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is StringObject:

func forString(str as string, normalizePath as bool = false) static as this
{
	var v = new this()
	v.parse(str, normalizePath)
	return v
}

pvar scheme as string
pvar username as string
pvar password as string
pvar host as string
pvar port as string
pvar path as string
pvar fragment as string
pvar rawQueryParameters as KeyValueList<string,string>
pvar queryParameters as map<string,string>
pvar original as string
pvar percentOnly = false
pvar encodeUnreservedChars = true

func dup as this
{
	var v = new this()
	v.setScheme(scheme)
	v.setUsername(username)
	v.setPassword(password)
	v.setHost(host)
	v.setPort(port)
	v.setPath(path)
	v.setFragment(fragment)
	if rawQueryParameters:
		v.setRawQueryParameters(rawQueryParameters.dup())
	if queryParameters:
		v.setQueryParameters(Map.dup(queryParameters))
	return v
}

func toString as string:
	return toStringDo(true)

func toStringNohost as string:
	return toStringDo(false)

func toStringDo(userhost as bool) private as string
{
	var sb = new StringBuilder()
	if userhost {
		if scheme {
			sb.appendString(scheme)
			sb.appendString("://")
		}
		if username {
			sb.appendString(URLEncoder.encode(username))
			if password {
				sb.appendCharacter(':')
				sb.appendString(URLEncoder.encode(password))
			}
			sb.appendCharacter('@')
		}
		if host {
			sb.appendString(host)
			if port {
				sb.appendCharacter(':')
				sb.appendString(port)
			}
		}
	}
	if path:
		sb.appendString(String.replaceCharacter(path, ' ', '+'))
	if rawQueryParameters && rawQueryParameters.count() > 0 {
		var first = true
		var it as Iterator<string> #force = Map.iterateKeys(queryParameters)
		while it {
			var key = it.next() as string
			if key == null:
				break
			if first {
				sb.appendCharacter('?')
				first = false
			}
			else {
				sb.appendCharacter('&')
			}
			sb.appendString(key)
			var val = Map.get(queryParameters, key)
			if val {
				sb.appendCharacter('=')
				sb.appendString(URLEncoder.encode(val, percentOnly, encodeUnreservedChars))
			}
		}
	}
	if fragment {
		sb.appendCharacter('#')
		sb.appendString(fragment)
	}
	return sb.toString()
}

func clearQueryParameters
{
	rawQueryParameters = null
	queryParameters = null
}

func normalizePath(path as string) private as string
{
	assert path
	var v = new StringBuilder()
	var comps = String.split(path, '/')
	foreach comp in comps {
		if String.isEmpty(comp) {
			;
		}
		else if comp == "." {
			;
		}
		else if comp == ".." {
			var str = v.toString()
			v.clear()
			if str {
				var slash = String.getLastIndexOfCharacter(str, '/')
				if slash > 0:
					v.appendString(String.getSubString(str, 0, slash))
			}
		}
		else {
			v.appendCharacter('/')
			v.appendString(comp)
		}
	}
	if v.count() < 2:
		return "/"
	if String.endsWith(path, "/"):
		v.appendCharacter('/')
	return v.toString()
}

func parse(astr as string, doNormalizePath as bool)
{
	setOriginal(astr)
	assert astr
	var fsp = String.split(astr, '#', 2)
	var str = Vector.get(fsp, 0)
	fragment = Vector.get(fsp, 1)
	var qsplit = String.split(str, '?', 2)
	str = Vector.get(qsplit, 0)
	var queryString = Vector.get(qsplit, 1)
	if String.isEmpty(queryString) == false {
		var qss = String.split(queryString, '&')
		foreach qs in qss {
			if not rawQueryParameters:
				rawQueryParameters = new KeyValueList<string,string>()
			if not queryParameters:
				queryParameters = new map<string,string>
			if String.getIndexOfCharacter(qs, '=') < 0 {
				Map.set(queryParameters, qs, null)
				rawQueryParameters.add(qs, null)
				continue
			}
			var qsps = String.split(qs, '=', 2)
			var key = Vector.get(qsps, 0)
			var val = Vector.get(qsps, 1)
			if String.isEmpty(key) == false {
				if not val:
					val = ""
				var udv = URLDecoder.decode(val)
				Map.set(queryParameters, key, udv)
				rawQueryParameters.add(key, udv)
			}
		}
	}
	var css = String.getIndexOfString(str, "://")
	if css >= 0 {
		scheme = String.getSubString(str, 0, css)
		if String.getIndexOfCharacter(scheme, ':') >= 0 || String.getIndexOfCharacter(scheme, '/') >= 0 {
			scheme = null
		}
		else {
			str = String.getEndOfString(str, css+3)
		}
	}
	var pp as string
	if String.getChar(str, 0) == '/' {
		pp = str
	}
	else {
		if String.getIndexOfCharacter(str, '/') >= 0 {
			var sssplit = String.split(str, '/', 2)
			str = Vector.get(sssplit, 0)
			pp = Vector.get(sssplit, 1)
			if not pp:
				pp = ""
			if String.getChar(pp, 0) != '/':
				pp = String.appendString("/", pp)
		}
		if String.getIndexOfCharacter(str, '@') >= 0 {
			var asplit = String.split(str, '@', 2)
			var auth = Vector.get(asplit, 0)
			str = Vector.get(asplit, 1)
			if String.getIndexOfCharacter(auth, ':') >= 0 {
				var acsplit = String.split(auth, ':', 2)
				username = URLDecoder.decode(Vector.get(acsplit, 0))
				password = URLDecoder.decode(Vector.get(acsplit, 1))
			}
			else {
				username = auth
			}
		}
		if String.getIndexOfCharacter(str, ':') >= 0 {
			var hcsplit = String.split(str, ':', 2)
			str = Vector.get(hcsplit, 0)
			port = Vector.get(hcsplit, 1)
		}
		host = str
	}
	if doNormalizePath {
		path = normalizePath(pp)
	}
	else {
		path = pp
	}
	if not port && String.equals("https", scheme) || String.equals("wss", scheme):
		port = "443"
}

func getPortInt as int
{
	if not port:
		return 0
	return String.toInteger(port)
}

func getQueryParameter(key as string) as string
{
	if not queryParameters:
		return null
	return Map.get(queryParameters, key)
}

func addQueryParameter(key as string, value as string)
{
	if not rawQueryParameters:
		rawQueryParameters = new KeyValueList<string,string>()
	if not queryParameters:
		queryParameters = new map<string,string>
	Map.set(queryParameters, key, value)
	rawQueryParameters.add(key, value)
}
