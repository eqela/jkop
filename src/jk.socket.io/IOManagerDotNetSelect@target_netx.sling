
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is IOManager:

class MyTimer is IOManagerTimer is Runnable
{
	prop delay as long
	prop parent as parent
	prop handler as function<bool>
	var stopFlag = false
	var targetTime as TimeValue

	func hasElapsed(now as TimeValue) as bool:
		return TimeValue.diff(targetTime, now) <= 0

	func process(now as TimeValue) as bool
	{
		assert handler
		if hasElapsed(now) == false:
			return true
		if handler() == false:
			return false
		targetTime = null
		return initialize()
	}

	func stop:
		stopFlag = true

	func run
	{
		stopFlag = false
		var now = new TimeValue()
		while stopFlag == false {
			SystemClock.update(now)
			var diff = TimeValue.diff(targetTime, now)
			if diff <= 0:
				break
			if diff > 5000000:
				diff = 5000000
			CurrentThread.sleepMicroSeconds(diff)
		}
		parent.sendSignal()
	}

	func initialize as bool
	{
		if targetTime != null:
			return false
		var orig = SystemClock.asTimeValue()
		targetTime = orig.add(0, delay)
		return Thread.start(this) != null
	}
}

class MyEntry is IOManagerEntry
{
	prop socket as ConnectedSocket
	prop master as parent
	var rrl as function
	var wrl as function
	var added = false

	func onReadReady
	{
		var rrl = this.rrl
		assert rrl
		rrl()
	}

	func onWriteReady
	{
		var wrl = this.wrl
		assert wrl
		wrl()
	}

	func setListeners(rrl as function, wrl as function)
	{
		this.rrl = rrl
		this.wrl = wrl
		update()
	}

	func setReadListener(rrl as function)
	{
		this.rrl = rrl
		update()
	}

	func setWriteListener(wrl as function)
	{
		this.wrl = wrl
		update()
	}

	func update
	{
		remove()
		assert (socket && master)
		if rrl == null && wrl == null:
			return
		if rrl != null:
			Vector.append(master.readlist, this)
		if wrl != null:
			Vector.append(master.writelist, this)
		added = true
	}

	func remove
	{
		if added == false || master == null:
			return
		Vector.removeValue(master.readlist, this)
		Vector.removeValue(master.writelist, this)
		added = false
	}

	func getNetSocket as !"System.Net.Sockets.Socket"
	{
		if socket is TCPSocket {
			var myss = assert socket as TCPSocketForDotnet
			return myss.getNetSocket()
		}
		if socket is SSLSocket {
			var myss = assert socket as SSLSocketDotNet
			return myss.getNetSocket()
		}
		return null
	}
}

var exitflag as bool
var running = false
var signalPort = -1
var readlist public as vector<IOManagerEntry> = null
var writelist public as vector<IOManagerEntry> = null
var timers as vector<MyTimer>

ctor
{
	readlist = new vector<IOManagerEntry>
	writelist = new vector<IOManagerEntry>
	timers = new vector<MyTimer>
}

func getEntryForSocket(socket as !"System.Net.Sockets.Socket", list as vector<IOManagerEntry>) as IOManagerEntry
{
	foreach ee as MyEntry in list {
		if ee.getNetSocket() == socket:
			return ee
	}
	return null
}

func onReadReady(socket as TCPSocket)
{
	assert socket
	var ss = socket.accept()
	assert ss
	ss.close()
}

func doExecute(ctx as LoggingContext) override as bool
{
	exitflag = false
	running = true
	var signalSocket = openSignalSocket()
	if signalSocket != null {
		var ee = add(signalSocket)
		if ee != null {
			ee.setReadListener(func {
				onReadReady(signalSocket)
			})
		}
	}
	var reads = new vector<object>
	var writes = new vector<object>
	var now = new TimeValue()
	Log.debug(ctx, VALUE "__THIS__" .. " started")
	while exitflag == false {
		if executeSelect(ctx, reads, writes) == false:
			continue
		foreach ele as MyEntry in reads:
			ele.onReadReady()
		foreach ele as MyEntry in writes:
			ele.onWriteReady()
		Vector.clear(reads)
		Vector.clear(writes)
		if Vector.isEmpty(timers) == false {
			SystemClock.update(now)
			// FIXME: The timer removal process is NOT fast.
			var timersToRemove as vector<MyTimer>
			foreach timer in timers {
				if timer.process(now) == false {
					if timersToRemove == null:
						timersToRemove = new vector<MyTimer>
					timersToRemove += timer
				}
			}
			foreach timer in timersToRemove:
				Vector.removeValue(timers, timer)
		}
	}
	if signalSocket != null {
		signalSocket.close()
		signalSocket = null
	}
	foreach timer in timers:
		timer.stop()
	Vector.clear(timers)
	Vector.clear(readlist)
	Vector.clear(writelist)
	signalPort = -1
	running = false
	Log.debug(ctx, VALUE "__THIS__" .. " ended")
	return true
}

func executeSelect(ctx as LoggingContext, reads as vector<object>, writes as vector<object>) private as bool
{
	IFDEF "target_dotnet4" {
		lang "cs" {{{
			var fdsetr = new System.Collections.ArrayList();
			var fdsetw = new System.Collections.ArrayList();
		}}}
	}
	ELSE {
		lang "cs" {{{
			var fdsetr = new System.Collections.Generic.List<System.Net.Sockets.Socket>();
			var fdsetw = new System.Collections.Generic.List<System.Net.Sockets.Socket>();
		}}}
	}
	foreach myo1 as MyEntry in readlist {
		var nsor = myo1.getNetSocket()
		if nsor {
			lang "cs" {{{
				fdsetr.Add(nsor);
			}}}
		}
	}
	foreach myo2 as MyEntry in writelist {
		var nsow = myo2.getNetSocket()
		if nsow {
			lang "cs" {{{
				fdsetw.Add(nsow);
			}}}
		}
	}
	lang "cs" {{{
		try {
			System.Net.Sockets.Socket.Select(fdsetr, fdsetw, null, -1);
		}
		catch(System.Exception e) {
			jk.log.Log.error(ctx, "Call to Select failed: " + e.ToString());
			return(false);
		}
		foreach(System.Net.Sockets.Socket socket in fdsetr) {
			var e = getEntryForSocket(socket, readlist);
			if(e != null) {
				jk.lang.Vector.append(reads, e);
			}
		}
		foreach(System.Net.Sockets.Socket socket in fdsetw) {
			var e = getEntryForSocket(socket, writelist);
			if(e != null) {
				jk.lang.Vector.append(writes, e);
			}
		}
	}}}
	return true
}

func openSignalSocket as TCPSocket
{
	var v = TCPSocket.create()
	var n as int
	for(n = 20000; n < 60000; n++) {
		// FIXME: This should be bound to localhost only
		if v.listen(n) {
			signalPort = n
			return v
		}
	}
	return null
}

func stop override
{
	exitflag = true
	sendSignal()
}

func sendSignal
{
	if signalPort > 0 {
		var signalClient = assert TCPSocket.createAndConnect("127.0.0.1", signalPort)
		signalClient.close()
	}
}

func isRunning as bool:
	return running

func add(o as object) override as IOManagerEntry
{
	var s = assert o as ConnectedSocket
	return new MyEntry().setMaster(this).setSocket(s)
}

func startTimer(delay as long, handler as function<bool>) override as IOManagerTimer
{
	var timer = new MyTimer()
	timer.setDelay(delay)
	timer.setParent(this)
	timer.setHandler(handler)
	if timer.initialize() == false:
		return null
	timers += timer
	return timer
}
