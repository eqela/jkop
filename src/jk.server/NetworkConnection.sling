
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.socket
import jk.socket.io
import jk.log
import jk.time

class abstract:

pvar storageIndex as int
var ioEntry as IOManagerEntry
var id as long
var logContext protected as LoggingContext
var socket protected as ConnectedSocket
var idcounter static = 0
var lastActivity protected as long
var remoteAddress as string
var currentListenMode = -1
var manager as NetworkConnectionManager
pvar defaultListenMode = 1

ctor:
	id = idcounter ++

func getId as long:
	return id

func exportSocket as ConnectedSocket
{
	var v = socket
	socket = null
	return v
}

func getSocket as ConnectedSocket:
	return socket

func getManager as NetworkConnectionManager:
	return manager

func getLastActivity as long:
	return lastActivity

func getRemoteAddress as string
{
	if remoteAddress == null {
		var ts = socket as TCPSocket
		if ts:
			remoteAddress = ts.getRemoteAddress() .. ":" .. String.forInteger(ts.getRemotePort())
	}
	return remoteAddress
}

func logDebug(text as string):
	Log.debug(logContext, "[Connection:" .. String.forInteger(getId()) .. "] " .. text)

func logInfo(text as string):
	Log.info(logContext, "[Connection:" .. String.forInteger(getId()) .. "] " .. text)

func logWarning(text as string):
	Log.warning(logContext, "[Connection:" .. String.forInteger(getId()) .. "] " .. text)

func logError(text as string):
	Log.error(logContext, "[Connection:" .. String.forInteger(getId()) .. "] " .. text)

func onActivity:
	lastActivity = SystemClock.asSeconds()

func initialize virtual as bool:
	return true

func cleanup virtual
{
}

func doInitialize(logContext as LoggingContext, socket as ConnectedSocket, manager as NetworkConnectionManager) as bool
{
	this.logContext = logContext
	this.socket = socket
	this.manager = manager
	assert initialize()
	onActivity()
	return true
}

func getIoEntry as IOManagerEntry:
	return ioEntry

func setIoEntry(entry as IOManagerEntry) as bool
{
	var v = false
	this.ioEntry = entry
	this.currentListenMode = -1
	if entry:
		v = setListenMode(getDefaultListenMode())
	return v
}

func sendData(data as buffer, size as int) as int
{
	if socket == null:
		return 0
	var v = socket.write(data, size)
	if v < 0:
		close()
	onActivity()
	return v
}

func close
{
	var ss = socket
	socket = null
	if ioEntry {
		ioEntry.remove()
		ioEntry = null
	}
	if ss:
		ss.close()
	if manager:
		manager.onConnectionClosed(this)
	cleanup()
	onClosed()
	this.socket = null
	this.manager = null
}

func closeSocket
{
	if socket:
		socket.close()
}

func onReadReady virtual
{
	assert socket
	var recvBuffer as buffer
	if manager:
		recvBuffer = manager.getReceiveBuffer()
	if recvBuffer == null:
		recvBuffer = malloc 1024
	var n = socket.read(recvBuffer)
	if n < 0 {
		close()
	}
	else {
		onDataReceived(recvBuffer, n)
	}
	onActivity()
}

func onWriteReady virtual
{
}

func enableIdleMode as bool:
	return setListenMode(0)

func enableReadMode as bool:
	return setListenMode(1)

func enableWriteMode as bool:
	return setListenMode(2)

func enableReadWriteMode as bool:
	return setListenMode(3)

func setListenMode(n as int) private as bool
{
	if ioEntry == null {
		defaultListenMode = n
		return true
	}
	if n == currentListenMode:
		return true
	currentListenMode = n
	var v = false
	if n == 0 {
		v = ioEntry.setListeners(null, null)
	}
	else if n == 1 {
		v = ioEntry.setListeners(onReadReady, null)
	}
	else if n == 2 {
		v = ioEntry.setListeners(null, onWriteReady)
	}
	else if n == 3 {
		v = ioEntry.setListeners(onReadReady, onWriteReady)
	}
	if not v:
		Log.error(logContext, "Failed to set socket listening mode to " .. String.forInteger(n))
	return v
}

func onOpened abstract
func onDataReceived(data as buffer, size as int) abstract
func onClosed abstract
func onError(message as string) abstract
