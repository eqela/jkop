
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is ConnectedSocket abstract:

func create static as this
{
	IFDEF "target_android" {
		return new TCPSocketForAndroid()
	}
	ELSE IFDEF "target_netx" {
		return new TCPSocketForDotnet()
	}
	ELSE IFDEF "target_j2se" {
		return new TCPSocketForJava()
	}
	ELSE IFDEF "target_objc" {
		return new TCPSocketForObjC()
	}
	ELSE {
		ERROR "Not implemented."
		return null
	}
}

func createAndConnect(address as string, port as int) static as this
{
	var v = assert create()
	if v.connect(address, port) == false:
		v = null
	return v
}

func createAndListen(port as int) static as this
{
	var v = assert create()
	if v.listen(port) == false:
		v = null
	return v
}

prop lastErrorDescription as string

func getRemoteAddress abstract as string
func getRemotePort abstract as int
func getLocalAddress abstract as string
func getLocalPort abstract as int
func connect(address as string, port as int) abstract as bool
func listen(port as int) abstract as bool
func accept abstract as this
func setBlocking(blocking as bool) abstract as bool
func getBlocking abstract as bool
func close abstract
func read(buffer as buffer) abstract as int

func readWithTimeout(buffer as buffer, timeout as int) virtual as int:
	return read(buffer)

func write(buffer as buffer, size as int) abstract as int
