
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class <K,V>:

var values as vector<KeyValuePair<K,V>>

func add(key as K, val as V)
{
	if values == null:
		values = new vector<KeyValuePair<K,V>>
	var kvp = new KeyValuePair<K,V>()
	kvp.key = key
	kvp.value = val
	values += kvp
}

func addPair(pair as KeyValuePair<K,V>)
{
	if values == null:
		values = new vector<KeyValuePair<K,V>>
	values += pair
}

func prepend(key as K, val as V)
{
	if values == null:
		values = new vector<KeyValuePair<K,V>>
	var kvp = new KeyValuePair<K,V>()
	kvp.key = key
	kvp.value = val
	Vector.prepend(values, kvp)
}

func prependPair(pair as KeyValuePair<K,V>)
{
	if values == null:
		values = new vector<KeyValuePair<K,V>>
	Vector.prepend(values, pair)
}

func iterate as Iterator<KeyValuePair<K,V>>
{
	var v as Iterator<KeyValuePair<K,V>> #force = Vector.iterate(values)
	return v
}

func asVector as vector<KeyValuePair<K,V>>:
	return values

func dup as this
{
	var v = new this()
	var it as Iterator<KeyValuePair<K,V>> #force = iterate()
	loop {
		var kvp = it.next()
		if kvp == null:
			break
		v.add(kvp.key, kvp.value)
	}
	return v
}

func getKey(index as int) as K
{
	if values == null:
		return defaultvalue K
	var kvp = Vector.get(values, index)
	if kvp == null:
		return defaultvalue K
	return kvp.key
}

func getValue(index as int) as V
{
	if values == null:
		return defaultvalue V
	var kvp = Vector.get(values, index)
	if kvp == null:
		return defaultvalue V
	return kvp.value
}

func count as int
{
	if values == null:
		return 0
	return Vector.getSize(values)
}

func remove(index as int):
	Vector.remove(values, index)

func clear:
	values = null
