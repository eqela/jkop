
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

// API Specification: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/

import jk.log
import jk.json
import jk.webclient

class:

model KeyValueObject public
{
}

model ManagedFieldsEntry public
{
	apiVersion as string
	fieldsType as string
	// fieldsV1 as FieldsV1
	manager as string
	operation as string
	// time as Time
}

model OwnerReference public
{
	apiVersion as string
	blockOwnerDeletion as bool
	controller as bool
	kind as string
	name as string
	uid as string
}

model ObjectMeta public
{
	annotations as KeyValueObject
	clusterName as string
	// creationTimestamp as Time
	deletionGracePeriodSeconds as int
	// deletionTimestamp as Time
	finalizers as string[]
	generateName as string
	generation as int
	labels as KeyValueObject
	managedFields as ManagedFieldsEntry[]
	name as string
	namespace as string
	ownerReferences as OwnerReference[]
	resourceVersion as string
	selfLink as string
	uid as string
}

model LabelSelectorRequirement public
{
	key as string
	operator as string
	values as string[]
}

model LabelSelector public
{
	matchExpressions as LabelSelectorRequirement[]
	matchLabels as KeyValueObject
}

model ConfigMapKeySelector public
{
	key as string
	name as string
	optional as bool
}

model ObjectFieldSelector public
{
	apiVersion as string
	fieldPath as string
}

model ResourceFieldSelector public
{
	containerName as string
	// divisor as Quantity
	resource as string
}

model SecretKeySelector public
{
	key as string
	name as string
	optional as bool
}

model EnvVarSource public
{
	configMapKeyRef as ConfigMapKeySelector
	fieldRef as ObjectFieldSelector
	resourceFieldRef as ResourceFieldSelector
	secretKeyRef as SecretKeySelector
}

model EnvVar public
{
	name as string
	value as string
	valueFrom as EnvVarSource
}

model ConfigMapEnvSource public
{
	name as string
	optional as bool
}

model SecretEnvSource public
{
	name as string
	optional as bool
}

model EnvFromSource public
{
	configMapRef as ConfigMapEnvSource
	prefix as string
	secretRef as SecretEnvSource
}

model SecretList public
{
	apiVersion as string
	items as Secret[]
	kind as string
	metadata as ListMeta
}

model Secret public
{
	apiVersion as string
	data as KeyValueObject
	immutable as bool
	kind as string
	metadata as ObjectMeta
	stringData as KeyValueObject
	type as string
}

model ContainerPort public
{
	containerPort as int
	hostIP as string
	hostPort as int
	name as string
	protocol as string
}

model ExecAction public
{
	command as string[]
}

model HTTPHeader public
{
	name as string
	value as string
}

model HTTPGetAction public
{
	host as string
	httpHeaders as HTTPHeader[]
	path as string
	port as string
	scheme as string
}

model TCPSocketAction public
{
	host as string
	port as string
}

model Handler public
{
	exec as ExecAction
	httpGet as HTTPGetAction
	tcpSocket as TCPSocketAction
}

model Lifecycle public
{
	postStart as Handler
	preStop as Handler
}

model Probe public
{
	exec as ExecAction
	failureThreshold as int
	httpGet as HTTPGetAction
	initialDelaySeconds as int
	periodSeconds as int
	successThreshold as int
	tcpSocket as TCPSocketAction
	timeoutSeconds as int
}

model ResourceRequirements public
{
	limits as KeyValueObject
	requests as KeyValueObject
}

model Capabilities public
{
	add as string[]
	drop as string[]
}

model SELinuxOptions public
{
	level as string
	role as string
	type as string
	user as string
}

model SeccompProfile public
{
	localhostProfile as string
	type as string
}

model WindowsSecurityContextOptions public
{
	gmsaCredentialSpec as string
	gmsaCredentialSpecName as string
	runAsUserName as string
}

model SecurityContext public
{
	allowPrivilegeEscalation as bool
	capabilities as Capabilities
	privileged as bool
	procMount as string
	readOnlyRootFilesystem as bool
	runAsGroup as int
	runAsNonRoot as bool
	runAsUser as int
	seLinuxOptions as SELinuxOptions
	seccompProfile as SeccompProfile
	windowsOptions as WindowsSecurityContextOptions
}

model VolumeDevice public
{
	devicePath as string
	name as string
}

model VolumeMount public
{
	mountPath as string
	mountPropagation as string
	name as string
	readOnly as bool
	subPath as string
	subPathExpr as string
}

model Container public
{
	args as string[]
	command as string[]
	env as EnvVar[]
	envFrom as EnvFromSource[]
	image as string
	imagePullPolicy as string
	lifecycle as Lifecycle
	livenessProbe as Probe
	name as string
	ports as ContainerPort[]
	readinessProbe as Probe
	resources as ResourceRequirements
	securityContext as SecurityContext
	startupProbe as Probe
	stdin as bool
	stdinOnce as bool
	terminationMessagePath as string
	terminationMessagePolicy as string
	tty as bool
	volumeDevices as VolumeDevice[]
	volumeMounts as VolumeMount[]
	workingDir as string
}

model NodeSelectorRequirement public
{
	key as string
	operator as string
	values as string[]
}

model NodeSelectorTerm public
{
	matchExpressions as NodeSelectorRequirement[]
	matchFields as NodeSelectorRequirement[]
}

model PreferredSchedulingTerm public
{
	preference as NodeSelectorTerm
	weight as int
}

model NodeSelector public
{
	nodeSelectorTerms as NodeSelectorTerm[]
}

model NodeAffinity public
{
	preferredDuringSchedulingIgnoredDuringExecution as PreferredSchedulingTerm[]
	requiredDuringSchedulingIgnoredDuringExecution as NodeSelector
}

model PodAffinityTerm public
{
	labelSelector as LabelSelector
	namespaces as string[]
	topologyKey as string
}

model WeightedPodAffinityTerm public
{
	podAffinityTerm as PodAffinityTerm
	weight as int
}

model PodAffinity public
{
	preferredDuringSchedulingIgnoredDuringExecution as WeightedPodAffinityTerm[]
	requiredDuringSchedulingIgnoredDuringExecution as PodAffinityTerm[]
}

model PodAntiAffinity public
{
	preferredDuringSchedulingIgnoredDuringExecution as WeightedPodAffinityTerm[]
	requiredDuringSchedulingIgnoredDuringExecution as PodAffinityTerm[]
}

model Affinity public
{
	nodeAffinity as NodeAffinity
	podAffinity as PodAffinity
	podAntiAffinity as PodAntiAffinity
}

model PodDNSConfigOption public
{
	name as string
	value as string
}

model PodDNSConfig public
{
	nameservers as string[]
	options as PodDNSConfigOption[]
	searches as string[]
}

model EphemeralContainer public
{
	args as string[]
	command as string[]
	env as EnvVar[]
	envFrom as EnvFromSource
	image as string
	imagePullPolicy as string
	lifecycle as Lifecycle
	livenessProbe as Probe
	name as string
	ports as ContainerPort[]
	readinessProbe as Probe
	resources as ResourceRequirements
	securityContext as SecurityContext
	startupProbe as Probe
	stdin as bool
	stdinOnce as bool
	targetContainerName as string
	terminationMessagePath as string
	terminationMessagePolicy as string
	tty as bool
	volumeDevices as VolumeDevice[]
	volumeMounts as VolumeMount[]
	workingDir as string
}

model HostAlias public
{
	hostnames as string[]
	ip as string
}

model LocalObjectReference public
{
	name as string
}

model PodReadinessGate public
{
	conditionType as string
}

model Sysctl public
{
	name as string
	value as string
}

model PodSecurityContext public
{
	fsGroup as int
	fsGroupChangePolicy as string
	runAsGroup as int
	runAsNonRoot as bool
	runAsUser as int
	seLinuxOptions as SELinuxOptions
	seccompProfile as SeccompProfile
	supplementalGroups as int[]
	sysctls as Sysctl[]
	windowsOptions as WindowsSecurityContextOptions
}

model Toleration public
{
	effect as string
	key as string
	operator as string
	tolerationSeconds as int
	value as string
}

model TopologySpreadConstraint public
{
	labelSelector as LabelSelector
	maxSkew as int
	topologyKey as string
	whenUnsatisfiable as string
}

model Volume public
{
	/* FIXME
	awsElasticBlockStore as AWSElasticBlockStoreVolumeSource
	azureDisk as AzureDiskVolumeSource
	azureFile as AzureFileVolumeSource
	cephfs as CephFSVolumeSource
	cinder as CinderVolumeSource
	configMap as ConfigMapVolumeSource
	csi as CSIVolumeSource
	downwardAPI as DownwardAPIVolumeSource
	emptyDir as EmptyDirVolumeSource
	ephemeral as EphemeralVolumeSource
	fc as FCVolumeSource
	flexVolume as FlexVolumeSource
	flocker as FlockerVolumeSource
	gcePersistentDisk as GCEPersistentDiskVolumeSource
	gitRepo as GitRepoVolumeSource
	glusterfs as GlusterfsVolumeSource
	hostPath as HostPathVolumeSource
	iscsi as ISCSIVolumeSource
	name as string
	nfs as NFSVolumeSource
	persistentVolumeClaim as PersistentVolumeClaimVolumeSource
	photonPersistentDisk as PhotonPersistentDiskVolumeSource
	portworxVolume as PortworxVolumeSource
	projected as ProjectedVolumeSource
	quobyte as QuobyteVolumeSource
	rbd as RBDVolumeSource
	scaleIO as ScaleIOVolumeSource
	secret as SecretVolumeSource
	storageos as StorageOSVolumeSource
	vsphereVolume as VsphereVirtualDiskVolumeSource
	*/
}

model PodSpec public
{
	activeDeadlineSeconds as int
	affinity as Affinity
	automountServiceAccountToken as bool
	containers as Container[]
	dnsConfig as PodDNSConfig
	dnsPolicy as string
	enableServiceLinks as bool
	ephemeralContainers as EphemeralContainer[]
	hostAliases as HostAlias[]
	hostIPC as bool
	hostNetwork as bool
	hostPID as bool
	hostname as string
	imagePullSecrets as LocalObjectReference[]
	initContainers as Container[]
	nodeName as string
	nodeSelector as KeyValueObject
	overhead as KeyValueObject
	preemptionPolicy as string
	priority as int
	priorityClassName as string
	readinessGates as PodReadinessGate[]
	restartPolicy as string
	runtimeClassName as string
	schedulerName as string
	securityContext as PodSecurityContext
	serviceAccount as string
	serviceAccountName as string
	setHostnameAsFQDN as bool
	shareProcessNamespace as bool
	subdomain as string
	terminationGracePeriodSeconds as int
	tolerations as Toleration[]
	topologySpreadConstraints as TopologySpreadConstraint[]
	volumes as Volume[]
}

model PodTemplateSpec public
{
	metadata as ObjectMeta
	spec as PodSpec
}

model PodCondition public
{
	// lastProbeTime as Time
	// lastTransitionTime as Time
	message as string
	reason as string
	status as string
	type as string
}

model PodIP public
{
	ip as string
}

model ContainerStatus public
{
	containerID as string
	image as string
	imageID as string
	lastState as ContainerState
	name as string
	ready as bool
	restartCount as int
	started as bool
	state as ContainerState
}

model ContainerStateRunning public
{
	// startedAt as Time
}

model ContainerStateTerminated public
{
	containerID as string
	exitCode as int
	// finishedAt as Time
	message as string
	reason as string
	signal as int
	// startedAt as Time
}

model ContainerStateWaiting public
{
	message as string
	reason as string
}

model ContainerState public
{
	running as ContainerStateRunning
	terminated as ContainerStateTerminated
	waiting as ContainerStateWaiting
}

model PodStatus public
{
	conditions as PodCondition[]
	containerStatuses as ContainerStatus[]
	ephemeralContainerStatuses as ContainerStatus[]
	hostIP as string
	initContainerStatuses as ContainerStatus[]
	message as string
	nominatedNodeName as string
	phase as string
	podIP as string
	podIPs as PodIP[]
	qosClass as string
	reason as string
	// startTime as Time
}

model Pod public
{
	apiVersion as string
	kind as string
	metadata as ObjectMeta
	spec as PodSpec
	status as PodStatus
}

model PodList public
{
	apiVersion as string
	items as Pod[]
	kind as string
	metadata as ListMeta
}

model JobSpec public
{
	activeDeadlineSeconds as int
	backoffLimit as int
	completions as int
	manualSelector as bool
	parallelism as int
	selector as LabelSelector
	template as PodTemplateSpec
	ttlSecondsAfterFinished as int
}

model JobCondition public
{
	// lastProbeTime as Time
	// lastTransitionTime as Time
	message as string
	reason as string
	status as string
	type as string
}

model JobStatus public
{
	active as int
	// completionTime as Time
	conditions as JobCondition[]
	failed as int
	// startTime as Time
	succeeded as int
}

model Job public
{
	apiVersion as string
	kind as string
	metadata as ObjectMeta
	spec as JobSpec
	status as JobStatus
}

model JobList public
{
	apiVersion as string
	items as Job[]
	kind as string
	metadata as ListMeta
}

model DeploymentStrategy public
{
	rollingUpdate as RollingUpdateDeployment
	type as string
}

model RollingUpdateDeployment public
{
	maxSurge as int
	maxUnavailable as int
}

model DeploymentSpec public
{
	minReadySeconds as int
	paused as bool
	progressDeadlineSeconds as int
	replicas as int
	revisionHistoryLimit as int
	selector as LabelSelector
	strategy as DeploymentStrategy
	template as PodTemplateSpec
}

model DeploymentCondition public
{
	// lastTransitionTime as Time
	// lastUpdateTime as Time
	message as string
	reason as string
	status as string
	type as string
}

model DeploymentStatus public
{
	availableReplicas as int
	collisionCount as int
	conditions as DeploymentCondition[]
	observedGeneration as int
	readyReplicas as int
	replicas as int
	unavailableReplicas as int
	updatedReplicas as int
}

model Deployment public
{
	apiVersion as string
	kind as string
	metadata as ObjectMeta
	spec as DeploymentSpec
	status as DeploymentStatus
}

model DeploymentList public
{
	apiVersion as string
	items as Deployment[]
	kind as string
	metadata as ListMeta
}

model ClientIPConfig public
{
	timeoutSeconds as int
}

model SessionAffinityConfig public
{
	clientIP as ClientIPConfig
}

model LoadBalancerIngress public
{
	hostname as string
	ip as string
}

model LoadBalancerStatus public
{
	ingress as LoadBalancerIngress[]
}

model ServiceStatus public
{
	loadBalancer as LoadBalancerStatus
}

model ServicePort public
{
	appProtocol as string
	name as string
	nodePort as int
	port as int
	protocol as string
	targetPort as int
}

model ServiceSpec public
{
	clusterIP as string
	externalIPs as string[]
	externalName as string
	externalTrafficPolicy as string
	healthCheckNodePort as int
	ipFamily as string
	loadBalancerIP as string
	loadBalancerSourceRanges as string[]
	ports as ServicePort[]
	publishNotReadyAddresses as bool
	selector as KeyValueObject
	sessionAffinity as string
	sessionAffinityConfig as SessionAffinityConfig
	topologyKeys as string[]
	type as string
}

model Service public
{
	apiVersion as string
	kind as string
	metadata as ObjectMeta
	spec as ServiceSpec
	status as ServiceStatus
}

model ServiceList public
{
	apiVersion as string
	items as Service[]
	kind as string
	metadata as ListMeta
}

model NamespaceSpec public
{
	finalizers as string[]
}

model NamespaceCondition public
{
	// lastTransitionTime as Time
	message as string
	reason as string
	status as string
	type as string
}

model NamespaceStatus public
{
	conditions as NamespaceCondition[]
	phase as string
}

model Namespace public
{
	apiVersion as string
	kind as string
	metadata as ObjectMeta
	spec as NamespaceSpec
	status as NamespaceStatus
}

model ListMeta public
{
	continue as string
	remainingItemCount as int
	resourceVersion as string
	selfLink as string
}

model NamespaceList public
{
	apiVersion as string
	items as Namespace[]
	kind as string
	metadata as ListMeta
}

func forCurrentCluster(ctx as LoggingContext) static as this
{
	var v = new this(ctx)
	v.url = "https://kubernetes.default.svc.cluster.local"
	v.token = CurrentKubernetesCluster.getToken()
	return v
}

func forApiServer(ctx as LoggingContext, serverUrl as string, token as string) static as this
{
	var v = new this(ctx)
	v.url = serverUrl
	v.token = token
	return v
}

func forKubeconfig(ctx as LoggingContext, kubeconfig as string) static as this
{
	var v = new this(ctx)
	v.configure(kubeconfig)
	return v
}

var ctx as LoggingContext

ctor:
	this.ctx = null

ctor(ctx as LoggingContext):
	this.ctx = ctx

prop url as string
prop token as string

func configure(kubeconfig as string)
{
	// FIXME: Parse kubeconfig and set url and token accordingly
	Error.throw("notImplemented", "KubernetesClient.configure")
}

func request(method as string, path as string, body as buffer) async as WebClient.Response
{
	var furl = url
	assert String.isNotEmpty(furl)
	var pp = path
	if String.isEmpty(pp):
		pp = "/"
	if not String.startsWith(pp, "/") && not String.endsWith(furl, "/"):
		furl = furl .. "/"
	furl = furl .. pp
	var headers = new KeyValueList<string,string>()
	var tt = token
	if String.isNotEmpty(tt):
		headers.add("Authorization", "Bearer " .. tt)
	if body {
		var ctype = "application/json"
		if method == "PATCH":
			ctype = "application/json-patch+json"
		headers.add("Content-Type", ctype)
	}
	if ctx && ctx.isInDebugMode():
		Log.debug(ctx, "Kubernetes request: method=`" .. method .. "', path=`" .. path .. "', body=`" .. String.forUTF8Buffer(body) .. "'")
	var v = await WebClient.instance().executeQuery(ctx, method, furl, headers, body)
	if not v:
		Error.throw("httpCallFailed", furl)
	if ctx && ctx.isInDebugMode():
		Log.debug(ctx, "Kubernetes response: `" .. v.getBodyAsString() .. "'")
	return v
}

func requestMap(method as string, path as string, body as buffer) async as DynamicMap
{
	var v = await request(method, path, body)
	if v && String.startsWith(v.statusCode, "2") {
		nop
	}
	else {
		Error.throw("kubernetesOperationFailed", method .. " " .. path)
	}
	return JSONParser.parseBuffer(v.getBodyAsBuffer()) as DynamicMap
}

func toFinalNamespace(namespace as string) as string
{
	if String.isEmpty(namespace):
		return "default"
	return namespace
}

func getMetadataName(metadata as ObjectMeta) as string
{
	assert metadata
	return metadata.name
}

func applyObject(object as DynamicMap) async as DynamicMap
{
	if not object:
		Error.throw("noObjectGiven", "applyObject")
	var kind = object.getString("kind")
	var namespace as string
	var md = object.getDynamicMap("metadata")
	if md:
		namespace = md.getString("namespace")
	if String.isEmpty(namespace):
		namespace = "default"
	if kind == "Namespace" {
		var o = new Namespace()
		o.fromJsonObject(object)
		return (await applyNamespace(o)).toDynamicMap()
	}
	else if kind == "Deployment" {
		var o = new Deployment()
		o.fromJsonObject(object)
		return (await applyDeployment(namespace, o)).toDynamicMap()
	}
	else if kind == "Service" {
		var o = new Service()
		o.fromJsonObject(object)
		return (await applyService(namespace, o)).toDynamicMap()
	}
	else if kind == "Job" {
		var o = new Job()
		o.fromJsonObject(object)
		return (await applyJob(namespace, o)).toDynamicMap()
	}
	else if kind == "Pod" {
		var o = new Pod()
		o.fromJsonObject(object)
		return (await applyPod(namespace, o)).toDynamicMap()
	}
	else {
		Error.throw("unsupportedObjectKind", kind)
	}
	return null
}

func applyGenericObject(url as string, name as string, object as DynamicMap) async as DynamicMap
{
	var objectPath = url .. "/" .. name
	var getResponse = await request("GET", objectPath, null)
	if getResponse.statusCode == "404" {
		return requestMap("POST", url, String.toUTF8Buffer(JSONEncoder.toString(object)))
	}
	if String.startsWith(getResponse.statusCode, "2") {
		var gotten = JSONParser.parseBuffer(getResponse.getBodyAsBuffer()) as DynamicMap
		var gottenJson = JSONEncoder.toString(gotten)
		var objectJson = JSONEncoder.toString(object)
		if String.equals(gottenJson, objectJson):
			return gotten
	}
	return await requestMap("PUT", objectPath, String.toUTF8Buffer(JSONEncoder.toString(object)))
}

// namespaces

func getNamespaces async as NamespaceList
{
	var url = "/api/v1/namespaces"
	var response = await requestMap("GET", url, null)
	var v = new NamespaceList()
	v.fromJsonObject(response)
	return v
}

func getNamespace(namespace as string) async as Namespace
{
	var url = "/api/v1/namespaces/" .. namespace
	var response = await requestMap("GET", url, null)
	var v = new Namespace()
	v.fromJsonObject(response)
	return v
}

func applyNamespace(namespace as Namespace) async as Namespace
{
	var result = await applyGenericObject("/api/v1/namespaces", getMetadataName(namespace.metadata), namespace.toDynamicMap())
	var v = new Namespace()
	v.fromJsonObject(result)
	return v
}

func deleteNamespace(namespace as string) async
{
	var url = "/api/v1/namespaces/" .. namespace
	await requestMap("DELETE", url, null)
}

// jobs

func getJobs(namespace as string) async as JobList
{
	var url = "/apis/batch/v1/namespaces/" .. toFinalNamespace(namespace) .. "/jobs"
	var response = await requestMap("GET", url, null)
	var v = new JobList()
	v.fromJsonObject(response)
	return v
}

func getJob(namespace as string, name as string) async as Job
{
	var url = "/apis/batch/v1/namespaces/" .. toFinalNamespace(namespace) .. "/jobs/" .. name
	var response = await requestMap("GET", url, null)
	var v = new Job()
	v.fromJsonObject(response)
	return v
}

func applyJob(namespace as string, object as Job) async as Job
{
	var result = await applyGenericObject("/apis/batch/v1/namespaces/" .. toFinalNamespace(namespace) .. "/jobs", getMetadataName(object.metadata), object.toDynamicMap())
	var v = new Job()
	v.fromJsonObject(result)
	return v
}

func deleteJob(namespace as string, name as string) async
{
	var url = "/apis/batch/v1/namespaces/" .. toFinalNamespace(namespace) .. "/jobs/" .. name
	await requestMap("DELETE", url, null)
}

// deployments

func getDeployments(namespace as string) async as DeploymentList
{
	var url = "/apis/apps/v1/namespaces/" .. toFinalNamespace(namespace) .. "/deployments"
	var response = await requestMap("GET", url, null)
	var v = new DeploymentList()
	v.fromJsonObject(response)
	return v
}

func getDeployment(namespace as string, name as string) async as Deployment
{
	var url = "/apis/apps/v1/namespaces/" .. toFinalNamespace(namespace) .. "/deployments/" .. name
	var response = await requestMap("GET", url, null)
	var v = new Deployment()
	v.fromJsonObject(response)
	return v
}

func applyDeployment(namespace as string, object as Deployment) async as Deployment
{
	var result = await applyGenericObject("/apis/apps/v1/namespaces/" .. toFinalNamespace(namespace) .. "/deployments", getMetadataName(object.metadata), object.toDynamicMap())
	var v = new Deployment()
	v.fromJsonObject(result)
	return v
}

func deleteDeployment(namespace as string, name as string) async
{
	var url = "/apis/apps/v1/namespaces/" .. toFinalNamespace(namespace) .. "/deployments/" .. name
	await requestMap("DELETE", url, null)
}

// services

func getServices(namespace as string) async as ServiceList
{
	var url = "/api/v1/namespaces/" .. toFinalNamespace(namespace) .. "/services"
	var response = await requestMap("GET", url, null)
	var v = new ServiceList()
	v.fromJsonObject(response)
	return v
}

func getService(namespace as string, name as string) async as Service
{
	var url = "/api/v1/namespaces/" .. toFinalNamespace(namespace) .. "/services/" .. name
	var response = await requestMap("GET", url, null)
	var v = new Service()
	v.fromJsonObject(response)
	return v
}

func applyService(namespace as string, object as Service) async as Service
{
	var result = await applyGenericObject("/api/v1/namespaces/" .. toFinalNamespace(namespace) .. "/services", getMetadataName(object.metadata), object.toDynamicMap())
	var v = new Service()
	v.fromJsonObject(result)
	return v
}

func deleteService(namespace as string, name as string) async
{
	var url = "/api/v1/namespaces/" .. toFinalNamespace(namespace) .. "/services/" .. name
	await requestMap("DELETE", url, null)
}

// pods

func getPods(namespace as string) async as PodList
{
	var url = "/api/v1/namespaces/" .. toFinalNamespace(namespace) .. "/pods"
	var response = await requestMap("GET", url, null)
	var v = new PodList()
	v.fromJsonObject(response)
	return v
}

func getPod(namespace as string, name as string) async as Pod
{
	var url = "/api/v1/namespaces/" .. toFinalNamespace(namespace) .. "/pods/" .. name
	var response = await requestMap("GET", url, null)
	var v = new Pod()
	v.fromJsonObject(response)
	return v
}

func applyPod(namespace as string, object as Pod) async as Pod
{
	var result = await applyGenericObject("/api/v1/namespaces/" .. toFinalNamespace(namespace) .. "/pods", getMetadataName(object.metadata), object.toDynamicMap())
	var v = new Pod()
	v.fromJsonObject(result)
	return v
}

func deletePod(namespace as string, name as string) async
{
	var url = "/api/v1/namespaces/" .. toFinalNamespace(namespace) .. "/pods/" .. name
	await requestMap("DELETE", url, null)
}

// secrets

func getSecrets(namespace as string) async as SecretList
{
	var url = "/api/v1/namespaces/" .. toFinalNamespace(namespace) .. "/secrets"
	var response = await requestMap("GET", url, null)
	var v = new SecretList()
	v.fromJsonObject(response)
	return v
}

func getSecret(namespace as string, name as string) async as Secret
{
	var url = "/api/v1/namespaces/" .. toFinalNamespace(namespace) .. "/secrets/" .. name
	var response = await requestMap("GET", url, null)
	var v = new Secret()
	v.fromJsonObject(response)
	return v
}

func applySecret(namespace as string, object as Secret) async as Secret
{
	var result = await applyGenericObject("/api/v1/namespaces/" .. toFinalNamespace(namespace) .. "/secrets", getMetadataName(object.metadata), object.toDynamicMap())
	var v = new Secret()
	v.fromJsonObject(result)
	return v
}

func deleteSecret(namespace as string, name as string) async
{
	var url = "/api/v1/namespaces/" .. toFinalNamespace(namespace) .. "/secrets/" .. name
	await requestMap("DELETE", url, null)
}

// statefulsets
// ingresses
// cronjobs
// nodes
// configmaps
// persistentvolumeclaims
// persistentvolumes
// clusterrolebindings
// clusterroles
// rolebindings
// roles
// storageclasses
// volumeattachments

// bindings
// componentstatuses
// endpoints
// events
// limitranges
// podtemplates
// replicationcontrollers
// resourcequotas
// serviceaccounts
// mutatingwebhookconfigurations
// validatingwebhookconfigurations
// customresourcedefinitions
// apiservices
// controllerrevisions
// daemonsets
// replicasets
// tokenreviews
// localsubjectaccessreviews
// selfsubjectaccessreviews
// selfsubjectrulesreviews
// subjectaccessreviews
// horizontalpodautoscalers
// certificatesigningrequests
// leases
// endpointslices
// events
// ingressclasses
// networkpolicies
// runtimeclasses
// poddisruptionbudgets
// podsecuritypolicies
// priorityclasses
// csidrivers
// csinodes
