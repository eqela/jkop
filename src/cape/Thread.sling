
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

IFDEF "target_netcore"
{
	depend "nuget:System.Threading.Thread@4.3.*"
}

IFDEF "target_posix"
{
	lang "c" {{{
		#include <pthread.h>
		#include <signal.h>
	}}}

	func threadFunction(arg as ptr) static as ptr
	{
		lang "c" {{{
			sigset_t ss;
			sigset_t os;
			sigfillset(&ss);
		}}}
		IFNDEF("target_nacl") {
			lang "c" {{{
				pthread_sigmask(SIG_SETMASK, &ss, &os);
			}}}
		}
		IFDEF("target_apple") {
			lang "objc" {{{
				@autoreleasepool {
			}}}
		}
		(arg as Runnable).run()
		IFDEF("target_apple") {
			lang "objc" {{{
				}
			}}}
		}
		lang "c" {{{
			unref_eq_api_Object((void*)arg);
		}}}
		return(null)
	}
}

IFDEF "target_win32"
{
	lang "c" {{{
		#include <windows.h>
	}}}

	func threadFunction(arg as ptr) static as ptr
	{
		(arg as Runnable).run()
		lang "c" {{{
			unref_eq_api_Object((void*)arg);
		}}}
		return(null)
	}
}

IFDEF "target_java"
{
	lang "java" {{{
		private static class ThreadRunnable implements java.lang.Runnable {
			private cape.Runnable runnable = null;
			public ThreadRunnable(cape.Runnable r) {
				this.runnable = r;
			}
			public void run() {
				this.runnable.run();
			}
		}
	}}}
}

IFDEF "target_objc"
{
	class MyThread is !"NSThread"
	{
		prop runnable as Runnable

		func main
		{
			if runnable:
				runnable.run()
		}
	}
}

IFDEF "target_swift"
{
	lang "swift" {{{
		class MyThread : Foundation.Thread {
			public override init() {
				super.init()
			}

			private var runnable: CapeRunnable! = nil

			public override func main() {
				if runnable != nil {
					runnable.run()
				}
			}

			public func getRunnable() -> CapeRunnable! {
				return runnable
			}

			public func setRunnable(_ v: CapeRunnable!) -> MyThread! {
				runnable = v
				return self
			}
		}
	}}}
}

func setLocalValue(id as string, value as object) static
{
	meta {
		description [[
			Sets a value in the thread local storage (TLS) of the current thread. The value is identified with the
			given id, and can only be accessed from the current thread.
		]]
	}
	IFDEF "target_cs" {
		lang "cs" {{{
			System.Threading.Thread.SetData(System.Threading.Thread.GetNamedDataSlot(id), value);
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			Thread.current.threadDictionary.setObject(value, forKey: id as! NSCopying)
		}}}
	}
	ELSE {
		ERROR "Not implemented."
	}
}

func getLocalValue(id as string) static as object
{
	meta {
		description [[
			Gets a value from the thread local storage (TLS) of the current thread. The value is identified with the
			given id, and must have been set by a prior call to setLocalValue in the same thread where this method is called.
		]]
	}
	IFDEF "target_cs" {
		return lang "cs" object {{{ System.Threading.Thread.GetData(System.Threading.Thread.GetNamedDataSlot(id)) }}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			return Thread.current.threadDictionary.value(forKey: id) as AnyObject
		}}}
	}
	ELSE {
		ERROR "Not implemented."
		return null
	}
}

func removeLocalValue(id as string) static
{
	meta {
		description [[
			Removes a value from the thread local storage (TLS) of the current thread. The value is identified with the
			given id, and would have been set by a previous call to setLocalValue in the same thread where this method is called.
		]]
	}
	IFDEF "target_cs" {
		lang "cs" {{{
			System.Threading.Thread.SetData(System.Threading.Thread.GetNamedDataSlot(id), null);
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			Thread.current.threadDictionary.removeObject(forKey: id)
		}}}
	}
	ELSE {
		ERROR "Not implemented."
	}
}

func start(runnable as Runnable) static as bool
{
	assert runnable
	IFDEF "target_cs" {
		IFDEF "target_uwp" {
			ERROR "Not implemented"
			return false
		}
		ELSE {
			lang "cs" {{{
				new System.Threading.Thread(new System.Threading.ThreadStart(runnable.run)).Start();
			}}}
			return true
		}
	}
	ELSE IFDEF "target_java" {
		var v = false
		lang "java" {{{
			java.lang.Thread t = new java.lang.Thread(new ThreadRunnable(runnable));
			try {
				t.start();
				v = true;
			}
			catch(Exception e) {
			}
		}}}
		return v
	}
	ELSE IFDEF "target_posix" {
		var rv as int
		lang "c" {{{
			pthread_t t;
			pthread_attr_t ta;
			pthread_attr_init(&ta);
			pthread_attr_setdetachstate(&ta, PTHREAD_CREATE_DETACHED);
			ref_eq_api_Object((void*)runnable);
			rv = pthread_create(&t, &ta, (void*)
			eq_os_ThreadImpl_thread_function, (void*)runnable);
		}}}
		if rv != 0:
			return false
		return true
	}
	ELSE IFDEF "target_win32" {
		var v as bool = false
		var rv as int = 0
		lang "c" {{{
			HANDLE hThread;
			DWORD dwThreadId;
			ref_eq_api_Object((void*)r);
			hThread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)eq_os_ThreadImp_thread_function, (void*)runnable, 0, &dwThreadId);
			if(hThread != NULL) {
				rv = 1;
			}
		}}}
		if rv == 1:
			v = true
		return v
	}
	ELSE IFDEF "target_objc" {
		var thread = new MyThread()
		thread.setRunnable(runnable)
		lang "objc" {{{
			[thread start];
		}}}
		return true
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" {{{
			kotlin.concurrent.thread() {
				runnable!!.run()
			}
		}}}
		return true
	}
	ELSE IFDEF "target_sushi" {
		var r = lang "lua" int {{{ _sushi.startThread([[
			function _threadMain(x)
				local oo = _sushi.unserializeObject(x)
				_sushi.setMetaTable(oo, _sushi.getGlobal(oo._qualifiedClassName))
				oo:run()
			end
		]], _sushi.serializeObject(runnable)) }}}
		if r == 0:
			return false
		return true
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			let thread: MyThread! = MyThread()
			thread.setRunnable(runnable)
			thread.start()
		}}}
		return true
	}
	ELSE {
		ERROR "Not implemented"
		return false
	}
}
