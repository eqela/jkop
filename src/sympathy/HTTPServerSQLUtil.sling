
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

import capex.data

func getSQLParameterVectorFromQuery(req as HTTPServerRequest) static as vector
{
	var v as vector
	var n = 0
	loop {
		var vn = "p" .. String.forInteger(n)
		var pv = req.getQueryParameter(vn)
		if not pv:
			break
		if not v:
			v = new vector
		v += pv
		n ++
	}
	return v
}

func getSQLParameterVectorFromBody(req as HTTPServerRequest) static as vector
{
	assert req
	var vec = assert req.getBodyJSONVector()
	return vec.toVector()
}

func sendSQLReadResponse(req as HTTPServerRequest, db as SQLDatabase, sql as string, params as vector) static
{
	assert req && db && sql
	var stmt = assert db.prepare(sql):
		req.sendJSONObject(JSONResponse.forInternalError())
	if params {
		foreach param in params {
			var ps = String.asString(param)
			if not ps:
				continue
			stmt.addParamString(ps)
		}
	}
	db.query(stmt, func(rs as SQLResultSetIterator) {
		if rs == null {
			req.sendJSONObject(JSONResponse.forInternalError())
		}
		else {
			req.startResponseWorker(HTTPServerSQLResultSetToJSONResponseWorker.forResultSet(rs))
		}
	})
}

func sendSQLOperationResponse(req as HTTPServerRequest, db as SQLDatabase, sql as string, params as vector) static
{
	assert req && db && sql
	var stmt = assert db.prepare(sql):
		req.sendJSONObject(JSONResponse.forInternalError())
	if params {
		foreach param in params {
			var ps = String.asString(param)
			if not ps:
				continue
			stmt.addParamString(ps)
		}
	}
	db.execute(stmt, func(status as bool) {
		if status == false {
			req.sendJSONObject(JSONResponse.forInternalError())
		}
		else {
			req.sendJSONObject(JSONResponse.forOk())
		}
	})
}

func addWildCards(params as vector, index as int) static
{
	assert params && SIZE(params) > index
	params[index] = "%" .. cape.String.asString(params[index]) .. "%"
}
