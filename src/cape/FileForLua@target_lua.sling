
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is File private:

class MyFileReader is FileReader is SizedReader is Reader is Closable is SeekableReader
{
	var handle as object
	prop file as File

	func read(buffer as buffer) as int
	{
		var v = -1
		ERROR "Not implemented"
		return v
	}

	func getSize as int
	{
		ERROR "Not implemented"
		return 0
	}

	func close
	{
		var handle = this.handle
		if handle {
			lang "lua" {{{
				io.close(handle)
			}}}
			this.handle = null
		}
	}

	func setCurrentPosition(n as int64) as bool
	{
		ERROR "Not implemented"
		return false
	}

	func getCurrentPosition as int64
	{
		ERROR "Not implemented"
		return 0
	}
}

var path as string

func forPath(path as string) static as File
{
	var v = new this()
	v.setPath(path)
	return v
}

func entry(name as string) override as File
{
	ERROR "Not implemented"
	return null
}

func move(dest as File, replace as bool) override stub as bool
func touch override stub as bool

func read override as FileReader
{
	var handle as object
	var path = this.path
	lang "js" {{{
		handle = io.open(path, "r")
	}}}
	assert handle
	var v = new MyFileReader()
	v.setFile(this)
	v.handle = handle
	return v
}

func write override stub as FileWriter
func append override stub as FileWriter

func stat override as FileInfo
{
	var v = new FileInfo()
	v.setFile(this)
	ERROR "Not implemented"
	return v
}

func isExecutable override stub as bool
func createDirectory override stub as bool
func createDirectoryRecursive override stub as bool
func removeDirectory override stub as bool

func setPath(newPath as string)
{
	this.path = newPath
	ERROR "Not implemented properly"
}

func getPath override as string:
	return path

func isSame(file as File) override stub as bool
func remove override stub as bool
func removeRecursive override stub as bool
func makeExecutable override stub as bool
func entries override stub as Iterator<File>
