
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is AudioManager:

class MyAudioClip is AudioClip
{
	prop id as string

	func play as bool
	{
		var v = false
		var fnp #used = id
		var audioElement as ptr #used
		lang "js" {{{
				audioElement = document.createElement('audio');
				audioElement.setAttribute("preload", "auto");
				var srcmp3 = document.createElement('source');
				srcmp3.type = 'audio/mpeg';
				srcmp3.src = fnp + '.mp3';
				audioElement.appendChild(srcmp3);
				var srcogg = document.createElement('source');
				srcogg.type = 'audio/ogg';
				srcogg.src = fnp + '.ogg';
				audioElement.appendChild(srcogg);
				var srcm4a = document.createElement('source');
				srcm4a.type = 'audio/mp4';
				srcm4a.src = fnp + '.m4a';
				audioElement.appendChild(srcm4a);
				var srcwav = document.createElement('source');
				srcwav.type = 'audio/wav';
				srcwav.src = fnp + '.wav';
				audioElement.appendChild(srcwav);
				document.body.appendChild(audioElement);
				audioElement.load();
				try {
					audioElement.play();
					audioElement.addEventListener('ended', function() {
						audioElement.parentNode.removeChild(audioElement);
						audioElement = null;
					});
					v = true;
				}
				catch(e) {}
		}}}
		return(v)
	}
}

class MyAudioStream is AudioStream
{
	prop audioStream as ptr

	func initialize(id as string) static as this
	{
		var fnp #used = id
		var audioElement as ptr #used
		lang "js" {{{
				audioElement = document.createElement('audio');
				audioElement.setAttribute("preload", "auto");
				var srcmp3 = document.createElement('source');
				srcmp3.type = 'audio/mpeg';
				srcmp3.src = fnp + '.mp3';
				audioElement.appendChild(srcmp3);
				var srcogg = document.createElement('source');
				srcogg.type = 'audio/ogg';
				srcogg.src = fnp + '.ogg';
				audioElement.appendChild(srcogg);
				var srcm4a = document.createElement('source');
				srcm4a.type = 'audio/mp4';
				srcm4a.src = fnp + '.m4a';
				audioElement.appendChild(srcm4a);
				var srcwav = document.createElement('source');
				srcwav.type = 'audio/wav';
				srcwav.src = fnp + '.wav';
				audioElement.appendChild(srcwav);
				document.body.appendChild(audioElement);
				audioElement.load();
		}}}
		return(new this().setAudioStream(audioElement))
	}

	func play as bool
	{
		var audioStream = this.audioStream
		if(audioStream != null) {
			lang "js" {{{
				audioStream.play();
			}}}
			return(true)
		}
		return(false)
	}

	func pause as bool
	{
		var audioStream = this.audioStream
		if(audioStream != null) {
			lang "js" {{{
				audioStream.pause();
			}}}
			return(true)
		}
		return(false)
	}

	func stop as bool
	{
		var audioStream = this.audioStream
		if(audioStream != null) {
			lang "js" {{{
				audioStream.pause();
				audioStream.currentTime = 0;
			}}}
			return(true)
		}
		return(false)
	}

	func seek(sec as int) as bool
	{
		var audioStream = this.audioStream
		if(sec >= 0 && audioStream != null) {
			lang "js" {{{
				audioStream.currentTime = sec;
			}}}
			return(true)
		}
		return(false)
	}

	func getCurrentTime as int
	{
		var ct as int
		var audioStream = this.audioStream
		if(audioStream != null) {
			lang "js" {{{
				ct = audioStream.currentTime;
			}}}
		}
		return(ct)
	}

	func getDuration as int
	{
		var d as double
		var audioStream = this.audioStream
		if(audioStream != null) {
			lang "js" {{{
				d = audioStream.duration;
			}}}
		}
		return(d as int)
	}

	func setLooping(v as bool) as bool
	{
		var audioStream = this.audioStream
		var shouldLoop = false
		if(v != null && audioStream != null) {
			if(v) {
				lang "js" {{{
					audioStream.loop = true;
				}}}
				shouldLoop = true
			}
			else {
				lang "js" {{{
					audioStream.loop = false;
				}}}
				shouldLoop = false
			}
		}
		return(shouldLoop)
	}

	func setVolume(v as double) as bool
	{
		var audioStream = this.audioStream
		if(v != null && audioStream != null) {
			if(v <= 0.0) {
				lang "js" {{{
					audioStream.volume = 0.0;
				}}}
			}
			else if(v >= 1.0) {
				lang "js" {{{
					audioStream.volume = 1.0;
				}}}
			}
			else {
				lang "js" {{{
					audioStream.volume = v;
				}}}
			}
			return(true)
		}
		return(false)
	}
}

func forApplication(context as ApplicationContext) static as this
{
	if(context == null) {
		return(null)
	}
	var v = new this()
	v.setContext(context)
	return(v)
}

prop context as ApplicationContext

func getClipForResource(id as string) override as AudioClip
{
	var v = new MyAudioClip()
	v.setId(id)
	return(v)
}

func getStreamForResource(id as string) override as AudioStream
{
	return(MyAudioStream.initialize(id))
}
