
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is MarkupLanguageParser:

func forString(string as string) static as this
{
	assert string
	var v = new this()
	v.it = CharacterIteratorForString.forString(string)
	return v
}

func parseAsVectorObject(xml as string, ignoreWhiteSpace as bool = true) static as DynamicVector
{
	var root as DynamicVector
	var stack = new Stack<DynamicMap>()
	var pp = forString(xml)
	pp.setIgnoreWhiteSpace(ignoreWhiteSpace)
	loop {
		var o = pp.next()
		if o == null:
			break
		if o is MarkupLanguageParser.StartElement {
			var name = (o as! MarkupLanguageParser.StartElement).getName()
			if name == "?xml":
				continue
			var nn = new DynamicMap()
			nn.setString("name", name)
			nn.setObject("attributes", (o as! MarkupLanguageParser.StartElement).getParams())
			if stack.isEmpty() {
				stack.push(nn)
			}
			else {
				var current = stack.peek()
				var children = current.getDynamicVector("children")
				if children == null {
					children = new DynamicVector()
					current.setObject("children", children)
				}
				children.appendObject(nn)
				stack.push(nn)
			}
		}
		else if o is MarkupLanguageParser.EndElement {
			var e = stack.pop()
			if stack.isEmpty() {
				if root == null:
					root = new DynamicVector()
				root.appendObject(e)
			}
		}
		else if o is MarkupLanguageParser.TextData {
			var current = stack.peek()
			if current {
				var children = current.getDynamicVector("children")
				if children == null {
					children = new DynamicVector()
					current.setObject("children", children)
				}
				children.appendObject((o as! MarkupLanguageParser.TextData).getData())
			}
		}
	}
	return root
}

var emptyTags as StringSet

func isSelfClosing(tag as string) override as bool
{
	if emptyTags == null {
		emptyTags = new StringSet()
		emptyTags.add("!doctype")
		emptyTags.add("area")
		emptyTags.add("base")
		emptyTags.add("br")
		emptyTags.add("col")
		emptyTags.add("embed")
		emptyTags.add("hr")
		emptyTags.add("img")
		emptyTags.add("input")
		emptyTags.add("link")
		emptyTags.add("meta")
		emptyTags.add("param")
		emptyTags.add("source")
		emptyTags.add("track")
		emptyTags.add("wbr")
	}
	return emptyTags.contains(tag)
}
