
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is HTTPServerRequestHandlerAdapter:

var getHandlerFunctions as map<string,function<void,HTTPServerRequest>>
var postHandlerFunctions as map<string,function<void,HTTPServerRequest>>
var putHandlerFunctions as map<string,function<void,HTTPServerRequest>>
var deleteHandlerFunctions as map<string,function<void,HTTPServerRequest>>
var patchHandlerFunctions as map<string,function<void,HTTPServerRequest>>
var childObjects as map<string,HTTPServerRequestHandler>

func initialize(server as HTTPServerBase) override
{
	base.initialize(server)
	var it as Iterator<HTTPServerRequestHandler> #force = Map.iterateValues(childObjects)
	loop {
		var child = it.next()
		if child == null:
			break
		if child is HTTPServerComponent:
			(child as! HTTPServerComponent).initialize(server)
	}
}

func onMaintenance override
{
	base.onMaintenance()
	var it as Iterator<HTTPServerRequestHandler> #force = Map.iterateValues(childObjects)
	loop {
		var child = it.next()
		if child == null:
			break
		if child is HTTPServerComponent:
			(child as! HTTPServerComponent).onMaintenance()
	}
}

func onRefresh override
{
	base.onRefresh()
	var it as Iterator<HTTPServerRequestHandler> #force = Map.iterateValues(childObjects)
	loop {
		var child = it.next()
		if child == null:
			break
		if child is HTTPServerComponent:
			(child as! HTTPServerComponent).onRefresh()
	}
}

func cleanup override
{
	base.cleanup()
	var it as Iterator<HTTPServerRequestHandler> #force = Map.iterateValues(childObjects)
	loop {
		var child = it.next()
		if child == null:
			break
		if child is HTTPServerComponent:
			(child as! HTTPServerComponent).cleanup()
	}
}

func onHTTPMethod(req as HTTPServerRequest, functions as map<string,function<void,HTTPServerRequest>>) as bool
{
	var rsc = req.peekResource()
	if not rsc:
		rsc = ""
	var handler as function<void,HTTPServerRequest>
	var rsccount = req.getRemainingResourceCount()
	var pop = true
	if rsccount < 1 {
		handler = Map.get(functions, rsc)
		if not handler {
			handler = Map.get(functions, "*")
			if handler:
				pop = false
		}
	}
	else if rsccount == 1 {
		handler = Map.get(functions, rsc .. "/*")
		if not handler:
			handler = Map.get(functions, rsc .. "/**")
	}
	else {
		handler = Map.get(functions, rsc .. "/**")
	}
	if handler {
		if pop:
			req.popResource()
		handler(req)
		return true
	}
	return false
}

func onGET(req as HTTPServerRequest) override as bool:
	return onHTTPMethod(req, getHandlerFunctions)

func onPOST(req as HTTPServerRequest) override as bool:
	return onHTTPMethod(req, postHandlerFunctions)

func onPUT(req as HTTPServerRequest) override as bool:
	return onHTTPMethod(req, putHandlerFunctions)

func onDELETE(req as HTTPServerRequest) override as bool:
	return onHTTPMethod(req, deleteHandlerFunctions)

func onPATCH(req as HTTPServerRequest) override as bool:
	return onHTTPMethod(req, patchHandlerFunctions)

func tryHandleRequest(req as HTTPServerRequest) as bool
{
	var v = false
	if not req {
		;
	}
	else if req.isGET() {
		v = onGET(req)
	}
	else if req.isPOST() {
		v = onPOST(req)
	}
	else if req.isPUT() {
		v = onPUT(req)
	}
	else if req.isDELETE() {
		v = onDELETE(req)
	}
	else if req.isPATCH() {
		v = onPATCH(req)
	}
	return v
}

func handleRequest(req as HTTPServerRequest, next as function) override
{
	if tryHandleRequest(req):
		return
	var rsc = req.peekResource()
	if not rsc:
		rsc = ""
	var sub = Map.get(childObjects, rsc)
	if not sub:
		sub = Map.get(childObjects, "*")
	if not sub:
		sub = Map.get(childObjects, rsc .. "/**")
	if sub {
		req.popResource()
		sub.handleRequest(req, next)
		return
	}
	next()
	return
}

func child(path as string, handler as HTTPServerRequestHandler) as this
{
	if path {
		if not childObjects:
			childObjects = new map<string,HTTPServerRequestHandler>
		childObjects[path] = handler
		if handler && handler is HTTPServerComponent && isInitialized():
			(handler as! HTTPServerComponent).initialize(getServer())
	}
	return this
}

macro IMPLEMENT_ADD_HANDLER_FUNCTION(map, path, handler)
{
	if path {
		if not map:
			map = new map<string,function<void,HTTPServerRequest>>
		map[path] = handler
	}
	return this
}

func get(path as string, handler as function<void,HTTPServerRequest>) as this:
	IMPLEMENT_ADD_HANDLER_FUNCTION(getHandlerFunctions, path, handler)

func post(path as string, handler as function<void,HTTPServerRequest>) as this:
	IMPLEMENT_ADD_HANDLER_FUNCTION(postHandlerFunctions, path, handler)

func put(path as string, handler as function<void,HTTPServerRequest>) as this:
	IMPLEMENT_ADD_HANDLER_FUNCTION(putHandlerFunctions, path, handler)

func delete(path as string, handler as function<void,HTTPServerRequest>) as this:
	IMPLEMENT_ADD_HANDLER_FUNCTION(deleteHandlerFunctions, path, handler)

func patch(path as string, handler as function<void,HTTPServerRequest>) as this:
	IMPLEMENT_ADD_HANDLER_FUNCTION(patchHandlerFunctions, path, handler)

func getOrPost(path as string, handler as function<void,HTTPServerRequest>) as this
{
	get(path, handler)
	post(path, handler)
	return this
}
