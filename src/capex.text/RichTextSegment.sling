
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

prop text as string
prop bold as bool
prop italic as bool
prop underline as bool
prop color as string
prop link as string
prop reference as string
prop isInline = false
prop linkPopup = false

func addMarkupModifiers(sb as StringBuilder)
{
	if(bold) {
		sb.append("**")
	}
	if(italic) {
		sb.append("''")
	}
	if(underline) {
		sb.append("__")
	}
}

func toMarkup as string
{
	var sb = new StringBuilder()
	addMarkupModifiers(sb)
	if(String.isEmpty(link) == false) {
		sb.append('[')
		if(isInline) {
			sb.append('>')
		}
		sb.append(link)
		if(String.isEmpty(text) ==  false) {
			sb.append('|')
			sb.append(text)
		}
		sb.append(']')
	}
	else if(String.isEmpty(reference) ==  false) {
		sb.append('{')
		if(isInline) {
			sb.append('>')
		}
		sb.append(reference)
		if(String.isEmpty(text) == false) {
			sb.append('|')
			sb.append(text)
		}
		sb.append('}')
	}
	else {
		sb.append(text)
	}
	addMarkupModifiers(sb)
	return sb.toString()
}

func toJson as DynamicMap
{
	var v = new DynamicMap()
	v.set("text", text)
	if(isInline) {
		v.set("inline", isInline)
	}
	if(bold) {
		v.set("bold", bold)
	}
	if(italic) {
		v.set("italic", italic)
	}
	if(underline) {
		v.set("underline", underline)
	}
	if(String.isEmpty(color) == false) {
		v.set("color", color)
	}
	if(String.isEmpty(link) == false) {
		v.set("link", link)
	}
	if(String.isEmpty(reference) == false) {
		v.set("reference", reference)
	}
	return v
}

func toHtml(refs as RichTextDocumentReferenceResolver) as string
{
	var sb = new StringBuilder()
	var aOpen = false
	var text = getText()
	var link = getLink()
	if String.isEmpty(link) == false {
		if getIsInline() {
			// FIXME: Should allow other content types as well, not just images
			sb.append("<img src=\"" .. HTMLString.sanitize(link) .. "\" />")
		}
		else {
			var targetblank = ""
			if getLinkPopup():
				targetblank = " target=\"_blank\""
			sb.append("<a" .. targetblank .. " class=\"urlLink\" href=\"" .. HTMLString.sanitize(link) .. "\">")
			aOpen = true
		}
	}
	if String.isEmpty(getReference()) == false {
		var ref = getReference()
		var href as string
		if refs {
			href = refs.getReferenceHref(ref)
			if String.isEmpty(text):
				text = refs.getReferenceTitle(ref)
		}
		if String.isEmpty(href) == false {
			if String.isEmpty(text):
				text = ref
			sb.append("<a class=\"referenceLink\" href=\"" .. HTMLString.sanitize(href) .. "\">")
			aOpen = true
		}
	}
	if getIsInline() == false {
		if getBold():
			sb.append("<b>")
		if getItalic():
			sb.append("<i>")
		if getUnderline():
			sb.append("<u>")
		if String.isEmpty(getColor()) == false:
			sb.append("<span style=\"color: " .. HTMLString.sanitize(getColor()) .. ";\">")
		sb.append(HTMLString.sanitize(text))
		if String.isEmpty(getColor()) == false:
			sb.append("</span>")
		if getUnderline():
			sb.append("</u>")
		if getItalic():
			sb.append("</i>")
		if getBold():
			sb.append("</b>")
	}
	if aOpen:
		sb.append("</a>")
	return sb.toString()
}
