
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs

class is ZipWriter:

func forFile(file as File) static as this
{
	assert file
	var path = file.getPath()
	assert String.isNotEmpty(path)
	var zip = assert lang "lua" object {{{ _zip:write_open(path) }}}
	var v = new this()
	v.setZip(zip)
	return v
}

pvar zip as object

func addFile(file as File, filename as string) override as bool
{
	var zip = assert this.zip
	assert file
	assert String.isNotEmpty(filename)
	var v = false
	var ts = file.getLastModifiedTimeStamp()
	var attribs = 0
	var mode = 0
	var info = file.stat()
	if info:
		mode = info.getMode()
	var large = 0
	if info.getSize() > 0xffffffff:
		large = 1
	assert lang "lua" bool {{{ _zip:write_start_file(zip, filename, ts, mode, large) }}}
	if file.isDirectory() {
		v = true
	}
	else {
		var rd = file.read()
		if rd {
			v = true
			var bb = malloc 32 * 1024
			loop {
				var sz = rd.read(bb)
				if sz < 1:
					break
				if not lang "lua" bool {{{ _zip:write_to_file(zip, bb, sz) }}} {
					v = false
					break
				}
			}
			rd.close()
		}
	}
	lang "lua" {{{
		_zip:write_end_file(zip)
	}}}
	return v
}

func close override
{
	var zz = zip
	if zz {
		lang "lua" {{{
			_zip:write_close(zz)
		}}}
		zip = null
	}
}
