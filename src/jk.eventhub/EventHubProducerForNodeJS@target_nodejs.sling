
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.lang
import jk.json
import jk.nodejs

class is EventHubProducer:

depend "npm:@azure/event-hubs:5.2"

var producer as dynamic

func initialize(eventHubName  as string, connectionString as string) override
{
	var api = NodeModule.require("@azure/event-hubs")
	var producer  = api.EventHubProducerClient
	lang "js" {{{
		this.producer = new producer(connectionString, eventHubName)
	}}}
}

func sendEvents(events as Event[]) async override
{
	var batch = await producer.createBatch()
	foreach e in events {
		var ee = JSONEncoder.toString(e)
		lang "js" {{{
			var parse = JSON.parse(ee)
			var buff = Buffer.from(parse.body, 'base64')
			parse.body = buff
			batch.tryAdd(parse)
		}}}
	}
	await producer.sendBatch(batch)
	await producer.close()
}
