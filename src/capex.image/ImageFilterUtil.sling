
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func clamp(v as double) static as int
{
	if(v > 255) {
		return 255
	}
	if(v < 0) {
		return 0
	}
	return v as int
}

func getSafeByte(p as buffer, sz as int, idx as int) static as int
{
	var i = idx
	if(i >= sz) {
		i = sz-1
	}
	else if(i < 0) {
		i = 0
	}
	IFDEF("target_java") {
		return Buffer.getByte(p, i) & 0xff
	}
	ELSE {
		return Buffer.getByte(p, i)
	}
}

func createForArrayFilter(bmpbuf as BitmapBuffer,filterArray as double[], fw as int, fh as int, factor as double = 1.0, bias as double = 1.0) static as BitmapBuffer
{
	var srcbuf = bmpbuf.getBuffer()
	var w = bmpbuf.getWidth()
	var h = bmpbuf.getHeight()
	if(w < 1 || h < 1) {
		return null
	}
	var desbuf = MALLOC(w*h*4)
	var x as int
	var y as int
	var srcptr = srcbuf
	var desptr = desbuf
	var sz as int = Buffer.getSize(srcbuf)
	for(x = 0; x < w; x++) {
		for(y = 0; y < h; y++) {
			var sr = 0.0
			var sg = 0.0
			var sb = 0.0
			var sa = 0.0
			var fx as int
			var fy as int
			for(fy = 0; fy < fh; fy++) {
				for(fx = 0; fx < fw; fx++) {
					var ix = (x - fw/2 + fx)
					var iy = (y - fh/2 + fy)
					sr += getSafeByte(srcptr, sz, (iy*w+ix)*4+0) * filterArray[fy*fw+fx]
					sg += getSafeByte(srcptr, sz, (iy*w+ix)*4+1) * filterArray[fy*fw+fx]
					sb += getSafeByte(srcptr, sz, (iy*w+ix)*4+2) * filterArray[fy*fw+fx]
					sa += getSafeByte(srcptr, sz, (iy*w+ix)*4+3) * filterArray[fy*fw+fx]
				}
			}
			Buffer.setByte(desptr,(y*w+x)*4+0, clamp(factor * sr + bias))
			Buffer.setByte(desptr,(y*w+x)*4+1, clamp(factor * sg + bias))
			Buffer.setByte(desptr,(y*w+x)*4+2, clamp(factor * sb + bias))
			Buffer.setByte(desptr,(y*w+x)*4+3, clamp(factor * sa + bias))
		}
	}
	return BitmapBuffer.create(desbuf, w, h)
}
