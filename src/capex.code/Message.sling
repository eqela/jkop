
/*
 * This file is part of Jkop
 * Copyright (c) 2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is JSONObject abstract:

prop message as string
prop reference as SourceReference
prop relatedMessages as vector<this>

func formatToken(token as string) as string
{
	assert token
	if token == "\n":
		return "<NL>"
	if token == "\r":
		return "<CR>"
	return token
}

func toJsonObject as object
{
	var v = new DynamicMap()
	v.set("type", getType())
	v.set("message", message)
	if reference {
		var rv = new DynamicMap()
		rv.set("sourceName", reference.getSourceName())
		rv.set("sourceToken", formatToken(reference.getSourceToken()))
		rv.set("sourceLineNumber", reference.getSourceLineNumber())
		rv.set("sourceColumnNumber", reference.getSourceColumnNumber())
		rv.set("sourceContentLine", reference.getSourceContentLine())
		rv.set("nodeTrace", reference.getNodeTrace())
		v.set("reference", rv)
	}
	var rms as DynamicVector
	foreach related in relatedMessages {
		var r = related.toJsonObject()
		if not r:
			continue
		if rms == null:
			rms = new DynamicVector()
		rms.append(r)
	}
	if rms:
		v.set("relatedMessages", rms)
	return v
}

func fromJsonObject(o as object) as bool:
	return false

func getType abstract as string

func addRelatedMessage(message as this)
{
	assert message
	if relatedMessages == null:
		relatedMessages = new vector<this>
	relatedMessages += message
}

func copyFrom(msg as this)
{
	assert msg
	setReference(msg.getReference())
	setMessage(msg.getMessage())
}

func getMessageString virtual as string:
	return message

func toString(isDebug as bool) virtual as string
{
	var mm = getMessageString()
	if mm == null:
		return null
	var sb = new StringBuilder()
	if reference == null {
		sb.append(mm)
	}
	else {
		var line = reference.getSourceLineNumber()
		var col = reference.getSourceColumnNumber()
		var name = reference.getSourceName()
		if String.isEmpty(name):
			name = "<unknown>"
		var token = reference.getSourceToken()
		if token {
			if token == "\n" {
				token = "<NL>"
			}
			else if token == "\r" {
				token = "<CR>"
			}
			else if token == "\t" {
				token = "<TAB>"
			}
			else if token == "\f" {
				token = "<FF>"
			}
			else if String.indexOf(token, '\n') >= 0 {
				token = "<multi-line-token>"
			}
		}
		sb.append(name)
		if line >= 0 {
			sb.append(':')
			sb.append(line+1)
			if col >= 0 {
				sb.append(':')
				sb.append(col+1)
			}
		}
		if String.isEmpty(token) == false {
			sb.append(" (`")
			sb.append(token)
			sb.append("')")
		}
		sb.append(": ")
		sb.append(mm)
		var cl = reference.getSourceContentLine()
		if cl != null {
			sb.append('\n')
			var it = String.iterate(cl)
			var c as char
			while((c = it.getNextChar()) > 0) {
				if c == '\t' {
					sb.append(' ')
				}
				else {
					sb.append(c)
				}
			}
			if col >= 0 {
				sb.append('\n')
				var n = 0
				for(n=0; n<col; n++):
					sb.append(' ')
				sb.append('^')
			}
		}
		else {
			sb.append("\n\t(no reference content)\n")
		}
		if isDebug {
			var trace = reference.getNodeTrace()
			if String.isNotEmpty(trace) {
				if String.startsWith(trace, "\n") == false:
					sb.append('\n')
				sb.append(trace)
				if String.endsWith(trace, "\n") == false:
					sb.append('\n')
			}
		}
	}
	var rms = false
	foreach relatedMessage in relatedMessages {
		var rmts = relatedMessage.toString(isDebug)
		if String.isEmpty(rmts):
			continue
		foreach line in String.split(rmts, '\n') {
			sb.append("\n  => ")
			sb.append(line)
		}
		rms = true
	}
	if rms:
		sb.append('\n')
	return sb.toString()
}
