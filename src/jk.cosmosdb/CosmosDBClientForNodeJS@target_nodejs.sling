
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.lang
import jk.json
import jk.nodejs

class is CosmosDBClient:

depend "npm:@azure/cosmos:3.17.1"

var cosmosClient as dynamic

func initialize(endpoint as string, key as string) override
{
	var api = NodeModule.require("@azure/cosmos")
	var client = api.CosmosClient
	lang "js" {{{
		this.cosmosClient = new client({
			endpoint: endpoint,
			key: key
		})
	}}}
}

func convertResponse(response as dynamic) private as DynamicMap
{
	var responseValue as DynamicMap
	var responseBody as string
	lang "js" {{{
		const getCircularReplacer = () => {
			const seen = new WeakSet();
			return (key, value) => {
				if (typeof value === "object" && value !== null) {
					if (seen.has(value)) {
						return;
					}
					seen.add(value);
				}
				return value;
			};
		};
		responseBody = JSON.stringify(response, getCircularReplacer())
	}}}
	responseValue = JSONParser.parseString(responseBody) as DynamicMap
	return responseValue
}

func createDatabase(databaseName as string) override async
{
	var db = await cosmosClient.databases.createIfNotExists({
		id databaseName
	})
}

func getAllDatabases override async as ResponseList
{
	var db = await cosmosClient.databases.readAll().fetchAll()
	var response = convertResponse(db)
	var list = ResponseList.forData(response)
	return list
}

func getDatabaseById(databaseId as string) override async as Response
{
	var db = await cosmosClient.database(databaseId).read()
	var response = convertResponse(db)
	var database = Response.forData(response)
	return database
}

func deleteDatabaseById(databaseId as string) override async
{
	var db = cosmosClient.database(databaseId)
	await db.delete()
}

func createContainer(containerName as string, databaseId as string) override async
{
	var db = cosmosClient.database(databaseId)
	await db.containers.createIfNotExists({
		id containerName
	})
}

func getAllContainers(databaseId as string) override async as ResponseList
{
	var container = cosmosClient.database(databaseId).containers.readAll()
	var containerList = await container.fetchAll()
	var response = convertResponse(containerList)
	var con = ResponseList.forData(response)
	return con
}

func getContainerById(containerId as string, databaseId as string) override async as Response
{
	var container = await cosmosClient.database(databaseId).container(containerId).read()
	var response = convertResponse(container)
	var con = Response.forData(response)
	return con
}

func deleteContainer(containerId as string, databaseId as string) override async
{
	var container = cosmosClient.database(databaseId).container(containerId)
	await container.delete()
}

func addItem(item as DynamicMap, containerId as string, databaseId as string) override async
{
	var item = JSONEncoder.toString(item)
	var json as dynamic
	lang "js" {{{
		json = JSON.parse(item)
	}}}
	var container = cosmosClient.database(databaseId).container(containerId)
	await container.items.create(json)
}

func getAllItems(containerId as string, databaseId as string) override async as ItemList
{
	var container = cosmosClient.database(databaseId).container(containerId)
	var response = await container.items.readAll().fetchAll()
	var result = convertResponse(response)
	var itemsList = ItemList.forData(result)
	return itemsList
}

func getItemById(itemId as string, containerId as string, databaseId as string) override async as Item
{
	var partitionKey = itemId
	var container = cosmosClient.database(databaseId).container(containerId)
	var item = await container.item(itemId, partitionKey).read()
	var result = convertResponse(item)
	var response = Item.forData(result)
	return response
}

func updateItem(newItem as DynamicMap, containerId as string, databaseId as string) override async
{
	var item = JSONEncoder.toString(newItem)
	var json as dynamic
	lang "js" {{{
		json = JSON.parse(item)
	}}}
	var container = cosmosClient.database(databaseId).container(containerId)
	await container.items.upsert(json)
}

func deleteItemById(itemId as string, containerId as string, databaseId as string) override async
{
	var partitionKey = itemId
	var container = cosmosClient.database(databaseId).container(containerId)
	var item = container.item(itemId, partitionKey)
	try {
		await item.delete()
	}
	catch e {
	}
}
