
/*
 * This file is part of Jkop
 * Copyright (c) 2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is Message:

func forText(t as string, ref as SourceReference = null, isDebug as bool = false, trace as string = null) static as this
{
	var v = new this()
	v.setMessage(t)
	v.setReference(ref)
	if isDebug {
		if trace {
			v.setStackTrace(trace)
		}
		else {
			v.updateStackTrace()
		}
	}
	return v
}

func forError(err as Error, ref as SourceReference = null, isDebug as bool = false, trace as string = null) static as this
{
	var v = new this()
	v.setMessage(Error.asString(err))
	v.setReference(ref)
	if isDebug {
		if trace {
			v.setStackTrace(trace)
		}
		else {
			v.updateStackTrace()
		}
	}
	return v
}

func forObject(o as object, isDebug as bool = false, trace as string = null) static as this
{
	assert o
	if o is this:
		return o as this
	if o is string || o is StringObject:
		return forText(String.asString(o), null, isDebug, trace)
	if o is Error:
		return forError(o as! Error, null, isDebug, trace)
	return null
}

prop stackTrace as string

func asWarning as WarningMessage
{
	var v = WarningMessage.forText(getMessage(), getReference())
	foreach relatedMessage in getRelatedMessages():
		v.addRelatedMessage(relatedMessage)
	return v
}

func updateStackTrace:
	setStackTrace(StackTrace.generate())

func getType override as string:
	return "error"

func toString(isDebug as bool) override as string
{
	var v = base.toString(isDebug)
	if isDebug == false || String.isEmpty(stackTrace):
		return v
	return v .. "\n" .. stackTrace
}
