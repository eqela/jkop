
/*
 * This file bt part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission bt hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software bt
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class imports cape:

func colorToRGBA(color as Color) static as string
{
	assert color
	return color.toHtmlRgbaString()
}

func isBrowser(id as string) static as bool
{
	var v = false
	lang "js" {{{
		v = navigator.userAgent.toLowerCase().indexOf(id) > -1;
	}}}
	return v
}

func isInternetExplorer static as bool:
	return isBrowser("msie ") || isBrowser("trident/")

func isWebKit static as bool:
	return isBrowser("webkit")

func isFirefox static as bool:
	return isBrowser("firefox")

func isMobile static as bool:
	return isBrowser("mobile")

func isChrome static as bool:
	return isBrowser("chrome")

func isEdge static as bool:
	return isBrowser("edge")

func isSafari static as bool:
	return isBrowser("safari") && not isBrowser("chrome")

func createElement(type as string) static as object:
	return lang "js" object {{{ document.createElement(type) }}}

func getDocument static as object:
	return lang "js" object {{{ document }}}

func getDocumentBody static as object:
	return getElementsByTagName(getDocument(), "body")[0]

func getDocumentHead static as object:
	return getElementsByTagName(getDocument(), "head")[0]

func getParentElement(element as object) static as object
{
	assert element
	return lang "js" object {{{ element.parentElement }}}
}

func getElementById(id as string) static as object:
	return getElementById(getDocument(), id)

func getElementById(element as object, id as string) static as object
{
	assert element
	assert id
	return lang "js" object {{{ element.getElementById(id) }}}
}

func getElementsByClassName(element as object, classname as string) static as array
{
	assert element
	assert classname
	return lang "js" array {{{ element.getElementsByClassName(classname) }}}
}

func getElementsByTagName(element as object, tagname as string) static as array
{
	assert element
	assert tagname
	return lang "js" array {{{ element.getElementsByTagName(tagname) }}}
}

func appendChild(element as object, child as object) static
{
	assert element
	assert child
	lang "js" {{{
		element.appendChild(child);
	}}}
}

func appendToBody(element as object) static:
	appendChild(getDocumentBody(), element)

func remove(element as object) static
{
	assert element
	var parent = assert getParentElement(element)
	lang "js" {{{
		parent.removeChild(element);
	}}}
}

func getFirstChild(element as object) static as object
{
	assert element
	return lang "js" object {{{ element.firstChild }}}
}

func getChild(element as object, index as int) static as object
{
	assert element
	return lang "js" object {{{ element.childNodes[index] }}}
}

func getAttribute(element as object, attr as string) static as string
{
	assert element
	assert String.isNotEmpty(attr)
	return lang "js" string {{{ element.getAttribute(attr) }}}
}

func setAttribute(element as object, attr as string, val as string) static
{
	assert element
	assert attr
	if val == null {
		lang "js" {{{
			element.removeAttribute(attr);
		}}}
	}
	else {
		lang "js" {{{
			element.setAttribute(attr, val);
		}}}
	}
}

func getInnerHTML(element as object) static as string
{
	assert element
	return lang "js" string {{{ element.innerHTML }}}
}

func setInnerHTML(element as object, text as string) static
{
	assert element
	lang "js" {{{
		element.innerHTML = text;
	}}}
}

func setValue(element as object, val as string)
{
	assert element
	lang "js" {{{
		element.value = val;
	}}}
}

func getValue(element as object) static as string
{
	assert element
	return lang "js" string {{{ element.value }}}
}

func setStyle(element as object, key as string, val as string) static
{
	assert element
	assert String.isNotEmpty(key)
	var v = val
	if String.isEmpty(val):
		v = ""
	lang "js" {{{
		element.style[key] = v;
	}}}
}

func getStyle(element as object, key as string) static as string
{
	assert element
	assert String.isNotEmpty(key)
	return lang "js" string {{{ element.style[key] }}}
}

func removeStyle(element as object, key as string) static
{
	assert element
	assert String.isNotEmpty(key)
	lang "js" {{{
		element.style[key] = null;
	}}}
}

func addEventListener(element as object, event as string, listener as function) static
{
	assert element
	assert String.isNotEmpty(event)
	assert listener
	lang "js" {{{
		element.addEventListener(event, listener);
	}}}
}

func getClassList(element as object) static as string
{
	assert element
	return lang "js" string {{{ element.classList }}}
}

func addToClassList(element as object, xclass as string) static
{
	assert element
	assert xclass
	lang "js" {{{
		element.classList.add(xclass);
	}}}
}

func removeFromClassList(element as object, xclass as string) static
{
	assert element
	assert xclass
	lang "js" {{{
		element.classList.remove(xclass);
	}}}
}

func setFocus(element as object) static
{
	assert element
	lang "js" {{{
		element.focus();
	}}}
}

func createTextNode(text as string) static as object
{
	assert text
	return lang "js" object {{{ document.createTextNode(text) }}}
}

func doesBrowserSupportFontLoading static as bool
{
	var v = false
	lang "js" {{{
		if(document["fonts"]) {
			v = true;
		}
	}}}
	return v
}

func setFontFamily(element as object, fontFamily as string) static
{
	assert element
	assert fontFamily
	if doesBrowserSupportFontLoading() || isFontStandard(fontFamily):
		setStyle(element, "font-family", fontFamily)
}

func isFontStandard(fontFamily as string) static as bool
{
	if fontFamily == "Arial" || fontFamily == "Times New Roman" || fontFamily == "serif" || fontFamily == "sans-serif" || fontFamily == "Helvetica" || fontFamily == "Courier New" || fontFamily == "Courier" || fontFamily == "monospace" || fontFamily == "Verdana":
		return true
	return false
}
