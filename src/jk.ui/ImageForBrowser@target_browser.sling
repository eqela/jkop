
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.base64

class is Image:

var image public as object

func getSource as string
{
	if image:
		return lang "js" string {{{ this.image.src }}}
	return null
}

func getPixelWidth override as int
{
	if image == null:
		return 0
	return lang "js" int {{{ this.image.width }}}
}

func getPixelHeight override as int
{
	if image == null:
		return 0
	return lang "js" int {{{ this.image.height }}}
}

func scaleToSize(w as int, h as int) override as Image
{
	assert image
	return createImage(getScaleImageSrc(w, h))
}

func scaleToSize(w as int, h as int, callback as function<void, Image>) override
{
	assert callback
	assert image:
		callback(null)
	createImage(getScaleImageSrc(w, h), callback)
}

func getScaleImageSrc(w as int, h as int, mimetype as string = null) private as string
{
	var src as string
	lang "js" {{{
		var cnv = document.createElement("canvas");
		cnv.width = w;
		cnv.height = h;
		var ctx = cnv.getContext("2d");
		ctx.save();
		try {
			ctx.drawImage(this.image, 0, 0, w, h);
		}
		catch(err) {
			return(null);
		}
		ctx.restore();
		if(mimetype != null) {
			src = cnv.toDataURL(mimetype);
		}
		else {
			src = cnv.toDataURL();
		}
	}}}
	return src
}

func scaleToWidth(w as int) override as Image:
	return scaleToSize(w, getProportionalHeight(w))

func scaleToWidth(w as int, callback as function<void, Image>) override
{
	assert callback
	scaleToSize(w, getProportionalHeight(w), callback)
}

func scaleToHeight(h as int) override as Image:
	return scaleToSize(getProportionalWidth(h), h)

func scaleToHeight(h as int, callback as function<void, Image>) override
{
	assert callback
	scaleToSize(getProportionalWidth(h), h, callback)
}

func crop(x as int, y as int, w as int, h as int) override as Image
{
	assert image
	return createImage(getCropImageSrc(x, y, w, h))
}

func crop(x as int, y as int, w as int, h as int, callback as function<void, Image>) override
{
	assert callback
	assert image:
		callback(null)
	createImage(getCropImageSrc(x, y, w, h), callback)
}

func getCropImageSrc(x as int, y as int, w as int, h as int) private as string
{
	var src as string
	lang "js" {{{
		var cnv = document.createElement("canvas");
		cnv.width = w;
		cnv.height = h;
		var ctx = cnv.getContext("2d");
		ctx.save();
		try {
			ctx.drawImage(this.image, x, y, w, h, 0, 0, w, h);
		}
		catch(err) {
			return(null);
		}
		ctx.restore();
		src = cnv.toDataURL();
	}}}
	return src
}

func createImage(src as string) private as this
{
	assert String.isNotEmpty(src)
	var imo as object
	lang "js" {{{
		imo = new Image();
		imo.src = src;
	}}}
	var img = new this()
	img.image = imo
	return img
}

func createImage(src as string, callback as function<void, Image>) private
{
	assert String.isNotEmpty(src):
		callback(null)
	lang "js" {{{
		var imo = new Image();
		imo.onload = function() {
			var img = CaveImageForBrowser.NEW();
			img.image = imo;
			callback(img);
		};
		imo.onerror = function() {
			callback(null);
		};
		imo.src = src;
	}}}
}

func toJPGData override as buffer
{
	var source = getSource()
	var jpgData as string
	if String.contains(source, "image/jpeg") {
		jpgData = source
	}
	else {
		jpgData = getScaleImageSrc(getPixelWidth(), getPixelHeight(), "image/jpeg")
	}
	return getBase64Buffer(jpgData)
}

func toPNGData override as buffer
{
	var source = getSource()
	var pngData as string
	if String.contains(source, "image/png") {
		pngData = source
	}
	else {
		pngData = getScaleImageSrc(getPixelWidth(), getPixelHeight(), "image/png")
	}
	return getBase64Buffer(pngData)
}

func toRGBAData override as buffer
{
	ERROR "Not implemented"
	return null
}

func getBase64Buffer(data as string) private as buffer
{
	assert String.isNotEmpty(data)
	var simc = String.getIndexOfString(data, ";base64,")
	assert simc > -1
	var nsrc = String.getEndOfString(data, simc+8)
	assert String.isNotEmpty(nsrc)
	return Base64Decoder.decode(nsrc)
}

func releaseImage override
{
	ERROR "Not implemented"
}
