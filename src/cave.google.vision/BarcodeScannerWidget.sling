
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2017 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is ScreenAwareWidget #widget:

IFDEF "target_android" {
	depend "androidPermission:android.permission.CAMERA"
	depend "gradle:com.google.android.gms:play-services-vision:9.0.0"
	basetype !"android.view.SurfaceView" type extends
	basetype !"android.view.SurfaceHolder.Callback" type implements
	basetype Widget type isAlso

	var barcodeDetector as !"com.google.android.gms.vision.barcode.BarcodeDetector"
	var cameraSource as !"com.google.android.gms.vision.CameraSource"
	var holder as !"android.view.SurfaceHolder"
	var cameraPermissionGranted as bool
	var cameraShown as bool

	func surfaceChanged(holder as !"android.view.SurfaceHolder", format as int, width as int, height as int)
	{
	}

	func surfaceCreated(holder as !"android.view.SurfaceHolder")
	{
		tryCameraPreview()
	}

	func surfaceDestroyed(holder as !"android.view.SurfaceHolder")
	{
		lang "java" {{{
			cameraSource.stop();
		}}}
	}

	func tryCameraPreview
	{
		if cameraPermissionGranted && not cameraShown {
			lang "java" {{{
				try {
					cameraShown = cameraSource.start(holder) != null;
				}
				catch(java.lang.Exception e) {
					System.out.println(e.getMessage());
				}
			}}}
		}
	}

	func onRequestPermission(granted as bool)
	{
		if not granted {
			if widgetContext:
				requestPermission(widgetContext as! AndroidApplicationContext)
		}
		else {
			cameraPermissionGranted = true
			tryCameraPreview()
		}
	}

	func requestPermission(aap as AndroidApplicationContext)
	{
		assert aap
		var perms = new string[] { "android.permission.CAMERA" }
		aap.requestPermissions(perms, onRequestPermission)
	}
}

const FORMAT_ALL = 0
const FORMAT_QRCODE = 1
const FOTMAT_EAN13 = 2
const FORMAT_UPCA = 3

prop widgetOnBarcodesDetectedHandler as function
prop format = FORMAT_ALL
var detectedBarcodes as vector<BarcodeObject>
var widgetContext as GuiApplicationContext

ctor(ctx as GuiApplicationContext)
{
	IFDEF "target_android" {
		base((ctx as! cave.GuiApplicationContextForAndroid).getActivityContext())
		requestPermission(ctx as! AndroidApplicationContext)
		lang "java" {{{
			holder = getHolder();
			holder.addCallback(this);
		}}}
	}
	widgetContext = ctx
}

dtor
{
	IFDEF "target_android" {
		lang "java" {{{
			if(cameraSource != null) {
				cameraSource.release();
			}
			if(barcodeDetector != null) {
				barcodeDetector.release();
			}
			cameraSource = null;
			barcodeDetector = null;
		}}}
	}
}

func onWidgetAddedToScreen(screen as ScreenForWidget)
{
	IFDEF "target_android" {
		var context = (widgetContext as! cave.GuiApplicationContextForAndroid).getActivityContext()
		var thisWidget final #used = this
		lang "java" {{{
			com.google.android.gms.vision.barcode.BarcodeDetector.Builder bdb = new com.google.android.gms.vision.barcode.BarcodeDetector.Builder(context);
			if(format == FORMAT_ALL) {
				bdb.setBarcodeFormats(com.google.android.gms.vision.barcode.Barcode.ALL_FORMATS);
			}
			else if(format == FORMAT_QRCODE) {
				bdb.setBarcodeFormats(com.google.android.gms.vision.barcode.Barcode.QR_CODE);
			}
			else if(format == FOTMAT_EAN13) {
				bdb.setBarcodeFormats(com.google.android.gms.vision.barcode.Barcode.EAN_13);
			}
			else if(format == FORMAT_UPCA) {
				bdb.setBarcodeFormats(com.google.android.gms.vision.barcode.Barcode.UPC_A);
			}
			barcodeDetector = bdb.build();
			cameraSource = new com.google.android.gms.vision.CameraSource.Builder(context, barcodeDetector)
				.setFacing(com.google.android.gms.vision.CameraSource.CAMERA_FACING_BACK)
				.setAutoFocusEnabled(true)
				.build();
			barcodeDetector.setProcessor(new com.google.android.gms.vision.Detector.Processor<com.google.android.gms.vision.barcode.Barcode>() {
				
				@Override
				public void release() {
				}

				@Override
				public void receiveDetections(com.google.android.gms.vision.Detector.Detections<com.google.android.gms.vision.barcode.Barcode> detections) {
					android.util.SparseArray<com.google.android.gms.vision.barcode.Barcode> barcodes = detections.getDetectedItems();
					if(barcodes.size() != 0 && detectedBarcodes == null) {
						final java.util.ArrayList<BarcodeObject> bco = new java.util.ArrayList<BarcodeObject>();
						for(int i = 0; i < barcodes.size(); i ++) {
							com.google.android.gms.vision.barcode.Barcode bc = barcodes.valueAt(i);
							BarcodeObject obj = new BarcodeObject();
							obj.setRawValue(bc.rawValue);
							obj.setDisplayValue(bc.displayValue);
							obj.setFormat(bc.format);
							obj.setValueFormat(bc.valueFormat);
							bco.add(obj);
						}
						thisWidget.post(new java.lang.Runnable() {
							public void run() {
								thisWidget.onReceiveDetection(bco);
							}
						});
					}
				}
			});
		}}}
	}
	ELSE {
		ERROR "Not implemented"
	}
}

func onWidgetRemovedFromScreen(screen as ScreenForWidget)
{
}

func onReceiveDetection(bcobjs as vector<BarcodeObject>) private
{
	assert bcobjs
	detectedBarcodes = bcobjs
	if widgetOnBarcodesDetectedHandler:
		widgetOnBarcodesDetectedHandler()
}

func getDetectedBarcodes as vector<BarcodeObject>:
	return detectedBarcodes
