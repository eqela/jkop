
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is File private:

class MyFileReader is Reader is FileReader
{
	pvar key as string
	var buffReader as BufferReader

	func read(buffer as buffer) as int
	{
		var data as string
		if not buffReader {
			lang "js" {{{
				data = window.localStorage.getItem(this.key);
			}}}
			var buf = String.toUTF8Buffer(data)
			buffReader = BufferReader.forBuffer(buf)
		}
		return buffReader.read(buffer)
	}
}

class MyFileWriter is Writer is FileWriter
{
	pvar key as string
	pvar isAppend as bool
	var buffWriter as BufferWriter

	func write(buf as buffer, size as int) as int
	{
		if not buffWriter:
			buffWriter = new BufferWriter()
		return buffWriter.write(buf, size)
	}

	func close
	{
		assert buffWriter
		lang "js" {{{
			if(this.isAppend == true) {
				var data = window.localStorage.getItem(this.key);
				var buffer = CapeBuffer.append(CapeString.toUTF8Buffer(data), this.buffWriter.getBuffer());
				window.localStorage.setItem(this.key, CapeString.forUTF8Buffer(buffer));
			}
			else {
				window.localStorage.setItem(this.key, this.buffWriter.getBuffer());
			}
		}}}
	}
}

pvar key as string

func forPath(path as string) static as File
{
	var v = new this()
	v.setKey(path)
	lang "js" {{{
		if(typeof(Storage) !== "undefined") {
			return(v);
		}
	}}}
	return null
}

func read override as FileReader
{
	var v = new MyFileReader()
	v.setKey(key)
	return v
}

func write override as FileWriter
{
	var v = new MyFileWriter()
	v.setKey(key)
	return v
}

func append override as FileWriter
{
	var v = new MyFileWriter()
	v.setKey(key)
	v.setIsAppend(true)
	return v
}
