
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.fs

class is SSLSocket:

prop ctx as LoggingContext
prop socket as TCPSocketForSushi
prop serverAddress as string
var acceptInvalidCertificate as bool
var requireClientCertificate = false
var ssl as object

func setAcceptInvalidCertificate(v as bool) override:
	acceptInvalidCertificate = v

func setRequireClientCertificate(v as bool) override:
	requireClientCertificate = v

func open(cSocket as ConnectedSocket, certFile as File = null, keyFile as File = null, isServer as bool = false, passphrase as string = null) as bool
{
	assert socket = cSocket as TCPSocketForSushi
	if isServer:
		return false
	var address = serverAddress
	if String.isEmpty(address):
		address = socket.getRemoteAddress()
	assert String.isNotEmpty(address)
	var port = socket.getRemotePort()
	if port < 1:
		port = 443
	var fd = socket.getFileDescriptor()
	var ssl = lang "lua" object {{{ _crypto:ssl_connect(fd, address) }}}
	if not ssl:
		return false
	this.ssl = ssl
	return true
}

func read(buffer as buffer) override as int:
	return readWithTimeout(buffer, -1)

func close override
{
	if this.ssl {
		var ssl = this.ssl
		this.ssl = null
		lang "lua" {{{
			_crypto:ssl_close(ssl)
		}}}
	}
	if socket != null {
		socket.close()
		socket = null
	}
}

func readWithTimeout(buffer as buffer, timeout as int) override as int
{
	// FIXME: No read with timeout implementation yet.
	var ssl = assert this.ssl
	if not buffer:
		return -1
	var v = lang "lua" int {{{ _crypto:ssl_read(ssl, buffer) }}}
	if v < 1 {
		close()
		v = -1
	}
	return v
}

func write(buffer as buffer, size as int) override as int
{
	var ssl = assert this.ssl
	if not buffer:
		return -1
	var v = lang "lua" int {{{ _crypto:ssl_write(ssl, buffer, size) }}}
	if v < 1 {
		close()
		v = -1
	}
	return v
}

func getSocket override as ConnectedSocket:
	return socket
