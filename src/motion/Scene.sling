
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import cave

class:

var manager protected as SceneManager
var backend protected as Backend
var context protected as GuiApplicationContext

func setContext(value as GuiApplicationContext):
	this.context = value

func setManager(value as SceneManager) as this
{
	manager = value
	return this
}

func getManager as SceneManager:
	return manager

func setBackend(value as Backend) as this
{
	backend = value
	return this
}

func getBackend as Backend:
	return backend

func onPreInitialize(context as GuiApplicationContext) virtual
{
}

func initialize virtual
{
}

func start virtual
{
}

func onKeyEvent(event as KeyEvent) virtual
{
}

func onPointerEvent(event as PointerEvent) virtual
{
}

func tick(gameTime as TimeValue, delta as double) virtual
{
}

func stop virtual
{
}

func cleanup virtual
{
}

func createImageFromResource(name as string) as Image
{
	var v = assert backend.createImageFromResource(name):
		Log.error(context, "Failed to create image from resource: `" .. name .."'")
	return v
}

func createTextureForImageResource(name as string) as Texture
{
	var v = assert backend.createTextureForImageResource(name):
		Log.error(context, "Failed to create image for image resource: `" .. name .."'")
	return v
}

func createTextureForImage(image as Image) as Texture
{
	var v = assert backend.createTextureForImage(image):
		Log.error(context, "Failed to create texture for image")
	return v
}

func createTextureForColor(color as Color) as Texture:
	return backend.createTextureForColor(color)

func deleteTexture(texture as Texture):
	backend.deleteTexture(texture)

func replaceScene(scene as this)
{
	if manager:
		manager.replaceScene(scene)
}

func pushScene(scene as this)
{
	if manager:
		manager.pushScene(scene)
}

func popScene
{
	if manager:
		manager.popScene()
}
