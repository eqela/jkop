
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

import cape
import capex.http
import sympathy

class MyHTTPClientListener is HTTPClientListener
{
	prop authResponseKey as string
	prop listener as function<void, string, Error>
	var body as buffer

	func onError(message as string) override
	{
		if(listener != null) {
			listener(null, Error.forMessage(message))
		}
	}

	func onAborted override
	{
		if(listener != null) {
			listener(null, Error.forCode("aborted"))
		}
	}

	func onDataReceived(buffer as buffer) override as bool
	{
		body = Buffer.append(body, buffer)
		return(true)
	}

	func onResponseCompleted override
	{
		base.onResponseCompleted()
		if(listener != null) {
			var json = JSONParser.parse(body) as DynamicMap
			if(json == null) {
				listener(null, Error.forMessage("Invalid JSON Format from auth server: '" .. String.asString(body) .. "'"))
				return
			}
			listener(json.getString(authResponseKey), null)
		}
	}
}

class Identity
{
	prop id as string
	prop timeStamp as int
}

func create(authBaseURL as string, authParameterKey as string, authResponseKey as string) static as this
{
	assert (not String.isEmpty(authBaseURL) && not String.isEmpty(authParameterKey) && not String.isEmpty(authResponseKey)) {
		PRINT "something is missing"
	}
	return new this().setAuthBaseURL(authBaseURL).setAuthParameterKey(authParameterKey).setAuthResponseKey(authResponseKey)
}

prop authBaseURL as string
prop authParameterKey as string
prop authResponseKey as string
var cache private as DynamicMap
var idTtl static private = 5

func setIdTtl(v as int)
{
	idTtl = v
	if(idTtl < 0) {
		idTtl = 5
	}
}

func authenticate(sessionId as string, listener as function<void, string, Error>)
{
	if(cache == null) {
		cache = new DynamicMap()
	}
	var i = cache.get(sessionId) as Identity
	if(i != null) {
		if((SystemClock.asSeconds() - i.getTimeStamp()) > idTtl) {
			cache.remove(sessionId)
		}
		else {
			listener(i.getId(), null)
			return
		}
	}
	if(String.isEmpty(authBaseURL)) {
		listener(null, Error.forCode("authBaseURL"))
		return
	}
	if(String.isEmpty(authParameterKey)) {
		listener(null, Error.forCode("authParameterKey"))
		return
	}
	if(String.isEmpty(authResponseKey)) {
		listener(null, Error.forCode("authResponseKey"))
		return
	}
	if(String.isEmpty(sessionId)) {
		listener(null, Error.forCode("sessionId"))
	}
	var op = new HTTPClientOperation()
	op.setAcceptInvalidCertificate(true)
	var req = HTTPClientRequest.forGET(authBaseURL .. "?" .. authParameterKey .. "=" .. sessionId)
	op.executeRequest(req, new MyHTTPClientListener().setAuthResponseKey(authResponseKey).setListener(func(id as string, e as Error) {
		if id != null:
			cache.set(sessionId, new Identity().setId(id).setTimeStamp(SystemClock.asSeconds()))
		listener(id, e)
	}))
}
