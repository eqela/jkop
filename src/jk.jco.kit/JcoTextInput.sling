
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class #jco #component:

prop placeholder as string #content
prop type as string #content = "text"
prop font as string #style
prop color as string #style = "#FFFFFF"
prop textColor as string #style = "#000000"
prop enterEventHandler as function

stylesheet
{
	:host {
		display "block"
	}
	":host input" {
		width "100%"
		height "100%"
		appearance "none"
		background-color @{color}
		color @{textColor}
		border-color "#6b7280"
		border-width "1px"
		border-radius "0"
		padding-top ".5rem"
		padding-right ".75rem"
		padding-bottom ".5rem"
		padding-left ".75rem"
		font-family @{JcoFont.parse(font).family}
		font-size @{JcoFont.parse(font).size}
		line-height "1.5rem"
		box-sizing "border-box"
	}
}

markup
{
	<input var inputElement type=@{type} placeholder=@{placeholder} />
}

func onRendered override
{
	var element = inputElement
	var handler = onEnterKeyHandler
	lang "js" {{{
		element.addEventListener("keyup", function(event) {
			if (event.keyCode === 13) {
				event.preventDefault();
				handler();
			}
		});
	}}}
}

func onEnterKeyHandler
{
	var handler = enterEventHandler
	if handler:
		handler()
}

func getValue as string
{
	var element = inputElement
	return lang "js" string {{{ element.value }}}
}

func setValue(val as string)
{
	var element = inputElement
	lang "js" {{{ element.value = val }}}
}

func setStyleDisplay(val as string)
{
	var element = this
	lang "js" {{{
		element.style.display = val
	}}}
}
