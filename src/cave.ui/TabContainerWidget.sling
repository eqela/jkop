
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class #widget:

func findTabContainerWidget(widget as Widget) static as this
{
	var pp = Widget.getParent(widget)
	while pp {
		if pp is this:
			return pp as! this
		pp = Widget.getParent(pp)
	}
	return null
}

func pushTab(tab as TabContentWidget, parent as Widget) static as bool
{
	var tabs = assert findTabContainerWidget(parent)
	tabs.addTab(tab)
	return true
}

class DefaultTabItemWidget is TabItemWidget #widget
{
	ui LayerWidget
	{
		CanvasWidget background {
			color = Color.white()
		}
		LayerWidget {
			margin = context.getHeightValue("2mm")
			LabelWidget title {
				text = "New Tab"
			}
		}
	}

	ctor(ctx as GuiApplicationContext)
	{
		base(ctx)
		forceCreateWidget()
	}

	func setTabTitle(txt as string):
		title.setWidgetText(txt)

	func onTabSelected
	{
		background.setWidgetColor(Color.white())
		title.setWidgetTextColor(Color.black())
	}

	func onTabDeselected
	{
		background.setWidgetColor(Color.instance("#f2f2f2"))
		title.setWidgetTextColor(Color.white())
	}
}

class DefaultTabItemCreator is TabItemCreator
{
	prop context as GuiApplicationContext

	func createTabItemWidgetFor(title as string) as TabItemWidget
	{
		var v = new DefaultTabItemWidget(context)
		v.setTabTitle(title)
		return v
	}
}

class TabObject
{
	var title public as string
	var item public as TabItemWidget
	var content public as Widget

	func setOnTabClickHandler(handler as function<void, this>)
	{
		var hdl final = handler
		var obj final = this
		Widget.setWidgetClickHandler(item as! Widget, func {
			hdl(obj)
		})
	}
}

class MyContainerWidget is LayerWidget #widget
{
	prop widgetParent as parent

	func onChildWidgetRemoved(widget as Widget) override
	{
		Widget.onLayoutChanged(this)
		var w = widget as TabContentWidget
		if w && widgetParent {
			var title = w.getTabContentTitle()
			var tab = widgetParent.getTabObject(title)
			Widget.removeFromParent(tab.item)
			widgetParent.removeTabObject(title)
		}
	}
}

ui LayerWidget
{
	VerticalBoxWidget {
		HorizontalBoxWidget tabTitleContainer {
			spacing = context.getHeightValue("500um")
		}
		LayerWidget : 1.0 {
			CanvasWidget canvas {
			}
			MyContainerWidget tabContentContainer {
				parent = this
			}
		}
	}
}

ctor(ctx as GuiApplicationContext)
{
	base(ctx)
	tabItemCreator = new DefaultTabItemCreator().setContext(ctx)
	tabCollection = new vector<TabObject>
	forceCreateWidget()
}

prop tabItemCreator as TabItemCreator
var tabCollection as vector<TabObject>
var currentTab as TabObject

func addTab(widget as TabContentWidget)
{
	assert widget
	var title = widget.getTabContentTitle()
	var tab = getTabObject(title)
	var newTab = false
	if not tab {
		var v = tabItemCreator.createTabItemWidgetFor(title)
		if v {
			tabTitleContainer.addWidget(v)
			tab = new TabObject()
			tab.title = title
			tab.item = v
			tab.content = widget
			tab.setOnTabClickHandler(func(to as TabObject) {
				updateSelectedTab(to, false)
			})
			addTabObject(tab)
			newTab = true
		}
	}
	if tab:
		updateSelectedTab(tab, newTab)
}

func addTabObject(tab as TabObject) private:
	tabCollection += tab

func getTabObject(title as string) private as TabObject
{
	var tabObject as TabObject
	foreach tab as TabObject in tabCollection {
		if tab.title == title {
			tabObject = tab
			break
		}
	}
	return tabObject
}

func removeTabObject(title as string) private
{
	var tab = assert getTabObject(title)
	Vector.removeValue(tabCollection, tab)
}

func updateSelectedTab(tab as TabObject, newTab as bool) private
{
	assert tab != currentTab
	if currentTab {
		currentTab.item.onTabDeselected()
		Widget.setVisible(currentTab.content, false)
	}
	currentTab = tab
	currentTab.item.onTabSelected()
	if newTab {
		tabContentContainer.addWidget(currentTab.content)
	}
	else {
		Widget.setVisible(currentTab.content, true)
	}
}

func setWidgetContentOutlineColor(color as Color) as this
{
	canvas.setWidgetOutlineColor(color)
	return this
}

func setWidgetContentOutlineWidth(width as int) as this
{
	canvas.setWidgetOutlineWidth(width)
	return this
}

func getTabItemWidget(title as string) as TabItemWidget
{
	var tabObject = assert getTabObject(title)
	return tabObject.item
}

func getActiveTabIndex as int
{
	var index = -1
	if not currentTab:
		return index
	var counter = 0
	foreach tab as TabObject in tabCollection {
		if tab == currentTab {
			index = counter
			break
		}
		counter++
	}
	return index
}
