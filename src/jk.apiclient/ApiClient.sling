
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.webclient

class:

prop ctx as LoggingContext
prop webClient as WebClient
prop baseUrl as string
prop bearerToken as string
prop apiKey as string
prop authorization as string

ctor(ctx as jk.log.LoggingContext):
	this.ctx = ctx

func request(method as string, url as string, headers as KeyValueList<string,string>, body as buffer) async as WebClient.Response
{
	if not webClient:
		webClient = WebClient.instance()
	var callUrl as string
	if String.isNotEmpty(baseUrl) {
		callUrl = baseUrl .. url
	}
	else {
		callUrl = url
	}
	var hdrs = headers
	var authHeader = authorization
	if String.isNotEmpty(apiKey):
		authHeader = "ApiKey " .. apiKey
	if String.isNotEmpty(bearerToken):
		authHeader = "Bearer " .. bearerToken
	if String.isNotEmpty(authHeader) {
		if headers {
			hdrs = headers.dup()
		}
		else {
			hdrs = new KeyValueList<string,string>()
		}
		hdrs.add("Authorization", authHeader)
	}
	var v = await webClient.executeQuery(ctx, method, callUrl, hdrs, body)
	if ctx && ctx.isInDebugMode():
		Log.debug(ctx, "HTTP " .. method .. " to " .. callUrl .. ": status " .. v.statusCode)
	return v
}
