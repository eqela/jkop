
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is Image:

depend "nuget:FreeImage-dotnet-core@4.3.6"

var image as !"FreeImageAPI.FreeImageBitmap"

func forFile(file as File) static as Image
{
	var v = new this()
	assert v.readFromFile(file)
	return v
}

func forBuffer(data as buffer) static as Image
{
	var v = new this()
	assert v.readFromBuffer(data)
	return v
}

func forFreeImage(img as !"FreeImageAPI.FreeImageBitmap") static as this
{
	assert img
	var v = new this()
	v.image = img
	return v
}

func readFromBuffer(data as buffer) as bool
{
	assert data
	var img as !"FreeImageAPI.FreeImageBitmap"
	lang "cs" {{{
		System.IO.Stream newStream = new System.IO.MemoryStream(data);
		img = FreeImageAPI.FreeImageBitmap.FromStream(newStream);
	}}}
	assert img
	this.image = img
	return true
}

func readFromFile(file as File) as bool
{
	assert file
	var pp = file.getPath()
	assert String.isNotEmpty(pp)
	var img as !"FreeImageAPI.FreeImageBitmap"
	lang "cs" {{{
		img = FreeImageAPI.FreeImageBitmap.FromFile(pp);
	}}}
	assert img
	this.image = img
	return true
}

func width(img as !"FreeImageAPI.FreeImageBitmap") as int
{
	assert image
	return lang "cs" int {{{ img.Width }}}
}

func getPixelWidth override as int
{
	assert image
	return lang "cs" int {{{ image.Width }}}
}

func getPixelHeight override as int
{
	assert image
	return lang "cs" int {{{ image.Height }}}
}

func scaleToSize(w as int, h as int) override as Image
{
	assert image
	var img as !"FreeImageAPI.FreeImageBitmap"
	lang "cs" {{{
		img = new FreeImageAPI.FreeImageBitmap(image, w, h);
	}}}
	return forFreeImage(img)
}

func scaleToSize(w as int, h as int, callback as function<void, Image>) override
{
	assert callback
	callback(scaleToSize(w, h))
}

func scaleToWidth(w as int) override as Image
{
	var h = ((w as double) / (getPixelWidth() as double)) * (getPixelHeight() as double) as int
	return(scaleToSize(w, h))
}

func scaleToWidth(w as int, callback as function<void, Image>) override
{
	assert callback
	callback(scaleToWidth(w))
}

func scaleToHeight(h as int) override as Image
{
	var w = ((h as double) / (getPixelHeight() as double)) * (getPixelWidth() as double) as int
	return(scaleToSize(w, h))
}

func scaleToHeight(h as int, callback as function<void, Image>) override
{
	assert callback
	callback(scaleToHeight(h))
}

func crop(x as int, y as int, w as int, h as int) override as Image
{
	assert image
	var img as !"FreeImageAPI.FreeImageBitmap"
	lang "cs" {{{
		img = image.Copy(x, y, w, h);
	}}}
	return forFreeImage(img)
}

func crop(x as int, y as int, w as int, h as int, callback as function<void, Image>) override
{
	assert callback
	callback(crop(x, y, w, h))
}

func toJPGData override as buffer
{
	assert image
	var imgBuffer as buffer
	lang "cs" {{{
		using (var newStream = new System.IO.MemoryStream())
		{
			image.Save(newStream, FreeImageAPI.FREE_IMAGE_FORMAT.FIF_JPEG, FreeImageAPI.FREE_IMAGE_SAVE_FLAGS.JPEG_QUALITYGOOD);
			imgBuffer = newStream.ToArray();
		}
	}}}
	return imgBuffer
}

func toPNGData override as buffer
{
	assert image
	var imgBuffer as buffer
	lang "cs" {{{
		using (var newStream = new System.IO.MemoryStream())
		{
			image.Save(newStream, FreeImageAPI.FREE_IMAGE_FORMAT.FIF_PNG);
			imgBuffer = newStream.ToArray();
		}
	}}}
	return imgBuffer
}

func toRGBAData override as buffer
{
	ERROR "Not implemented"
	return null
}

func releaseImage override
{
	assert image
	lang "cs" {{{
		image.Dispose();
	}}}
}
