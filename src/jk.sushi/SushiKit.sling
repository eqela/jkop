
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.log
import jk.process

class:

var ctx as LoggingContext

ctor(ctx as LoggingContext):
	this.ctx = ctx

func asStringVector(o as dynamic) as vector<string>
{
	var it = assert DynamicObject.iterate(o)
	var v = new vector<string>
	loop {
		var oo = it.next()
		if not oo:
			break
		var s = String.asString(oo)
		if s:
			v += s
	}
	return v
}

func executeBuffer(code as buffer, args as dynamic) as int
{
	var code = SushiCode.forBuffer(code)
	if not code:
		Error.throw("failedToInitialize", "SushiCode")
	return code.execute(asStringVector(args))
}

func executeFile(file as dynamic, args as dynamic) as int
{
	var file = new FileKit(ctx).asFile(file)
	var code = SushiCode.forFile(file)
	if not code:
		Error.throw("failedToRead", file.getPath())
	return code.execute(asStringVector(args))
}

func executeFileProcess(file as dynamic, args as dynamic) as int
{
	var file = new FileKit(ctx).asFile(file)
	var pl as ProcessLauncher
	IFDEF "target_sushi" {
		pl = ProcessLauncher.forSelf()
	}
	if not pl:
		pl = ProcessLauncher.forCommand("eqela")
	if not pl:
		pl = ProcessLauncher.forCommand("sushi")
	if not pl:
		Error.throw("failedToFindSushiVm", null)
	pl.addToParams(file.getPath())
	foreach arg in asStringVector(args):
		pl.addToParams(arg)
	return pl.execute()
}
