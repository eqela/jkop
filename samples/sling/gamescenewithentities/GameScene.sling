
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is SpriteSceneWithEntities imports cape imports cave imports motion:

var runner as Runner
var counter = 0
var audioManager as AudioManager
var clip as AudioClip

func initialize override
{
	base.initialize()
	audioManager = AudioManager.forApplication(context)
	if(audioManager != null) {
		clip = audioManager.getClipForResource("pop")
	}
	addTextureSpriteForSize(createTextureForImageResource("wood"), getReferenceWidth(), getReferenceHeight())
	runner = new Runner()
	addEntity(runner)
	var giveup = TextButtonEntity.forText("Give up")
	giveup.setBackgroundColor(Color.forRGBA(128, 128, 128, 128))
	giveup.setClickHandler(func {
		popScene()
	})
	addEntity(giveup)
	giveup.move(1.0 - giveup.getWidth(), 0.0)
}

func tick(gameTime as cape.TimeValue, delta as double) override
{
	base.tick(gameTime, delta)
	counter++
	if(counter == 200) {
		addEntity(new Monster())
		counter = 0
	}
}

func getRunner as Runner
{
	return(runner)
}
