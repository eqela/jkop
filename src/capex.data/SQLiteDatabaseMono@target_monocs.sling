
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is SQLiteDatabase depends "dll:System.Data.dll" depends "dll:Mono.Data.Sqlite.dll" imports cape:

class Statement is SQLStatement
{
	var pcounter = 0
	prop sqlString as string
	var isStoredProcedure = false

	func setIsStoredProcedure(v as bool) as SQLStatement
	{
		isStoredProcedure = v
		return this
	}

	func getIsStoredProcedure as bool:
		return isStoredProcedure

	lang "cs" {{{
		public Mono.Data.Sqlite.SqliteCommand command;

		public bool create(Mono.Data.Sqlite.SqliteConnection db, string sql) {
			if(db == null || sql == null) {
				return(false);
			}
			var cmd = db.CreateCommand();
			if(cmd == null) {
				return(false);
			}
			cmd.CommandText = SQLAdoNet.convertSQLString(sql);
			command = cmd;
			sqlString = sql;
			return(true);
		}
	}}}

	func addParamString(val as string) as SQLStatement
	{
		var vv as string = null
		if(val != null) {
			vv = val
		}
		lang "cs" {{{
			if(vv == null) {
				vv = "";
			}
			if(command != null) {
				var name = "@p" + (pcounter+1);
				var param = command.Parameters.Add(name, System.Data.DbType.String);
				if(param != null) {
					pcounter ++;
					param.Value = vv;
				}
			}
		}}}
		return(this)
	}

	func addParamInteger(val as int) as SQLStatement
	{
		lang "cs" {{{
			if(command != null) {
				var param = command.Parameters.Add("@p" + (pcounter+1), System.Data.DbType.Int32);
				if(param != null) {
					pcounter ++;
					param.Value = val;
				}
			}
		}}}
		return(this)
	}

	func addParamLongInteger(val as long) as SQLStatement
	{
		lang "cs" {{{
			if(command != null) {
				var param = command.Parameters.Add("@p" + (pcounter+1), System.Data.DbType.Int64);
				if(param != null) {
					pcounter ++;
					param.Value = val;
				}
			}
		}}}
		return(this)
	}

	func addParamDouble(val as double) as SQLStatement
	{
		lang "cs" {{{
			if(command != null) {
				var param = command.Parameters.Add("@p" + (pcounter+1), System.Data.DbType.Double);
				if(param != null) {
					pcounter ++;
					param.Value = val;
				}
			}
		}}}
		return(this)
	}

	func addParamBlob(val as buffer) as SQLStatement
	{
		if(val == null) {
			return(this)
		}
		lang "cs" {{{
			if(command != null) {
				var param = command.Parameters.Add("@p" + (pcounter+1), System.Data.DbType.Binary);
				if(param != null) {
					pcounter ++;
					param.Value = val;
				}
			}
		}}}
		return(this)
	}

	func setParamString(name as string, val as string) as SQLStatement:
		return addParamString(val)

	func setParamInteger(name as string, val as int) as SQLStatement:
		return addParamInteger(val)

	func setParamLongInteger(name as string, val as long) as SQLStatement:
		return addParamLongInteger(val)

	func setParamDouble(name as string, val as double) as SQLStatement:
		return addParamDouble(val)

	func setParamBlob(name as string, val as buffer) as SQLStatement:
		return addParamBlob(val)

	func resetStatement
	{
		lang "cs" {{{
			if(command != null) {
				command.Parameters.Clear();
			}
		}}}
		pcounter = 0
	}

	func getError as string
	{
		return(null)
	}
}

lang "cs" {{{
	Mono.Data.Sqlite.SqliteConnection db;
}}}

func initialize(file as cape.File, openCreate as bool) override as bool
{
	if(file == null) {
		return(false)
	}
	if(openCreate == false && file.isFile() == false) {
		Log.error(getLogger(), "Database does not exist: " .. file.getPath())
		return(false)
	}
	var nativepath = file.getPath()
	if(nativepath == null) {
		Log.error(getLogger(), "Database file '" .. file.getPath() .. "' is not on a native filesystem. Cannot open.")
		return(false)
	}
	var v = false
	var error as string = null
	lang "cs" {{{
		var db = new Mono.Data.Sqlite.SqliteConnection("Data Source=" + nativepath);
		try {
			db.Open();
			v = true;
		}
		catch(System.Exception e) {
			error = e.ToString();
			v = false;
		}
		this.db = db;
	}}}
	if(v) {
		Log.debug(getLogger(), "Opened Sqlite database: " .. file.getPath())
	}
	else {
		Log.error(getLogger(), "Failed to open database file: " .. error)
	}
	return(v)
}

func close override
{
	lang "cs" {{{
		if(db != null) {
			db.Close();
			db = null;
		}
	}}}
}

func prepare(sql as string) override as SQLStatement
{
	var v = new Statement()
	var ss #used = sql
	lang "cs" {{{
		if(v.create(db, ss) == false) {
			return(null);
		}
	}}}
	return(v)
}

func execute(stmt as SQLStatement) override as bool
{
	if(stmt == null) {
		return(false)
	}
	var v = true
	var error as string = null
	lang "cs" {{{
		var cmd = ((Statement)stmt).command;
		if(cmd == null) {
			return(false);
		}
		try {
			cmd.ExecuteNonQuery();
		}
		catch(System.Exception e) {
			v = false;
			error = e.ToString();
		}
	}}}
	if(error != null) {
		var lg = getLogger()
		Log.error(lg, "Error for SQL statement: `" .. (stmt as! Statement).getSqlString() .. "'")
		Log.error(lg, "SQLite execute error: " .. error)
	}
	return(v)
}

class ResultSet is SQLResultSetIterator
{
	var reader public as !"Mono.Data.Sqlite.SqliteDataReader"

	dtor
	{
		close()
	}

	func close override
	{
		if(reader != null) {
			reader.Close()
			reader = null
		}
	}

	func nextValues(values as vector<object>) override as bool
	{
		if(values == null) {
			return(false)
		}
		if(step() == false) {
			return(false)
		}
		cape.Vector.clear(values)
		var cols = getColumnCount()
		var n as int
		for(n = 0; n < cols; n++) {
			var o = getColumnObject(n)
			if(o == null) {
				o = ""
			}
			values += o
		}
		return(true)
	}

	func step override as bool
	{
		lang "cs" {{{
			if(reader == null) {
				return(false);
			}
			if(reader.Read() == false) {
				reader.Close();
				reader = null;
				return(false);
			}
		}}}
		return(true)
	}

	func getColumnCount override as int
	{
		var v = 0
		lang "cs" {{{
			if(reader != null) {
				v = reader.FieldCount;
			}
		}}}
		return(v)
	}

	func getColumnNames override as vector<string>
	{
		var v = new vector<string>
		var n as int
		var c = getColumnCount()
		for(n = 0; n < c; n++) {
			var nn = getColumnName(n)
			if(nn == null) {
				nn = ""
			}
			v += nn
		}
		return(v)
	}

	func getColumnName(n as int) override as string
	{
		var v as string = null
		lang "cs" {{{
			if(reader != null) {
				v = reader.GetName(n);
			}
			if(v == null) {
				v = "";
			}
		}}}
		return(v)
	}

	func getColumnObject(n as int) override as object
	{
		var v as string = null
		lang "cs" {{{
			if(reader == null) {
				return(null);
			}
			var o = reader.GetValue(n);
			if(o == null) {
				return(null);
			}
			v = o.ToString(); //reader.GetString(n);
			if(v == null) {
				return(null);
			}
		}}}
		return(v)
	}

	func getColumnInt(n as int) override as int
	{
		var v = 0
		lang "cs" {{{
			if(reader != null) {
				v = reader.GetInt32(n);
			}
		}}}
		return(v)
	}

	func getColumnLong(n as int) override as long
	{
		var v as long = 0
		lang "cs" {{{
			if(reader != null) {
				v = reader.GetInt64(n);
			}
		}}}
		return(v)
	}

	func getColumnDouble(n as int) override as double
	{
		var v as double = 0
		lang "cs" {{{
			if(reader != null) {
				v = reader.GetDouble(n);
			}
		}}}
		return(v)
	}

	func getColumnBuffer(n as int) override as buffer
	{
		// FIXME
		return(null)
	}

	func next override as cape.DynamicMap
	{
		if(step() == false) {
			return(null)
		}
		var names = getColumnNames()
		if(names == null || cape.Vector.getSize(names) < 1) {
			return(null)
		}
		var v = new cape.DynamicMap()
		var n as int
		for(n = 0; n < cape.Vector.getSize(names); n++) {
			v.set(cape.Vector.get(names, n), getColumnObject(n))
		}
		return(v)
	}
}

func query(stmt as SQLStatement) override as SQLResultSetIterator
{
	if(stmt == null) {
		Log.debug(getLogger(), "SQLite query: null statement")
		return(null)
	}
	var v as ResultSet = null
	var error as string = null
	lang "cs" {{{
		var cmd = ((Statement)stmt).command;
		if(cmd == null) {
	}}}
	Log.debug(getLogger(), "SQLite query: null command")
	lang "cs" {{{
		return(null);
		}
		Mono.Data.Sqlite.SqliteDataReader rdr = null;
		try {
			rdr = cmd.ExecuteReader();
		}
		catch(System.Exception e) {
			error = e.ToString();
		}
		if(rdr != null) {
			v = new ResultSet();
			v.reader = rdr;
		}
	}}}
	if(error != null) {
		var lg = getLogger()
		Log.error(lg, "Error for SQL statement: `" .. (stmt as! Statement).getSqlString() .. "'")
		Log.error(lg, "SQLite query error: " .. error)
	}
	return(v)
}

func close(callback as function) override
{
	close()
	if(callback != null) {
		callback()
	}
}

func execute(stmt as SQLStatement, callback as function<void, bool>) override
{
	var v = execute(stmt)
	if(callback != null) {
		callback(v)
	}
}

func query(stmt as SQLStatement, callback as function<void, SQLResultSetIterator>) override
{
	var v = query(stmt)
	if(callback != null) {
		callback(v)
	}
}

func querySingleRow(stmt as SQLStatement, callback as function<void, DynamicMap>) override
{
	var v = querySingleRow(stmt)
	if(callback != null) {
		callback(v)
	}
}

func tableExists(table as string, callback as function<void, bool>) override
{
	var v = tableExists(table)
	if(callback != null) {
		callback(v)
	}
}

func getPrimaryKeyColumnName(table as string) override as string
{
	var v = assert querySingleRow(prepare("SELECT COLUMN_NAME FROM information_schema.KEY_COLUMN_USAGE WHERE CONSTRAINT_NAME LIKE 'PRIMARY%' AND TABLE_NAME='" .. table .. "';"))
	return v.getString("COLUMN_NAME")
}
