
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func forName(name as string) static as this
{
	return(new this().setName(name))
}

func forDetails(name as string, columns as array<SQLTableColumnInfo> = null, indexes as array<string> = null, uniqueIndexes as array<string> = null) static as this
{
	var v = new this()
	v.setName(name)
	foreach(column in columns) {
		v.addColumn(column)
	}
	foreach(index in indexes) {
		v.addIndex(index)
	}
	foreach(uniqueIndex in uniqueIndexes) {
		v.addUniqueIndex(uniqueIndex)
	}
	return(v)
}

prop name as string
prop columns as vector<SQLTableColumnInfo>
prop indexes as vector<SQLTableColumnIndexInfo>

func addColumn(info as SQLTableColumnInfo) as this
{
	if(info == null) {
		return(this)
	}
	if(columns == null) {
		columns = new vector<SQLTableColumnInfo>
	}
	columns += info
	return(this)
}

func addIntegerColumn(name as string) as this
{
	return(addColumn(SQLTableColumnInfo.forInteger(name)))
}

func addLongColumn(name as string) as this
{
	return(addColumn(SQLTableColumnInfo.forLongInteger(name)))
}

func addStringColumn(name as string) as this
{
	return(addColumn(SQLTableColumnInfo.forString(name)))
}

func addStringKeyColumn(name as string) as this
{
	return(addColumn(SQLTableColumnInfo.forStringKey(name)))
}

func addTextColumn(name as string) as this
{
	return(addColumn(SQLTableColumnInfo.forText(name)))
}

func addIntegerKeyColumn(name as string) as this
{
	return(addColumn(SQLTableColumnInfo.forIntegerKey(name)))
}

func addLongKeyColumn(name as string) as this
{
	return(addColumn(SQLTableColumnInfo.forLongIntegerKey(name)))
}

func addDoubleColumn(name as string) as this
{
	return(addColumn(SQLTableColumnInfo.forDouble(name)))
}

func addBlobColumn(name as string) as this
{
	return(addColumn(SQLTableColumnInfo.forBlob(name)))
}

func addIndex(column as string) as this
{
	if(cape.String.isEmpty(column) == false) {
		if(indexes == null) {
			indexes = new vector<SQLTableColumnIndexInfo>
		}
		indexes += new SQLTableColumnIndexInfo().setColumn(column).setUnique(false)
	}
	return(this)
}

func addUniqueIndex(column as string) as this
{
	if(cape.String.isEmpty(column) == false) {
		if(indexes == null) {
			indexes = new vector<SQLTableColumnIndexInfo>
		}
		indexes += new SQLTableColumnIndexInfo().setColumn(column).setUnique(true)
	}
	return(this)
}
