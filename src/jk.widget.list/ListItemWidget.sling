
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is VerticalBoxWidget is TitledWidget is DisplayAwareWidget abstract #widget:

var list protected as VerticalBoxWidget
pvar widgetListSpacing as int #notLiteral
pvar widgetListMargin as int #notLiteral

ctor(ctx as GuiApplicationContext)
{
	base(ctx)
	widgetListMargin = 0
	widgetListSpacing = context.getHeightValue("1mm")
}

func getWidgetTitle virtual as string:
	return null

func onWidgetDisplayed:
	onGetData()

func initializeWidget override
{
	base.initializeWidget()
	var shw = getSubHeaderWidget()
	if shw:
		addWidget(shw)
	setWidgetMargin(context.getHeightValue("1mm"))
	setWidgetSpacing(context.getHeightValue("1mm"))
	list = VerticalBoxWidget.forContext(context, widgetListMargin, widgetListSpacing)
	addWidget(VerticalScrollerWidget.forWidget(context, list), 1.0)
}

func onGetData
{
	Widget.removeChildrenOf(list)
	startDataQuery(func(response as vector<DynamicMap>) {
		if not response|| Vector.getSize(response) < 1 {
			onNoDataReceived()
			return
		}
		onDataReceived(response)
	})
}

func onNoDataReceived virtual:
	list.addWidget(AlignWidget.forWidget(context, LabelWidget.forText(context, "No data found"), 0.5, 0.5))

func onDataReceived(data as vector<DynamicMap>) virtual
{
	foreach record in data {
		var widget = createWidgetForRecord(record)
		if widget:
			list.addWidget(widget)
	}
}

func getSubHeaderWidget virtual as Widget:
	return null

func createWidgetForRecord(record as DynamicMap) virtual as Widget:
	return null

func startDataQuery(callback as function<void,vector<DynamicMap>>) abstract
