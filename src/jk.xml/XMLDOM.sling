
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func parseAsTreeObject(xml as string, ignoreWhiteSpace as bool = true) static as XMLDOMNode
{
	var root as XMLDOMNode
	var stack = new Stack<XMLDOMNode>()
	var pp = XMLParser.forString(xml)
	pp.setIgnoreWhiteSpace(ignoreWhiteSpace)
	loop {
		var o = pp.next()
		if o == null:
			break
		if o is MarkupLanguageParser.StartElement {
			var name = (o as! MarkupLanguageParser.StartElement).getName()
			if root == null && name == "?xml":
				continue
			var dn = new XMLDOMNode()
			dn.name = name
			dn.attributes = (o as! MarkupLanguageParser.StartElement).getParams()
			if root == null {
				root = dn
				stack.push(dn)
			}
			else {
				var current = stack.peek()
				if current == null:
					current = root
				var children = current.children
				if children == null {
					children = new vector<XMLDOMNode>
					current.children = children
				}
				children += dn
				stack.push(dn)
			}
		}
		else if o is MarkupLanguageParser.EndElement {
			stack.pop()
		}
		else if o is MarkupLanguageParser.CharacterData {
			var current = stack.peek()
			if current {
				var children = current.children
				if children == null {
					children = new vector<XMLDOMNode>
					current.children = children
				}
				var dn = new XMLDOMNode()
				dn.name = "cdata"
				dn.data = (o as! MarkupLanguageParser.CharacterData).getData()
				children += dn
			}
		}
		else if o is MarkupLanguageParser.TextData {
			var current = stack.peek()
			if current:
				current.data = (o as! MarkupLanguageParser.TextData).getData()
		}
	}
	return root
}
