
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import cape
import cave

class:

IFDEF "target_android"
{
	depend "androidPermission:android.permission.VIBRATE"
}

ELSE IFDEF("target_ios_objc")
{
	depend "objc-header-h:<UserNotifications/UserNotifications.h>"
	depend "objc-framework:UserNotifications"
}

ELSE IFDEF "target_swift"
{
	depend "swift-import:UserNotifications"
}

var context as GuiApplicationContext

ctor(context as GuiApplicationContext)
{
	this.context = context
}

func show(title as string, message as string) as bool
{
	var t = title
	if(String.isEmpty(t)) {
		t = "Notification"
	}
	if(String.isEmpty(message)) {
		return(false)
	}
	IFDEF "target_android" {
		var cc = context as GuiApplicationContextForAndroid
		if(cc == null) {
			return(false)
		}
		var ctx = cc.getAndroidActivityContext()
		if(ctx == null) {
			return(false)
		}
		var act = ctx as !"android.app.Activity"
		var activity final = act
		var packageName = ctx.getPackageName() as! string
		var rid #used = packageName .. ":drawable/appicon"
		var id #used = Integer.asInteger(String.forInteger(SystemClock.asSeconds()))
		IFDEF "target_java" {
			lang "java" {{{
				android.content.res.Resources res = ctx.getResources();
				int aid = res.getIdentifier(rid, null, null);
				if(aid < 0) {
					aid = android.R.drawable.sym_def_app_icon;
				}
				android.app.Notification.Builder mBuilder = new android.app.Notification.Builder(ctx);
				mBuilder.setSmallIcon(aid);
				mBuilder.setContentTitle(t);
				mBuilder.setContentText(message);
				mBuilder.setTicker(message);
				mBuilder.setDefaults(android.app.Notification.DEFAULT_ALL);
				mBuilder.setAutoCancel(true);
				android.content.pm.PackageManager pm = null;
				try {
					pm = ctx.getPackageManager();
				}
				catch(Exception e) {
					pm = null;
					return(false);
				}
				android.content.Intent resultIntent = pm.getLaunchIntentForPackage(packageName);
				android.app.PendingIntent resultPendingIntent = android.app.PendingIntent.getActivity(ctx, 0, resultIntent, android.app.PendingIntent.FLAG_UPDATE_CURRENT);
				mBuilder.setContentIntent(resultPendingIntent);
				android.app.NotificationManager mNotificationManager = (android.app.NotificationManager)ctx.getSystemService(ctx.NOTIFICATION_SERVICE);
				android.app.Notification mbuilt = null;
				try {
					mbuilt = mBuilder.build();
				}
				catch(java.lang.Exception e) {
					return(false);
				}
				if(mbuilt == null) {
					return(false);
				}
				mNotificationManager.notify(id, mbuilt);
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				var res = ctx!!.getResources()
				var aid = res!!.getIdentifier(rid, null, null)
				if (aid < 0) {
					aid = android.R.drawable.sym_def_app_icon
				}
				var mBuilder : android.app.Notification.Builder = android.app.Notification.Builder(ctx)
				mBuilder.setSmallIcon(aid)
				mBuilder.setContentTitle(t)
				mBuilder.setContentText(message)
				mBuilder.setTicker(message)
				mBuilder.setDefaults(android.app.Notification.DEFAULT_ALL)
				mBuilder.setAutoCancel(true)
				var pm : android.content.pm.PackageManager? = null
				try {
					pm = ctx.getPackageManager()
				}
				catch(e: java.lang.Exception) {
					pm = null
					return(false)
				}
				var resultIntent : android.content.Intent = pm.getLaunchIntentForPackage(packageName)
				var resultPendingIntent : android.app.PendingIntent = android.app.PendingIntent.getActivity(ctx, 0, resultIntent, android.app.PendingIntent.FLAG_UPDATE_CURRENT)
				mBuilder.setContentIntent(resultPendingIntent);
				var mNotificationManager : android.app.NotificationManager = ctx!!.getSystemService(android.content.Context.NOTIFICATION_SERVICE) as android.app.NotificationManager
				var mbuilt : android.app.Notification? = null
				try {
					mbuilt = mBuilder.build()
				}
				catch(e: java.lang.Exception) {
					return(false)
				}
				if(mbuilt == null) {
					return(false)
				}
				mNotificationManager.notify(id, mbuilt)
			}}}
		}
		return true
	}
	ELSE IFDEF "target_ios_objc" {
		var identifier #used = String.forInteger(SystemClock.asSeconds())
		lang "objc" {{{
			UNUserNotificationCenter* center = [UNUserNotificationCenter currentNotificationCenter];
			UNAuthorizationOptions options = UNAuthorizationOptionAlert + UNAuthorizationOptionSound;
			[center requestAuthorizationWithOptions:options completionHandler:nil];
			UNMutableNotificationContent* content = [[UNMutableNotificationContent alloc] init];
			content.title = t;
			content.body = message;
			content.sound = [UNNotificationSound defaultSound];
			UNTimeIntervalNotificationTrigger* trigger = [UNTimeIntervalNotificationTrigger
			triggerWithTimeInterval:5 repeats:NO];
			UNNotificationRequest* request = [UNNotificationRequest requestWithIdentifier:identifier content:content trigger:trigger];
			[center addNotificationRequest:request withCompletionHandler:nil];
		}}}
		return true
	}
	ELSE IFDEF "target_swift" {
		var identifier #used = String.forInteger(SystemClock.asSeconds())
		lang "swift" {{{
			if #available(iOS 10.0, *) {
				let center : UNUserNotificationCenter = UNUserNotificationCenter.current()
				let options : UNAuthorizationOptions = UNAuthorizationOptions(rawValue: UNAuthorizationOptions.alert.rawValue + UNAuthorizationOptions.sound.rawValue)
				center.requestAuthorization(options: options, completionHandler: {_,_ in })
				let content : UNMutableNotificationContent = UNMutableNotificationContent()
				content.title = t!
				content.body = message!
				content.sound = UNNotificationSound.default
				let trigger : UNTimeIntervalNotificationTrigger = UNTimeIntervalNotificationTrigger(timeInterval: 5, repeats: false)
				let request : UNNotificationRequest = UNNotificationRequest(identifier: identifier!, content: content, trigger: trigger)
				center.add(request, withCompletionHandler: nil)
				return true
			} else {
				return false
			}
		}}}
	}
	ELSE {
		ERROR("Not implemented.")
		return(false)
	}
}
