
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class imports cape:

IFDEF "target_netcore"
{
	depend "nuget:System.Security.Cryptography.Algorithms@4.3.*"
}

func encode(buffer as buffer) static as string
{
	if buffer == null || Buffer.getSize(buffer) < 1:
		return null
	IFDEF "target_cs" {
		var v as string
		lang "cs" {{{
			var md5 = System.Security.Cryptography.MD5.Create();
			byte[] hash = md5.ComputeHash(buffer);
			var sb = new System.Text.StringBuilder();
			for (int i = 0; i < hash.Length; i++) {
				sb.Append(hash[i].ToString("X2"));
			}
			v = sb.ToString();
		}}}
		return v
	}
	ELSE IFDEF "target_java" {
		var v as string
		lang "java" {{{
			java.security.MessageDigest digest;
			try {
				digest = java.security.MessageDigest.getInstance("MD5");
			}
			catch(Exception e) {
				e.printStackTrace();
				return(null);
			}
		}}}
		IFDEF "target_j2me" {
			lang "java" {{{
				byte messageDigest[] = new byte[32];
				digest.update(buffer, 0, buffer.length);
				digest.digest(messageDigest, 0, messageDigest.length);
			}}}
		}
		ELSE {
			lang "java" {{{
				digest.update(buffer);
				byte messageDigest[] = digest.digest();
			}}}
		}
		lang "java" {{{
			java.lang.StringBuffer hexString = new java.lang.StringBuffer();
			for(int i=0; i < messageDigest.length; i++) {
				java.lang.String ii = java.lang.Integer.toHexString(0xFF & messageDigest[i]);
				if(ii.length() < 2) {
					hexString.append("0");
				}
				hexString.append(ii);
			}
			v = hexString.toString();
		}}}
		return v
	}
	ELSE IFDEF "target_js" {
		return MD5EncoderForJavaScript.encode(buffer)
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" string {{{
			val md = java.security.MessageDigest.getInstance("MD5")
			return java.math.BigInteger(1, md.digest(buffer.toByteArray())).toString(16)
		}}}
	}
	ELSE {
		var md5 = new MD5EncoderGeneric()
		return md5.encode(buffer)
	}
}

func encode(string as string) static as string:
	return encode(String.toUTF8Buffer(string))

func encode(obj as object) static as string
{
	var bb = Buffer.asBuffer(obj)
	if bb:
		return encode(bb)
	var ss = String.asString(obj)
	if ss:
		return encode(ss)
	return null
}
