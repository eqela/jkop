
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.log
import jk.env
import jk.process

class:

prop msbuildCommand as File
prop updateDependencies as bool = true

func getMsbuildCommandFile as File
{
	var v = msbuildCommand
	if v:
		return v
	v = ExternalCommand.findInPath("msbuild")
	if v:
		return v
	return null
}

func getBuilderId as string:
	return "msbuild"

func executeMsbuild(executable as File, projectDirectory as File, target as string, output as StringBuilder) as bool
{
	if not executable:
		return false
	var pl = ProcessLauncher.forFile(executable)
	if target:
		pl.addToParams("/t:" .. target)
	pl.setCwd(projectDirectory)
	var oo = pl.executeToString()
	if not oo:
		return false
	if output:
		output.appendString(oo)
	if String.getIndexOfString(oo, "Build succeeded") >= 0:
		return true
	return false
}

func canBuild(dir as File) as bool
{
	assert dir
	if CSProjUtil.findNetFrameworkProjectFile(dir):
		return true
	return false
}

func execute(ctx as LoggingContext, sourceDirectory as File, destinationDirectory as File) as bool
{
	var dir = assert sourceDirectory:
		Log.error(ctx, "No source directory")
	assert dir.isDirectory():
		Log.error(ctx, "Source directory does not exist: `" .. String.asString(dir) .. "'")
	Log.debug(ctx, "Using source directory: `" .. String.asString(dir) .. "'")
	var msbuild = assert getMsbuildCommandFile()
	if updateDependencies {
		var projectjson = dir.entry("project.json")
		if projectjson.isFile() {
			Log.debug(ctx, "A project.json file is present: `" .. String.asString(projectjson) .. "'. Attempting to restore packages.")
			Log.status(ctx, "[MSBuild] Updating package dependencies ..")
			var bb = new StringBuilder()
			assert executeMsbuild(msbuild, dir, "restore", bb) {
				Log.error(ctx, "Failed to restore packages in: `" .. String.asString(dir) .. "'")
				if ctx.isInDebugMode():
					Log.info(ctx, bb.toString())
			}
			if ctx.isInDebugMode():
				Log.debug(ctx, "Packages successfully restored. Complete output: `" .. bb.toString() .. "'")
		}
	}
	Log.status(ctx, "[MSBuild] Compiling ..")
	var bb = new StringBuilder()
	assert executeMsbuild(msbuild, dir, null, bb) {
		Log.error(ctx, "Failed to compile: `" .. String.asString(dir) .. "'")
		if ctx.isInDebugMode():
			Log.debug(ctx, bb.toString())
	}
	Log.debug(ctx, "Compilation succesful")
	var destdir = destinationDirectory
	if destdir {
		destdir.createDirectoryRecursive()
		var builddir = dir.entry("build")
		if not builddir.isDirectory():
			builddir = dir.entry("bin").entry("Debug")
		if not builddir.isDirectory():
			builddir = dir.entry("bin").entry("Release")
		var ee = builddir.entries()
		while ee {
			var file = ee.next()
			if not file:
				break
			var dest = destdir.entry(file.getBasename())
			Log.debug(ctx, "Copying `" .. String.asString(file) .. "' -> `" .. String.asString(dest) .. "' ..")
			file.copyFileOrDirectoryTo(dest)
		}
	}
	return true
}
