
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import cave.ui

class:

var token private static as string

IFDEF "target_ios_objc"
{
	depend "objc-header-h:<FirebaseCore/FirebaseCore.h>"
	depend "objc-header-h:<FirebaseAnalytics/FirebaseAnalytics.h>"
	depend "objc-header-h:<FirebaseMessaging/FirebaseMessaging.h>"
	depend "objc-framework:FirebaseAnalytics"
	depend "objc-framework:FirebaseCore"
	depend "objc-framework:FirebaseCoreDiagnostics"
	depend "objc-framework:FirebaseInstanceID"
	depend "objc-framework:FirebaseNanoPB"
	depend "objc-framework:GoogleToolboxForMac"
	depend "objc-framework:nanopb"
	depend "objc-framework:FirebaseMessaging"
	depend "objc-framework:Protobuf"

	func setToken(newToken as string) static:
		token = newToken
}
IFDEF "target_android"
{
	var action private static = "SLING_FCM"

	func setAction(v as string) static
	{
		assert String.isNotEmpty(v)
		action = v
	}

	func getAction static as string:
		return action
}
ELSE IFDEF "target_html"
{
	func onNewFCMToken(newToken as string) static:
		token = newToken
}
ELSE IFDEF "target_swift"
{
	depend "swift-import:FirebaseAnalytics"
	depend "swift-import:FirebaseCore"
	depend "swift-import:FirebaseInstanceID"
	depend "swift-import:FirebaseMessaging"

	func setToken(newToken as string) static:
		token = newToken
}

**
** Checks for the FCM token if it is available. If it is available
** and is a new one, then it gets saved before finally returning it.
**

func checkForToken static as string
{
	IFDEF "target_android" {
		var newToken as string
		IFDEF "target_java" {
			newToken = lang "java" string {{{ com.google.firebase.iid.FirebaseInstanceId.getInstance().getToken() }}}
		}
		ELSE IFDEF "target_kotlin" {
			newToken = lang "kotlin" string {{{ com.google.firebase.iid.FirebaseInstanceId.getInstance().getToken() }}}
		}
		if not String.equals(token, newToken):
			token = newToken
	}
	ELSE IFDEF "target_ios_objc" {
		var newToken = lang "objc" string {{{ [FIRMessaging messaging].FCMToken }}}
		if not String.equals(token, newToken):
			token = newToken
	}
	ELSE IFDEF "target_swift" {
		var newToken = lang "swift" string {{{ Messaging.messaging().fcmToken }}}
		if not String.equals(token, newToken):
			token = newToken
	}
	ELSE {
		ERROR "Not yet implemented."
	}
	return token
}
