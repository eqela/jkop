
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.ui

class:

func getInstance static as this
{
	if not instance:
		instance = new this()
	return instance
}

var instance static as this
prop screen as ScreenForWidget
var routes private as map<string, function<Widget>>

func initializeRoutes(rs as array) as bool
{
	assert rs
	foreach m as map in rs {
		var route = Map.getValue(m, "route") as string
		var widget = Map.getValue(m, "widget") as function<Widget>
		addRoute(route, widget)
	}
	return true
}

func addRoute(route as string, callback as function<Widget>)
{
	if not routes:
		routes = new map<string, function<Widget>>
	routes[route] = callback
}

func getWidget(route as string) as Widget
{
	var w = Map.getValue(routes, route) as function<Widget>
	if not w:
		w = Map.getValue(routes, "*") as function<Widget>
	assert w
	return w()
}

func push(route as string)
{
	IFDEF "target_html" {
		var r #used = route
		lang "js" {{{
			window.location.hash = "#" + r;
		}}}
		assert screen
		screen.onRouteChanged(r)
	}
}

func pop
{
	IFDEF "target_html" {
		lang "js" {{{
			history.go(-1);
		}}}
		assert screen
		screen.onRoutePop()
	}
}
