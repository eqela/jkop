
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is File private:

class MyFileReader is FileReader is SizedReader is Reader is Closable is SeekableReader
{
	var handle = -1
	prop file as File

	dtor
	{
		close()
	}

	func read(buffer as buffer) as int
	{
		var v = -1
		var handle = this.handle
		if handle >= 0 {
			lang "lua" {{{
				v = _io:read_from_handle(handle, buffer)
			}}}
		}
		return v
	}

	func getSize as int
	{
		var v = -1
		var handle = this.handle
		if handle >= 0 {
			lang "lua" {{{
				v = _io:get_size_for_handle(handle)
			}}}
		}
		return v
	}

	func close
	{
		var handle = this.handle
		if handle >= 0 {
			lang "lua" {{{
				_io:close_handle(handle)
			}}}
			this.handle = -1
		}
	}

	func setCurrentPosition(n as int64) as bool
	{
		var handle = this.handle
		if handle < 0:
			return false
		if lang "lua" int {{{ _io:set_current_position(handle, n) }}} < 0:
			return false
		return true
	}

	func getCurrentPosition as int64
	{
		var handle = this.handle
		if handle < 0:
			return 0
		return lang "lua" int64 {{{ _io:get_current_position(handle) }}}
	}
}

class MyFileWriter is FileWriter is Writer is Closable is SeekableWriter
{
	var handle = -1
	prop file as File

	dtor
	{
		close()
	}

	func write(buf as buffer, size as int) as int
	{
		var v = -1
		var handle = this.handle
		if handle >= 0 {
			lang "lua" {{{
				v = _io:write_to_handle(handle, buf, size)
			}}}
		}
		return v
	}

	func close
	{
		var handle = this.handle
		if handle >= 0 {
			lang "lua" {{{
				_io:close_handle(handle)
			}}}
			this.handle = -1
		}
	}

	func setCurrentPosition(n as int64) as bool
	{
		var handle = this.handle
		if handle < 0:
			return false
		if lang "lua" int {{{ _io:set_current_position(handle, n) }}} < 0:
			return false
		return true
	}

	func getCurrentPosition as int64
	{
		var handle = this.handle
		if handle < 0:
			return 0
		return lang "lua" int64 {{{ _io:get_current_position(handle) }}}
	}
}

var path as string

func forPath(path as string) static as File
{
	var v = new this()
	v.setPath(path)
	return v
}

func entry(name as string) override as File
{
	var pp = path
	if String.isNotEmpty(name) {
		if pp {
			pp = pp .. "/" .. name
		}
		else {
			pp = name
		}
	}
	return forPath(pp)
}

func move(dest as File, replace as bool) override stub as bool

func touch override as bool
{
	var path = this.path
	var r = lang "lua" int {{{ _io:touch_file(path) }}}
	if r == 1:
		return true
	return false
}

func read override as FileReader
{
	var handle as object
	var path = this.path
	lang "lua" {{{
		handle = _io:open_file_for_reading(path)
	}}}
	assert handle >= 0
	var v = new MyFileReader()
	v.setFile(this)
	v.handle = handle
	return v
}

func write override as FileWriter
{
	var handle as object
	var path = this.path
	lang "lua" {{{
		handle = _io:open_file_for_writing(path)
	}}}
	assert handle >= 0
	var v = new MyFileWriter()
	v.setFile(this)
	v.handle = handle
	return v
}

func append override as FileWriter
{
	var handle as object
	var path = this.path
	lang "lua" {{{
		handle = _io:open_file_for_appending(path)
	}}}
	assert handle >= 0
	var v = new MyFileWriter()
	v.setFile(this)
	v.handle = handle
	return v
}

func stat override as FileInfo
{
	var path = this.path
	var valid = true
	var size as int
	var ctim as long
	var atim as long
	var mtim as long
	var uid as int
	var gid as int
	var mode as int
	lang "lua" {{{
		size, ctim, atim, mtim, uid, gid, mode = _io:get_file_info(path)
		if size == nil then
			valid = false
		end
	}}}
	var v = new FileInfo()
	v.setFile(this)
	if not valid {
		v.setType(FileInfo.FILE_TYPE_UNKNOWN)
		return v
	}
	v.setSize(size)
	v.setCreateTime(ctim)
	v.setAccessTime(ctim)
	v.setModifyTime(mtim)
	v.setOwnerUser(uid)
	v.setOwnerGroup(gid)
	v.setMode(mode & 0x1FF)
	if mode & 0x8000 {
		v.setType(FileInfo.FILE_TYPE_FILE)
	}
	else if mode & 0x4000 {
		v.setType(FileInfo.FILE_TYPE_DIR)
	}
	else {
		v.setType(FileInfo.FILE_TYPE_UNKNOWN)
	}
	if mode & 0xA000:
		v.setLink(true)
	if mode & 0x40 || mode & 0x8 || mode & 0x1:
		v.setExecutable(true)
	return v
}

func createDirectory override as bool
{
	var path = this.path
	var r = lang "lua" int {{{ _io:create_directory(path) }}}
	if r == 1:
		return true
	return false
}

func createDirectoryRecursive override as bool
{
	if isDirectory():
		return true
	var parent = getParent()
	if parent:
		assert parent.createDirectoryRecursive()
	return createDirectory()
}

func removeDirectory override as bool
{
	var path = this.path
	var r = lang "lua" int {{{ _io:remove_directory(path) }}}
	if r == 1:
		return true
	return false
}

func normalizePath(apath as string) private as string
{
	var path = assert apath
	if OS.isWindows():
		path = String.replace(path, '\\', '/')
	var v = new StringBuilder()
	var comps = String.split(path, '/')
	foreach comp in comps {
		if String.isEmpty(comp) {
			;
		}
		else if comp == "." {
			;
		}
		else if comp == ".." {
			var str = v.toString()
			v.clear()
			if str {
				var slash = String.lastIndexOf(str, '/')
				if slash > 0:
					v.append(String.getSubString(str, 0, slash))
			}
		}
		else {
			if v.count() > 0:
				v.append('/')
			v.append(comp)
		}
	}
	if String.startsWith(path, "/"):
		return "/" .. v.toString()
	return v.toString()
}

func setPath(v as string)
{
	if String.isEmpty(v) {
		path = null
		return
	}
	if OS.isWindows() {
		var l = String.getLength(v)
		var c1 = String.getChar(v, 1)
		if l == 2 && c1 == ':' {
			path = v .. "/"
			return
		}
		var c2 = String.getChar(v, 2)
		if l == 3 && c1 == ':' && (c2 == '\\' || c2 == '/') {
			var sb = new StringBuilder()
			sb.append(String.getChar(v, 0))
			sb.append(':')
			sb.append('/')
			path = sb.toString()
			return
		}
	}
	var realpath as string
	lang "lua" {{{
		realpath = _io:get_real_path(v)
	}}}
	if String.isNotEmpty(realpath) {
		path = realpath
		if OS.isWindows():
			path = String.replace(path, '\\', '/')
		return
	}
	if Environment.isAbsolutePath(v) {
		path = normalizePath(v)
	}
	else {
		path = normalizePath(lang "lua" string {{{ _io:get_current_directory() }}} .. "/" .. v)
	}
}

func getPath override as string:
	return path

func remove override as bool
{
	var path = this.path
	if lang "lua" int {{{ _io:remove_file(path) }}} == 1:
		return true
	return false
}

func makeExecutable override as bool
{
	var path = this.path
	var mode = 1 | 4 | 8 | 32 | 64 | 128 | 256
	return lang "lua" bool {{{ _io:set_file_mode(path, mode ) }}}
}

class MyDirectoryIterator is Iterator<File> is Closable
{
	prop parent as File
	prop handle as object
	var current as File

	dtor
	{
		close()
	}

	func close
	{
		var handle = this.handle
		if handle {
			lang "lua" {{{
				_io:close_directory(handle)
			}}}
			this.handle = null
		}
	}

	func doNext as File
	{
		var handle = assert this.handle
		var name = lang "lua" string {{{ _io:read_directory(handle) }}}
		if not name {
			close()
			return null
		}
		return File.forRelativePath(name, parent)
	}

	func next as File
	{
		if current {
			var vv = current
			current = null
			return vv
		}
		return doNext()
	}

	func hasNext as bool
	{
		if current:
			return true
		var v = doNext()
		if v {
			current = v
			return true
		}
		return false
	}
}

func entries override as Iterator<File>
{
	var pp = this.path
	assert String.isNotEmpty(pp)
	var handle = lang "lua" object {{{ _io:open_directory(pp) }}}
	assert handle
	var v = new MyDirectoryIterator()
	v.setParent(this)
	v.setHandle(handle)
	return v
}
