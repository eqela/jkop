
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func checkEmailAddress(emailAddress as string) static as Error
{
	meta
	{
		description [[
			Addr-Spec Specification
			Reference https://tools.ietf.org/html/rfc5322#page-17
		]]
	}
	if String.isEmpty(emailAddress):
		return Error.forCode("noEmailAddress", "Please specify your email address")
	if String.getLength(emailAddress) > 254:
		return Error.forCode("noEmailAddress", "Please specify your email address")
	var ci = String.iterate(emailAddress)
	if not ci:
		return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
	var insideQuotation = false
	var outsideQuotation = false
	var dotPreceded = false
	var isFirstCharacter = true
	var containsAtCharacter = false
	var i = -1
	loop {
		i ++
		var c = ci.getNextChar()
		if c < 1:
			break
		if outsideQuotation {
			if c != 46 && c != 64:
				return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
		}
		if c >= 65 && c <= 90 {
			;
		}
		else if c >= 97 && c <= 122 {
			;
		}
		else if c >= 48 && c <= 57 {
			;
		}
		else if c == 33 {
			;
		}
		else if c >= 35 && c <= 39 {
			;
		}
		else if c == 42 {
			;
		}
		else if c == 43 {
			;
		}
		else if c == 45 {
			;
		}
		else if c == 47 {
			;
		}
		else if c == 61 {
			;
		}
		else if c == 63 {
			;
		}
		else if c >= 94 && c <= 96 {
			;
		}
		else if c >= 123 && c <= 126 {
			;
		}
		else if c == 46 {
			if isFirstCharacter:
				return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
			if dotPreceded && not insideQuotation:
				return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
			dotPreceded = true
			continue
		}
		else if c == 32 {
			if not insideQuotation:
				return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
		}
		else if c == 34 {
			if insideQuotation {
				insideQuotation = false
				outsideQuotation = true
			}
			else {
				if not isFirstCharacter && not dotPreceded:
					return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
				insideQuotation = true
				outsideQuotation = false
			}
		}
		else if c == 40 {
			if not insideQuotation:
				return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
		}
		else if c == 41 {
			if not insideQuotation:
				return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
		}
		else if c == 44 {
			if not insideQuotation:
				return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
		}
		else if c == 58 {
			if not insideQuotation:
				return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
		}
		else if c == 59 {
			if not insideQuotation:
				return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
		}
		else if c == 60 {
			if not insideQuotation:
				return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
		}
		else if c == 62 {
			if not insideQuotation:
				return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
		}
		else if c == 64 {
			if isFirstCharacter:
				return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
			if not insideQuotation {
				if dotPreceded:
					return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
				containsAtCharacter = true
				break
			}
		}
		else if c == 91 {
			if not insideQuotation:
				return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
		}
		else if c == 92 {
			if not insideQuotation:
				return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
		}
		else if c == 93 {
			if not insideQuotation:
				return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
		}
		else {
			return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
		}
		isFirstCharacter = false
		dotPreceded = false
	}
	if i < 0:
		return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
	if (i > 64):
		return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
	if not containsAtCharacter:
		return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
	var domain = String.getSubString(emailAddress, i + 1, String.getLength(emailAddress))
	if String.isEmpty(domain):
		return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
	if String.getLength(domain) > 253:
		return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
	if String.startsWith(domain, "[") {
		if not String.endsWith(domain, "]"):
			return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
		var ip = String.getSubString(domain, 1, String.getLength(domain) - 2)
		if String.isEmpty(ip):
			return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
		var nodes = String.split(ip, '.')
		if not nodes || sizeof nodes != 4:
			return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
		foreach node in nodes {
			ci = String.iterate(node)
			loop {
				var c = ci.getNextChar()
				if c < 1:
					break
				if c >= 48 && c <= 57 {
					;
				}
				else {
					return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
				}
			}
			var n = String.toInteger(node)
			if n < 0 || n > 255:
				return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
		}
		return null
	}
	foreach label in String.split(domain, '.') {
		if String.isEmpty(label):
			return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
		if String.getLength(label) > 63:
			return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
		ci = String.iterate(label)
		if not ci:
			return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
		var hyphenPreceded = false
		isFirstCharacter = true
		loop {
			var c = ci.getNextChar()
			if c < 1:
				break
			if c >= 65 && c <= 90 {
				;
			}
			else if c >= 97 && c <= 122 {
				;
			}
			else if c >= 48 && c <= 57 {
				;
			}
			else if c == 45 {
				if isFirstCharacter:
					return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
				hyphenPreceded = true
				isFirstCharacter = false
				continue
			}
			else {
				return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
			}
			hyphenPreceded = false
			isFirstCharacter = false
		}
		if hyphenPreceded:
			return Error.forCode("invalidEmailAddress", "Please specify a valid email address")
	}
	return null
}
