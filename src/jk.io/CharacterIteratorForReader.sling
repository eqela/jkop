
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is CharacterDecoder:

func forReader(reader as Reader) static as this:
	return new this(reader)

func forReaderWithBufferSize(reader as Reader, bufferSize as long) static as this:
	return new this(reader, bufferSize)

var reader as Reader
var buffer as buffer = null
var bufferStart as long = -1
var bufferSize as long = 0
var bufferDataSize as long = 0
var currentPos as long = -1
var readPos as long = 0

ctor(reader as Reader)
{
	this.reader = reader
	this.buffer = malloc 1024
	this.bufferSize = 1024
}

ctor(reader as Reader, bufferSize as long)
{
	this.reader = reader
	this.buffer = malloc bufferSize
	this.bufferSize = bufferSize
}

func makeDataAvailable(n as long) private as bool
{
	if n >= bufferStart && n < bufferStart + bufferDataSize:
		return true
	if reader is SeekableReader {
		var rs = reader as! SeekableReader
		var block = n / bufferSize
		var blockPos = block * bufferSize
		if readPos != blockPos {
			assert rs.setCurrentPosition(blockPos)
			readPos = blockPos
		}
	}
	bufferDataSize = reader.read(buffer)
	bufferStart = readPos
	readPos += bufferDataSize
	if n >= bufferStart && n < bufferStart + bufferDataSize:
		return true
	return false
}

func moveToPreviousByte override as bool
{
	assert makeDataAvailable(currentPos - 1)
	currentPos --
	return true
}

func moveToNextByte override as bool
{
	assert makeDataAvailable(currentPos + 1)
	currentPos ++
	return true
}

func getCurrentByte override as int:
	return Buffer.getByte(buffer, currentPos - bufferStart)

func getCurrentPosition override as int:
	return currentPos

func setCurrentPosition(position as int) override:
	currentPos = position
