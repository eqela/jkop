
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

import cave.ui

var fcmPublicVapidKey private static as string
var listener private static as FCMWebPushListener
var screen private static as ScreenForWidget

**
** Handles received push notification data and passes it as a parameter to the onStartScreenWithData()
** method of the configured instance inheriting ScreenForWidget class, if there is.
**

func onMessage(data as string) static
{
	assert screen
	screen.onStartScreenWithData(JSONParser.parse(data) as DynamicMap)
}

**
** Handles a received FCM token by storing it in the FCMTokenManager class and passing it to the
** configured instance implementing the FCMWebPushListener interface, if there is.
**

func onFCMTokenReceived(newToken as string) static
{
	FCMTokenManager.onNewFCMToken(newToken)
	if listener:
		listener.onFCMTokenReceived(newToken)
}

**
** Returns the public VAPID key.
**

func getFcmPublicVapidKey static as string:
	return fcmPublicVapidKey

**
** Initializes the Firebase Cloud Messaging for web push notification.
**

func initialize(key as string, sc as ScreenForWidget, l as FCMWebPushListener) static
{
	fcmPublicVapidKey = key
	screen = sc
	listener = l
	lang "js" {{{
		const messaging = firebase.messaging();
		messaging.usePublicVapidKey(CaveGoogleFcmFCMWebPush.getFcmPublicVapidKey());
		messaging.requestPermission()
		.then(function() {
			return messaging.getToken();
		})
		.then(function(token) {
			CaveGoogleFcmFCMWebPush.onFCMTokenReceived(token);
		})
		.catch(function(error) {
			console.log(error);
		});
		messaging.onTokenRefresh(function() {
			messaging.getToken().then(function(refreshedToken) {
				CaveGoogleFcmFCMWebPush.onFCMTokenReceived(refreshedToken);
			}).catch(function(err) {
				console.log(error);
			});
		});
		messaging.onMessage(function(payload) {
			CaveGoogleFcmFCMWebPush.onMessage(JSON.stringify(payload));
		});
		if('serviceWorker' in navigator) {
			navigator.serviceWorker.onmessage = function(evt) {
				try {
					CaveGoogleFcmFCMWebPush.onMessage(JSON.stringify(evt.data.FCM_MSG));
				}
				catch(e) {
				}
			};
		}
	}}}
}

func isBrowserSupported static as bool
{
	if HTMLDOM.isSafari() || HTMLDOM.isInternetExplorer():
		return false
	return true
}
