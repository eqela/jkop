
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is LayerWidget imports capex.crypto, capex.net #widget #main:

var socket as WSSocket
var statusWidget as LabelWidget
var messageWidget as TextInputWidget

func initializeWidget override
{
	base.initializeWidget()
	socket = WSSocket.create()
	var vbox = VerticalBoxWidget.forContext(context)
	vbox.addWidget(statusWidget = new LabelWidget(context))
	vbox.addWidget(messageWidget = new TextInputWidget(context))
	vbox.addWidget(TextButtonWidget.forText(context, "connect", func {
		statusWidget.setWidgetText("connecting..")
		socket.connect("ws://echo.websocket.org", "no sub-protocols")
	}))
	vbox.addWidget(TextButtonWidget.forText(context, "disconnect", func {
		statusWidget.setWidgetText("disconnecting..")
		socket.close(1000, "Sample reason for closing")
	}))
	vbox.addWidget(TextButtonWidget.forText(context, "send", func {
		statusWidget.setWidgetText("sending.. the message might have been sent by now but no means to know")
		socket.send(WSMessage.forStringData(messageWidget.getWidgetText()))
		messageWidget.setWidgetText("")
	}))
	addWidget(CanvasWidget.forColor(context, Color.white()))
	addWidget(vbox)
	socket.setOnOpenCallback(func {
		statusWidget.setWidgetText("connected!")
	})
	socket.setOnMessageCallback(func(message as WSMessage) {
		var text = String.forUTF8Buffer(message.getData())
		statusWidget.setWidgetText("message from server: '" .. text .. "'")
	})
	socket.setOnErrorCallback(func {
		var shaEncoder = assert SHAEncoder.create()
		statusWidget.setWidgetText("error!")
	})
	socket.setOnCloseCallback(func(e as WSCloseEvent) {
		assert e.getReason() {
			statusWidget.setWidgetText("disconnected: status: '" .. String.forInteger(e.getStatusCode()) .. "'")
		}
		statusWidget.setWidgetText("disconnected: status: '" .. String.forInteger(e.getStatusCode()) .. "' reason: '" .. e.getReason() .. "'")
	})
}
