
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.http.server
import jk.template
import jk.json
import jk.log

class is HTTPServerRequestHandlerAdapter:

func forDirectory(dir as File) static as this
{
	var v = new this()
	v.setDirectory(dir)
	return v
}

pvar listDirectories = false
pvar processTemplateFiles = false
pvar directory as File
pvar maxAge = 300
pvar serverURL as string
pvar indexFiles as vector<string>
pvar templateIncludeDirs as vector<File>
var serverName as string
pvar templateData as DynamicMap

func addTemplateIncludeDir(dir as File)
{
	if dir == null:
		return
	if templateIncludeDirs == null:
		templateIncludeDirs = new vector<File>
	templateIncludeDirs += dir
}

func setIndexFiles(files as array) as this
{
	indexFiles = new vector<string>
	foreach file as string in files:
		indexFiles += file
	return this
}

func setServerName(name as string) as this
{
	this.serverName = name
	return this
}

func getServerName as string
{
	if serverName:
		return serverName
	var server = assert getServer()
	return server.getServerName()
}

func getDirectoryEntries(dir as File, allEntries as vector<string>, dirs as vector<string>, files as vector<string>)
{
	assert dir
	var entries as Iterator<File> #force = dir.entries()
	while entries {
		var entry = entries.next()
		if entry == null:
			break
		var name = entry.getBasename()
		if dirs && entry.isDirectory():
			dirs += name
		if files && entry.isFile():
			files += name
		if allEntries:
			allEntries += name
	}
}

func dirToJSONObject(dir as File) as DynamicMap
{
	var allEntries = new vector<string>
	var dirs = new vector<string>
	var files = new vector<string>
	getDirectoryEntries(dir, allEntries, dirs, files)
	var v = new DynamicMap()
	v.setObject("files", DynamicVector.forStringVector(files)) // FIXME: MergeSort.sort(get_directory_entries_files(ff)))
	v.setObject("dirs", DynamicVector.forStringVector(dirs)) // FIXME: MergeSort.sort(get_directory_entries_dirs(ff)))
	v.setObject("all", DynamicVector.forStringVector(allEntries))
	return v
}

func dirToJSON(dir as File) as string:
	return JSONEncoder.encode(dirToJSONObject(dir))

func getTemplateVariablesForFile(file as File) virtual as DynamicMap:
	return null

func dirToHTML(dir as File) as string
{
	assert dir
	var sb = new StringBuilder()
	sb.appendString("<html>\n")
	sb.appendString("<head>\n")
	sb.appendString("<title>")
	sb.appendString(dir.getBasename())
	sb.appendString("</title>\n")
	sb.appendString("<style>\n")
	sb.appendString("* { font-face: arial; font-size: 12px; }\n")
	sb.appendString("h1 { font-face: arial; font-size: 14px; font-style: bold; border-bottom: solid 1px black; padding: 4px; margin: 4px}\n")
	sb.appendString("#content a { text-decoration: none; color: #000080; }\n")
	sb.appendString("#content a:hover { text-decoration: none; color: #FFFFFF; font-weight: bold; }\n")
	sb.appendString(".entry { padding: 4px; }\n")
	sb.appendString(".entry:hover { background-color: #AAAACC; }\n")
	sb.appendString(".dir { font-weight: bold; }\n")
	sb.appendString(".even { background-color: #DDDDDD; }\n")
	sb.appendString(".odd { background-color: #EEEEEE; }\n")
	sb.appendString("#footer { border-top: 1px solid black; padding: 4px; margin: 4px; font-size: 10px; text-align: right; }\n")
	sb.appendString("#footer a { font-size: 10px; text-decoration: none; color: #000000; }\n")
	sb.appendString("#footer a:hover { font-size: 10px; text-decoration: underline; color: #000000; }\n")
	sb.appendString("</style>\n")
	sb.appendString("<meta name=\"viewport\" content=\"initial-scale=1,maximum-scale=1\" />\n")
	sb.appendString("</head>\n")
	sb.appendString("<body>\n")
	sb.appendString("<h1>")
	sb.appendString(dir.getBasename())
	sb.appendString("</h1>\n")
	sb.appendString("<div id=\"content\">\n")
	var dirs = new vector<string>
	var files = new vector<string>
	getDirectoryEntries(dir, null, dirs, files)
	// FIXME: Sort dirs
	// FIXME: Sort files
	var n = 0
	foreach dn in dirs {
		var cc as string
		if n % 2 == 0 {
			cc = "even"
		}
		else {
			cc = "odd"
		}
		sb.appendString("<a href=\"")
		sb.appendString(dn)
		sb.appendString("/\"><div class=\"entry dir ")
		sb.appendString(cc)
		sb.appendString("\">")
		sb.appendString(dn)
		sb.appendString("/</div></a>\n")
		n++
	}
	foreach fn in files {
		var cc as string
		if n % 2 == 0 {
			cc = "even"
		}
		else {
			cc = "odd"
		}
		sb.appendString("<a href=\"")
		sb.appendString(fn)
		sb.appendString("\"><div class=\"entry ")
		sb.appendString(cc)
		sb.appendString("\">")
		sb.appendString(fn)
		sb.appendString("</div></a>\n")
		n++
	}
	sb.appendString("</div>\n")
	sb.appendString("<div id=\"footer\">")
	var serverName = getServerName()
	if String.isEmpty(serverName) == false {
		if String.isEmpty(serverURL) == false {
			sb.appendString("Generated by <a href=\"")
			if String.contains(serverURL, "://") == false:
				sb.appendString("http://")
			sb.appendString(serverURL)
			sb.appendString("\">")
			sb.appendString(serverName)
			sb.appendString("</a>\n")
		}
		else {
			sb.appendString("Generated by ")
			sb.appendString(serverName)
			sb.appendString("\n")
		}
	}
	sb.appendString("</div>\n")
	sb.appendString("</body>\n")
	sb.appendString("</html>\n")
	return sb.toString()
}

func onGET(req as HTTPServerRequest) override as bool
{
	var startingResource = req.getCurrentResource()
	if directory == null:
		return false
	var dd = directory
	loop {
		var comp = req.popResource()
		if comp == null:
			break
		dd = dd.entry(comp)
	}
	if dd.isDirectory() {
		foreach indexFile in indexFiles {
			var ff = dd.entry(indexFile)
			if ff.isFile() {
				dd = ff
				break
			}
		}
	}
	if dd.isDirectory() {
		if req.isForDirectory() == false {
			req.sendRedirectAsDirectory()
			return true
		}
		if listDirectories == false {
			if startingResource != req.getCurrentResource():
				req.setCurrentResource(startingResource)
			return false
		}
		req.sendHTMLString(dirToHTML(dd))
		return true
	}
	if dd.exists() == false && processTemplateFiles {
		var bn = dd.getBasename()
		var nf = dd.getParent().entry(bn .. ".t")
		if nf.isFile() {
			dd = nf
		}
		else {
			nf = dd.getParent().entry(bn .. ".html.t")
			if nf.isFile():
				dd = nf
		}
	}
	if dd.isFile() {
		var resp as HTTPServerResponse
		if processTemplateFiles {
			var bn = dd.getBasename()
			var isJSONTemplate = false
			var isHTMLTemplate = false
			var isCSSTemplate = false
			if String.endsWith(bn, ".html.t") {
				isHTMLTemplate = true
			}
			else if String.endsWith(bn, ".css.t") {
				isCSSTemplate = true
			}
			else if String.endsWith(bn, ".json.t") {
				isJSONTemplate = true
			}
			if isHTMLTemplate || isCSSTemplate || isJSONTemplate {
				var data = dd.getContentsUTF8()
				if data == null {
					Log.error(logContext, "Failed to read template file content: `" .. dd.getPath() .. "'")
					req.sendResponse(HTTPServerResponse.forHTTPInternalError())
					return true
				}
				var includeDirs = new vector<File>
				includeDirs += dd.getParent()
				foreach dir in templateIncludeDirs:
					includeDirs += dir
				var tt as TextTemplate
				if isHTMLTemplate || isCSSTemplate {
					tt = TextTemplate.forHTMLString(data, includeDirs, null, logContext)
				}
				else {
					tt = TextTemplate.forJSONString(data, includeDirs, null, logContext)
				}
				if tt == null {
					Log.error(logContext, "Failed to process template file content: `" .. dd.getPath() .. "'")
					req.sendResponse(HTTPServerResponse.forHTTPInternalError())
					return true
				}
				var tdata = templateData
				var dynamicData = getTemplateVariablesForFile(dd)
				if dynamicData {
					if tdata == null {
						tdata = dynamicData
					}
					else {
						tdata.mergeFrom(dynamicData)
					}
				}
				var text = tt.execute(tdata, includeDirs)
				if text == null {
					Log.error(logContext, "Failed to execute template: `" .. dd.getPath() .. "'")
					req.sendResponse(HTTPServerResponse.forHTTPInternalError())
					return true
				}
				if isHTMLTemplate {
					resp = HTTPServerResponse.forHTMLString(text)
				}
				else if isCSSTemplate {
					resp = HTTPServerResponse.forString(text, "text/css")
				}
				else {
					resp = HTTPServerResponse.forJSONString(text)
				}
			}
		}
		if resp == null:
			resp = HTTPServerResponse.forFile(dd)
		if maxAge > 0:
			resp.addHeader("Cache-Control", "max-age=" .. String.forInteger(maxAge))
		req.sendResponse(resp)
		return true
	}
	if startingResource != req.getCurrentResource():
		req.setCurrentResource(startingResource)
	return false
}
