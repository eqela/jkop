
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.xml
import jk.log
import jk.env
import jk.process

class is PackageMaker:

pvar installerVersion = "200"
pvar wixPath as File
pvar useInstallerGui = false

func sanitize(str as string) private as string
{
	var v = String.strip(str)
	assert String.isNotEmpty(v)
	var itr = assert String.iterate(v)
	var sb = new StringBuilder()
	loop {
		var c = itr.getNextChar()
		if c < 1:
			break
		if (c >= 48 && c <= 57) || (c >= 65 && c <= 90) || c == 46 || c == 95 || (c >= 97 && c <= 122):
			sb.appendCharacter(c)
	}
	return sb.toString()
}

func constructComponents(dir as File, xml as XMLMaker, componentMap as DynamicMap, prefix as string) as bool
{
	assert dir && xml
	var itr = assert dir.entries()
	loop {
		var f = itr.next()
		if not f:
			break
		if f.isDirectory() {
			assert constructComponents(f, xml, componentMap, prefix .. "_" .. f.getBasename())
			continue
		}
		var name = f.getBasename()
		assert String.isNotEmpty(name)
		var sanitizedName = sanitize(name)
		assert String.isNotEmpty(sanitizedName)
		var componentId = "Component" .. sanitizedName
		var fileId = "File" .. sanitizedName
		var guid = GuidGenerator.generate("component_name" .. prefix .. "_" .. name)
		componentMap.setString(componentId, guid)
		xml.startWithAttributeMap("Component", new map {
			Id componentId
			Guid guid
		})
		xml.startWithAttributeMap("File", new map {
			Id fileId
			Name name
			DiskId "1"
			Source name
			KeyPath "yes"
		})
		xml.end("File")
		xml.end("Component")
	}
	return true
}

func generateXml(tmp as File, packageInfo as PackageInfo) private as string
{
	var manufacturer = packageInfo.vendor
	var package = packageInfo.name
	var version = packageInfo.version
	var productGUID = GuidGenerator.generate(manufacturer .. ":" .. package .. ":" .. version)
	var upgradeGUID = GuidGenerator.generate(manufacturer .. ":" .. package)
	var componentGUID = GuidGenerator.generate(manufacturer .. ":" .. package .. "_component")
	var xml = new XMLMaker()
	// xml.setHeader("<?xml version=\"1.0\" encoding=\"windows-1252\"?>")
	xml.startWithAttributeMap("Wix", new map {
		xmlns "http://schemas.microsoft.com/wix/2006/wi"
	})
	xml.startWithAttributeMap("Product", new map {
		Name packageInfo.title
		Id productGUID
		UpgradeCode upgradeGUID
		Language "1033"
		Codepage "1252"
		Version version
		Manufacturer manufacturer
	})
	xml.element("Package", new map {
		Id "*"
		Keywords "Installer"
		Description packageInfo.description
		Manufacturer manufacturer
		InstallerVersion installerVersion
		Languages "1033"
		Compressed "yes"
		SummaryCodepage "1252"
	})
	xml.element("Media", new map {
		Id "1"
		Cabinet "data.cab"
		EmbedCab "yes"
		DiskPrompt packageInfo.title .. " Installation"
	})
	xml.element("Property", new map {
		Id "DiskPrompt"
		Value packageInfo.title .. " Installation"
	})
	xml.startWithAttributeMap("Directory", new map { Id "TARGETDIR" Name "SourceDir" })
	xml.startWithAttributeMap("Directory", new map { Id "ProgramFilesFolder" Name "PFiles" })
	xml.startWithAttributeMap("Directory", new map { Id "RootFolder" Name manufacturer })
	xml.startWithAttributeMap("Directory", new map { Id "INSTALLDIR" Name package })
	var componentMap = new DynamicMap()
	assert constructComponents(tmp, xml, componentMap, "")
	xml.end("Directory")
	xml.end("Directory")
	xml.end("Directory")
	xml.startWithAttributeMap("Directory", new map { Id "ProgramMenuFolder" Name "Programs" })
	xml.startWithAttributeMap("Directory", new map { Id "ProgramMenuDir" Name package })
	xml.startWithAttributeMap("Component", new map { Id "ProgramMenuDir" Guid componentGUID })
	xml.element("RemoveFolder", new map { Id "ProgramMenuDir" On "uninstall" })
	xml.element("RegistryValue", new map {
		Root "HKCU"
		Key "Software\[Manufacturer]\[ProductName]"
		Type "string"
		Value ""
		KeyPath "yes"
	})
	if String.isNotEmpty(packageInfo.executables) {
		xml.element("Environment", new map {
			Id "PATH"
			Name "PATH"
			Value "[INSTALLDIR]"
			Permanent "no"
			Part "last"
			Action "set"
			System "no"
		})
	}
	xml.end("Component")
	xml.end("Directory")
	xml.end("Directory")
	xml.startWithAttributeMap("Directory", new map { Id "DesktopFolder" Name "Desktop" })
	xml.end("Directory")
	xml.end("Directory")
	xml.startWithAttributeMap("Feature", new map { Id "Complete" Level "1" })
	foreach componentId in componentMap.getKeys():
		xml.element("ComponentRef", new map { Id componentId })
	xml.element("ComponentRef", new map { Id "ProgramMenuDir" })
	xml.end("Feature")
	if useInstallerGui:
		xml.element("UIRef", new map { Id "WixUI_Minimal" })
	xml.end("Product")
	xml.end("Wix")
	return xml.toString()
}

func doExecute(ctx as LoggingContext, sourceDir as File, destinationDir as File, packageInfo as PackageInfo, tmp as File) private as bool
{
	Log.status(ctx, "[msi] Copying files .. ")
	sourceDir.copyFileOrDirectoryTo(tmp)
	var wxs = tmp.entry("installer.wxs")
	Log.status(ctx, "[msi] Generating configuration .. ")
	var contents = generateXml(tmp, packageInfo)
	wxs.setContentsUTF8(contents)
	var candleExe as File
	var lightExe as File
	if wixPath {
		candleExe = wixPath.entry("candle").asExecutable()
		assert candleExe && candleExe.isFile():
			Log.error(ctx, "File does not exist: `" .. candleExe.getPath() .. "'")
		lightExe = wixPath.entry("light").asExecutable()
		assert lightExe && lightExe.isFile():
			Log.error(ctx, "File does not exist: `" .. lightExe.getPath() .. "'")
	}
	else {
		assert candleExe = ExternalCommand.findInPath("candle"):
			Log.error(ctx, "Wix command not found: `candle'")
		assert lightExe = ExternalCommand.findInPath("light"):
			Log.error(ctx, "Wix command not found: `light'")
	}
	Log.status(ctx, "[msi] Compiling installer .. ")
	var candle = assert ProcessLauncher.forFile(candleExe):
		Log.error(ctx, "Failed to create process launcher for file: `" .. candleExe.getPath() .. "'")
	candle.setCwd(tmp)
	candle.addToParams("-o")
	candle.addToParams("installer.wixobj")
	candle.addToParams(wxs.getBasename())
	var sb = new StringBuilder()
	assert candle.executeToStringBuilder(sb) == 0:
		Log.error(ctx, "Wix candle error: " .. sb.toString())
	var light = assert ProcessLauncher.forFile(lightExe):
		Log.error(ctx, "Failed to create process launcher for file: `" .. lightExe.getPath() .. "'")
	light.setCwd(tmp)
	var msi = tmp.entry(packageInfo.name .. "_" .. packageInfo.version .. "_" .. packageInfo.platform .. ".msi")
	if useInstallerGui {
		light.addToParams("-ext")
		light.addToParams("WixUIExtension")
		light.addToParams("-cultures:en-us")
	}
	light.addToParams("-o")
	light.addToParams(msi.getBasename())
	light.addToParams("installer.wixobj")
	assert light.executeToStringBuilder(sb) == 0:
		Log.error(ctx, "Wix light error: " .. sb.toString())
	if not destinationDir.isDirectory():
		destinationDir.createDirectoryRecursive()
	var finalFile = destinationDir.entry(msi.getBasename())
	msi.copyFileTo(finalFile)
	Log.info(ctx, finalFile.getPath())
	return true
}

func execute(ctx as LoggingContext, sourceDir as File, destinationDir as File, packageInfo as PackageInfo) as bool
{
	assert packageInfo
	assert sourceDir
	assert destinationDir
	var tmp = assert TemporaryDirectory.create():
		Log.error(ctx, "Failed to create temporary directory")
	var v = doExecute(ctx, sourceDir, destinationDir, packageInfo, tmp)
	tmp.removeRecursive()
	return v
}
