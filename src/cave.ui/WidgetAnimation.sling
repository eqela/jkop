
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import cave

class:

func forDuration(context as GuiApplicationContext, duration as long) static as this
{
	var v = new this(context)
	v.setDuration(duration)
	return(v)
}

var context as GuiApplicationContext
prop duration as long
var callbacks as vector<function<void,double>>
prop endListener as function
prop shouldStop = false
prop shouldLoop = false

ctor(context as GuiApplicationContext)
{
	this.context = context
	callbacks = new vector<function<void,double>>
}

func addCallback(callback as function<void,double>) as this
{
	if(callback != null) {
		callbacks += callback
	}
	return(this)
}

func addCrossFade(from as Widget, to as Widget, removeFrom as bool = false) as this
{
	var ff final = from
	var tt final = to
	var rf final = removeFrom
	addCallback(func(completion as double) {
		Widget.setAlpha(ff, 1.0 - completion)
		Widget.setAlpha(tt, completion)
		if(rf && completion >= 1.0) {
			Widget.removeFromParent(ff)
		}
	})
	return(this)
}

func addFadeIn(from as Widget) as this
{
	var ff final = from
	addCallback(func(completion as double) {
		Widget.setAlpha(ff, completion)
	})
	return(this)
}

func addFadeOut(from as Widget, removeAfter as bool = false) as this
{
	var ff final = from
	var ra final = removeAfter
	addCallback(func(completion as double) {
		Widget.setAlpha(ff, 1.0 - completion)
		if(ra && completion >= 1.0) {
			Widget.removeFromParent(ff)
		}
	})
	return(this)
}

func addFadeOutIn(from as Widget) as this
{
	var ff final = from
	addCallback(func(completion as double) {
		var r = Math.remainder(completion, 1.0)
		if(r < 0.5) {
			Widget.setAlpha(ff, 1.0 - r*2)
		}
		else {
			Widget.setAlpha(ff, (r-0.5)*2)
		}
	})
	return(this)
}

func tick(completion as double) virtual
{
	foreach(callback in callbacks) {
		callback(completion)
	}
}

func onProgress(elapsedTime as long) as bool
{
	var completion = (elapsedTime as double) / (duration as double)
	tick(completion)
	if((shouldLoop == false && completion >= 1.0) || shouldStop) {
		onAnimationEnded()
		return(false)
	}
	return(true)
}

func onAnimationEnded virtual
{
	if(endListener != null) {
		endListener()
	}
}

IFDEF("target_html")
{
	var startTime as long

	func onAnimationFrame
	{
		if(onProgress(lang "js" long {{{ this.getPerformanceNow() - this.startTime }}})) {
			lang "js" {{{
				requestAnimationFrame(function(e) { this.onAnimationFrame(); }.bind(this));
			}}}
		}
	}

	func getPerformanceNow
	{
		lang "js" {{{
			if("performance" in window == true && "now" in window.performance == true) {
				return(window.performance.now());
			}
			return(Date.now());
		}}}
	}
}

IFDEF "target_android"
{
	class MyAnimatorListener implements !"android.animation.TimeAnimator.TimeListener"
	{
		prop listener as parent
		prop startTime as long = -1
		prop duration as long
		prop animator as !"android.animation.TimeAnimator"

		func onTimeUpdate(animation as !"android.animation.TimeAnimator", totalTime as long, deltaTime as long) implement
		{
			if(startTime < 0) {
				startTime = totalTime
			}
			if(listener.onProgress(totalTime - startTime) == false) {
				animator.end()
			}
		}
	}

	var animator as !"android.animation.TimeAnimator"
}

IFDEF "target_ios_objc"
{
	var displayLink as !"CADisplayLink"
	var startTime as double = 0
	depend "objc-framework:QuartzCore"

	func onAnimationFrame
	{
		if(startTime <= 0.0) {
			lang "objc" {{{
				startTime = [displayLink timestamp];
			}}}
		}
		var currentTime = lang "objc" double {{{ [displayLink timestamp] }}}
		var diff = currentTime - startTime
		var diffms = Math.round(diff * 1000) as int
		if(onProgress(diffms) == false) {
			lang "objc" {{{
				[displayLink removeFromRunLoop:[NSRunLoop currentRunLoop] forMode:NSRunLoopCommonModes];
			}}}
			displayLink = null
		}
	}
}

IFDEF "target_swift"
{
	var displayLink as !"CADisplayLink"
	var startTime as double = 0
	depend "swift-import:QuartzCore"
	depend "swift-import:UIKit"

	lang "swift" {{{
		@objc public func onAnimationFrame() {
			if self.startTime <= 0.0 {
				self.startTime = displayLink.timestamp
			}
			var currentTime: Swift.Double = displayLink.timestamp
			var diff: Swift.Double = currentTime - self.startTime
			var diffms: Swift.Int = Swift.Int(CapeMath.round16(diff * 1000))
			if self.onProgress(Swift.Int64(diffms)) == false {
				displayLink.remove(from : RunLoop.current, forMode: RunLoop.Mode.common)
				self.displayLink = nil
			}
		}
	}}}
}

func start
{
	IFDEF("target_html") {
		startTime = lang "js" long {{{ this.getPerformanceNow() }}}
		lang "js" {{{
			requestAnimationFrame(function(e) { this.onAnimationFrame(); }.bind(this));
		}}}
	}
	ELSE IFDEF "target_android" {
		animator = new !"android.animation.TimeAnimator"()
		var listener = new MyAnimatorListener()
		listener.setListener(this)
		listener.setDuration(duration)
		listener.setAnimator(animator)
		animator.setTimeListener(listener)
		animator.start()
	}
	ELSE IFDEF "target_ios_objc" {
		lang "objc" {{{
			displayLink = [CADisplayLink displayLinkWithTarget:self selector:@selector(onAnimationFrame)];
			[displayLink addToRunLoop:[NSRunLoop mainRunLoop] forMode:NSRunLoopCommonModes];
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			displayLink = CADisplayLink(target: self, selector: #selector(onAnimationFrame))
			displayLink.add(to: RunLoop.main, forMode: RunLoop.Mode.common)
		}}}
	}
	ELSE {
		ERROR("Not implemented")
	}
}
