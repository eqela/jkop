
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.render

class is ParentAwareWidget is ResizeAwareWidget #widget:

func forRenderer(ctx as GuiApplicationContext, renderer as Renderer) static as this
{
	var v = new this(ctx)
	v.setRenderer(renderer)
	return v
}

IFDEF "target_android"
{
	extend !"android.view.View"
	isAlso Widget

	func onDraw(canvas as !"android.graphics.Canvas") override
	{
		IFDEF "target_java" {
			lang "java" {{{
				super.onDraw(canvas);
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				super.onDraw(canvas)
			}}}
		}
		render(RenderingContextForAndroid.forCanvas(context, canvas))
	}
}
ELSE IFDEF "target_html"
{
	is Widget

	var renderContext as RenderingContext

	func createElement override as object:
		return HTMLDOM.createElement("canvas")
}
ELSE IFDEF "target_ios"
{
	extend !"UIView"
	isAlso Widget

	IFDEF "target_swift" {
		depend "swift-import:UIKit"
		depend "swift-import:CoreGraphics"

		lang "swift" {{{
			public override func draw(_ rect: CGRect) {
				super.draw(_:rect)
				self.render(JkUiRenderingContextForSwift.forContext(self.context, UIGraphicsGetCurrentContext()))
			}
		}}}
	}
}
ELSE
{
	extend Widget
}

var context protected as GuiApplicationContext
pvar renderer as Renderer

ctor(ctx as GuiApplicationContext)
{
	IFDEF "target_android" {
		base((ctx as! GuiApplicationContextForAndroid).getActivityContext())
	}
	ELSE IFDEF "target_ios" {
		IFDEF "target_swift" {
			lang "swift" {{{
				super.init(frame: CGRect.zero)
			}}}
		}
	}
	context = ctx
	IFDEF "target_html" {
		renderContext = RenderingContextForHTMLCanvas.forElement(element)
	}
}

func render(ctx as RenderingContext) virtual
{
	if renderer:
		renderer.render(ctx, Widget.getWidth(this), Widget.getHeight(this))
}

func redraw
{
	IFDEF "target_html" {
		var thisWidget #used = this
		lang "js" {{{
			window.requestAnimationFrame(function() {
				thisWidget.render(thisWidget.renderContext);
			});
		}}}
	}
	ELSE IFDEF "target_android" {
		IFDEF "target_java" {
			lang "java" {{{
				invalidate();
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				invalidate()
			}}}
		}
	}
	ELSE IFDEF "target_ios" {
		IFDEF "target_swift" {
			lang "swift" {{{
				setNeedsDisplay()
			}}}
		}
	}
	ELSE {
		ERROR "Not implemented"
	}
}

func onWidgetResized virtual
{
	IFDEF "target_html" {
		HTMLDOM.setAttribute(element, "width", String.forInteger(Widget.getWidth(this)) .. "px")
		HTMLDOM.setAttribute(element, "height", String.forInteger(Widget.getHeight(this)) .. "px")
		redraw()
	}
}

func onWidgetAddedToParent virtual
{
}

func onWidgetRemovedFromParent virtual
{
}

func onWidgetAddingToParent
{
}
