
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log

class:

var arg public as string
var parameter public as string
var flag public as string
var key public as string
var value public as string

ctor(arg as string, parameter as string, flag as string, key as string, value as string)
{
	this.arg = arg
	this.parameter = parameter
	this.flag = flag
	this.key = key
	this.value = value
}

func isParameter as bool
{
	if parameter:
		return true
	return false
}

func isFlag as bool
{
	if flag:
		return true
	return false
}

func isOption as bool
{
	if key:
		return true
	return false
}

func isFlag(text as string) as bool
{
	if text && String.equalsIgnoreCase(text, flag):
		return true
	return false
}

func isOption(text as string) as bool
{
	if text && String.equalsIgnoreCase(text, key):
		return true
	return false
}

func hasValue as bool
{
	if value:
		return true
	return false
}

func getKey as string:
	return key

func getComplete as string:
	return arg

func getStringValue as string:
	return value

func getIntegerValue as int:
	return Integer.asInteger(value)

func getBooleanValue as bool:
	return Boolean.asBoolean(value)

func reportAsUnsupported(ctx as LoggingContext):
	Log.error(ctx, "Unsupported command line parameter: `" .. arg .. "'")
