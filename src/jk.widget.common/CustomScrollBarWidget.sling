
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.render

class is RenderableWidget #widget #ignoreNamingConvention:

pvar widgetOnScrollCallback as function<void, double, double>
pvar widgetMaximumValueY = 1000.0
pvar widgetVisibleHeight = 40.0
pvar widgetScrollableHeight = 100.0
pvar widgetSpeedY = 0.5
var valueY private = 0.0
var scrollBarY private = 0.0
var scrollBarHeight private = 0.0

func onWidgetResized override
{
	computeScrollBarLayout()
	base.onWidgetResized()
}

func render(ctx as RenderingContext) override
{
	ctx.clearRect(0, 0, Widget.getWidth(this), Widget.getHeight(this))
	ctx.setFillStyle(Color.forString("red"))
	ctx.fillRect(0, scrollBarY, Widget.getWidth(this), scrollBarHeight)
	valueY = (scrollBarY / (Widget.getHeight(this) - scrollBarHeight)) * widgetMaximumValueY
}

func computeScrollBarLayout private
{
	scrollBarHeight = (widgetVisibleHeight / widgetScrollableHeight) * Widget.getHeight(this)
	scrollBarY = ((valueY / widgetMaximumValueY) * (Widget.getHeight(this) - scrollBarHeight))
}

IFDEF "target_html" {
	func prepareElement(element as object) override
	{
		base.prepareElement(element)
		HTMLDOM.addEventListener(element, "wheel", func(e as object) {
			onWheel(e)
		})
	}

	func onWheel(e as object)
	{
		var h = Widget.getHeight(this)
		var newY = scrollBarY - (widgetSpeedY * lang "js" double {{{ e.wheelDeltaY }}})
		if newY > (h - scrollBarHeight) {
			newY = h - scrollBarHeight
		}
		else if newY < 0 {
			newY = 0
		}
		if scrollBarY != newY {
			scrollBarY = newY
			redraw()
			onScroll(0, scrollBarY)
		}
	}
}

func onScroll(scrollX as double, scrollY as double) private
{
	if widgetOnScrollCallback:
		widgetOnScrollCallback(scrollX, scrollY)
}
