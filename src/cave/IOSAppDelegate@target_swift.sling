
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class implements !"UIApplicationDelegate" depends "swift-import:UIKit" imports cape:

var window protected as !"UIWindow"
var viewController protected as !"UIViewController"
var ctx protected as cave.GuiApplicationContextForSwift
prop openURLhandler as function<bool, !"UIApplication", !"NSURL", !"NSDictionary", !"NSString", object>
prop statusBarHandler as function

ctor:
	ctx = createContext()

func createContext virtual as GuiApplicationContextForSwift:
	return new GuiApplicationContextForSwift()

func createMainScreen(ctx as cave.GuiApplicationContextForSwift) virtual as !"UIViewController*":
	return null

lang "swift" {{{
	func application(_ application: UIApplication, willFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Boo
	{
		return self.doApplicationWillFinishLaunchingWithOptions(application, launchOptions:launchOptions)
	}

	func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any])
	{
		id vc = viewController
		vc.application(application, didReceiveRemoteNotification:userInfo)
	}

	func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void)
	{
		id vc = viewController;
		vc.application(application, didReceiveRemoteNotification:userInfo, fetchCompletionHandler:completionHandler)
		completionHandler(UIBackgroundFetchResult.newData)
	}

	func application(_ application: UIApplication, didChangeStatusBarFrame oldStatusBarFrame: CGRect)
	{
		if(self->statusBarHandler != nil) {
			self->statusBarHandler()
		}
	}
}}}

func getAppDelegate static as this
{
	var uiApplication = lang "swift" object {{{ UIApplication.shared.delegate }}}
	var appdelegate as this
	if uiApplication is this:
		appdelegate = uiApplication as! this
	return appdelegate
}

func doApplicationWillFinishLaunchingWithOptions(application as !"UIApplication*", launchOptions as !"NSDictionary*") as bool
{
	var cc = assert createMainScreen(ctx)
	if cc is ScreenWithContext:
		(cc as! ScreenWithContext).setContext(ctx)
	viewController = cc
	lang "swift" {{{
		id vc = viewController
		vc.application(application, willFinishLaunchingWithOptions:launchOptions)
	}}}
	return true
}

func applicationDidFinishLaunching(application as !"UIApplication*")
{
	lang "swift" {{{
		window = UIWindow(frame: UIScreen.screen.bounds)
		window.rootViewController = viewController
		window.makeKeyAndVisible()
	}}}
}

func applicationDidBecomeActive(application as !"UIApplication*") virtual
{
	lang "swift" {{{
		id vc = viewController
		if(vc.responds(to: #selector(applicationDidBecomeActive:))) {
			vc.applicationDidBecomeActive(application)
		}
	}}}
}

func applicationWillResignActive(application as !"UIApplication*") virtual
{
	lang "swift" {{{
		id vc = viewController;
		if(vc.responds(to: #selector(applicationWillResignActive:))) {
			vc.applicationWillResignActive(application)
		}
	}}}
}

func applicationDidEnterBackground(application as !"UIApplication*")
{
	lang "swift" {{{
		id vc = viewController;
		if(vc.responds(to: #selector(applicationDidEnterBackground:)]) {
			vc.applicationDidEnterBackground(application)
		}
	}}}
}

func applicationWillEnterForeground(application as !"UIApplication*")
{
	lang "swift" {{{
		id vc = viewController;
		if(vc.responds(to: #selector(applicationWillEnterForeground:))) {
			vc.applicationWillEnterForeground(application)
		}
	}}}
}

func applicationWillTerminate(application as !"UIApplication*")
{
	lang "swift" {{{
		id vc = viewController;
		if(vc.responds(to: #selector(applicationWillTerminate:))) {
			vc.applicationWillTerminate(application)
		}
	}}}
}

lang "swift" {{{
	- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary *)options
	{
		if(self->openURLhandler != nil) {
			return(self->openURLhandler(app, url, options, nil, nil));
		}
		return(NO);
	}

	- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation
	{
		if(self->openURLhandler != nil) {
			return(self->openURLhandler(app, url, nil, sourceApplication, annotation));
		}
		return(NO);
	}
}}}
