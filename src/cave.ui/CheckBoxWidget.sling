
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is WidgetWithValue #widget:

func forText(context as GuiApplicationContext, text as string) static as this
{
	var v = new this(context)
	v.setWidgetText(text)
	return(v)
}

IFDEF "target_reactjs"
{
	depend "js:React:react"
	basetype !"React.Component" type extends
	basetype Widget type isAlso

	lang "js" {{{
		render() {
			return(<div>FIXME: CheckBoxWidget</div>);
		}
	}}}
}

ELSE IFDEF "target_html"
{
	basetype Widget

	func createElement override as object
	{
		var v = HTMLDOM.createElement("div")
		var input = HTMLDOM.createElement("input")
		HTMLDOM.setAttribute(input, "type", "checkbox")
		HTMLDOM.addEventListener(input, "change", func {
			onCheckChangeListener()
		})
		var label = HTMLDOM.createElement("label")
		HTMLDOM.setStyle(label, "margin-left", "5px")
		HTMLDOM.setStyle(label, "font-size", "14px")
		HTMLDOM.setStyle(input, "cursor", "pointer")
		HTMLDOM.appendChild(v, input)
		HTMLDOM.appendChild(v, label)
		return v
	}
}

ELSE IFDEF "target_android"
{
	basetype !"android.widget.CheckBox" type extends
	basetype Widget type isAlso
}

ELSE IFDEF "target_kotlin"
{
	basetype !"android.widget.CheckBox" type extends
	basetype Widget type isAlso
}

ELSE IFDEF "target_iosoc"
{
	basetype HorizontalBoxWidget
	var uiSwitch as Widget
	var labelWidget as LabelWidget
}

ELSE IFDEF "target_macosoc"
{
	// FIXME
	basetype !"NSView" type extends
	basetype Widget type isAlso
}

ELSE IFDEF "target_uwp"
{
	basetype !"Windows.UI.Xaml.Controls.CheckBox" type extends
	basetype Widget type isAlso
}

ELSE
{
	basetype Widget
}

var widgetContext as GuiApplicationContext
var widgetText as string
var widgetTextColor as Color
var widgetFontResource as string
var widgetFontFamily as string
prop widgetCheckHandler as function

ctor(context as GuiApplicationContext)
{
	IFDEF("target_android") {
		base((context as! cave.GuiApplicationContextForAndroid).getActivityContext())
	}
	ELSE IFDEF "target_kotlin" {
		base((context as! cave.GuiApplicationContextForKotlin).getActivityContext())
	}
	widgetContext = context
	widgetFontFamily = "Arial"
	widgetTextColor = Color.black()
	setWidgetTextColor(widgetTextColor)
	IFDEF("target_android") {
		lang "java" {{{
			setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener() {
				public void onCheckedChanged(android.widget.CompoundButton buttonView, boolean isChecked) {
					onCheckChangeListener();
				}
			});
		}}}
	}
	ELSE IFDEF("target_iosoc") {
		lang "objc" {{{
			UISwitch *uswitch = [[UISwitch alloc] init];
			[uswitch addTarget:self action:@selector(onCheckChangeListener) forControlEvents:UIControlEventValueChanged];
			uiSwitch = uswitch;
		}}}
		setWidgetSpacing(context.getWidthValue("1mm"))
		addWidget(uiSwitch)
		addWidget(labelWidget = new LabelWidget(context), 1.0)
	}
	ELSE IFDEF("target_kotlin") {
		lang "kotlin" {{{
			setOnCheckedChangeListener { view, isChecked ->
				onCheckChangeListener()
			}
		}}}
	}
}

func setWidgetText(text as string)
{
	widgetText = text
	IFDEF("target_html") {
		var child = HTMLDOM.getChild(element, 1)
		HTMLDOM.setInnerHTML(child, text)
	}
	ELSE IFDEF("target_android") {
		lang "java" {{{
			setText(text);
		}}}
	}
	ELSE IFDEF("target_iosoc") {
		if labelWidget:
			labelWidget.setWidgetText(text)
	}
	ELSE IFDEF("target_kotlin") {
		lang "kotlin" {{{
			setText(text)
		}}}
	}
	ELSE {
		ERROR("Not implemented")
	}
}

func getWidgetText as string
{
	return(widgetText)
}

func setWidgetTextColor(color as Color) as this
{
	widgetTextColor = color
	updateWidgetFont()
	return(this)
}

func getWidgetTextColor as Color
{
	return(widgetTextColor)
}

func setWidgetFontFamily(font as string) as this
{
	widgetFontFamily = font
	updateWidgetFont()
	return(this)
}

func setWidgetFontResource(res as string) as this
{
	widgetFontResource = res
	updateWidgetFont()
	return(this)
}

func updateWidgetFont private
{
	IFDEF("target_html") {
		var child = HTMLDOM.getChild(element, 1)
		HTMLDOM.setStyle(child, "color", HTMLDOM.colorToRGBA(widgetTextColor))
		HTMLDOM.setFontFamily(element, widgetFontFamily)
	}
	ELSE IFDEF("target_android") {
		base.setTextColor(widgetTextColor.toARGBInt32())
		lang "java" {{{
			if(widgetFontResource != null) {
				android.content.Context ctx = ((cave.GuiApplicationContextForAndroid)widgetContext).getActivityContext();
				setTypeface(android.graphics.Typeface.createFromAsset(ctx.getAssets(), widgetFontResource), android.graphics.Typeface.NORMAL);
			}
			else {
				setTypeface(android.graphics.Typeface.create(widgetFontFamily, android.graphics.Typeface.NORMAL));
			}
		}}}
	}
	ELSE IFDEF("target_iosoc") {
		if labelWidget {
			labelWidget.setWidgetTextColor(widgetTextColor)
			labelWidget.setWidgetFontFamily(widgetFontFamily)
		}
	}
	ELSE IFDEF("target_kotlin") {
		base.setTextColor(widgetTextColor.toARGBInt32())
		lang "kotlin" {{{
			if(widgetFontResource != null) {
				var ctx = (widgetContext as cave.GuiApplicationContextForKotlin).getActivityContext()
				setTypeface(android.graphics.Typeface.createFromAsset(ctx!!.getAssets(), widgetFontResource), android.graphics.Typeface.NORMAL)
			}
			else {
				setTypeface(android.graphics.Typeface.create(widgetFontFamily, android.graphics.Typeface.NORMAL))
			}
		}}}
	}
	ELSE {
		ERROR("Not implemented")
	}
}

func getWidgetChecked as bool
{
	IFDEF("target_html") {
		return(lang "js" bool {{{ this.element.firstChild.checked }}})
	}
	ELSE IFDEF("target_android") {
		return(lang "java" bool {{{ isChecked() }}})
	}
	ELSE IFDEF "target_iosoc" {
		return lang "objc" bool {{{ ((UISwitch*)uiSwitch).on }}}
	}
	ELSE IFDEF("target_kotlin") {
		return(lang "kotlin" bool {{{ isChecked() }}})
	}
	ELSE {
		ERROR("Not implemented.")
		return(false)
	}
}

func setWidgetChecked(x as bool)
{
	IFDEF("target_html") {
		var child #used = HTMLDOM.getChild(element, 0)
		if(x == true) {
			lang "js" {{{
				child.checked = true;
			}}}
		}
		else {
			lang "js" {{{
				child.checked = false;
			}}}
		}
	}
	ELSE IFDEF("target_android") {
		base.setChecked(x)
	}
	ELSE IFDEF "target_iosoc" {
		lang "objc" {{{
			[(UISwitch*)uiSwitch setOn:x animated:NO];
		}}}
	}
	ELSE IFDEF("target_kotlin") {
		base.setChecked(x)
	}
	ELSE {
		ERROR("Not implemented")
	}
}

func setWidgetValue(value as object)
{
	setWidgetChecked(Boolean.asBoolean(value))
}

func getWidgetValue virtual as object
{
	return(Boolean.asObject(getWidgetChecked()))
}

func onCheckChangeListener private
{
	if widgetCheckHandler:
		widgetCheckHandler()
}
