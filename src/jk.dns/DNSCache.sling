
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.thread
import jk.time

class:

class DNSCacheEntry
{
	pvar ip as string
	pvar timestamp as int

	func create(ip as string) static as this
	{
		var v = new this()
		v.setIp(ip)
		v.setTimestamp(SystemClock.asSeconds())
		return v
	}
}

class DNSCacheImpl
{
	var entries as DynamicMap
	var mutex as Mutex

	ctor
	{
		entries = new DynamicMap()
		mutex = Mutex.create()
	}

	func add(hostname as string, ip as string) private
	{
		if mutex:
			mutex.lockMutex()
		entries.setObject(hostname, DNSCacheEntry.create(ip))
		if mutex:
			mutex.unlockMutex()
	}

	func getCachedEntry(hostname as string) private as string
	{
		var v as DNSCacheEntry
		if mutex:
			mutex.lockMutex()
		v = entries.get(hostname) as DNSCacheEntry
		if mutex:
			mutex.unlockMutex()
		if v {
			if SystemClock.asSeconds() - v.getTimestamp() > 60  * 60 {
				if mutex:
					mutex.lockMutex()
				entries.remove(hostname)
				if mutex:
					mutex.unlockMutex()
				v = null
			}
		}
		if v:
			return v.getIp()
		return null
	}

	func resolve(hostname as string) as string
	{
		var v = getCachedEntry(hostname)
		if v:
			return v
		var dr = assert DNSResolver.create()
		v = dr.getIPAddress(hostname, null)
		if v:
			add(hostname, v)
		return v
	}
}

var cc private static as DNSCacheImpl

func resolve(hostname as string) static as string
{
	if cc == null:
		cc = new DNSCacheImpl()
	return cc.resolve(hostname)
}
