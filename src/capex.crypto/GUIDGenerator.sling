
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

**
** Generates a new Globally Unique Identifier (GUID)
**

func generate static as string
{
	IFDEF "target_cs" {
		return lang "cs" string {{{ System.Guid.NewGuid().ToString() }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" string {{{ java.util.UUID.randomUUID().toString() }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" string {{{ (NSUUID().uuidString).lowercased() }}}
	}
	ELSE {
		ERROR "Not implemented."
		return null
	}
}

**
** Creates a deterministic GUID that is based on the value given
** as parameter. For the same contents of the value string, the same
** GUID will always be given.
**

func forString(value as string) static as string
{
	IFDEF "target_cs" {
		var v as string
		lang "cs" {{{
			System.Security.Cryptography.MD5CryptoServiceProvider provider = new System.Security.Cryptography.MD5CryptoServiceProvider();
			byte[] inputBytes = System.Text.Encoding.Default.GetBytes(value);
			byte[] hashBytes = provider.ComputeHash(inputBytes);
			System.Guid hashGuid = new System.Guid(hashBytes);
			v = hashGuid.ToString();
		}}}
		return v
	}
	ELSE IFDEF "target_kotlin" {
		var v as string
		lang "kotlin" {{{
			var inputBytes = value!!.toByteArray(kotlin.text.charset("UTF-8"))?.toUByteArray()
			var uid = java.util.UUID.nameUUIDFromBytes(inputBytes.toByteArray())
			v = uid.toString()
		}}}
		return v
	}
	ELSE IFDEF "target_swift" {
		var v as string
		lang "swift" {{{
			let buffer: [UInt8]! = [UInt8](value.utf8)
			let id = NSUUID(uuidBytes: buffer!)
			v = (id.uuidString).lowercased()
		}}}
		return v
	}
	ELSE {
		ERROR "Not implemented."
		return null
	}
}
