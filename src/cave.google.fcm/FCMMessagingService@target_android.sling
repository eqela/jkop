
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class extends !"com.google.firebase.messaging.FirebaseMessagingService":

import cave.ui

depend "gradle:com.google.firebase:firebase-messaging:11.0.0"

**
** Handles received push notification data.
**

func onMessageReceived(remoteMessage as !"com.google.firebase.messaging.RemoteMessage")
{
	var v = new DynamicMap()
	var data = new DynamicMap()
	var notification = new DynamicMap()
	lang "java" {{{
		java.util.Map<String, String> map = remoteMessage.getData();
		for(java.util.Map.Entry<String, String> entry : map.entrySet()) {
			data.set(entry.getKey(), entry.getValue());
		}
		com.google.firebase.messaging.RemoteMessage.Notification n = remoteMessage.getNotification();
		if(n != null) {
			notification.set("title", n.getTitle());
			notification.set("body", n.getBody());
			notification.set("click_action", n.getClickAction());
		}
	}}}
	if data.getCount() > 0:
		v.set("data", data)
	if notification.getCount() > 0:
		v.set("notification", notification)
	var value = JSONEncoder.encode(v)
	var intent = new !"android.content.Intent"()
	intent.setAction(FCMTokenManager.getAction())
	intent.putExtra("data", value)
	lang "java" {{{
		sendBroadcast(intent);
	}}}
}

func handleIntent(intent as !"android.content.Intent")
{
	base.handleIntent(intent)
	var data = new DynamicMap()
	lang "java" {{{
		if(intent.getExtras() != null) {
			for(String key : intent.getExtras().keySet()) {
				data.set(key, intent.getExtras().getString(key));
			}
		}
	}}}
	onNotificationIntent(data)
}

func onNotificationIntent(data as DynamicMap) virtual
{
}
