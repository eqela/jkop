
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.log
import jk.env
import jk.dev.docker

class:

func buildImageFromCodeAndVM(ctx as LoggingContext, codeFile as File, vmFile as File) as string
{
	if not codeFile:
		Error.throw("missingParameter", "codeFile")
	if not vmFile:
		Error.throw("missingParameter", "vmFile")
	if not codeFile.isFile():
		Error.throw("noSuchFile", codeFile)
	if not vmFile.isFile():
		Error.throw("noSuchFile", vmFile)
	var tmpdir = TemporaryDirectory.create()
	if not tmpdir:
		Error.throw("failedToCreateTemporaryDirectory", null)
	var v as string
	try {
		var target = tmpdir.entry("app")
		if not SushiVM.wrapCodeFileToVMFile(ctx, vmFile, codeFile, target):
			Error.throw("failedToWrapVm", target)
		v = new Docker(ctx).buildImageFromDirectory(tmpdir, "app")
	}
	catch e {
		throw e
	}
	finally {
		tmpdir.removeRecursive()
	}
	return v
}
