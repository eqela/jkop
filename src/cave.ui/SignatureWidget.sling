
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class #widget:

IFDEF "target_html"
{
	basetype Widget

	func prepareElement(element as object) override
	{
		base.prepareElement(element)
		HTMLDOM.setStyle(element, "box-sizing", "border-box")
	}
}

IFDEF "target_uwp"
{
	basetype !"Windows.UI.Xaml.Controls.UserControl" type extends
	basetype Widget type isAlso
	var rectangle as !"Windows.UI.Xaml.Shapes.Rectangle"
}

IFDEF "target_android"
{
	basetype !"android.view.View" type extends
	basetype Widget type isAlso

	var path = new !"android.graphics.Path"()
	var lastTouchX as float #used
	var lastTouchY as float #used
	var dirtyRect final = new !"android.graphics.RectF"()
	IFDEF "target_java" {
		var paint = lang "java" !"android.graphics.Paint" {{{ new android.graphics.Paint(android.graphics.Paint.ANTI_ALIAS_FLAG); }}}
	}
	ELSE IFDEF "target_kotlin" {
		var paint = lang "kotlin" !"android.graphics.Paint" {{{ android.graphics.Paint(android.graphics.Paint.ANTI_ALIAS_FLAG) }}}
	}

	func onTouchEvent(mevt as !"android.view.MotionEvent") override as bool
	{
		IFDEF "target_java" {
			lang "java" {{{
				float eventX = mevt.getX();
				float eventY = mevt.getY();
				if (mevt.getAction() == mevt.ACTION_DOWN) {
					path.moveTo(eventX, eventY);
					lastTouchX = eventX;
					lastTouchY = eventY;
					return true;
				}
				else if (mevt.getAction() == mevt.ACTION_MOVE) {
					float dx = Math.abs(lastTouchX - mevt.getX());
					float dy = Math.abs(lastTouchY - mevt.getY());
					if (dx >= 1 || dy >= 1) {
						path.quadTo(lastTouchX, lastTouchY, (mevt.getX() + lastTouchX)/2, (mevt.getY() + lastTouchY)/2);
					}
				}
				else if (mevt.getAction() == mevt.ACTION_UP) {
					resetDirtyRect(eventX, eventY);
					int historySize = mevt.getHistorySize();
					for (int i = 0; i < historySize ; i++) {
						float historicalX = mevt.getHistoricalX(i);
						float historicalY = mevt.getHistoricalY(i);
						expandDirtyRect(historicalX, historicalY);
						path.lineTo(historicalX, historicalY);
					}
					path.lineTo(eventX, eventY);
				}
				invalidate(
					(int) (dirtyRect.left - strokeWidth / 2),
					(int) (dirtyRect.top - strokeWidth / 2),
					(int) (dirtyRect.right + strokeWidth / 2),
					(int) (dirtyRect.bottom + strokeWidth / 2)
				);
				lastTouchX = eventX;
				lastTouchY = eventY;
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				var eventX : kotlin.Float = mevt!!.getX()
				var eventY : kotlin.Float = mevt!!.getY()
				if(mevt!!.getAction() == android.view.MotionEvent.ACTION_DOWN) {
					path!!.moveTo(eventX, eventY)
					lastTouchX = eventX
					lastTouchY = eventY
					return true;
				}
				else if(mevt!!.getAction() == android.view.MotionEvent.ACTION_MOVE) {
					var dx : kotlin.Float = Math.abs(lastTouchX - mevt.getX())
					var dy : kotlin.Float = Math.abs(lastTouchY - mevt.getY())
					if (dx >= 1 || dy >= 1) {
						path!!.quadTo(lastTouchX, lastTouchY, (mevt.getX() + lastTouchX)/2, (mevt.getY() + lastTouchY)/2)
					}
				}
				else if(mevt!!.getAction() == android.view.MotionEvent.ACTION_UP) {
					resetDirtyRect(eventX, eventY)
					var historySize : Int = mevt.getHistorySize()
					for(i in 0 until historySize) {
						var historicalX : kotlin.Float = mevt.getHistoricalX(i)
						var historicalY : kotlin.Float = mevt.getHistoricalY(i)
						expandDirtyRect(historicalX, historicalY)
						path!!.lineTo(historicalX, historicalY)
					}
					path!!.lineTo(eventX, eventY)
				}
				invalidate(
					(dirtyRect!!.left - strokeWidth / 2).toInt(),
					(dirtyRect!!.top - strokeWidth / 2).toInt(),
					(dirtyRect!!.right + strokeWidth / 2).toInt(),
					(dirtyRect!!.bottom + strokeWidth / 2).toInt()
				)
				lastTouchX = eventX
				lastTouchY = eventY
			}}}
		}
		return true
	}

	func onDraw(canvas as !"android.graphics.Canvas") override
	{
		IFDEF "target_java" {
			lang "java" {{{
				super.onDraw(canvas);
				canvas.drawPath(path, paint);
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				super.onDraw(canvas)
				canvas!!.drawPath(path, paint)
			}}}
		}
	}

	IFDEF "target_java" {
		lang "java" {{{
			private void expandDirtyRect(float historicalX, float historicalY) {
				if (historicalX < dirtyRect.left) {
					dirtyRect.left = historicalX;
				}
				else if (historicalX > dirtyRect.right) {
					dirtyRect.right = historicalX;
				}
				if (historicalY < dirtyRect.top) {
					dirtyRect.top = historicalY;
				}
				else if (historicalY > dirtyRect.bottom) {
					dirtyRect.bottom = historicalY;
				}
			}

			private void resetDirtyRect(float eventX, float eventY) {
				dirtyRect.left = Math.min(lastTouchX, eventX);
				dirtyRect.right = Math.max(lastTouchX, eventX);
				dirtyRect.top = Math.min(lastTouchY, eventY);
				dirtyRect.bottom = Math.max(lastTouchY, eventY);
			}
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" {{{
			fun expandDirtyRect(historicalX : kotlin.Float, historicalY : kotlin.Float) {
				if(historicalX < dirtyRect!!.left) {
					dirtyRect!!.left = historicalX
				}
				else if(historicalX > dirtyRect!!.right) {
					dirtyRect!!.right = historicalX
				}
				if(historicalY < dirtyRect!!.top) {
					dirtyRect!!.top = historicalY
				}
				else if(historicalY > dirtyRect!!.bottom) {
					dirtyRect!!.bottom = historicalY
				}
			}

			fun resetDirtyRect(eventX : kotlin.Float, eventY : kotlin.Float) {
				dirtyRect!!.left = Math.min(lastTouchX, eventX);
				dirtyRect!!.right = Math.max(lastTouchX, eventX);
				dirtyRect!!.top = Math.min(lastTouchY, eventY);
				dirtyRect!!.bottom = Math.max(lastTouchY, eventY);
			}
		}}}
	}
}

IFDEF "target_ios"
{
	IFDEF "target_swift" {
		depend "swift-import:UIKit"
	}
	basetype !"UIView" type extends
	basetype Widget type isAlso

	var incrementalImage as !"UIImage"

	IFDEF "target_objc" {
		lang "objc" {{{
			UIBezierPath *path;
			UIBezierPath *dot;
			UIPanGestureRecognizer *pan;
			CGPoint previousPoint;
			CGPoint p;

			- (CGPoint)midpoint:(CGPoint)p0 point2:(CGPoint)p1 {
				return (CGPoint) {
					(p0.x + p1.x) / 2.0,
					(p0.y + p1.y) / 2.0
				};
			}

			- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event {
				CGPoint p = [touches.anyObject locationInView:self];
				CGFloat radius = (CGFloat)strokeWidth / 2;
				CGRect rect = CGRectMake(p.x - radius, p.y - radius, 2 * radius, 2 * radius);
				dot = [UIBezierPath bezierPathWithOvalInRect:rect];
				[self constructIncrementalImage];
			}

			- (void)pan:(UIPanGestureRecognizer *)pan {
				CGPoint currentPoint = [pan locationInView:self];
				CGPoint midPoint = [self midpoint:previousPoint point2:currentPoint];
				if (pan.state == UIGestureRecognizerStateBegan) {
					p = [pan locationInView:self];
					[path moveToPoint:p];
				}
				else if (pan.state == UIGestureRecognizerStateChanged) {
					[path moveToPoint:p];
					[path addQuadCurveToPoint:midPoint controlPoint:previousPoint];
				}
				[self constructIncrementalImage];
				p = [path currentPoint];
				[self clearPath];
				previousPoint = currentPoint;
			}

			- (void)drawRect:(CGRect)rect
			{
				[incrementalImage drawInRect:rect];
			}

			- (void)constructIncrementalImage
			{
				if (incrementalImage == NULL) {
					UIGraphicsBeginImageContextWithOptions(self.bounds.size, NO, 0.0);
				}
				else {
					UIGraphicsBeginImageContextWithOptions(incrementalImage.size, NO, 0.0);
				}
				[incrementalImage drawAtPoint:CGPointZero];
				[[UIColor colorWithRed: [strokeColor getRed] green: [strokeColor getGreen] blue: [strokeColor getBlue] alpha: [strokeColor getAlpha]] setStroke];
				path.lineWidth = strokeWidth;
				[path stroke];
				if (dot != NULL) {
					[[UIColor blackColor] setFill];
					[dot fill];
				}
				incrementalImage = UIGraphicsGetImageFromCurrentImageContext();
				UIGraphicsEndImageContext();
				[self setNeedsDisplay];
			}

			- (void)clearPath
			{
				dot = nil;
				path = nil;
				path = [UIBezierPath bezierPath];
			}
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			var path : UIBezierPath? = nil
			var dot : UIBezierPath? = nil
			var pan : UIPanGestureRecognizer? = nil
			var previousPoint : CGPoint? = nil
			var p : CGPoint? = nil

			func midpoint(_ p0: CGPoint, p1 point2: CGPoint) -> CGPoint {
				let point = CGPoint(x: (p0.x + point2.x) / 2.0, y: (p0.y + point2.y) / 2.0)
				return point
			}

			func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent) {
				let p : CGPoint = touches.first!.location(in: self)
				let radius : CGFloat = CGFloat(strokeWidth / 2)
				let rect : CGRect = CGRect(x: p.x - radius, y: p.y - radius, width: 2 * radius, height: 2 * radius)
				dot = UIBezierPath(ovalIn : rect)
				self.constructIncrementalImage()
			}

			@objc func pan(_ pan: UIPanGestureRecognizer) {
				let currentPoint : CGPoint = pan.location(in: self)
				let midPoint : CGPoint = self.midpoint(previousPoint!, p1: currentPoint)
				if (pan.state == UIGestureRecognizer.State.began) {
					p = pan.location(in: self)
					path!.move(to: p!)
				}
				else if (pan.state == UIGestureRecognizer.State.changed) {
					path!.move(to: p!)
					path!.addQuadCurve(to: midPoint, controlPoint: previousPoint!)
				}
				self.constructIncrementalImage()
				p = path!.currentPoint
				self.clearPath()
				previousPoint = currentPoint
			}

			public override func draw(_ rect: CGRect) {
				if incrementalImage != nil {
					incrementalImage.draw(in: rect)
				}
			}

			func constructIncrementalImage() {
				if (incrementalImage == nil) {
					UIGraphicsBeginImageContextWithOptions(self.bounds.size, false, 0.0)
				}
				else {
					UIGraphicsBeginImageContextWithOptions(incrementalImage.size, false, 0.0)
					incrementalImage.draw(at: CGPoint.zero)
				}
				UIColor(red: CGFloat(strokeColor.getRed()), green: CGFloat(strokeColor.getGreen()), blue: CGFloat(strokeColor.getBlue()), alpha: CGFloat(strokeColor.getAlpha())).setStroke()
				path!.lineWidth = CGFloat(strokeWidth)
				path!.stroke()
				if (dot != nil) {
					UIColor.black.setFill()
					dot!.fill()
				}
				incrementalImage = UIGraphicsGetImageFromCurrentImageContext()
				UIGraphicsEndImageContext()
				self.setNeedsDisplay()
			}

			func clearPath() {
				dot = nil
				path = nil
				path = UIBezierPath()
			}
		}}}
	}
}

var strokeColor as Color
var strokeWidth as float

ctor(ctx as GuiApplicationContext)
{
	IFDEF "target_android" {
		base((ctx as! cave.GuiApplicationContextForAndroid).getActivityContext())
		IFDEF "target_java" {
			lang "java" {{{
				paint.setAntiAlias(true);
				paint.setColor(android.graphics.Color.BLACK);
				paint.setStyle(android.graphics.Paint.Style.STROKE);
				paint.setStrokeJoin(android.graphics.Paint.Join.ROUND);
				paint.setStrokeWidth(strokeWidth);
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				paint!!.setAntiAlias(true);
				paint!!.setColor(android.graphics.Color.BLACK);
				paint!!.setStyle(android.graphics.Paint.Style.STROKE);
				paint!!.setStrokeJoin(android.graphics.Paint.Join.ROUND);
				paint!!.setStrokeWidth(strokeWidth);
			}}}
		}
	}
	IFDEF "target_ios" {
		IFDEF "target_objc" {
			lang "objc" {{{
				path = [UIBezierPath bezierPath];
				pan = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(pan:)];
				pan.maximumNumberOfTouches = pan.minimumNumberOfTouches = 1;
				[self addGestureRecognizer:pan];
				[self setBackgroundColor:[UIColor clearColor]];
			}}}
		}
		ELSE IFDEF "target_swift" {
			lang "swift" {{{
				super.init(frame: CGRect.zero)
				path = UIBezierPath()
				pan = UIPanGestureRecognizer(target:self, action: #selector(pan (_ :)))
				pan!.minimumNumberOfTouches = 1
				pan!.maximumNumberOfTouches = pan!.minimumNumberOfTouches
				self.addGestureRecognizer(pan!)
				self.backgroundColor = UIColor.clear
			}}}
		}
	}
	setStrokeColor(Color.black())
	setStrokeWidth(2.0 as float)
}

func setStrokeColor(color as Color)
{
	strokeColor = color
	IFDEF("target_android") {
		IFDEF "target_java" {
			if (strokeColor == null) {
				lang "java" {{{
					paint.setColor(0);
				}}}
			}
			else {
				lang "java" {{{
					paint.setColor(strokeColor.toARGBInt32());
				}}}
			}
		}
		ELSE IFDEF "target_kotlin" {
			if(!color) {
				lang "kotlin" {{{
					paint!!.setColor(0);
				}}}
			}
			else {
				lang "kotlin" {{{
					paint!!.setColor(color.toARGBInt32());
				}}}
			}
		}
	}
	ELSE {
		ERROR("Not implemented.")
	}
}

func setStrokeWidth(width as float)
{
	strokeWidth = width
	IFDEF "target_android" {
		IFDEF "target_java" {
			lang "java" {{{
				paint.setStrokeWidth(strokeWidth);
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				paint!!.setStrokeWidth(strokeWidth);
			}}}
		}
	}
	ELSE {
		ERROR("Not implemented.")
	}
}

func clear
{
	IFDEF "target_android" {
		IFDEF "target_java" {
			lang "java" {{{
				path.reset();
				invalidate();
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				path!!.reset();
				invalidate();
			}}}
		}
	}
	ELSE IFDEF "target_ios_objc" {
		lang "objc" {{{
			[self clearPath];
			incrementalImage = nil;
			[self setNeedsDisplay];
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			self.clearPath()
			incrementalImage = nil
			self.setNeedsDisplay()
		}}}
	}
	ELSE {
		ERROR("Not implemented.")
	}
}

func getSignatureAsImage as Image
{
	var byteArray as buffer #used
	IFDEF "target_android" {
		IFDEF "target_java" {
			lang "java" {{{
				android.graphics.Bitmap bitmap = android.graphics.Bitmap.createBitmap(this.getWidth(), this.getHeight(), android.graphics.Bitmap.Config.ARGB_8888);
				android.graphics.Canvas canvas = new android.graphics.Canvas(bitmap);
				this.draw(canvas);
				java.io.ByteArrayOutputStream bufferStream = new java.io.ByteArrayOutputStream();
				bitmap.compress(android.graphics.Bitmap.CompressFormat.PNG, 100, bufferStream);
				byteArray = bufferStream.toByteArray();
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				var bitmap : android.graphics.Bitmap = android.graphics.Bitmap.createBitmap(this.getWidth(), this.getHeight(), android.graphics.Bitmap.Config.ARGB_8888)
				var canvas : android.graphics.Canvas = android.graphics.Canvas(bitmap)
				this.draw(canvas)
				var bufferStream : java.io.ByteArrayOutputStream = java.io.ByteArrayOutputStream()
				bitmap.compress(android.graphics.Bitmap.CompressFormat.PNG, 100, bufferStream)
				var bs = bufferStream.toByteArray()
				byteArray = bs.toUByteArray()
			}}}
		}
		return ImageForAndroid.forBuffer(byteArray)
	}
	ELSE IFDEF("target_ios") {
		return ImageForIOS.forUIImage(incrementalImage)
	}
	ELSE {
		ERROR("Not implemented.")
		return (null)
	}
}
