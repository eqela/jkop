
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import cave

class:

func forScene(scene as Scene, backend as Backend) static as this
{
	var v = new this()
	v.setBackend(backend)
	v.pushScene(scene)
	return(v)
}

var sceneStack as Stack<Scene>
var isInitialized = false
var isStarted = false
prop backend as Backend
prop context as GuiApplicationContext

ctor
{
	sceneStack = new Stack<Scene>()
}

func initialize virtual
{
	isInitialized = true
	var scene = sceneStack.peek()
	if(scene != null) {
		scene.initialize()
	}
}

func start virtual
{
	isStarted = true
	var scene = sceneStack.peek()
	if(scene != null) {
		scene.start()
	}
}

func stop virtual
{
	isStarted = false
	var scene = sceneStack.peek()
	if(scene != null) {
		scene.stop()
	}
}

func cleanup virtual
{
	isInitialized = false
	while(doPopScene()) {
		;
	}
}

func onNewCurrentScene private
{
	var scene = sceneStack.peek()
	if(scene == null) {
		return
	}
	if(isInitialized) {
		scene.initialize()
	}
	if(isStarted) {
		scene.start()
	}
}

func getCurrentScene as Scene
{
	return(sceneStack.peek())
}

func replaceScene(next as Scene)
{
	// FIXME: Do a timer or something so that the outgoing scene goes out of stack
	doReplaceCurrentScene(next)
}

func doReplaceCurrentScene(next as Scene) private
{
	popScene()
	pushScene(next)
}

func pushScene(scene as Scene)
{
	var currentScene = sceneStack.peek()
	if(currentScene != null) {
		if(isStarted) {
			currentScene.stop()
		}
		if(isInitialized) {
			currentScene.cleanup()
		}
	}
	if(scene != null) {
		scene.setContext(context)
		scene.setBackend(backend)
		scene.setManager(this)
		sceneStack.push(scene)
		onNewCurrentScene()
	}
}

func popScene
{
	// FIXME: Do a timer or something so that the outgoing scene goes out of stack
	doPopScene()
}

func doPopScene private as bool
{
	var currentScene = sceneStack.pop()
	if currentScene {
		if isStarted:
			currentScene.stop()
		if isInitialized:
			currentScene.cleanup()
		currentScene.setManager(null)
		currentScene.setBackend(null)
		onNewCurrentScene()
		return true
	}
	return false
}
