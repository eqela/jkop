
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
	public Image create_image_for_buffer(ImageBuffer ib) {
		if(ib == null) {
			return(null);
		}
		var buffer = ib.get_buffer();
		var type = ib.get_type();
		if(buffer == null) {
			return(null);
		}
		var ptr = buffer.get_pointer();
		if(ptr == null) {
			return(null);
		}
		var bytearray = ptr.get_native_pointer();
		Image v = null;
		embed "java" {{{
			android.graphics.BitmapFactory.Options opts = new android.graphics.BitmapFactory.Options();
			opts.inJustDecodeBounds = true;
		}}}
		embed "java" {{{
			v = AndroidBitmapImage.for_android_bitmap(android.graphics.BitmapFactory.decodeByteArray(bytearray, 0, bytearray.length, opts));
			if(opts.outHeight > 2000 || opts.outWidth > 2000) {
				opts.inSampleSize = 2;
			}
			try {
				opts.inJustDecodeBounds = false;
				v = AndroidBitmapImage.for_android_bitmap(android.graphics.BitmapFactory.decodeByteArray(bytearray, 0, bytearray.length, opts));
			}
			catch(Exception e) {
				eq.api.Log.Static.error((eq.api.Object)eq.api.String.Static.for_strptr("*** EXCEPTION CAUGHT WHEN DECODING A BITMAP ***"), null, null);
				e.printStackTrace();
				v = null;
			}
			catch(OutOfMemoryError e) {
				eq.api.Log.Static.error((eq.api.Object)eq.api.String.Static.for_strptr("*** OUT OF MEMORY ERROR WHEN DECODING A BITMAP ***"), null, null);
				e.printStackTrace();
				v = null;
			}
		}}}
		return(v);
	}

	public Image create_image_for_file(File file, int w, int h) {
		if(file == null) {
			return(null);
		}
		var filename = file.get_native_path();
		if(filename == null) {
			return(null);
		}
		embed "java" {{{
			android.graphics.BitmapFactory.Options opts = new android.graphics.BitmapFactory.Options();
			opts.inJustDecodeBounds = true;
		}}}
		Image v = null;
		embed "java" {{{
			v = AndroidBitmapImage.for_android_bitmap(android.graphics.BitmapFactory.decodeFile(filename.to_strptr(), opts));
			if(opts.outHeight > 2000 || opts.outWidth > 2000) {
				opts.inSampleSize = 2;
			}
		}}}
		embed "java" {{{
			try {
				opts.inJustDecodeBounds = false;
				v = AndroidBitmapImage.for_android_bitmap(android.graphics.BitmapFactory.decodeFile(filename.to_strptr(), opts));
			}
			catch(Exception e) {
				v = null;
			}
		}}}
		if(v == null) {
			Log.error("Failed to read bitmap image `%s'".printf().add(filename));
		}
		return(v);
	}
	String get_android_app_name() {
		var nn = eq.api.Application.get_name();
		if(nn == null) {
			nn = "app.android";
		}
		else if(nn.chr((int)'.') < 0) {
			nn = "app.".append(nn);
		}
		return(nn);
	}
 */

class is Image imports cape:

var resourceCache static as map<string,this>

func forAndroidBitmap(bitmap as !"android.graphics.Bitmap") static as this
{
	if(bitmap == null) {
		return(null)
	}
	var v = new this()
	v.bitmap = bitmap
	return(v)
}

func forSize(width as int, height as int) static as this
{
	var v = new this()
	lang "java" {{{
		try {
			v.bitmap = android.graphics.Bitmap.createBitmap(width, height, android.graphics.Bitmap.Config.ARGB_8888);
		}
		catch(Exception e) {
			v.bitmap = null;
		}
		if(v.bitmap == null) {
			return(null);
		}
	}}}
	return(v)
}

func sanitizeResourceName(n as string) static private as string
{
	if(n == null) {
		return(null)
	}
	var sb = new StringBuilder()
	var it = String.iterate(n)
	var c as char
	while((c = it.getNextChar()) > 0) {
		if(c >= 'A' && c <= 'Z') {
			sb.append(('a' + c - 'A') as char)
		}
		else if(c >= 'a' && c <= 'z') {
			sb.append(c)
		}
		else if(c >= '0' && c <= '9') {
			sb.append(c)
		}
		else {
			sb.append('_')
		}
	}
	return(sb.toString())
}

func forResource(name as string, context as !"android.content.Context") static as this
{
	if(name == null || context == null) {
		return(null)
	}
	if(resourceCache != null) {
		var v = cape.Map.getValue(resourceCache, name)
		if(v != null) {
			return(v)
		}
	}
	var bm as !"android.graphics.Bitmap"
	var rid #used = (context.getPackageName() as! string) .. ":drawable/" .. sanitizeResourceName(name)
	lang "java" {{{
		android.content.res.Resources res = context.getResources();
		if(res != null) {
			int aid = res.getIdentifier(rid, null, null);
			if(aid > 0) {
				android.graphics.drawable.Drawable d = res.getDrawable(aid);
				if(d != null && d instanceof android.graphics.drawable.BitmapDrawable) {
					bm =((android.graphics.drawable.BitmapDrawable)d).getBitmap();
				}
			}
		}
	}}}
	if(bm == null) {
		return(null)
	}
	var v = new this()
	v.bitmap = bm
	if(resourceCache == null) {
		resourceCache = new map<string,this>
	}
	resourceCache[name] = v
	return(v)
}

func forFile(file as File) static as this
{
	ERROR("Not implemented")
	return(null)
}

func forBuffer(buffer as buffer) static as this
{
	if(buffer == null) {
		return(null)
	}
	var bm as !"android.graphics.Bitmap"
	lang "java" {{{
		bm = android.graphics.BitmapFactory.decodeByteArray(buffer, 0, buffer.length);
	}}}
	if(bm == null) {
		return(null)
	}
	return(forAndroidBitmap(bm))
}

var bitmap public as !"android.graphics.Bitmap"

func getAndroidBitmap as !"android.graphics.Bitmap"
{
	return(bitmap)
}

func getPixelWidth override as int
{
	var v = 0
	if(bitmap != null) {
		v = bitmap.getWidth() as int
	}
	return(v)
}

func getPixelHeight override as int
{
	var v = 0
	if(bitmap != null) {
		v = bitmap.getHeight() as int
	}
	return(v)
}

func scaleToSize(width as int, height as int) override as Image
{
	if(width < 0 || height < 0) {
		return(this)
	}
	var bm as !"android.graphics.Bitmap"
	lang "java" {{{
		try {
			bm = android.graphics.Bitmap.createScaledBitmap(bitmap, width, height, true);
		}
		catch(Exception e) {
			bm = null;
		}
	}}}
	if(bm == null) {
		return(null)
	}
	return(forAndroidBitmap(bm))
}

func scaleToSize(w as int, h as int, callback as function<void, Image>) override
{
	assert callback
	callback(scaleToSize(w, h))
}

func scaleToWidth(w as int) override as Image:
	return scaleToSize(w, getProportionalHeight(w))

func scaleToWidth(w as int, callback as function<void, Image>) override
{
	assert callback
	callback(scaleToWidth(w))
}

func scaleToHeight(h as int) override as Image:
	return scaleToSize(getProportionalWidth(h), h)

func scaleToHeight(h as int, callback as function<void, Image>) override
{
	assert callback
	callback(scaleToHeight(h))
}

func crop(x as int, y as int, w as int, h as int) override as Image
{
	if(bitmap == null) {
		return(null)
	}
	var bm as !"android.graphics.Bitmap"
	lang "java" {{{
		bm = android.graphics.Bitmap.createBitmap(bitmap, x, y, w, h, null, false);
	}}}
	if(bm == null) {
		return(null)
	}
	return(forAndroidBitmap(bm))
}

func crop(x as int, y as int, w as int, h as int, callback as function<void, Image>) override
{
	assert callback
	callback(crop(x, y, w, h))
}

func toJPGData override as buffer
{
	assert bitmap
	var buf as buffer
	lang "java" {{{
		java.io.ByteArrayOutputStream baStream = new java.io.ByteArrayOutputStream();
		android.graphics.Bitmap.CompressFormat cf = android.graphics.Bitmap.CompressFormat.JPEG;
		if(bitmap.compress(cf, 100, baStream)) {
			buf = baStream.toByteArray();
		}
	}}}
	return buf
}

func toPNGData override as buffer
{
	if(bitmap == null) {
		return(null)
	}
	var buf as buffer
	lang "java" {{{
		java.io.ByteArrayOutputStream baStream = new java.io.ByteArrayOutputStream();
		android.graphics.Bitmap.CompressFormat cf = android.graphics.Bitmap.CompressFormat.PNG;
		if(bitmap.compress(cf, 70, baStream)) {
			buf = baStream.toByteArray();
		}
	}}}
	return(buf)
}

func toRGBAData override as buffer
{
	ERROR("Not implemented")
	return(null)
}

func releaseImage override
{
	if(bitmap != null) {
		bitmap.recycle()
	}
	bitmap = null
}

/*
public class AndroidBitmapImage : Image, Size, VgRenderable, VgRenderableImage, Renderable, RenderableImage
{
	public Buffer encode(String type) {
		eq.api.DynamicBuffer v = null;
		embed "java" {{{
			android.graphics.Bitmap.CompressFormat cf = null;
		}}}
		if("image/jpeg".equals_ignore_case(type) || "jpg".equals_ignore_case(type) || "jpeg".equals_ignore_case(type)) {
			embed "java" {{{
				cf = android.graphics.Bitmap.CompressFormat.JPEG;
			}}}
		}
		else if("png".equals_ignore_case(type)) {
			embed "java" {{{
				cf = android.graphics.Bitmap.CompressFormat.PNG;
			}}}
		}
		else {
			Log.warning("Image type `%s' is not supported. Not compressing it.".printf().add(type));
		}
		embed "java" {{{
			if(cf != null) {
				java.io.ByteArrayOutputStream imgstream = new java.io.ByteArrayOutputStream();
				android.graphics.Bitmap bitmap = get_android_bitmap();
				if(bitmap.compress(cf, 70, imgstream)) {
					v = eq.api.DynamicBuffer.Static.create(imgstream.size());
					byte[] dst = ((eq.api.Buffer)v).get_pointer().get_native_pointer();
					byte[] src = null;
					try {
						src = imgstream.toByteArray();
					}
					catch(Exception e) {
						System.err.println("Failed to write compressed image stream to buffer: " + e);
					}
					System.arraycopy(src,0,dst,0, src.length);
					src = null;
				}
				else {
					eq.api.Log.Static.warning((eq.api.Object)eq.api.String.Static.for_strptr("Image was not commpressed to type `" + type.to_strptr() + "'."), null, null);
				}
			}
			if(v == null) {
				android.graphics.Bitmap bitmap = get_android_bitmap();
				java.nio.ByteBuffer bb = java.nio.ByteBuffer.allocate(bitmap.getRowBytes() * bitmap.getWidth());
				v = eq.api.DynamicBuffer.Static.create(bitmap.getRowBytes() * bitmap.getWidth());
				if(bb != null) {
					bitmap.copyPixelsToBuffer(bb);
				}
				if(v != null) {
					byte[] dst = ((eq.api.Buffer)v).get_pointer().get_native_pointer();
					byte[] src = bb.array();
					System.arraycopy(src,0,dst,0, src.length);
					src = null;
				}
				bb.clear();
			}
		}}}
		return(v);
	}
}

*/
