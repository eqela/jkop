
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is WidgetWithLayout is HeightAwareWidget #widget:

func forWidget(context as GuiApplicationContext, widget as Widget) static as this
{
	var v = new this(context)
	v.addWidget(widget)
	return(v)
}

IFDEF "target_iosoc"
{
	basetype !"UIScrollView" type extends
	basetype !"UIScrollViewDelegate" type implements
	basetype Widget type isAlso

	lang "objc" {{{
		- (void) scrollViewDidScroll:(UIScrollView *) scrollView {
			[self onScroll:scrollView.contentOffset.y];
		}

		- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event {
			[self endEditing:YES];
			[super touchesBegan:touches withEvent:event];
		}
	}}}
}

IFDEF "target_android"
{
	basetype !"android.widget.ScrollView" type extends
	basetype Widget type isAlso

	func onScrollChanged(x as int, y as int, oldx as int, oldy as int):
		onScroll(y)
}

IFDEF "target_kotlin"
{
	basetype !"android.widget.ScrollView" type extends
	basetype Widget type isAlso

	func onScrollChanged(x as int, y as int, oldx as int, oldy as int) override:
		onScroll(y)
}

IFDEF "target_html"
{
	basetype Widget type extends

	func createElement override as object
	{
		var v = HTMLDOM.createElement("div")
		HTMLDOM.addToClassList(v, VALUE "__THIS__")
		return v
	}

	func prepareElement(element as object) override
	{
		base.prepareElement(element)
		if HTMLDOM.isFirefox() == false {
			HTMLDOM.setStyle(element, "overflow-y", "scroll")
		}
		else {
			HTMLDOM.removeStyle(element, "overflow")
			HTMLDOM.setStyle(element, "overflow-x", "hidden")
		}
		HTMLDOM.addEventListener(element, "scroll", func {
			onScroll(lang "js" int {{{ element.scrollTop }}})
		})
	}

	var noScrollBarStyleCreated static = false

	func createNoScrollBarStyle static
	{
		if noScrollBarStyleCreated:
			return
		var styleElement = HTMLDOM.createElement("style")
		var className = "." .. VALUE "__THIS__" .. "WithNoScrollBar"
		var style as string
		if HTMLDOM.isWebKit() {
			style = className .. "::-webkit-scrollbar { display: none; }"
		}
		else if HTMLDOM.isFirefox() {
			if not HTMLDOM.isMobile() {
				style = className .. " { overflow-y: hidden; }\n" ..
					className .. ":hover { overflow-y: auto; }"
			}
		}
		if style {
			HTMLDOM.setInnerHTML(styleElement, style)
			HTMLDOM.appendChild(HTMLDOM.getDocumentHead(), styleElement)
		}
		noScrollBarStyleCreated = true
	}
}

IFDEF "target_uwp"
{
	basetype !"Windows.UI.Xaml.Controls.UserControl"
	basetype Widget type isAlso
	// FIXME: onScrolledHandler
}

var currentScrollY private = 0
var lastScrollY private = 0
var nearEnd private = false

func isNearEnd as bool:
	return nearEnd

func onScroll(scrollY as int) private
{
	currentScrollY = scrollY
	var ch = Widget.getHeight(Vector.get(Widget.getChildren(this), 0))
	if ch > 0:
		nearEnd = ((ch - currentScrollY) < (Widget.getHeight(this) * 2)) ? true : false
	if onEndScrollHandler && (ch - (scrollY + Widget.getHeight(this)) == 0):
		onEndScrollHandler()
	if onScrolledHandler && lastScrollY != currentScrollY {
		onScrolledHandler(lastScrollY < currentScrollY ? 0 : 1)
		lastScrollY = currentScrollY
	}
}

prop onScrolledHandler as function<void, int>
prop onEndScrollHandler as function
var layoutHeight = -1
var heightChanged = false

ctor(context as GuiApplicationContext)
{
	IFDEF("target_android") {
		base((context as! cave.GuiApplicationContextForAndroid).getActivityContext())
		var xx = (context as! cave.GuiApplicationContextForAndroid).getActivityContext()
		lang "java" {{{
			setFillViewport(true);
			setDescendantFocusability(android.view.ViewGroup.FOCUS_BEFORE_DESCENDANTS);
			setFocusable(true);
			setFocusableInTouchMode(true);
		}}}
	}
	IFDEF "target_kotlin" {
		base((context as! cave.GuiApplicationContextForKotlin).getActivityContext())
		lang "kotlin" {{{
			setFillViewport(true)
			setDescendantFocusability(android.view.ViewGroup.FOCUS_BEFORE_DESCENDANTS)
			setFocusable(true)
			setFocusableInTouchMode(true)
		}}}
	}
	IFDEF("target_iosoc") {
		lang "objc" {{{
			self.delegate = self;
		}}}
	}
	IFDEF "target_uwp" {
		lang "cs" {{{
			this.Content = new Windows.UI.Xaml.Controls.ScrollViewer();
		}}}
	}
}

func setWidgetScrollBarDisabled(value as bool)
{
	IFDEF "target_html" {
		if value {
			createNoScrollBarStyle()
			HTMLDOM.setStyle(element, "-ms-overflow-style", "none")
			HTMLDOM.addToClassList(element, VALUE "__THIS__" .. "WithNoScrollBar")
		}
		else {
			HTMLDOM.setStyle(element, "-ms-overflow-style", "scrollbar")
			HTMLDOM.removeFromClassList(element, VALUE "__THIS__" .. "WithNoScrollBar")
		}
	}
}

func onWidgetHeightChanged(height as int #notLiteral)
{
	foreach(child in Widget.getChildren(this)) {
		if(height > layoutHeight) {
			Widget.resizeHeight(child, height)
		}
		else {
			Widget.resizeHeight(child, layoutHeight)
		}
	}
	heightChanged = true
}

func setWidgetLayoutChanged
{
}

func hasWidgetLayoutChanged as bool:
	return false

func layoutWidget(widthConstraint as int #notLiteral, force as bool) as bool
{
	var mw as int
	var mh as int
	foreach(child in Widget.getChildren(this)) {
		Widget.move(child, 0, 0)
		Widget.layout(child, widthConstraint, heightChanged)
		var cw = Widget.getWidth(child)
		var ch = Widget.getHeight(child)
		if(cw > mw) {
			mw = cw
		}
		if(ch > mh) {
			mh = ch
		}
	}
	var mh2 = mh
	var eh = Widget.getHeight(this)
	if eh > 0 && mh2 > eh:
		mh2 = eh
	heightChanged = false
	layoutHeight = mh
	Widget.setLayoutSize(this, mw, mh2)
	IFDEF("target_iosoc") {
		lang "objc" {{{
			self.contentSize = CGSizeMake(mw,mh);
		}}}
	}
	return(true)
}

func addWidget(widget as Widget) as this
{
	Widget.addChild(this, widget)
	return(this)
}

func scrollToBottom(animate as bool = true)
{
	var child = assert Vector.get(Widget.getChildren(this), 0)
	var y #used = Widget.getHeight(child) - Widget.getHeight(this)
	assert y > 0
	var x #used = Widget.getX(child)
	IFDEF "target_android" {
		lang "java" {{{
			if(animate == true) {
				smoothScrollTo(x, y);
			}
			else {
				scrollTo(x, y);
			}
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" {{{
			if(animate == true) {
				smoothScrollTo(x, y)
			}
			else {
				scrollTo(x, y)
			}
		}}}
	}
	ELSE IFDEF "target_ios" {
		lang "objc" {{{
			[self setContentOffset:CGPointMake(x, y) animated:animate];
		}}}
	}
	ELSE IFDEF "target_html" {
		lang "js" {{{
			this.element.scrollTop = this.element.scrollHeight;
		}}}
	}
	ELSE {
		ERROR "Not implemented"
	}
}
