
/*
 * This file is part of Jkop
 * Copyright (c) 2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func forFile(file as File, name as string) static as this
{
	var v = new this()
	v.setFile(file)
	v.setName(name)
	return v
}

func forString(str as string) static as this
{
	var v = new this()
	v.setContent(str)
	return v
}

prop file as File
var content as string
var name as string
var lines as vector<string>

func setName(v as string) as this
{
	name = v
	return this
}

func getName as string:
	return name

func getContent as string
{
	if content == null && file:
		content = file.getContentsUTF8()
	return content
}

func setContent(v as string) as this
{
	content = v
	return this
}

func recycleContent
{
	if file:
		content = null
}

func getLines as vector<string>
{
	if lines == null {
		var cc = getContent()
		if cc {
			lines = new vector<string>
			foreach line in String.split(content, '\n') {
				while String.endsWith(line, "\r"):
					line = String.subString(line, 0, String.getLength(line)-1)
				lines += line
			}
			recycleContent()
		}
	}
	return lines
}

func getLine(n as int) as string
{
	var lines = assert getLines()
	return Vector.getAt(lines, n)
}
