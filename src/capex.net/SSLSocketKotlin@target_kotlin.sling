
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is SSLSocket:

prop ctx as LoggingContext
prop socket as TCPSocket
prop serverAddress as string
var acceptInvalidCertificate as bool
var requireClientCertificate = false
var sslSocket private as !"javax.net.ssl.SSLSocket"
var isSocketForServer = false

func setAcceptInvalidCertificate(v as bool) override:
	acceptInvalidCertificate = v

func setRequireClientCertificate(v as bool) override:
	requireClientCertificate = v

func open(cSocket as ConnectedSocket, certFile as File = null, keyFile as File = null, isServer as bool = false, passphrase as string = null) as bool
{
	var v = true
	socket = cSocket as TCPSocket
	isSocketForServer = isServer
	var address = serverAddress
	if String.isEmpty(address):
		address = socket.getRemoteAddress()
	assert String.isNotEmpty(address)
	var port = socket.getRemotePort()
	var scSocket = (socket as! TCPSocketForKotlin).getJavaClientSocket()
	if isServer {
		lang "kotlin" {{{
			try {
				var file = java.io.FileInputStream(certFile!!.getPath())
				var keyStore = java.security.KeyStore.getInstance("JKS")
				keyStore.load(file, passphrase!!.toCharArray())

				var keyManagerFactory = javax.net.ssl.KeyManagerFactory.getInstance("SunX509")
				keyManagerFactory.init(keyStore, passphrase!!.toCharArray())
				
				var trustManagerFactory = javax.net.ssl.TrustManagerFactory.getInstance(javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm())
				trustManagerFactory.init(keyStore)

				var sslContext = javax.net.ssl.SSLContext.getInstance("TLS")
				if(acceptInvalidCertificate) {
					sslContext.init(keyManagerFactory.getKeyManagers(), null, java.security.SecureRandom())
				}
				else{
					sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), java.security.SecureRandom())
				}
				var factory = sslContext.getSocketFactory() as javax.net.ssl.SSLSocketFactory
				sslSocket = factory.createSocket(scSocket, address, port, true) as javax.net.ssl.SSLSocket
				sslSocket?.setUseClientMode(false)
				sslSocket?.setWantClientAuth(requireClientCertificate)
				println("OPEN: THIS IS SSLSOCKET ON SERVER CONNECT")
				println(sslSocket)
			}
			catch(e : kotlin.Exception) {
				e.printStackTrace()
				v = false
			}
			catch(e : kotlin.Exception) {
				e.printStackTrace()
				v = false
			}
		}}}
	}
	else {
		lang "kotlin" {{{
			try {
				var factory = javax.net.ssl.SSLSocketFactory.getDefault() as javax.net.ssl.SSLSocketFactory
				sslSocket = factory.createSocket(scSocket, address, port, true) as javax.net.ssl.SSLSocket
				sslSocket?.setUseClientMode(true)
				println("OPEN: THIS IS SSLSOCKET ON CLIENT CONNECT")
				println(sslSocket)
				java.nio.channels.SocketChannel.open()
				println("OPEN: THIS IS SSLSOCKET.getChannel")
				println(scSocket?.getChannel())
			}
			catch(e : kotlin.Exception) {
				e.printStackTrace()
				v = false
			}
		}}}
	}	
	return v
}

func read(buffer as buffer) override as int:
	return readWithTimeout(buffer, -1)

func close override
{
	PRINT "+++++++++++++CLOSE IS CALLED++++++++++++"
	lang "kotlin" {{{
		try {
			if(sslSocket != null) {
				sslSocket?.close()
				sslSocket = null
			}
		}
		catch(e : kotlin.Exception) {
			e.printStackTrace()
		}
	}}}
	if socket != null {
		socket.close()
		socket = null
	}
}

func readWithTimeout(buffer as buffer, timeout as int) override as int
{
	assert sslSocket
	if not buffer:
		return -1
	var v = 0
	lang "kotlin" {{{
		if(isSocketForServer == true) {
			println("readWithTimeout : Socket is for Server")
			try {
				println("readWithTimeout : ++++++THIS IS THE SSLSOCKET FOR SERVER+++++")
				println(sslSocket)
				var channel = sslSocket?.getChannel()
				println("readWithTimeout : ++++++ AFTER GETTING CHANNEL ++++++++")
				if(channel == null) {
					println("readWithTimeout : ++++++CHANNEL IS NULL+++++")
				}
				var ba = buffer!!.toByteArray()
				println("readWithTimeout : ++++++ BEFORE READING -SERVER ++++++++")
				v = channel!!.read(java.nio.ByteBuffer.wrap(ba))
				println("readWithTimeout : ++++++ AFTER READING - SERVER++++++++")
				var uba = ba.toUByteArray()
				uba.copyInto(buffer)
			}
			catch(e : kotlin.Exception) {
				println("readWithTimeout : ++++++ CATCH FOR SERVER ++++++++")
				e.printStackTrace()
				v = -1
			}
		}
		else {
			println("readWithTimeout : Socket is for Client")
			try {
				println("readWithTimeout : ++++++THIS IS THE SSLSOCKET FOR CLIENT+++++")
				println(sslSocket)
				var ins = sslSocket!!.getInputStream()
				if(ins == null) {
					println("readWithTimeout : ++++++INPUT STREAM IS NULL+++++")
				}
				if(socket!!.getBlocking() == false && ins!!.available() < 1) {
					println("readWithTimeout : ++++++ NO DATA AVAILABLE AND SOCKET IS NULL +++++")
					return(0)
				}
				else {
					var ba = buffer!!.toByteArray()
					println("readWithTimeout : ++++++ BEFORE READING - CLIENT ++++++++")
					v = ins!!.read(ba)
					println("readWithTimeout : ++++++ AFTER READING - CLIENT ++++++++")
					var uba = ba.toUByteArray()
					uba.copyInto(buffer)
				}
			}
			catch(e : kotlin.Exception) {
				println("readWithTimeout : ++++++ CATCH FOR CLIENT ++++++++")
				e.printStackTrace()
				v = -1
			}
		}
	}}}
	if v < 1 {
		close()
		v = -1
	}
	return v
}

func write(buffer as buffer, size as int) override as int
{
	assert sslSocket
	if not buffer:
		return -1
	var v = 0
	lang "kotlin" {{{
		if(isSocketForServer == true) {
			println("write : ++++++SOCKET IS FOR SERVER+++++")
			try {
				println("write : ++++++BEFORE GETTING CHANNEL+++++")
				var channel = sslSocket!!.getChannel()
				if(sslSocket == null) {
					println("write : ++++++SSLSOCKET IS NULL - SERVER++++")
				}
				if(channel == null) {
					println("write : ++++++CHANNEL IS NULL++++")
				}
				println("write : ++++++BEFORE WRITING - SERVER+++++")
				channel!!.write(java.nio.ByteBuffer.wrap(buffer!!.toByteArray(), 0, size))
				println("write : ++++++AFTER WRITING - SERVER+++++")
				v = size
			}
			catch(e : kotlin.Exception)
			{
				println("write : ++++++CATCH ON SOCKET FOR SERVER+++++")
				e.printStackTrace()
				v = -1
			}
		}
		else {
			try {
				if(sslSocket == null) {
					println("write : ++++++SSLSOCKET IS NULL - CLIENT++++")
				}
				var os = sslSocket!!.getOutputStream()
				println("write : ++++++BEFORE WRITING - CLIENT+++++")
				os!!.write(buffer!!.toByteArray())
				println("write : ++++++AFTER WRITING - CLIENT+++++")
				os!!.flush()
				v = size
			}
			catch(e : kotlin.Exception)
			{
				println("write : ++++++CATCH ON SOCKET FOR CLIENT+++++")
				e.printStackTrace()
				v = -1
			}
		}
		
	}}}
	if v < 1 {
		close()
		v = -1
	}
	return v
}

func getSocket override as ConnectedSocket:
	return socket
