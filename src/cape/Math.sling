
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

**
** The Math class provides various mathematical methods, functions and
** numerical constants.
**

class depends "cpp-header:<cmath>":

IFDEF("target_linuxcpp") {
	lang "cpp" {{{
		#undef M_PI
		#undef M_PI_2
		#undef M_PI_4
		#undef M_1_PI
		#undef M_2_PI
		#undef M_2_SQRTPI
		#undef M_SQRT2
		#undef M_SQRT1_2
	}}}
}

const M_PI = 3.14159265358979323846			// PI
const M_PI_2 = 1.57079632679489661923		// PI / 2
const M_PI_4 = 0.78539816339744830962		// PI / 4
const M_1_PI = 0.31830988618379067154		// 1 / PI
const M_2_PI = 0.63661977236758134308		// 2 / PI
const M_2_SQRTPI = 1.12837916709551257390	// 2 / sqrt(PI)
const M_SQRT2 = 1.41421356237309504880		// sqrt(2)
const M_SQRT1_2 = 0.70710678118654752440 	// 1 / sqrt(2)

const HALF_AWAY_FROM_ZERO = 0
const HALF_TOWARD_ZERO = 1
const HALF_NEAREST_EVEN = 2
const HALF_POSITIVE = 3
const HALF_NEGATIVE = 4

func abs(d as double #used) static as double
{
	IFDEF "target_cs" {
		return lang "cs" double {{{ System.Math.Abs(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" double {{{ java.lang.Math.abs(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" double {{{ Math.abs(d) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" double {{{ std::abs(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" double {{{ abs(d) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func abs(f as float #used) static as float
{
	IFDEF "target_cs" {
		return lang "cs" float {{{ System.Math.Abs(f) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" float {{{ java.lang.Math.abs(f) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" float {{{ Math.abs(f) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" float {{{ std::abs(f) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" float {{{ abs(f) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0.0f
	}
}

func abs(i as int32 #used) static as int32
{
	IFDEF "target_cs" {
		return lang "cs" int32 {{{ System.Math.Abs(i) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" int32 {{{ java.lang.Math.abs(i) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" int32 {{{ Math.abs(i) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" int32 {{{ std::abs(i) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" int32 {{{ abs(i) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func abs(l as int64) static as int64
{
	IFDEF "target_cs" {
		return lang "cs" int64 {{{ System.Math.Abs(l) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" int64 {{{ java.lang.Math.abs(l) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" int64 {{{ Math.abs(l) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" int64 {{{ std::abs(l) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" int64 {{{ abs(l) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func acos(d as double #used) static as double
{
	IFDEF "target_cs" {
		return lang "cs" double {{{ System.Math.Acos(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" double {{{ java.lang.Math.acos(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" int64 {{{ Math.acos(d) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" double {{{ std::acos(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" double {{{ acos(d) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func asin(d as double #used) static as double
{
	IFDEF "target_cs" {
		return lang "cs" double {{{ System.Math.Asin(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" double {{{ java.lang.Math.asin(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" double {{{ Math.asin(d) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" double {{{ std::asin(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" double {{{ asin(d) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func atan(d as double #used) static as double
{
	IFDEF "target_cs" {
		return lang "cs" double {{{ System.Math.Atan(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" double {{{ java.lang.Math.atan(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" double {{{ Math.atan(d) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" double {{{ std::atan(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" double {{{ atan(d) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func atan2(y as double #used, x as double #used) static as double
{
	IFDEF "target_cs" {
		return lang "cs" double {{{ System.Math.Atan2(y,x) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" double {{{ java.lang.Math.atan2(y,x) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" double {{{ Math.atan2(y,x) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" double {{{ std::atan2(y, x) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" double {{{ atan2(y, x) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func ceil(d as double #used) static as double
{
	IFDEF "target_cs" {
		return lang "cs" double {{{ System.Math.Ceiling(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" double {{{ java.lang.Math.ceil(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" double {{{ Math.ceil(d) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" double {{{ std::ceil(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" double {{{ ceil(d) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func cos(d as double #used) static as double
{
	IFDEF "target_cs" {
		return lang "cs" double {{{ System.Math.Cos(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" double {{{ java.lang.Math.cos(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" double {{{ Math.cos(d) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" double {{{ std::cos(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" double {{{ cos(d) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func cosh(d as double #used) static as double
{
	IFDEF "target_cs" {
		return lang "cs" double {{{ System.Math.Cosh(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" double {{{ java.lang.Math.cosh(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" double {{{ Math.cosh(d) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" double {{{ std::cosh(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" double {{{ cosh(d) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func exp(d as double #used) static as double
{
	IFDEF "target_cs" {
		return lang "cs" double {{{ System.Math.Exp(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" double {{{ java.lang.Math.exp(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" double {{{ Math.exp(d) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" double {{{ std::exp(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" double {{{ exp(d) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func floor(d as double #used) static as double
{
	IFDEF "target_cs" {
		return lang "cs" double {{{ System.Math.Floor(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" double {{{ java.lang.Math.floor(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" double {{{ Math.floor(d) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" double {{{ std::floor(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" double {{{ floor(d) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func remainder(x as double, y as double) static as double
{
	IFDEF "target_cs" {
		return lang "cs" double {{{ System.Math.IEEERemainder (x,y) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" double {{{ java.lang.Math.IEEEremainder(x,y) }}}
	}
	ELSE IFDEF "target_js" {
		var z as double
		z = (x % y)
		return z
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" double {{{ std::remainder(x, y) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" double {{{ fmod(x, y) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func log(d as double #used) static as double
{
	IFDEF "target_cs" {
		return lang "cs" double {{{ System.Math.Log(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" double {{{ java.lang.Math.log(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" double {{{ Math.log(d) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" double {{{ std::log(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" double {{{ log(d) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func log10(d as double #used) static as double
{
	IFDEF "target_cs" {
		return lang "cs" double {{{ System.Math.Log10(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" double {{{ java.lang.Math.log10(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" double {{{ Math.log10(d) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" double {{{ std::log10(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" double {{{ log10(d) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func max(d1 as double #used, d2 as double #used) static as double
{
	IFDEF "target_cs" {
		return lang "cs" double {{{ System.Math.Max(d1,d2) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" double {{{ java.lang.Math.max(d1,d2) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" double {{{ Math.max(d1,d2) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" double {{{ std::fmax(d1, d2) }}}
	}
	ELSE IFDEF "target_objc" {
		var v = d1
		if d1 < d2:
			v = d2
		return v
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func max(f1 as float #used, f2 as float #used) static as float
{
	IFDEF "target_cs" {
		return lang "cs" float {{{ System.Math.Max(f1,f2) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" float {{{ java.lang.Math.max(f1,f2) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" float {{{ Math.max(f1,f2) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" float {{{ std::fmaxf(f1, f2) }}}
	}
	ELSE IFDEF "target_objc" {
		var v = f1
		if f1 < f2:
			v = f2
		return v
	}
	ELSE {
		ERROR "Not implemented"
		return 0.0f
	}
}

func max(i1 as int32 #used, i2 as int32 #used) static as int32
{
	IFDEF "target_cs" {
		return lang "cs" int32 {{{ System.Math.Max(i1,i2) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" int32 {{{ java.lang.Math.max(i1,i2) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" int32 {{{ Math.max(i1,i2) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" int32 {{{ std::fmaxf(i1, i2) }}}
	}
	ELSE IFDEF "target_objc" {
		var v = i1
		if i1 < i2:
			v = i2
		return v
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func max(l1 as int64 #used, l2 as int64 #used) static as int64
{
	IFDEF "target_cs" {
		return lang "cs" int64 {{{ System.Math.Max(l1,l2) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" int64 {{{ java.lang.Math.max(l1,l2) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" int64 {{{ Math.max(l1,l2) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" int64 {{{ std::fmaxl(l1, l2) }}}
	}
	ELSE IFDEF "target_objc" {
		var v = l1
		if l1 < l2:
			v = l2
		return v
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func min(d1 as double #used, d2 as double #used) static as double
{
	IFDEF "target_cs" {
		return lang "cs" double {{{ System.Math.Min(d1,d2) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" double {{{ java.lang.Math.min(d1,d2) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" double {{{ Math.min(d1,d2) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" double {{{ std::fmin(d1, d2) }}}
	}
	ELSE IFDEF "target_objc" {
		var v = d1
		if d1 > d2:
			v = d2
		return v
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func min(f1 as float #used, f2 as float #used) static as float
{
	IFDEF "target_cs" {
		return lang "cs" float {{{ System.Math.Min(f1,f2) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" float {{{ java.lang.Math.min(f1,f2) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" float {{{ Math.min(f1,f2) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" float {{{ std::fminf(f1, f2) }}}
	}
	ELSE IFDEF "target_objc" {
		var v = f1
		if f1 > f2:
			v = f2
		return v
	}
	ELSE {
		ERROR "Not implemented"
		return 0.0f
	}
}

func min(i1 as int32 #used, i2 as int32 #used) static as int32
{
	IFDEF "target_cs" {
		return lang "cs" int32 {{{ System.Math.Min(i1,i2) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" int32 {{{ java.lang.Math.min(i1,i2) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" int32 {{{ Math.min(i1,i2) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" int32 {{{ std::fminf(i1, i2) }}}
	}
	ELSE IFDEF "target_objc" {
		var v = i1
		if i1 > i2:
			v = i2
		return v
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func min(l1 as int64 #used, l2 as int64 #used) static as int64
{
	IFDEF "target_cs" {
		return lang "cs" int64 {{{ System.Math.Min(l1,l2) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" int64 {{{ java.lang.Math.max(l1,l2) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" int64 {{{ Math.max(l1,l2) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" int64 {{{ std::fminl(l1, l2) }}}
	}
	ELSE IFDEF "target_objc" {
		var v = l1
		if l1 > l2:
			v = l2
		return v
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func pow(x as double #used, y as double #used) static as double
{
	IFDEF "target_cs" {
		return lang "cs" double {{{ System.Math.Pow(x,y) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" double {{{ java.lang.Math.pow(x,y) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" double {{{ Math.pow(x,y) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" double {{{ std::pow(x, y) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" double {{{ pow(x, y) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

**
** Rounds the given number to the nearest integer. For halfway cases where
** the difference from both possible values is exactly 0.5, this function
** uses the default mechanism of the underlying platform. This means that
** the exact behavior of halways cases varies between platforms. To have complete
** control over this, use the other round() method and specify the desired
** halfway behavior using the "mode" parameter.
**

func round(n as double) static as double
{
	IFDEF "target_cs" {
		return lang "cs" double {{{ System.Math.Round(n) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" double {{{ java.lang.Math.round(n) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" double {{{ Math.round(n) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" double {{{ std::round(n) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" double {{{ round(n) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

**
** Rounds the given number to the nearest integer. For halway cases where
** the difference from both possible values is exactly 0.5, this function
** can behave in different ways, depending on the "mode" parameter that
** is given.
**

func round(d as double #used, mode as int) static as double
{
	IFDEF "target_cs" {
		if mode == HALF_AWAY_FROM_ZERO {
			return lang "cs" double {{{ System.Math.Round(d, System.MidpointRounding.AwayFromZero) }}}
		}
		else if mode == HALF_NEAREST_EVEN {
			return lang "cs" double {{{ System.Math.Round(d, System.MidpointRounding.ToEven) }}}
		}
	}
	ELSE IFDEF "target_java" {
		if mode == HALF_POSITIVE {
			return lang "java" double {{{ java.lang.Math.round(d) }}}
		}
		else if mode == HALF_NEAREST_EVEN {
			return lang "java" double {{{ java.lang.Math.rint(d) }}}
		}
	}
	ELSE IFDEF "target_js" {
		if mode == HALF_POSITIVE {
			return lang "js" double {{{ Math.round(d) }}}
		}
	}
	ELSE IFDEF "target_cpp" {
		if mode == HALF_AWAY_FROM_ZERO {
			return lang "cpp" double {{{ std::round(d) }}}
		}
	}
	ELSE IFDEF "target_objc" {
		if mode == HALF_AWAY_FROM_ZERO {
			return lang "objc" double {{{ round(d) }}}
		}
	}
	var fd = floor(d)
	var dp = d - fd
	if dp < 0.5:
		return fd
	if dp > 0.5:
		return ceil(d)
	if mode == HALF_AWAY_FROM_ZERO {
		if d < 0:
			return fd
		return ceil(d)
	}
	if mode == HALF_TOWARD_ZERO {
		if d < 0:
			return ceil(d)
		return fd
	}
	if mode == HALF_NEAREST_EVEN {
		if(((fd as int) % 2) == 0):
			return fd
		return ceil(d)
	}
	if mode == HALF_POSITIVE {
		return ceil(d)
	}
	if mode == HALF_NEGATIVE {
		return fd
	}
	return d
}

func sin(d as double #used) static as double
{
	IFDEF "target_cs" {
		return lang "cs" double {{{ System.Math.Sin(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" double {{{ java.lang.Math.sin(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" double {{{ Math.sin(d) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" double {{{ std::sin(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" double {{{ sin(d) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func sinh(d as double) static as double
{
	IFDEF "target_cs" {
		return lang "cs" double {{{ System.Math.Sinh(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" double {{{ java.lang.Math.sinh(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" double {{{ Math.sinh(d) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" double {{{ std::sinh(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" double {{{ sinh(d) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func sqrt(d as double #used) static as double
{
	IFDEF "target_cs" {
		return lang "cs" double {{{ System.Math.Sqrt(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" double {{{ java.lang.Math.sqrt(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" double {{{ Math.sqrt(d) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" double {{{ std::sqrt(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" double {{{ sqrt(d) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func tan(d as double) static as double
{
	IFDEF "target_cs" {
		return lang "cs" double {{{ System.Math.Tan(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" double {{{ java.lang.Math.tan(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" double {{{ Math.tan(d) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" double {{{ std::tan(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" double {{{ tan(d) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}

func tanh(d as double) static as double
{
	IFDEF "target_cs" {
		return lang "cs" double {{{ System.Math.Tanh(d) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" double {{{ java.lang.Math.tanh(d) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" double {{{ Math.tanh(d) }}}
	}
	ELSE IFDEF "target_cpp" {
		return lang "cpp" double {{{ std::tanh(d) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" double {{{ tanh(d) }}}
	}
	ELSE {
		ERROR "Not implemented"
		return 0
	}
}
