
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is GeoLocationManager:

depend "plist:{ \"NSLocationWhenInUseUsageDescription\" : \"This app requires access to location services.\" }"
depend "plist:{ \"NSLocationAlwaysUsageDescription\" : \"This app requires access to location services.\" }"
depend "swift-import:CoreLocation"
depend "swift-import:UIKit"

var instance static as this
var locationDelegate as LocationDelegate
var requestWhenInUseAuthorizationCallback as function<void, bool>
var locationManager as !"CLLocationManager"

func getInstance static as this
{
	if not instance:
		instance = new this()
	return instance
}

ctor
{
	locationDelegate = new LocationDelegate(this)
	lang "swift" {{{
		locationManager = CLLocationManager()
		locationManager.delegate = locationDelegate
	}}}
}

func startLocationUpdates(callback as function<void,bool>) override
{
	var cb final #used = callback
	lang "swift" {{{
		let authStatus: CLAuthorizationStatus = CLLocationManager.authorizationStatus()
		if(authStatus == .authorizedWhenInUse) {
			if(CLLocationManager.locationServicesEnabled()) {
				locationManager.startUpdatingLocation()
				cb(true)
			}
			else {
				cb(false)
			}
		}
		else if(authStatus == .notDetermined) {
			Swift.print("Authorization Status NOT DETERMINED")
			requestWhenInUseAuthorizationCallback = cb
			locationManager.requestWhenInUseAuthorization()
		}
		else if(authStatus == .denied) {
			Swift.print("Authorization Status DENIED");
		}
		else if(authStatus == .restricted) {
			Swift.print("Authorization Status RESTRICTED")
		}
	}}}
}

func stopLocationUpdates override
{
	lang "swift" {{{
		locationManager.stopUpdatingLocation()
	}}}
}

func getLastLocation(callback as function<void, GeoLocation, Error>) override
{
	var lastLocation as GeoLocation
	lang "swift" {{{
		var l: CLLocation = locationManager.location!
		if (l != nil) {
			lastLocation = CapexMapGeoLocation()
			lastLocation.setLatitude(l.coordinate.latitude)
			lastLocation.setLongitude(l.coordinate.longitude)
		}
	}}}
	assert lastLocation:
		callback(null, Error.forCode("failedToGetLastLocation"))
	callback(lastLocation, null)
}

class LocationDelegate implements !"CLLocationManagerDelegate"
{
	var geoLocationManager as GeoLocationManagerForSwift

	ctor(parent as GeoLocationManagerForSwift):
		geoLocationManager = parent

	lang "swift" {{{
		public func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus)
		{
			if(status == .authorizedWhenInUse) {
				geoLocationManager.onAuthorizationStatusChanged(true)
			}
			else {
				geoLocationManager.onAuthorizationStatusChanged(false)
			}
		}

		public func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation])
		{
			let location: CLLocation = locations.last!
			let geolocation: CapexMapGeoLocation = CapexMapGeoLocation()
			geolocation.setLatitude(location.coordinate.latitude)
			geolocation.setLongitude(location.coordinate.longitude)
			geoLocationManager.notifyListeners(geolocation)
		}
		public func locationManager(_ manager: CLLocationManager, didFailWithError error: NSError)
		{
			Swift.print(error);
		}
	}}}
}

func onAuthorizationStatusChanged(granted as bool)
{
	if requestWhenInUseAuthorizationCallback:
		requestWhenInUseAuthorizationCallback(granted)
}

func isLocationServiceEnabled override as bool:
	return lang "swift" bool {{{ CLLocationManager.locationServicesEnabled() }}}
