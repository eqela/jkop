
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

import capex.data

class is MySQLDatabase:

IFDEF "target_mono" {
	depend "dll:System.Data.dll"
}

IFDEF "target_netcore" {
	depend "nuget:MySql.Data@8.0.11"
}

class Statement is SQLStatement
{
	func forSql(sql as string) static as this
	{
		assert String.isNotEmpty(sql)
		var v = new this()
		v.sql = SQLAdoNet.convertSQLString(sql)
		return v
	}

	var pcounter = 0
	var sql public as string
	var params as vector<!"MySql.Data.MySqlClient.MySqlParameter">
	var isStoredProcedure = false

	func setIsStoredProcedure(v as bool) as SQLStatement
	{
		isStoredProcedure = v
		return this
	}

	func getIsStoredProcedure as bool:
		return isStoredProcedure

	func getParamArray as array<!"MySql.Data.MySqlClient.MySqlParameter">
	{
		assert params
		var arr = new !"MySql.Data.MySqlClient.MySqlParameter"[Vector.getSize(params)]
		var i = 0
		var iter as Iterator<!"MySql.Data.MySqlClient.MySqlParameter"> #force = Vector.iterate(params)
		loop {
			var n = iter.next() as !"MySql.Data.MySqlClient.MySqlParameter"
			if not n:
				break
			arr[i] = n
			i++
		}
		return arr
	}

	func addToParams(param as !"MySql.Data.MySqlClient.MySqlParameter")
	{
		if not params:
			params = new vector<!"MySql.Data.MySqlClient.MySqlParameter">
		params += param
	}

	func getNextParamName as string:
		return "@p" .. String.forInteger(++ pcounter)

	func addParamString(val as string) as SQLStatement:
		return setParamString(null, val)

	func addParamInteger(val as int) as SQLStatement:
		return setParamInteger(null, val)

	func addParamLongInteger(val as long) as SQLStatement:
		return setParamLongInteger(null, val)

	func addParamDouble(val as double) as SQLStatement:
		return setParamDouble(null, val)

	func addParamBlob(val as buffer) as SQLStatement:
		return setParamBlob(null, val)

	func setParamString(name as string, val as string) as SQLStatement
	{
		var n = name
		if String.isEmpty(n):
			n = getNextParamName()
		var vv = val
		if not vv:
			vv = ""
		lang "cs" {{{
			var param = new MySql.Data.MySqlClient.MySqlParameter(n, MySql.Data.MySqlClient.MySqlDbType.String);
			param.Value = vv;
			addToParams(param);
		}}}
		return this
	}

	func setParamInteger(name as string, val as int) as SQLStatement
	{
		var n = name
		if String.isEmpty(n):
			n = getNextParamName()
		lang "cs" {{{
			var param = new MySql.Data.MySqlClient.MySqlParameter(n, MySql.Data.MySqlClient.MySqlDbType.Int32);
			param.Value = val;
			addToParams(param);
		}}}
		return this
	}

	func setParamLongInteger(name as string, val as long) as SQLStatement
	{
		var n = name
		if String.isEmpty(n):
			n = getNextParamName()
		lang "cs" {{{
			var param = new MySql.Data.MySqlClient.MySqlParameter(n, MySql.Data.MySqlClient.MySqlDbType.Int64);
			param.Value = val;
			addToParams(param);
		}}}
		return this
	}

	func setParamDouble(name as string, val as double) as SQLStatement
	{
		var n = name
		if String.isEmpty(n):
			n = getNextParamName()
		lang "cs" {{{
			var param = new MySql.Data.MySqlClient.MySqlParameter(n, MySql.Data.MySqlClient.MySqlDbType.Double);
			param.Value = val;
			addToParams(param);
		}}}
		return this
	}

	func setParamBlob(name as string, val as buffer) as SQLStatement
	{
		var n = name
		if String.isEmpty(n):
			n = getNextParamName()
		if not val:
			return this
		lang "cs" {{{
			var param = new MySql.Data.MySqlClient.MySqlParameter(n, MySql.Data.MySqlClient.MySqlDbType.Binary);
			param.Value = val;
			addToParams(param);
		}}}
		return this
	}

	func resetStatement
	{
		params = null
		pcounter = 0
	}

	func getError as string:
		return null
}

class ResultSet is SQLResultSetIterator
{
	var ctx public as LoggingContext
	var reader public as !"MySql.Data.MySqlClient.MySqlDataReader"
	var hasNextRecord as bool

	dtor:
		close()

	func close override
	{
		if reader {
			reader.Close()
			reader = null
		}
	}

	func nextValues(values as vector<object>) override as bool
	{
		assert values
		assert step()
		cape.Vector.clear(values)
		var cols = getColumnCount()
		var n as int
		for(n = 0; n < cols; n++) {
			var o = getColumnObject(n)
			if not o:
				o = ""
			values += o
		}
		return true
	}

	func step override as bool
	{
		assert reader
		if hasNextRecord {
			hasNextRecord = false
			return true
		}
		var v = false
		var error as string = null
		lang "cs" {{{
			try {
				v = reader.Read();
			}
			catch(System.Exception e) {
				v = false;
				error = e.ToString();
			}
			if(v == false) {
				close();
			}
		}}}
		if String.isNotEmpty(error):
			Log.error(ctx, error)
		return v
	}

	func getColumnCount override as int
	{
		var v = 0
		lang "cs" {{{
			if(reader != null) {
				v = reader.FieldCount;
			}
		}}}
		return v
	}

	func getColumnNames override as vector<string>
	{
		var v = new vector<string>
		var n as int
		var c = getColumnCount()
		for(n = 0; n < c; n++) {
			var nn = getColumnName(n)
			if not nn:
				nn = ""
			v += nn
		}
		return v
	}

	func getColumnName(n as int) override as string
	{
		var v as string = null
		lang "cs" {{{
			if(reader != null) {
				v = reader.GetName(n);
			}
			if(v == null) {
				v = "";
			}
		}}}
		return v
	}

	func getColumnObject(n as int) override as object
	{
		assert reader
		var v as string = null
		lang "cs" {{{
			if(reader.IsDBNull(n)) {
				return(null);
			}
			if(reader.GetFieldType(n) == typeof(byte[])) {
				var b = (byte[])reader.GetValue(n);
				return(cape.Buffer.asObject(b));
			}
			var o = reader.GetValue(n);
			if(o == null) {
				return(null);
			}
			v = o.ToString(); //reader.GetString(n);
			if(v == null) {
				return(null);
			}
		}}}
		return v
	}

	func getColumnInt(n as int) override as int
	{
		var v = 0
		lang "cs" {{{
			if(reader != null) {
				v = reader.GetInt32(n);
			}
		}}}
		return v
	}

	func getColumnLong(n as int) override as long
	{
		var v as long = 0
		lang "cs" {{{
			if(reader != null) {
				v = reader.GetInt64(n);
			}
		}}}
		return v
	}

	func getColumnDouble(n as int) override as double
	{
		var v as double = 0
		lang "cs" {{{
			if(reader != null) {
				v = reader.GetDouble(n);
			}
		}}}
		return v
	}

	func getColumnBuffer(n as int) override as buffer
	{
		var v as buffer = null
		lang "cs" {{{
			if(reader != null) {
				v = (byte[])reader.GetValue(n);
			}
		}}}
		return v
	}

	func next override as cape.DynamicMap
	{
		assert step()
		var names = getColumnNames()
		assert names && cape.Vector.getSize(names) > 0
		var v = new cape.DynamicMap()
		var n as int
		for(n = 0; n < cape.Vector.getSize(names); n++):
			v.set(cape.Vector.get(names, n), getColumnObject(n))
		return v
	}

	func hasNext override as bool
	{
		if hasNextRecord:
			return true
		var v = step()
		if v {
			hasNextRecord = true
			return true
		}
		return false
	}
}

var connectionString as string

func initialize(serverAddress as string, username as string, password as string, database as string, sslMode as string, protocol as string) override as bool
{
	setDatabaseName(database)
	connectionString = "Database=" .. database .. ";Data Source=" .. serverAddress .. ";User Id=" .. username .. ";Allow User Variables=True;Protocol=" .. protocol .. ";Password=" .. password .. ";SslMode=" .. sslMode .. ";"
	if getEnableUTF8():
		connectionString = connectionString .. "charset=utf8mb4;"
	Log.debug(getLogger(), "MySQL connection string: `" .. connectionString .. "'")
	return true
}

func close override:
	connectionString = null

func prepare(sql as string) override as SQLStatement:
	return Statement.forSql(sql)

func execute(stmt as SQLStatement) override as bool
{
	var ss = assert stmt as Statement
	var v = true
	var error as string = null
	lang "cs" {{{
		try {
			MySql.Data.MySqlClient.MySqlHelper.ExecuteNonQuery(connectionString, ss.sql, ss.getParamArray());
		}
		catch(System.Exception e) {
			v = false;
			error = e.ToString();
		}
	}}}
	if String.isNotEmpty(error):
		Log.error(getLogger(), error)
	return v
}

func executeUpdateDelete(stmt as SQLStatement) override as int
{
	var ss = stmt as Statement
	if not ss:
		return 0
	var v = 0
	var error as string = null
	lang "cs" {{{
		try {
			v = MySql.Data.MySqlClient.MySqlHelper.ExecuteNonQuery(connectionString, ss.sql, ss.getParamArray());
		}
		catch(System.Exception e) {
			v = 0;
			error = e.ToString();
		}
	}}}
	if String.isNotEmpty(error):
		Log.error(getLogger(), error)
	return v
}

func query(stmt as SQLStatement) override as SQLResultSetIterator
{
	var ss = assert stmt as Statement
	var v as ResultSet = null
	var error as string = null
	var rdr as !"MySql.Data.MySqlClient.MySqlDataReader"
	lang "cs" {{{
		try {
			rdr = MySql.Data.MySqlClient.MySqlHelper.ExecuteReader(connectionString, ss.sql, ss.getParamArray());
		}
		catch(System.Exception e) {
			error = e.ToString();
		}
		if(rdr != null) {
			v = new ResultSet();
			v.ctx = getLogger();
			v.reader = rdr;
		}
	}}}
	if String.isNotEmpty(error):
		Log.error(getLogger(), error)
	return v
}

func close(callback as function) override
{
	close()
	if callback:
		callback()
}

func execute(stmt as SQLStatement, callback as function<void, bool>) override
{
	var v = execute(stmt)
	if callback:
		callback(v)
}

func executeUpdateDelete(stmt as SQLStatement, callback as function<void, int>) override
{
	var v = executeUpdateDelete(stmt)
	if callback:
		callback(v)
}

func query(stmt as SQLStatement, callback as function<void, SQLResultSetIterator>) override
{
	var v = query(stmt)
	if callback:
		callback(v)
}

func querySingleRow(stmt as SQLStatement, callback as function<void, DynamicMap>) override
{
	query(stmt, func(it as SQLResultSetIterator) {
		if callback {
			assert it:
				callback(null)
			var v = it.next()
			it.close()
			callback(v)
		}
	})
}

func tableExists(table as string, callback as function<void, bool>) override
{
	var databaseName = getDatabaseName()
	assert String.isNotEmpty(table) && String.isNotEmpty(databaseName):
		callback(false)
	var stmt = assert prepare("SELECT TABLE_NAME FROM information_schema.tables WHERE table_schema = ? AND table_name = ? LIMIT 1;"):
		callback(false)
	stmt.addParamString(databaseName)
	stmt.addParamString(table)
	querySingleRow(stmt, func(sr as DynamicMap) {
		assert sr:
			callback(false)
		callback(String.equalsIgnoreCase(table, sr.getString("TABLE_NAME")))
	})
}
