
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import cape
import cave
import cave.ui

class:

IFDEF "target_android"
{
	depend "gradle:com.google.android.gms:play-services-auth:11.0.0"
}

ELSE IFDEF "target_iosoc"
{
	depend "ldflags:-ObjC"
	depend "objc-header-h:<GoogleSignIn/GoogleSignIn.h>"
	depend "objc-framework:GoogleSignIn"
	depend "objc-framework:GoogleAppUtilities"
	depend "objc-framework:GoogleSignInDependencies"
	depend "objc-framework:GoogleSymbolUtilities"
	depend "objc-framework:SystemConfiguration"
	depend "objc-framework:SafariServices"
	depend "objc-framework:UIKit"

	class MyDelegate implements !"GIDSignInDelegate" implements !"GIDSignInUIDelegate"
	{
		prop appdelegate as IOSAppDelegate
		prop parentViewController as !"UIViewController"
		prop callback as function<void,string,string,cape.Error>

		lang "objc" {{{
			- (void)signIn:(GIDSignIn *)signIn didSignInForUser:(GIDGoogleUser *)user withError:(NSError *)error
			{
				[self onSignInUser:user.profile.email token:user.authentication.idToken];
				objc_removeAssociatedObjects(signIn);
			}
			- (void)signIn:(GIDSignIn *)signIn didDisconnectWithUser:(GIDGoogleUser *)user withError:(NSError *)error
			{

			}
			- (void)signInWillDispatch:(GIDSignIn *)signIn error:(NSError *)error
			{
			}

			- (void)signIn:(GIDSignIn *)signIn presentViewController:(UIViewController *)viewController
			{
				[self->parentViewController presentViewController:viewController animated:YES completion:nil];
			}

			- (void)signIn:(GIDSignIn *)signIn dismissViewController:(UIViewController *)viewController
			{
				[viewController dismissViewControllerAnimated:YES completion:nil];
			}
		}}}

		func onSignInUser(email as string, token as string)
		{
			appdelegate.setOpenURLhandler(null)
			if(callback != null) {
				callback(email, token, null)
			}
		}
	}

}

ELSE IFDEF "target_browser"
{
	var sdkIncluded static = false
	var sdkLoaded static = false
	var loginObjectWaiting static as this
	var auth2 as object #used
	var loginCallback as function<void,string,string,cape.Error>

	func onGoogleSDKLoaded static
	{
		PRINT "Google SDK loaded"
		var myObject #used = loginObjectWaiting
		lang "js" {{{
			gapi.load('auth2', function() {
				var auth2 = gapi.auth2.init({
					client_id: myObject.webAppId,
					cookie_policy: 'none',
					scope: 'profile email'
				});
				var self = myObject;
				auth2.currentUser.listen(function(user) {
					if(self.loginCallback) {
						self.loginCallback(user.w3.U3, user.Zi.id_token, null);
						self.loginCallback = null;
					}
				});
				myObject.auth2 = auth2;
				CaveGoogleAccountLogin.sdkLoaded = true;
			});
		}}}
		loginObjectWaiting = null
	}
}

func forApplications(context as GuiApplicationContext, webAppId as string, serverClientId as string, iosClientId as string) static as this
{
	var v = new this()
	v.setContext(context)
	v.setWebAppId(webAppId)
	v.setIOSClientId(iosClientId)
	v.setServerClientId(serverClientId)
	IFDEF "target_browser" {
		if(sdkIncluded == false) {
			loginObjectWaiting = v
			var cc = HTMLDOM.createElement("script")
			HTMLDOM.setTextContent(cc, "function onLoadedComplete() { CaveGoogleAccountLogin.onGoogleSDKLoaded(); }")
			HTMLDOM.appendChild(HTMLDOM.getDocumentBody(), cc)
			var ss = HTMLDOM.createElement("script")
			HTMLDOM.setAttribute(ss, "src", "https://apis.google.com/js/platform.js?onload=onLoadedComplete")
			HTMLDOM.setAttribute(ss, "async", "")
			HTMLDOM.setAttribute(ss, "defer", "")
			HTMLDOM.appendChild(HTMLDOM.getDocumentBody(), ss)
			sdkIncluded = true
		}
	}
	return(v)
}

prop context as GuiApplicationContext
prop webAppId as string
prop iOSClientId as string
prop serverClientId as string

func execute(widget as Widget, callback as function<void,string,string,cape.Error>)
{
	var cb final #used = callback
	IFDEF "target_browser" {
		if(sdkLoaded == false) {
			if(callback != null) {
				callback(null, null, cape.Error.forMessage("Google+ SDK is not yet loaded. Please try again momentarily."))
			}
			return
		}
		loginCallback = callback
		lang "js" {{{
			this.auth2.signIn();
		}}}
		return
	}
	ELSE IFDEF "target_android" {
		var screen = cave.ui.Widget.findScreen(widget) as ScreenForWidget
		if(screen == null) {
			if(cb != null) {
				cb(null, null, Error.forCode("no_screen_found"))
			}
			return
		}
		var ctx = context as GuiApplicationContextForAndroid
		var activity = ctx.getAndroidActivityContext() as !"android.app.Activity"
		screen.setAndroidActivityResultHandler(func(requestCode as int, resultCode as int, data as !"android.content.Intent") {
			if(requestCode != 0) {
				if(cb != null) {
					cb(null, null, Error.forCode("invalid_request_code"))
				}
				return
			}
			var token as string
			var email as string
			IFDEF "target_java" {
				lang "java" {{{
					com.google.android.gms.auth.api.signin.GoogleSignInResult result = com.google.android.gms.auth.api.Auth.GoogleSignInApi.getSignInResultFromIntent(data);
					if(result.isSuccess()) {
						com.google.android.gms.auth.api.signin.GoogleSignInAccount account = result.getSignInAccount();
						if(account != null) {
							email = account.getEmail();
							token = account.getIdToken();
						}
					}
				}}}
			}
			ELSE IFDEF "target_kotlin" {
				lang "kotlin" {{{
					var result : com.google.android.gms.auth.api.signin.GoogleSignInResult = com.google.android.gms.auth.api.Auth.GoogleSignInApi.getSignInResultFromIntent(data)
					if(result.isSuccess()) {
						var account : com.google.android.gms.auth.api.signin.GoogleSignInAccount? = result.getSignInAccount()
						if(account != null) {
							email = account.getEmail()
							token = account.getIdToken()
						}
					}
				}}}
			}
			if(cb != null) {
				if(token == null) {
					cb(null, null, cape.Error.forCode("login_failed"))
				}
				else {
					cb(email, token, null)
				}
			}
		})
		IFDEF "target_java" {
			lang "java" {{{
				com.google.android.gms.auth.api.signin.GoogleSignInOptions gso = new com.google.android.gms.auth.api.signin.GoogleSignInOptions.Builder(com.google.android.gms.auth.api.signin.GoogleSignInOptions.DEFAULT_SIGN_IN)
					.requestIdToken(serverClientId)
					.requestEmail()
					.build();
				com.google.android.gms.common.api.GoogleApiClient googleAPIClient = new com.google.android.gms.common.api.GoogleApiClient.Builder(activity)
					.addApi(com.google.android.gms.auth.api.Auth.GOOGLE_SIGN_IN_API, gso)
					.build();
				activity.startActivityForResult(com.google.android.gms.auth.api.Auth.GoogleSignInApi.getSignInIntent(googleAPIClient), 0);
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				var gso : com.google.android.gms.auth.api.signin.GoogleSignInOptions = com.google.android.gms.auth.api.signin.GoogleSignInOptions.Builder(com.google.android.gms.auth.api.signin.GoogleSignInOptions.DEFAULT_SIGN_IN)
					.requestIdToken(serverClientId)
					.requestEmail()
					.build()
				var googleAPIClient : com.google.android.gms.common.api.GoogleApiClient? = com.google.android.gms.common.api.GoogleApiClient.Builder(ctx.getAndroidActivityContext() as android.content.Context)
					.addApi(com.google.android.gms.auth.api.Auth.GOOGLE_SIGN_IN_API, gso)
					.build()
				activity!!.startActivityForResult(com.google.android.gms.auth.api.Auth.GoogleSignInApi.getSignInIntent(googleAPIClient), 0)
			}}}
		}
	}
	ELSE IFDEF "target_iosoc" {
		var screen = ScreenForWidget.findScreenForWidget(widget)
		if(screen == null) {
			if(cb != null) {
				cb(null, null, Error.forCode("no_screen_found"))
			}
			return
		}
		var appdelegate as IOSAppDelegate
		lang "objc" {{{
			appdelegate = (CaveIOSAppDelegate*)[[UIApplication sharedApplication] delegate];
		}}}
		appdelegate.setOpenURLhandler(func(app as !"UIApplication", url as !"NSURL", options as !"NSDictionary", sourceApplications as !"NSString", annotation as object) as bool {
			return(lang "objc" bool {{{ [[GIDSignIn sharedInstance] handleURL:url sourceApplication:options[UIApplicationOpenURLOptionsSourceApplicationKey] annotation:options[UIApplicationOpenURLOptionsAnnotationKey]] }}})
		})
		var delegate = new MyDelegate()
		delegate.setAppdelegate(appdelegate)
		delegate.setCallback(callback)
		delegate.setParentViewController(screen)
		lang "objc" {{{
			GIDSignIn* signInObject = [GIDSignIn sharedInstance];
			signInObject.clientID = self->iOSClientId;
			signInObject.delegate = delegate;
			signInObject.uiDelegate = delegate;
			objc_setAssociatedObject(signInObject, "_signInDelegate", delegate, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
			[signInObject signIn];
		}}}
	}
	ELSE {
		ERROR("Not implemented")
		if(cb != null) {
			cb(null, null, Error.forCode("not_supported"))
		}
	}
}

func logout
{
	IFDEF "target_iosoc" {
		lang "objc" {{{
			GIDSignIn* signInObject = [GIDSignIn sharedInstance];
			[signInObject signOut];
		}}}
	}
	ELSE IFDEF "target_browser" {
		if sdkLoaded {
			lang "js" {{{
				this.auth2.disconnect();
				this.auth2.signOut();
			}}}
		}
	}
	ELSE {
		ERROR "Not implemented."
	}
}
