
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

import cape
import capex.net
import capex.util
import capex.console
import sympathy

class MyHTTPServer is HTTPServer
{
	prop myParent as parent

	func onMaintenance override
	{
		base.onMaintenance()
		myParent.onMaintenance()
	}
}

prop enableRequestLogging = true
prop listenPort = 8080
prop loggingDirectory as File
prop configFile as File
prop enableDebugMessages = false
prop alsoPrintOnConsole = false
prop maintenanceTimerDelay = 60
prop timeoutDelay = 30
prop enableRateLimit as string
var ctx protected as LoggingContext

ctor:
	ctx = new ConsoleApplicationContext()

func getConfigFileDirectory as File
{
	if configFile == null:
		return null
	return configFile.getParent()
}

func onMaintenance virtual
{
}

func configure(key as string, value as string, relativeTo as File, error as Error) virtual as bool
{
	if key == "enableRateLimit" {
		enableRateLimit = value
		return true
	}
	if key == "timeoutDelay" {
		timeoutDelay = Integer.asInteger(value)
		if timeoutDelay < 30:
			timeoutDelay = 30
		return true
	}
	if key == "maintenanceTimerDelay" {
		maintenanceTimerDelay = Integer.asInteger(value)
		if maintenanceTimerDelay < 0:
			maintenanceTimerDelay = 0
		return true
	}
	if key == "listenPort" {
		listenPort = Integer.asInteger(value)
		return true
	}
	if key == "enableRequestLogging" {
		enableRequestLogging = Boolean.asBoolean(value)
		return true
	}
	if key == "loggingDirectory" {
		loggingDirectory = File.forRelativePath(value, relativeTo)
		return true
	}
	if key == "enableDebugMessages" {
		enableDebugMessages = Boolean.asBoolean(value)
		return true
	}
	if key == "alsoPrintOnConsole" {
		alsoPrintOnConsole = Boolean.asBoolean(value)
		return true
	}
	return false
}

func doConfigure(key as string, value as string, relativeTo as File) private as bool
{
	var error = new Error()
	if configure(key, value, relativeTo, error) == false {
		Log.error(ctx, error.toStringWithDefault("Unsupported configuration option: `" .. key .. "'"))
		return false
	}
	return true
}

func initialize virtual as bool:
	return true

func initializeServer(server as HTTPServer) virtual as bool
{
	if enableRateLimit {
		var limit = new HTTPServerRateLimitHandler()
		if enableRateLimit == "true" || enableRateLimit == "yes" {
			; // all good, use default settings
		}
		else {
			var comps = String.split(enableRateLimit, ':', 3)
			limit.setCountLimit(Integer.asInteger(Vector.get(comps, 0)))
			limit.setCountDuration(Integer.asInteger(Vector.get(comps, 1)))
			limit.setIgnoreDuration(Integer.asInteger(Vector.get(comps, 2)))
		}
		server.pushRequestHandler(limit)
	}
	return true
}

func printUsage(stdout as PrintWriter) virtual
{
	var flags = [
		[ "debug", "Enable debug messages in logging" ],
		[ "v|version|vv", "Display version information" ],
		[ "h|help", "Usage information" ]
	]
	var options = [
		[ "config", "Specify a configuration file to use" ],
		[ "O<option>", "Manually specify configuration parameters (key/value pairs)" ]
	]
	ConsoleApplication.printUsage(stdout, null, null, flags, options)
}

func printHeader(stdout as PrintWriter) virtual
{
}

func printVersion(stdout as PrintWriter, longFormat as bool) virtual
{
}

func execute(args as array<string>) as bool
{
	var stdout = Stdout.instance()
	var arguments = ConsoleApplication.parseCommandLineArguments(args)
	foreach(arg in arguments) {
		if arg.isFlag("v") || arg.isFlag("version") {
			printVersion(stdout, false)
			return true
		}
		else if arg.isFlag("vv") {
			printVersion(stdout, true)
			return true
		}
	}
	printHeader(stdout)
	var showHelp = false
	var options = new KeyValueListForStrings()
	foreach(arg in arguments) {
		if arg.isOption("config") {
			if configFile {
				Log.error(ctx, "Duplicate config file parameter supplied: `" .. arg.getComplete() .. "'")
				return false
			}
			configFile = File.forPath(arg.getStringValue())
		}
		else if arg.isFlag("help") || arg.isFlag("h") {
			showHelp = true
		}
		else if arg.isFlag("debug") {
			enableDebugMessages = true
		}
		else if arg.key && String.startsWith(arg.key, "O") {
			var key = String.getSubString(arg.key, 1)
			if String.isEmpty(key) {
				Log.error(ctx, "Invalid option parameter: `" .. arg.getComplete() .. "'")
				return false
			}
			options.add(key, arg.getStringValue())
		}
		else {
			arg.reportAsUnsupported(ctx)
			return false
		}
	}
	if showHelp {
		printUsage(stdout)
		return true
	}
	if configFile {
		var config = SimpleConfigFile.forFile(configFile)
		if config == null {
			Log.error(ctx, "Failed to read configuration file: `" .. configFile.getPath() .. "'")
			return false
		}
		var it = config.iterate()
		while it {
			var kvp = it.next()
			if kvp == null:
				break
			var key = kvp.key
			var value = kvp.value
			if doConfigure(key, value, configFile.getParent()) == false:
				return false
		}
	}
	var oit as Iterator<KeyValuePair<string,string>> #force = options.iterate()
	while oit {
		var kvp = oit.next()
		if kvp == null:
			break
		var key = kvp.key
		var value = kvp.value
		if doConfigure(key, value, null) == false:
			return false
	}
	if loggingDirectory {
		Log.debug(ctx, "Configuring logging to directory: `" .. loggingDirectory.getPath() .. "'")
		var dlc = DirectoryLoggingContext.create(loggingDirectory)
		dlc.setEnableDebugMessages(enableDebugMessages)
		dlc.setAlsoPrintOnConsole(alsoPrintOnConsole)
		ctx = dlc
	}
	else {
		var cac = ctx as ConsoleApplicationContext
		if cac:
			cac.setEnableDebugMessages(enableDebugMessages)
	}
	var server = new MyHTTPServer()
	server.setTimeoutDelay(timeoutDelay)
	server.setMaintenanceTimerDelay(maintenanceTimerDelay)
	server.setMyParent(this)
	server.setPort(listenPort)
	assert initialize():
		Log.error(ctx, "Failed to initialize application")
	assert initializeServer(server):
		Log.error(ctx, "Failed to configure HTTP server")
	if enableRequestLogging:
		server.addRequestHandlerListener(new HTTPServerRequestLogger().setLogContext(ctx).setLogdir(loggingDirectory))
	var ioManager = assert IOManager.createDefault():
		Log.error(ctx, "FAILED to create IO manager")
	assert server.initialize(ioManager, ctx):
		Log.error(ctx, "Failed to initialize HTTP server.")
	assert initializeWithIOManager(ioManager, ctx):
		Log.error(ctx, "Failed to initialize with IOManager")
	assert ioManager.execute(ctx):
		Log.error(ctx, "Failed to execute IO manager")
	Log.info(ctx, "Exiting normally.")
	return true
}

func executeMain(args as array<string>) as int:
	return execute(args) ? 0 : 1

func initializeWithIOManager(ioManager as IOManager, ctx as LoggingContext) virtual as bool:
	return true
