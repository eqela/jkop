
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2017 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class abstract:

func executeMain(app as this, args as array<string>) static as int
{
	if not app:
		return -1
	app.args = ConsoleApplication.parseCommandLineArguments(args)
	if not app.initialize():
		return 1
	var r = app.execute()
	Log.status(app.ctx, null)
	if r:
		return 0
	return 1
}

var stdout public as PrintWriter
var stdin public as PrintReader
var ctx public as ConsoleApplicationContext
var args public as vector<CommandLineArgument>
var verbosityLevel = 3

ctor
{
	stdin = Stdin.instance()
	stdout = Stdout.instance()
	ctx = new ConsoleApplicationContext()
}

func initialize virtual as bool:
	return true

func getVerbosityLevel as int:
	return verbosityLevel

func setVerbosityLevel(level as int)
{
	verbosityLevel = level
	if verbosityLevel <= 0 {
		ctx.setEnableOutput(false)
	}
	else if verbosityLevel == 1 {
		ctx.setEnableOutput(true)
		ctx.setShowError(true)
		ctx.setShowWarning(false)
		ctx.setShowInfo(false)
		ctx.setShowDebug(false)
	}
	else if verbosityLevel == 2 {
		ctx.setEnableOutput(true)
		ctx.setShowError(true)
		ctx.setShowWarning(true)
		ctx.setShowInfo(false)
		ctx.setShowDebug(false)
	}
	else if verbosityLevel == 3 {
		ctx.setEnableOutput(true)
		ctx.setShowError(true)
		ctx.setShowWarning(true)
		ctx.setShowInfo(true)
		ctx.setShowDebug(false)
	}
	else {
		ctx.setEnableOutput(true)
		ctx.setShowError(true)
		ctx.setShowWarning(true)
		ctx.setShowInfo(true)
		ctx.setShowDebug(true)
	}
}

func handleVerbosityParams
{
	var nargs = new vector<CommandLineArgument>
	var vl = verbosityLevel
	foreach arg in args {
		if arg.isFlag("v0") {
			vl = 0
		}
		else if arg.isFlag("v1") {
			vl = 1
		}
		else if arg.isFlag("v2") {
			vl = 2
		}
		else if arg.isFlag("v3") {
			vl = 3
		}
		else if arg.isFlag("v4") || arg.isFlag("vv") || arg.isFlag("debug") {
			vl = 4
		}
		else {
			nargs += arg
		}
	}
	args = nargs
	if vl != verbosityLevel:
		setVerbosityLevel(vl)
}

func execute virtual abstract as bool
