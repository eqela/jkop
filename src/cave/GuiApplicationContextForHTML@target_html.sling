
/*
 * This file is part of Jkop
 * Copyright (c) 2016 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is GuiApplicationContext imports cape:

var imageCache = new map<string, Image>

func clearResources
{
	imageCache = new map<string, Image>
}

func prepareResources(resources as array<string>, callback as function)
{
	if(resources == null) {
		if(callback != null) {
			callback()
		}
		return
	}
	var loadedResources = 0
	var totalResources = SIZE(resources)
	var onResourceLoadingComplete = func {
		loadedResources ++
		if(loadedResources >= totalResources) {
			logInfo("All resources have been loaded")
			if(callback != null) {
				callback()
			}
		}
	}
	var onLoad #used = func {
		logDebug("Resource loaded")
		onResourceLoadingComplete()
	}
	var onError #used = func {
		logError("Failed to load resource")
		onResourceLoadingComplete()
	}
	var style as object
	foreach(path in resources) {
		var pp = path
		var slash = String.lastIndexOf(pp, '/')
		if(slash >= 0) {
			pp = String.getSubString(pp, slash+1)
		}
		var dot = String.lastIndexOf(pp, '.')
		if(dot < 0) {
			onResourceLoadingComplete()
			continue
		}
		var ext = String.getSubString(pp, dot+1)
		pp = String.getSubString(pp, 0, dot)
		if(String.equalsIgnoreCase(ext, "png") || String.equalsIgnoreCase(ext, "jpg") || String.equalsIgnoreCase(ext, "gif")) {
			logDebug("Start loading resource: `" .. pp .. ": `" .. path .. "'")
			var imgo = new ImageForHTML()
			var image as object
			lang "js" {{{
				image = new Image();
				image.onload = onLoad;
				image.onerror = onError;
				image.src = path;
			}}}
			imgo.image = image
			imageCache[pp] = imgo
		}
		else if(String.equalsIgnoreCase(ext, "otf") || String.equalsIgnoreCase(ext, "ttf")) {
			logDebug("Start loading resource: `" .. pp .. ": `" .. path .. "'")
			if(HTMLDOM.doesBrowserSupportFontLoading()) {
				var head = HTMLDOM.getDocumentHead()
				if(style == null) {
					style = HTMLDOM.createElement("style")
					HTMLDOM.appendChild(head, style)
				}
				HTMLDOM.appendChild(style, HTMLDOM.createTextNode("@font-face { font-family: " .. pp .. "; src: url('" .. path .. "')}"))
				lang "js" {{{
					document.fonts.load("12px " + pp).then(onLoad, onError);
				}}}
			}
			else {
				logWarning("Browser does not support font loading: `" .. path .. "'")
				onResourceLoadingComplete()
			}
		}
		else {
			logWarning("Unsupported resource file type `" .. ext .. "': `" .. path .. "'")
			onResourceLoadingComplete()
		}
	}
}

func getResourceImage(id as string) as Image
{
	return(Map.getValue(imageCache, id))
}

func getImageForBuffer(buffer as buffer, mimeType as string) as Image
{
	ERROR("Not implemented")
	return(null)
}

func logError(message as string)
{
	PRINT("[ERROR] " .. message)
}

func logWarning(message as string)
{
	PRINT("[WARNING] " .. message)
}

func logInfo(message as string)
{
	PRINT("[INFO] " .. message)
}

func logDebug(message as string)
{
	PRINT("[DEBUG] " .. message)
}

func showConfirmDialog(title as string, message as string, okcallback as function, cancelcallback as function)
{
	var result as bool
	lang "js" {{{
		result = confirm(message);
	}}}
	if(result) {
		if(okcallback != null) {
			okcallback()
		}
	}
	else {
		if(cancelcallback != null) {
			cancelcallback()
		}
	}
}

func showMessageDialog(title as string, message as string)
{
	showMessageDialog(title, message, null)
}

func showMessageDialog(title as string, message as string, callback as function)
{
	lang "js" {{{
		window.alert(message);
	}}}
	if(callback != null) {
		callback()
	}
}

func showErrorDialog(message as string)
{
	showErrorDialog(message, null)
}

func showErrorDialog(message as string, callback as function)
{
	lang "js" {{{
		window.alert(message);
	}}}
	if(callback != null) {
		callback()
	}
}

func getScreenTopMargin as int
{
	return(0)
}

func getScreenWidth as int
{
	var v as int
	lang "js" {{{
		v = window.screen.availWidth;
	}}}
	return(v)
}

func getScreenHeight as int
{
	var v as int
	lang "js" {{{
		v = window.screen.availHeight;
	}}}
	return(v)
}

func getScreenDensity as int
{
	var ppi as int
	// HACK: Firefox (and likely others) stubbornly uses a DPI value of n*96, regardless of what it really is.
	// But in reality, most people wouldn't have 96 DPI anymore .. Thus we'll make a reasonable middle-ground guess
	// of 1.3x the DPI (thus 1.3in, not 1in)
	lang "js" {{{
		var div = document.createElement("div");
		div.setAttribute("style", "width: 1.3in; padding: 0; visibility: hidden; position: fixed; left: 0; top: 0;");
		var bodys = document.getElementsByTagName("body");
		bodys[0].appendChild(div);
		ppi = div.offsetWidth;
		if(ppi < 1) {
			ppi = 1;
		}
		bodys[0].removeChild(div);
	}}}
	var qs = Environment.getQueryString()
	if(cape.String.isEmpty(qs) == false) {
		foreach(q in String.split(qs, '&')) {
			if(cape.String.startsWith(q, "jkopDpi=") == false) {
				continue
			}
			var val = cape.String.getSubString(q, 8)
			if(cape.String.isEmpty(val) == false) {
				ppi = cape.String.toInteger(val)
			}
			break
		}
	}
	return(ppi)
}

func getHeightValue(spec as string) as int
{
	return(cave.Length.asPoints(spec, getScreenDensity()))
}

func getWidthValue(spec as string) as int
{
	return(cave.Length.asPoints(spec, getScreenDensity()))
}

func startTimer(timeout as long, callback as function)
{
	lang "js" {{{
		setTimeout(callback, timeout);
	}}}
}
