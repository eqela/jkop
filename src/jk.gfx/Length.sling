
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is StringObject:

func asPoints(value as string, ppi as int) static as int:
	return forString(value).toPoints(ppi)

func asPointsWithPpi(value as string, ppi as double) static as double:
	return forString(value).getValueAsPointsWithPpi(ppi)

func unitToString(unit as int) static as string
{
	if unit == UNIT_POINT:
		return "pt"
	if unit == UNIT_MILLIMETER:
		return "mm"
	if unit == UNIT_MICROMETER:
		return "um"
	if unit == UNIT_NANOMETER:
		return "nm"
	if unit == UNIT_INCH:
		return "in"
	return null
}

func asStringWithUnit(length as this, unit as int) static as string
{
	var v as double
	if not length {
		v = 0.0
	}
	else {
		v = length.getValueAsUnit(unit)
	}
	return String.forDouble(v) .. unitToString(unit)
}

func asString(length as this) static as string
{
	if not length:
		return "0px"
	return asStringWithUnit(length, length.getUnit())
}

func forString(value as string, ppi as double = 0.0) static as this
{
	var v = new this()
	v.parse(value)
	if ppi > 0.0:
		v.setPpi(ppi)
	return v
}

func forPoints(value as double, ppi as double = 0.0) static as this
{
	var v = new this()
	v.setValue(value)
	v.setUnit(UNIT_POINT)
	if ppi > 0.0:
		v.setPpi(ppi)
	return v
}

func forMilliMeters(value as double, ppi as double = 0.0) static as this
{
	var v = new this()
	v.setValue(value)
	v.setUnit(UNIT_MILLIMETER)
	if ppi > 0.0:
		v.setPpi(ppi)
	return v
}

func forMicroMeters(value as double, ppi as double = 0.0) static as this
{
	var v = new this()
	v.setValue(value)
	v.setUnit(UNIT_MICROMETER)
	if ppi > 0.0:
		v.setPpi(ppi)
	return v
}

func forNanoMeters(value as double, ppi as double = 0.0) static as this
{
	var v = new this()
	v.setValue(value)
	v.setUnit(UNIT_NANOMETER)
	if ppi > 0.0:
		v.setPpi(ppi)
	return v
}

func forInches(value as double, ppi as double = 0.0) static as this
{
	var v = new this()
	v.setValue(value)
	v.setUnit(UNIT_INCH)
	if ppi > 0.0:
		v.setPpi(ppi)
	return v
}

func forValue(value as double, unit as int, ppi as double = 0.0) static as this
{
	var v = new this()
	v.setValue(value)
	v.setUnit(unit)
	if ppi > 0.0:
		v.setPpi(ppi)
	return v
}

func forStringAsPoints(value as string, ppi as int) static as this
{
	var v = new this()
	v.parse(value)
	v.setValue(v.toPoints(ppi))
	v.setUnit(UNIT_POINT)
	v.setPpi(ppi as double)
	return v
}

const UNIT_POINT = 0
const UNIT_MILLIMETER = 1
const UNIT_MICROMETER = 2
const UNIT_NANOMETER = 3
const UNIT_INCH = 4

pvar value as double
pvar unit as int
pvar ppi = 96.0

func parse(value as string) private
{
	if value == null {
		this.value = 0
		unit = UNIT_POINT
		return
	}
	var i = 0
	var n = 0
	var it = String.iterate(value)
	loop {
		var c = it.getNextChar()
		if c < 1 {
			break
		}
		else if c >= '0' && c <= '9' {
			i *= 10
			i += c - '0' as int
		}
		else {
			break
		}
		n++
	}
	this.value = i
	var suffix = String.getEndOfString(value, n)
	if String.isEmpty(suffix) {
		unit = UNIT_POINT
	}
	else if suffix == "pt" || suffix == "px" {
		unit = UNIT_POINT
	}
	else if suffix == "mm" {
		unit = UNIT_MILLIMETER
	}
	else if suffix == "um" {
		unit = UNIT_MICROMETER
	}
	else if suffix == "nm" {
		unit = UNIT_NANOMETER
	}
	else if suffix == "in" {
		unit = UNIT_INCH
	}
	else {
		unit = UNIT_POINT
	}
}

func toPoints(customPpi as int) as int:
	return getValueAsPointsWithPpi(customPpi) as int

func getValueAsPointsWithPpi(customPpi as double) as double
{
	if unit == UNIT_POINT {
		if ppi == customPpi:
			return value
		if ppi == 0.0:
			return 0.0
		return customPpi * value / ppi
	}
	if unit == UNIT_MILLIMETER {
		var v = value * customPpi / 25
		if value > 0 && v < 1:
			v = 1.0
		return v
	}
	if unit == UNIT_MICROMETER {
		var v = value * customPpi / 25000
		if value > 0 && v < 1:
			v = 1.0
		return v
	}
	if unit == UNIT_NANOMETER {
		var v = value * customPpi / 25000000
		if value > 0 && v < 1:
			v = 1.0
		return v
	}
	if unit == UNIT_INCH {
		var v = value * customPpi
		if value > 0 && v < 1:
			v = 1.0
		return v
	}
	return 0.0
}

func getValueAsPoints as double
{
	return getValueAsPointsWithPpi(ppi)
}

func getValueAsMilliMeters as double
{
	assert ppi != 0.0
	return 25 * getValueAsPoints() / ppi
}

func getValueAsMicroMeters as double
{
	assert ppi != 0.0
	return 25000 * getValueAsPoints() / ppi
}

func getValueAsNanoMeters as double
{
	assert ppi != 0.0
	return 25000000 * getValueAsPoints() / ppi
}

func getValueAsInches as double
{
	assert ppi != 0.0
	return getValueAsPoints() / ppi
}

func getValueAsUnit(unit as int) as double
{
	if unit == UNIT_POINT:
		return getValueAsPoints()
	if unit == UNIT_MILLIMETER:
		return getValueAsMilliMeters()
	if unit == UNIT_MICROMETER:
		return getValueAsMicroMeters()
	if unit == UNIT_NANOMETER:
		return getValueAsNanoMeters()
	if unit == UNIT_INCH:
		return getValueAsInches()
	return value
}

func toString as string:
	return asString(this)
