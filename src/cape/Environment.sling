
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func getPathSeparator static as char
{
	IFDEF "target_cs" {
		return lang "cs" char {{{ System.IO.Path.DirectorySeparatorChar }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" char {{{ java.io.File.separatorChar }}}
	}
	ELSE IFDEF "target_browser" {
		return '/'
	}
	ELSE IFDEF "target_darwin" {
		return '/'
	}
	ELSE IFDEF "target_windows" {
		return '\\'
	}
	ELSE {
		if OS.isWindows():
			return '\\'
		return '/'
	}
}

func isAbsolutePath(path as string) static as bool
{
	assert path
	IFDEF "target_android" {
		return String.startsWith(path, "/")
	}
	ELSE IFDEF "target_darwin" {
		return String.startsWith(path, "/")
	}
	ELSE IFDEF "target_browser" {
		return String.startsWith(path, "/")
	}
	ELSE IFDEF "target_windows" {
		var c0 = String.getChar(path, 0)
		if c0 == '\\':
			return true
		if Character.isAlpha(c0) && String.getChar(path, 1) == ':' && String.getChar(path, 2) == '\\':
			return true
		return false
	}
	ELSE {
		var sep = getPathSeparator()
		var c0 = String.getChar(path, 0)
		if c0 == sep:
			return true
		if Character.isAlpha(c0) && OS.isWindows() && String.getChar(path, 1) == ':' && String.getChar(path, 2) == '\\':
			return true
		return false
	}
}

func getVariables static as map<string,string>
{
	ERROR "Not implemented"
	return null
}

func getVariable(key as string) static as string
{
	assert key
	IFDEF "target_cs" {
		var v as string
		lang "cs" {{{
			v = System.Environment.GetEnvironmentVariable(key);
		}}}
		return v
	}
	ELSE IFDEF "target_java" {
		var v as string
		lang "java" {{{
			v = java.lang.System.getenv(key);
		}}}
		return v
	}
	ELSE IFDEF "target_objc" {
		var v as string
		lang "objc" {{{
			v = [[[NSProcessInfo processInfo] environment] objectForKey:key];
		}}}
		return v
	}
	ELSE IFDEF "target_nodejs" {
		var v as string
		lang "js" {{{
			v = process.env[key];
		}}}
		return v
	}
	ELSE IFDEF "target_lua" {
		var v as string
		lang "js" {{{
			v = os.getenv(key)
		}}}
		return v
	}
	ELSE {
		var vars = assert getVariables()
		return Map.get(vars, key)
	}
}

func setVariable(key as string, val as string) static
{
	assert key
	IFDEF "target_cs" {
		lang "cs" {{{
			System.Environment.SetEnvironmentVariable(key, val);
		}}}
	}
	ELSE {
		ERROR("Not implemented")
	}
}

func unsetVariable(key as string) static
{
	ERROR("Not implemented")
}

func setCurrentDirectory(dir as File) static
{
	ERROR("Not implemented")
}

func getCurrentDirectory static as File
{
	IFDEF("target_cs") {
		return(File.forPath(lang "cs" string {{{ System.IO.Directory.GetCurrentDirectory() }}}))
	}
	ELSE {
		ERROR("Not implemented")
		return(new FileInvalid())
	}
}

IFNDEF "target_browser" {
	func findInPath(command as string) static private as File
	{
		var path = getVariable("PATH")
		assert String.isNotEmpty(path)
		var separator = ':'
		if OS.isWindows():
			separator = ';'
		foreach dir in String.split(path, separator) {
			var pp = File.forPath(dir).entry(command).asExecutable()
			if pp.isFile():
				return pp
		}
		return null
	}
}

func findCommand(command as string) static as File
{
	IFDEF "target_browser" {
		return null
	}
	ELSE {
		assert command
		return findInPath(command)
	}
}

func getTemporaryDirectory static as File
{
	IFDEF("target_cs") {
		return(File.forPath(lang "cs" string {{{ System.IO.Path.GetTempPath() }}}))
	}
	ELSE IFDEF("target_objc") {
		return(File.forPath("/tmp"))
	}
	ELSE {
		ERROR("Not implemented")
		return(new FileInvalid())
	}
	/* FIXME: Android implementation
	func forTemporaryDirectory(context as !"android.content.Context") static as File
	{
		var v = new this()
		lang "java" {{{
			v.path = context.getCacheDir().getPath();
		}}}
		return(v)
	}
	*/
}

func getHomeDirectory static as File
{
	IFDEF("target_cs") {
		var v as string = null
		lang "cs" {{{
			var hd = System.Environment.GetEnvironmentVariable("HOMEDRIVE");
			if(hd != null) {
				var hp = System.Environment.GetEnvironmentVariable("HOMEPATH");
				if(hp != null) {
					v = hd + System.IO.Path.DirectorySeparatorChar + hp;
				}
			}
		}}}
		if(v == null) {
			lang "cs" {{{
				var h = System.Environment.GetEnvironmentVariable("HOME");
				if(h != null) {
					v = h;
				}
			}}}
		}
		IFDEF "target_dotnet4cs" {
			if(v == null) {
				lang "cs" {{{
					v = System.Environment.GetFolderPath(System.Environment.SpecialFolder.UserProfile);
				}}}
			}
		}
		return(File.forPath(v))
	}
	ELSE IFDEF("target_objc") {
		return(File.forPath("~"))
	}
	ELSE {
		ERROR("Not implemented")
		return(new FileInvalid())
	}
	/* FIXME: Android implementation
	func forHomeDirectory(context as !"android.content.Context") static as File
	{
		var v = new this()
		lang "java" {{{
			v.path = context.getFilesDir().getPath();
		}}}
		return(v)
	}
	*/
}

func getAppDirectory static as File
{
	IFDEF "target_dotnet4cs" {
		return(File.forPath(lang "cs" string {{{ System.AppDomain.CurrentDomain.BaseDirectory }}}))
	}
	ELSE {
		ERROR "Not implemented"
		return new FileInvalid()
	}
}

func getCodeFileForObject(oo as object) static as File
{
	assert oo
	IFDEF "target_cs" {
		var path as string
		lang "cs" {{{
			var type = oo.GetType();
			if(type != null) {
				var assembly = type.Assembly;
				if(assembly != null) {
					path = assembly.Location;
				}
			}
		}}}
		if path:
			return File.forPath(path)
		return null
	}
	ELSE {
		ERROR "Not implemented"
		return null
	}
}

func getProgramFilesDirectory static as File
{
	IFDEF "target_dotnet4cs" {
		if OS.isWindows() {
			var dirName = lang "cs" string {{{ System.Environment.GetFolderPath(System.Environment.SpecialFolder.ProgramFiles) }}}
			if String.isEmpty(dirName):
				dirName = "C:\\Program Files"
			var v = File.forPath(dirName)
			if v.isDirectory() == false:
				v = null
			return v
		}
	}
	return null
}

func getProgramFilesX86Directory static as File
{
	IFDEF "target_dotnet4cs" {
		if OS.isWindows() {
			var dirName = lang "cs" string {{{ System.Environment.GetFolderPath(System.Environment.SpecialFolder.ProgramFilesX86) }}}
			if String.isEmpty(dirName):
				dirName = "C:\\Program Files (x86)"
			var v = File.forPath(dirName)
			if v.isDirectory() == false:
				v = null
			return v
		}
	}
	return null
}

func getApplicationsDirectory static as File
{
	IFDEF "target_browser" {
		return null
	}
	ELSE IFDEF "target_android" {
		return null
	}
	ELSE IFDEF "target_darwin" {
		var v = File.forPath("/Applications")
		if v.isDirectory() == false:
			v = null
		return v
	}
	ELSE IFDEF "target_windows" {
		return null
	}
	ELSE {
		if OS.isMacOS() {
			var v = File.forPath("/Applications")
			if v.isDirectory() == false:
				v = null
			return v
		}
		return null
	}
}

func getCurrentApplicationId static as string
{
	var v as string
	var exe = CurrentProcess.getExecutableFile()
	if exe:
		v = exe.getBasenameWithoutExtension()
	return v
}

func getApplicationDataDirectory(appId as string = null) static as File
{
	var applicationName = appId
	if String.isEmpty(applicationName):
		applicationName = getCurrentApplicationId()
	if String.isEmpty(applicationName):
		return null
	var v as File
	IFDEF "target_dotnet4cs" {
		if OS.isWindows() {
			v = File.forPath(lang "cs" string {{{ System.Environment.GetFolderPath(System.Environment.SpecialFolder.LocalApplicationData) }}}).entry(applicationName)
		}
	}
	if v == null:
		v = File.forRelativePath("." .. applicationName, getHomeDirectory())
	return v
}

IFDEF "target_browser" {
	func getPageURL static as string
	{
		var url as string
		lang "js" {{{
			url = window.location.href;
		}}}
		return(url)
	}

	func getQueryString static as string
	{
		var url as string
		lang "js" {{{
			url = window.location.href;
		}}}
		if(cape.String.isEmpty(url)) {
			return(null)
		}
		var q = cape.String.indexOf(url, '?')
		if(q < 0) {
			return(null)
		}
		return(cape.String.getSubString(url, q+1))
	}
}
