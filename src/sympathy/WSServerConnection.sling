
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is NetworkConnection:

import capex.crypto

class ParserState private
{
	var method public as string
	var uri public as string
	var version public as string
	var key public as string
	var headers public as KeyValueList<string,string>
	var headersDone public as bool
	var bodyDone public as bool
	var hdr public as StringBuilder
	var contentLength public as int
	var bodyIsChunked public = false
	var dataCounter public as int
	var bodyStream public as DataStream
	var savedBodyChunk public as buffer
	var bodyBuffer public as buffer
}

prop connectionHandler as WSServerConnectionHandler
prop pingInterval = 30L
var parser as ParserState
var isWebSocketConnectionOpen = false
var webSocketGuid as string
var leftOverBuffer as buffer
var frameNo = 1

ctor
{
	webSocketGuid = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11"
	parser = new ParserState()
}

dtor
{
	leftOverBuffer = null
	webSocketGuid = null
	parser.method = null
	parser.uri = null
	parser.version = null
	parser.key = null
	parser.headers = null
	parser.headersDone = false
	if parser.bodyStream:
		parser.bodyStream.onDataStreamAbort()
	parser.bodyStream = null
	parser.bodyDone = false
	parser.hdr = null
	parser.contentLength = 0
	parser.bodyIsChunked = false
	parser.dataCounter = 0
	parser = null
}

func onOpened override:
	connectionHandler.onOpened()

func onClosed override:
	connectionHandler.onClosed()

func onError(message as string) override:
	logError(message)

func onHTTPHeaderData(inputBuffer as buffer, offset as int, sz as int) private as bool
{
	// FIXME: Cannot handle SSL/TLS open handshake yet.
	assert inputBuffer
	var p = 0
	while p < sz {
		var c = Buffer.getByte(inputBuffer, p + offset) as char
		p ++
		if c == '\r' {
			continue
		}
		if parser.method == null {
			if c == '\n' {
				// ignore empty lines and other garbage in the beginning
				continue
			}
			if c == ' ' {
				if parser.hdr != null {
					parser.method = parser.hdr.toString()
					parser.hdr = null
				}
				continue
			}
		}
		else if parser.uri == null {
			if c == ' ' {
				if parser.hdr != null {
					parser.uri = parser.hdr.toString()
					parser.hdr = null
				}
				continue
			}
			else if c == '\n' {
				if parser.hdr != null {
					parser.uri = parser.hdr.toString()
					parser.hdr = null
				}
				parser.version = "HTTP/0.9"
				parser.headersDone = true
				if p < sz {
					// WebSocket open handshake received has body. Don't know how to handle SSL/TLS. Failing the process
					return false
				}
				return onOpenHandshake()
			}
		}
		else if parser.version == null {
			if c == '\n' {
				if parser.hdr != null {
					parser.version = parser.hdr.toString()
					parser.hdr = null
				}
				continue
			}
		}
		else if parser.key == null {
			if c == ':' {
				if parser.hdr != null {
					parser.key = parser.hdr.toString()
					parser.hdr = null
				}
				continue
			}
			else if c == '\n' {
				if parser.hdr:
					return false
				parser.headersDone = true
				if p < sz {
					// WebSocket open handshake received has body. Don't know how to handle SSL/TLS. Failing the process
					return false
				}
				return onOpenHandshake()
			}
			if c >= 'A' && c <= 'Z' {
				c = ('a' + c - 'A') as char
			}
		}
		else if c == ' ' && parser.hdr == null {
			continue
		}
		else if c == '\n' {
			var value as string
			if parser.hdr != null {
				value = parser.hdr.toString()
				parser.hdr = null
			}
			if parser.headers == null {
				parser.headers = new KeyValueList<string,string>()
			}
			parser.headers.add(parser.key, value)
			if String.equalsIgnoreCase(parser.key, "content-length") && value != null {
				parser.contentLength = String.toInteger(value)
			}
			else if String.equalsIgnoreCase(parser.key, "transfer-encoding") && value != null && String.contains(value, "chunked") {
				parser.bodyIsChunked = true
			}
			parser.key = null
			continue
		}
		if parser.hdr == null {
			parser.hdr = new StringBuilder()
		}
		parser.hdr.append(c)
		if parser.hdr.count() > 32 * 1024:
			return false
	}
	return false
}

func onHTTPError private
{
	var data = String.toUTF8Buffer("HTTP/1.1 400 Bad Request\r\nConnection: close\r\n\r\n")
	sendData(data, SIZE(data))
	close()
}

func onWebsocketError private
{
	close()
}

func onDataReceived(data as buffer, size as int) override
{
	if isWebSocketConnectionOpen == false {
		if onHTTPHeaderData(data, 0, size) == false:
			onHTTPError()
		return
	}
	if not processData(data, size):
		onWebsocketError()
}

func onOpenHandshake private as bool
{
	assert parser
	assert parser.headers
	var it = assert parser.headers.iterate()
	var headers = new DynamicMap()
	loop {
		var kvp = it.next()
		if kvp == null:
			break
		headers.set(kvp.key, kvp.value)
	}
	// FIXME: Should have a method that passes to the connection handler for application layer
	// FIXME: The client might have specified additional optional headers like custom sub protocols and we should handle them here
	var key = headers.getString("sec-websocket-key")
	var shaEncoder = assert SHAEncoder.create()
	var accept = Base64Encoder.encode(shaEncoder.encodeAsBuffer(String.toUTF8Buffer(key .. webSocketGuid), SHAEncoder.SHA1))
	var data = String.toUTF8Buffer("HTTP/1.1 101 Switching Protocols\r\nUpgrade: websocket\r\nConnection: Upgrade\r\nSec-WebSocket-Accept: " .. accept .. "\r\n\r\n")
	sendData(data, SIZE(data))
	isWebSocketConnectionOpen = true
	return true
}

func processData(data as buffer, size as int) private as bool
{
	if data == null || size < 1:
		return false
	var nbuffer as buffer
	var nsize as int
	if leftOverBuffer != null {
		var losize = SIZE(leftOverBuffer)
		nsize = losize + size
		nbuffer = Buffer.allocate(nsize)
		Buffer.copyFrom(nbuffer, leftOverBuffer, 0, 0, losize)
		Buffer.copyFrom(nbuffer, data, 0, losize, size)
		leftOverBuffer = null
	}
	else {
		nbuffer = data
		nsize = size
	}
	var p = 0
	var fin = 0
	var rsv1 = 0
	var rsv2 = 0
	var rsv3 = 0
	var opcode = 0
	var mask = 0
	var payloadLength = 0
	var lastMaskingBufferIndex = 0
	var mi = 0
	var maskingBuffer as buffer
	var payloadBuffer as buffer
	while p < nsize {
		var b = Buffer.getByte(nbuffer, p)
		if p == 0 {
			if b & 0x80:
				fin = 1
			if b & 0x40:
				rsv1 = 1
			if b & 0x20:
				rsv2 = 1
			if b & 0x10:
				rsv3 = 1
			opcode = b & 0x0f
		}
		else if p == 1 {
			mask = b & 0x80
			if mask == 0 {
				// Mask should be 1.
				return false
			}
			maskingBuffer = Buffer.allocate(4)
			payloadLength = b & 0x7f
			if payloadLength >= 0 && payloadLength < 126 {
				p++
				if maskingBuffer != null:
					lastMaskingBufferIndex = p + 3
				continue
			}
			else if payloadLength == 126 {
				var v as uint16
				v |= Buffer.getByte(nbuffer, p + 1) & 0xFF << 8
				v |= Buffer.getByte(nbuffer, p + 2) & 0xFF
				payloadLength = v
				p += 3
				if maskingBuffer != null:
					lastMaskingBufferIndex = p + 3
				continue
			}
			else if payloadLength == 127 {
				var v as uint64
				v |= Buffer.getByte(nbuffer, p + 1) & 0x7f << 56
				v |= Buffer.getByte(nbuffer, p + 2) & 0xFF << 48
				v |= Buffer.getByte(nbuffer, p + 3) & 0xFF << 40
				v |= Buffer.getByte(nbuffer, p + 4) & 0xFF << 32
				v |= Buffer.getByte(nbuffer, p + 5) & 0xFF << 24
				v |= Buffer.getByte(nbuffer, p + 6) & 0xFF << 16
				v |= Buffer.getByte(nbuffer, p + 7) & 0xFF << 8
				v |= Buffer.getByte(nbuffer, p + 8) & 0xFF
				payloadLength = v
				p += 9
				if maskingBuffer != null:
					lastMaskingBufferIndex = p + 3
				continue
			}
			return false
		}
		else if p <= lastMaskingBufferIndex {
			Buffer.setByte(maskingBuffer, mi, b)
			mi++
		}
		else {
			break
		}
		p++
	}
	var frameLength = p + payloadLength
	if nsize < frameLength {
		leftOverBuffer = Buffer.allocate(nsize)
		Buffer.copyFrom(leftOverBuffer, nbuffer, 0, 0, nsize)
		frameNo ++
		return true
	}
	payloadBuffer = Buffer.allocate(payloadLength)
	Buffer.copyFrom(payloadBuffer, nbuffer, p, 0, payloadLength)
	processFrame(fin, rsv1, rsv2, rsv3, opcode, mask, maskingBuffer, payloadLength, payloadBuffer)
	frameNo = 1
	if nsize > frameLength {
		var losize = nsize - frameLength
		leftOverBuffer = Buffer.allocate(losize)
		Buffer.copyFrom(leftOverBuffer, nbuffer, frameLength, 0, losize)
	}
	return true
}

func processFrame(fin as int, rsv1 as int, rsv2 as int, rsv3 as int, opcode as int, mask as int, maskingBuffer as buffer, payloadLength as long, payloadBuffer as buffer) private
{
	if fin == 0 {
		// No implementation yet for fragmented WebSocket message. Ignoring frame
		return
	}
	if mask == 0 {
		;
	}
	else {
		unmaskPayload(payloadBuffer, payloadLength, maskingBuffer)
	}
	// FIXME: Make this a class variable instead.
	onNewMessage(WSServerMessage.create(fin, rsv1, rsv2, rsv3, opcode, maskingBuffer, payloadBuffer))
}

func onNewMessage(message as WSServerMessage) private
{
	if message.isCloseControlFrame() {
		if isWebSocketConnectionOpen == true {
			sendResponse(WSServerMessage.forCloseControlFrame(WSStatusCode.CLOSE_NORMAL))
			isWebSocketConnectionOpen = false
		}
		close()
		connectionHandler.onCloseMessage(message)
	}
	else if message.isPingControlFrame() && connectionHandler.onPingMessage(message) == false {
		sendResponse(WSServerMessage.forPongControlFrame())
	}
	else if message.isPongControlFrame() {
		connectionHandler.onPongMessage(message)
	}
	else {
		connectionHandler.onDataMessage(message)
	}
}

func unmaskPayload(maskedPayloadBuffer as buffer, payloadLength as int, maskingBuffer as buffer) private
{
	var i = 0
	while i < payloadLength {
		var b = Buffer.getByte(maskedPayloadBuffer, i)
		var ob = b ^ Buffer.getByte(maskingBuffer, i % 4) as! uint8
		Buffer.setByte(maskedPayloadBuffer, i, ob)
		i++
	}
}

func onMaintenance
{
	if SystemClock.asSeconds() - getLastActivity() >= pingInterval:
		sendPing()
	connectionHandler.onMaintenance()
}

func sendPing private as int:
	return sendResponse(WSServerMessage.forPingControlFrame())

func sendResponse(message as WSServerMessage) as int
{
	if message == null:
		return(-1)
	if message.isCloseControlFrame() && isWebSocketConnectionOpen == true:
		isWebSocketConnectionOpen = false
	var buffer = message.toBuffer()
	if buffer == null:
		return(-1)
	return sendData(buffer, SIZE(buffer))
}
