
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

var buffer as buffer
var pointer = 0

func allocate(sz as int)
{
	if buffer == null {
		buffer = MALLOC 8192
		return
	}
	var needed = pointer + sz
	var csz = Buffer.getSize(buffer)
	if csz >= needed:
		return
	var nsz = csz
	while nsz < needed:
		nsz += 1024
	buffer = Buffer.resize(buffer, nsz)
}

func getSize as int:
	return pointer

func append(value as int)
{
	allocate(pointer + 1)
	Buffer.setByte(buffer, pointer, value)
	pointer ++
}

func append(sbuffer as buffer):
	append(sbuffer, 0, Buffer.getSize(sbuffer))

func append(sbuffer as buffer, offset as int, size as int)
{
	assert sbuffer
	assert offset >= 0
	assert size >= 0
	allocate(pointer + size)
	Buffer.copyFrom(buffer, sbuffer, offset, pointer, size)
	pointer += size
}

func toBuffer as buffer
{
	return Buffer.getSubBuffer(buffer, 0, pointer)
}
