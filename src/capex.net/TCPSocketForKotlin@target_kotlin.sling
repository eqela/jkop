
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is TCPSocket:

var socket as !"java.nio.channels.SocketChannel"
var serverSocket as !"java.nio.channels.ServerSocketChannel"
var blocking private = true

func getJavaClientSocket as !"java.net.Socket"
{
	assert socket
	var s as !"java.net.Socket"
	lang "kotlin" {{{
		s = socket!!.socket()
	}}}
	return s
}

func getJavaServerSocket as !"java.net.ServerSocket"
{
	assert serverSocket
	var ss as !"java.net.ServerSocket"
	lang "kotlin" {{{
		ss = serverSocket!!.socket()
	}}}
	return ss
}

func getRemoteAddress override as string
{
	var socket = assert getJavaClientSocket()
	var address as string
	lang "kotlin" {{{
		var a = socket!!.getInetAddress() as java.net.InetAddress
		if(a != null) {
			address = a.getHostAddress()
		}
	}}}
	return address
}

func getRemotePort override as int
{
	var socket = assert getJavaClientSocket()
	return lang "kotlin" int {{{ socket!!.getPort() }}}
}

func getLocalAddress override as string
{
	var a as !"java.net.InetAddress"
	var socket = assert getJavaClientSocket()
	var serverSocket = assert getJavaServerSocket()
	var address as string
	lang "kotlin" {{{
		if(socket != null) {
			a = socket!!.getLocalAddress()
		}
		if(serverSocket != null) {
			a = serverSocket!!.getInetAddress()
		}
		if(a != null) {
			address = a.getHostAddress()
		}
	}}}
	return address
}

func getLocalPort override as int
{
	var socket = assert getJavaClientSocket():
		return lang "kotlin" int {{{ socket!!.getLocalPort() }}}
	var serverSocket = assert getJavaServerSocket():
		return lang "kotlin" int {{{ serverSocket!!.getLocalPort() }}}
	return -1
}

func connect(address as string, port as int) override as bool
{
	var v = true
	lang "kotlin" {{{
		try {
			var serverAddress = java.net.InetAddress.getByName(address)
			socket = java.nio.channels.SocketChannel.open(java.net.InetSocketAddress(serverAddress, port))
			socket!!.socket().setKeepAlive(true)
		}
		catch(e: kotlin.Exception) {
			e.printStackTrace()
			v = false
		}
	}}}
	return v
}

func listen(port as int) override as bool
{
	var v = true
	lang "kotlin" {{{
		try {
			serverSocket = java.nio.channels.ServerSocketChannel.open()
			serverSocket!!.bind(java.net.InetSocketAddress(port))
		}
		catch(e: kotlin.Exception) {
			e.printStackTrace()
			v = false
		}
	}}}
	return v
}

func accept override as TCPSocket
{
	assert serverSocket
	var nsocket as !"java.nio.channels.SocketChannel"
	lang "kotlin" {{{
		try {
			nsocket = serverSocket!!.accept()
		}
		catch(e: kotlin.Exception) {
			e.printStackTrace()
			nsocket = null
		}
	}}}
	if nsocket {
		var v = new this()
		v.socket = nsocket
		return v
	}
	return null
}

func setBlocking(blocking as bool) override as bool
{
	this.blocking = blocking
	lang "kotlin" {{{
		try {
			if(socket != null) {
				socket!!.configureBlocking(blocking)
			}
			if(serverSocket != null) {
				serverSocket!!.configureBlocking(blocking)
			}
		}
		catch(e: kotlin.Exception) {
			e.printStackTrace()
		}
	}}}
	return true
}

func getBlocking override as bool:
	return blocking

func close override
{
	lang "kotlin" {{{
		try {
			if(socket != null) {
				socket!!.close()
				socket = null
			}
			if(serverSocket != null) {
				serverSocket!!.close()
				serverSocket = null
			}
		}
		catch(e: java.io.IOException) {
			e.printStackTrace()
		}
	}}}
}

func read(buffer as buffer) override as int
{
	if buffer == null:
		return -1
	var v = 0
	lang "kotlin" {{{
		try {
			var ba = buffer!!.toByteArray()
			v = socket!!.read(java.nio.ByteBuffer.wrap(ba))
			var uba = ba.toUByteArray()
			uba.copyInto(buffer)
		}
		catch(e: kotlin.Exception) {
			e.printStackTrace()
			v = -1
		}
	}}}
	if v < 1 {
		close()
		v = -1
	}
	return v
}

func write(buffer as buffer, size as int) override as int
{
	if buffer == null:
		return -1
	var v = 0
	lang "kotlin" {{{
		try {
			socket!!.write(java.nio.ByteBuffer.wrap(buffer!!.toByteArray(), 0, size))
			v = size
		}
		catch(e: kotlin.Exception)
		{
			e.printStackTrace()
			v = -1
		}
	}}}
	if v < 1 {
		close()
		v = -1
	}
	return v
}
