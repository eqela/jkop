
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.widget.common

class is LayerWidget #widget:

class DataGridRowWidget is LayerWidget #widget
{
	pvar widgetGridWidth as int
	pvar widgetCellPadding = 0
	pvar widgetIsEditable as bool
	var widgetBackground as CanvasWidget
	var widgetMain as LayerWidget
	var widgetCellContainer as HorizontalBoxWidget

	ctor(ctx as GuiApplicationContext)
	{
		base(ctx)
		addWidget(widgetBackground = CanvasWidget.forColor(context, Color.black()))
		addWidget(widgetMain = new LayerWidget(ctx))
	}

	func setWidgetBackgroundColor(color as Color)
	{
		foreach cell as CellWidget in Widget.getChildren(widgetCellContainer):
			cell.setWidgetCellBackgroundColor(color)
	}

	func reload(data as array, widgetColumns as vector<Column>, isEditable as bool = false)
	{
		var n = 0
		var c = sizeof data
		widgetCellContainer = new HorizontalBoxWidget(context)
		widgetCellContainer.setWidgetSpacing(widgetGridWidth)
		widgetMain.addWidget(widgetCellContainer)
		foreach column in widgetColumns {
			if n >= c:
				continue
			var dd = data[n]
			var str = String.asString(dd)
			if not str:
				str = ""
			var ta = column.textAlign
			if ta < 0:
				ta = 0
			var cell as CellWidget
			if isEditable {
				cell = CellWidget.forEditableCell(context, str, widgetCellPadding, ta)
			}
			else {
				cell = CellWidget.forStaticCell(context, str, widgetCellPadding, ta)
			}
			cell.setWidgetKey(column.key)
			cell.setWidgetCellTextColor(Color.black())
			widgetCellContainer.addWidget(cell, column.weight)
			n++
		}
	}

	func collectRowDataTo(dv as DynamicVector)
	{
		assert dv
		var dm = new DynamicMap()
		foreach cell as CellWidget in Widget.getChildren(widgetCellContainer):
			dm.setString(cell.getWidgetKey(), cell.getWidgetText())
		dv.appendObject(dm)
	}
}

class CellWidget #widget
{
	ui LayerWidget
	{
		CanvasWidget cellBackground {
			color = Color.white()
		}
		LayerWidget cellTextCon {
		}
	}

	func forEditableCell(ctx as GuiApplicationContext, text as string, padding as int = 0, textAlign as int = 0) static as this
	{
		var v = new this(ctx)
		v.setWidgetText(text)
		v.setWidgetCellPadding(padding)
		v.setWidgetIsEditable(true)
		v.setWidgetTextAlign(textAlign)
		return v
	}

	func forStaticCell(ctx as GuiApplicationContext, text as string, padding as int = 0, textAlign as int = 0) static as this
	{
		var v = new this(ctx)
		v.setWidgetText(text)
		v.setWidgetCellPadding(padding)
		v.setWidgetIsEditable(false)
		v.setWidgetTextAlign(textAlign)
		return v
	}

	pvar widgetText as string
	pvar widgetIsEditable as bool
	pvar widgetKey as string
	pvar widgetTextAlign as int
	var widgetTextColor as Color
	var widget as Widget

	ctor(ctx as GuiApplicationContext)
	{
		base(ctx)
		forceCreateWidget()
	}

	func initializeWidget override
	{
		base.initializeWidget()
		if widgetIsEditable {
			widget = new TextInputWidget(context)
			(widget as! TextInputWidget).setWidgetText(widgetText)
			(widget as! TextInputWidget).setWidgetTextColor(widgetTextColor)
			(widget as! TextInputWidget).setWidgetTextAlign(widgetTextAlign)
			cellTextCon.addWidget(widget)
		}
		else {
			widget = LabelWidget.forText(context, widgetText)
			(widget as! LabelWidget).setWidgetTextColor(widgetTextColor)
			(widget as! LabelWidget).setWidgetTextAlign(widgetTextAlign)
			cellTextCon.addWidget(widget)
		}
	}

	func setWidgetCellPadding(padding as int #noLiteral):
		cellTextCon.setWidgetMargin(padding)

	func setWidgetCellBackgroundColor(color as Color):
		cellBackground.setWidgetColor(color)

	func setWidgetCellTextColor(color as Color)
	{
		widgetTextColor = color
		assert widget
		if widget is TextInputWidget {
			(widget as! TextInputWidget).setWidgetTextColor(color)
		}
		else {
			(widget as! LabelWidget).setWidgetTextColor(color)
		}
	}

	func getWidgetText as string
	{
		var v = ""
		if widget is TextInputWidget {
			v = (widget as! TextInputWidget).getWidgetText()
		}
		else {
			v = (widget as! LabelWidget).getWidgetText()
		}
		return v
	}
}

class Column
{
	var name public as string
	var weight public as double
	var key public as string
	var textAlign public as int
}

const ALIGN_LEFT = 0
const ALIGN_CENTER = 1
const ALIGN_RIGHT = 2
const ALIGN_JUSTIFY = 3

var widgetBackground as CanvasWidget
var widgetGridBackground as CanvasWidget
var widgetGrid as VerticalBoxWidget
var widgetDataBox as VerticalBoxWidget
var widgetHeaderRow as HorizontalBoxWidget
var widgetColumns as vector<Column>
var widgetGridWidth as int
var selectedRow as DataGridRowWidget
pvar widgetHeaderBackgroundColor as Color
pvar widgetHeaderForegroundColor as Color
pvar widgetDataBackgroundColor as Color
pvar widgetDataForegroundColor as Color
pvar widgetSelectedDataBackgroundColor as Color
pvar widgetSelectedDataForegroundColor as Color
pvar widgetCellPadding = 0
pvar widgetIsEditable as bool

ctor(ctx as GuiApplicationContext)
{
	base(ctx)
	addWidget(widgetBackground = new CanvasWidget(ctx))
	var db = new VerticalBoxWidget(ctx)
	widgetGrid = db
	db.addWidget(widgetHeaderRow = new HorizontalBoxWidget(ctx))
	db.addWidget(widgetDataBox = new VerticalBoxWidget(ctx))
	var dblayer = new LayerWidget(ctx)
	dblayer.addWidget(widgetGridBackground = new CanvasWidget(ctx))
	dblayer.addWidget(db)
	var dblb = new VerticalBoxWidget(ctx)
	dblb.addWidget(dblayer)
	addWidget(dblb)
	setWidgetHeaderForegroundColor(Color.black())
	setWidgetDataBackgroundColor(Color.white())
	setWidgetDataForegroundColor(Color.black())
	setWidgetSelectedDataForegroundColor(Color.white())
	setWidgetSelectedDataBackgroundColor(Color.instance("#428AFF"))
	setWidgetBackgroundColor(Color.white())
	setWidgetGridColor(Color.black())
	setWidgetHeaderBackgroundColor(Color.instance("#AAAAAA"))
	setWidgetBackgroundColor(Color.white())
	setWidgetGridWidth(ctx.getHeightValue("500um"))
	setWidgetCellPadding(ctx.getHeightValue("1mm"))
}

func setWidgetBackgroundColor(color as Color):
	widgetBackground.setWidgetColor(color)

func getWidgetBackgroundColor as Color:
	return widgetBackground.getWidgetColor()

func setWidgetGridColor(color as Color):
	widgetGridBackground.setWidgetColor(color)

func getWidgetGridColor as Color:
	return widgetGridBackground.getWidgetColor()

func setWidgetGridWidth(width as int)
{
	widgetGridWidth = width
	widgetGrid.setWidgetMargin(width)
	widgetGrid.setWidgetSpacing(width)
	widgetDataBox.setWidgetSpacing(width)
	widgetHeaderRow.setWidgetSpacing(width)
}

func deleteAllColumns
{
	widgetColumns = null
	deleteWidgetHeaderRow()
	deleteAllRows()
}

func addColumn(name as string, key as string, weight as double = 1.0, textAlign as int = 0)
{
	if not widgetColumns:
		widgetColumns = new vector<Column>
	var c = new Column()
	c.name = name
	c.key = key
	c.weight = weight
	c.textAlign = textAlign
	widgetColumns += c
}

func addWidgetHeaderRow
{
	widgetHeaderRow.removeAllChildren()
	foreach column in widgetColumns {
		var str = column.name
		if not str:
			str = ""
		var lbl = LabelWidget.forText(context, str)
		lbl.setWidgetTextColor(widgetHeaderForegroundColor)
		lbl.setWidgetFontBold(true)
		var cc = CanvasWidget.forColor(context, widgetHeaderBackgroundColor)
		var ll = new LayerWidget(context)
		ll.addWidget(cc)
		if widgetCellPadding > 0 {
			ll.addWidget(LayerWidget.forWidget(context, lbl, widgetCellPadding))
		}
		else {
			ll.addWidget(lbl)
		}
		widgetHeaderRow.addWidget(ll, column.weight)
	}
}

func deleteWidgetHeaderRow
{
	widgetHeaderRow.removeAllChildren()
}

func deleteAllRows
{
	widgetDataBox.removeAllChildren()
}

func addRow(data as array, clickHandler as function = null, doubleClickHandler as function = null)
{
	var row = new DataGridRowWidget(context)
	row.setWidgetGridWidth(widgetGridWidth)
	row.setWidgetCellPadding(widgetCellPadding)
	row.reload(data, widgetColumns, widgetIsEditable)
	widgetDataBox.addWidget(row)
	var r final = row
	var h final = clickHandler
	var d final = doubleClickHandler
	Widget.setWidgetClickHandler(row, func {
		if selectedRow:
			selectedRow.setWidgetBackgroundColor(Color.white())
		r.setWidgetBackgroundColor(widgetSelectedDataBackgroundColor)
		selectedRow = r
		if h:
			h()
	})
	Widget.setWidgetDoubleClickHandler(row, func {
		if selectedRow:
			selectedRow.setWidgetBackgroundColor(Color.white())
		r.setWidgetBackgroundColor(widgetSelectedDataBackgroundColor)
		selectedRow = r
		if d:
			d()
	})
}

func getGridData as DynamicVector
{
	var dv = new DynamicVector()
	foreach dgr as DataGridRowWidget in Widget.getChildren(widgetDataBox):
		dgr.collectRowDataTo(dv)
	return dv
}
