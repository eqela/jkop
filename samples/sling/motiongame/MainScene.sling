
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is SpriteSceneWithEntities imports cape imports cave imports motion:

class TextEntity is SpriteEntity
{
	var scaleDir = 1

	func createSprite override as Sprite
	{
		var myText = TextProperties.forText("Hello world")
		myText.setFontSizeAbsolute(2.0)
		myText.setTextColor(Color.forRGB(255, 0, 0))
		myText.setBackgroundColor(Color.forRGB(0, 255, 0))
		myText.setFontFamily("Arial")
		var text = layer.addTextSprite(myText)
		text.move(0.1, 0.1 * layer.getReferenceHeight())
		return(text)
	}

	func tick(gameTime as TimeValue, delta as double) override
	{
		base.tick(gameTime, delta)
		var nx = sprite.getX() + delta * 0.2
		if nx >= 1.0:
			nx = 0.0 - sprite.getWidth()
		sprite.move(nx, sprite.getY())
		var scale = sprite.getScaleX()
		if scaleDir > 0 {
			scale += delta * 0.5
			if scale > 2.0:
				scaleDir = -1
		}
		else {
			scale -= delta * 0.5
			if scale < 0.3 {
				scaleDir = 1
				remove()
			}
		}
		if sprite:
			sprite.scale(scale, scale)
	}
}

class BoxEntity is SpriteEntity
{
	func createSprite override as Sprite
	{
		var box = SpriteUtil.addColorSprite(scene, layer, Color.forRGB(0, 0, 255), 0.2 * layer.getReferenceHeight())
		box.move(0.4, 0.4 * layer.getReferenceHeight())
		return(box)
	}

	func tick(gameTime as TimeValue, delta as double) override
	{
		base.tick(gameTime, delta)
		sprite.setRotation(sprite.getRotation() - delta * Math.M_PI)
	}
}

class LogoEntity is SpriteEntity
{
	func createSprite override as Sprite
	{
		var txt = scene.createTextureForImageResource("eqelalogo")
		var logo = SpriteUtil.addTextureSpriteForWidth(scene, layer, txt, 0.2 * layer.getReferenceHeight())
		return(logo)
	}

	func tick(gameTime as TimeValue, delta as double) override
	{
		base.tick(gameTime, delta)
		sprite.setRotation(sprite.getRotation() + delta * Math.M_PI)
	}
}

class SuperTextEntity is SpriteEntity
{
	func createSprite override as Sprite
	{
		var xtext = TextProperties.forText("Powered by Eqela")
		xtext.setTextColor(Color.white())
		xtext.setFontSizeRelative(0.075 * layer.getReferenceHeight())
		xtext.setFontFamily("Times new roman")
		xtext.setFontIsItalic(true)
		var superText = layer.addTextSprite(xtext)
		superText.move(0.5 - superText.getWidth() / 2, superText.getHeight() / 2)
		return(superText)
	}

	func tick(gameTime as TimeValue, delta as double) override
	{
		base.tick(gameTime, delta)
		var sa = sprite.getAlpha() - delta * 0.2
		if(sa < 0.0) {
			sa = 1.0
		}
		sprite.setAlpha(sa)
	}
}

var audioManager as AudioManager
var clip as AudioClip
var logo as LogoEntity

func initialize override
{
	base.initialize()
	audioManager = AudioManager.forApplication(context)
	if audioManager:
		clip = audioManager.getClipForResource("whack")
	addTextureSpriteForSize(createTextureForImageResource("beach"), getReferenceWidth(), getReferenceHeight())
	addEntity(new TextEntity())
	addEntity(new BoxEntity())
	logo = new LogoEntity()
	addEntity(logo)
	logo.move(0.4, 0.4 * getReferenceHeight())
	addEntity(new SuperTextEntity())
	var be = TextButtonEntity.forText("Move Down")
	be.setBackgroundColor(Color.forRGB(255, 0, 0))
	be.setPressedColor(Color.forRGB(0, 255, 0))
	addEntity(be)
	be.move(0.5-be.getWidth()/2, getReferenceHeight() - be.getHeight()*1.25)
	be.setClickHandler(func {
		onMoveDown()
	})
	var c2 = TextButtonEntity.forText("Move Up")
	addEntity(c2)
	c2.move(0.5-c2.getWidth()/2, be.getY() - c2.getHeight()*1.25)
	c2.setClickHandler(func {
		onMoveUp()
	})
	var giveup = TextButtonEntity.forText("X")
	giveup.setBackgroundColor(Color.forRGBA(128, 128, 128, 128))
	addEntity(giveup)
	giveup.move(1.0 - giveup.getWidth(), 0.0)
	giveup.setClickHandler(func {
		popScene()
	})
}

func onMoveUp
{
	if(clip != null) {
		clip.play()
	}
	if(logo != null) {
		logo.move(logo.getX(), logo.getY() - 0.01*getReferenceHeight())
	}
}

func onMoveDown
{
	if(clip != null) {
		clip.play()
	}
	if(logo != null) {
		logo.move(logo.getX(), logo.getY() + 0.01*getReferenceHeight())
	}
}

func onMoveLeft
{
	if(clip != null) {
		clip.play()
	}
	if(logo != null) {
		logo.move(logo.getX() - 0.01*getReferenceWidth(), logo.getY())
	}
}

func onMoveRight
{
	if(clip != null) {
		clip.play()
	}
	if(logo != null) {
		logo.move(logo.getX() + 0.01*getReferenceWidth(), logo.getY())
	}
}

func onKeyEvent(event as KeyEvent) override
{
	if(event.isKey(KeyEvent.KEY_UP)) {
		onMoveUp()
	}
	else if(event.isKey(KeyEvent.KEY_DOWN)) {
		onMoveDown()
	}
	else if(event.isKey(KeyEvent.KEY_LEFT)) {
		onMoveLeft()
	}
	else if(event.isKey(KeyEvent.KEY_RIGHT)) {
		onMoveRight()
	}
	else {
		PRINT("Unhandled key event: `" .. event.getStringValue() .. "'")
	}
}

func onPointerEvent(event as PointerEvent) override
{
	base.onPointerEvent(event)
	if(event.isConsumed) {
		return
	}
	if(event.action == PointerEvent.DOWN) {
		var logo = new LogoEntity()
		addEntity(logo)
		logo.move(event.getX() - (logo.getWidth()/2), event.getY() - (logo.getHeight()/2))
	}
}
