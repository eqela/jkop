
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class imports cape:

const UNKNOWN_TYPE = 0
const DATA_TYPE = 1
const COMMAND_TYPE = 2

func forDataBuffer(data as buffer) static as this
{
	var v = new this().setData(data)
	assert v.initialize()
	return v
}

prop channelId as string
prop recipients as DynamicVector
var timestamp private as long
var data private as buffer
var dataMap private as DynamicMap
var type private as int
var command private as int
var senderId private as string

func initialize as bool
{
	// This is were we would make our own message protocol.
	// But for now, let's treat every message as a JSON.

	dataMap = JSONParser.parse(data) as DynamicMap
	assert dataMap
	timestamp = SystemClock.asSeconds()
	type = dataMap.getInteger("type")
	if type == COMMAND_TYPE {
		command = dataMap.getInteger("command")
		// Do command related process.
	}
	channelId = dataMap.getString("channelId")
	senderId = dataMap.getString("senderId")
	recipients = dataMap.getDynamicVector("recipients")
	return true
}

func setData(data as buffer) as this
{
	this.data = data
	return this
}

func getMessageType as int:
	return type

func getSenderId as string:
	return senderId

func toBuffer as buffer
{
	// FIXME: Improve this please
	assert dataMap
	dataMap.set("type", type)
	if type == COMMAND_TYPE {
		dataMap.set("command", command)
		// Do command related process.
	}
	dataMap.set("channelId", channelId)
	dataMap.set("senderId", senderId)
	dataMap.set("recipients", recipients)
	dataMap.set("timestamp", timestamp)
	return String.toUTF8Buffer(JSONEncoder.encode(dataMap))
}
