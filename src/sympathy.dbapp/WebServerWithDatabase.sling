
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is WebServer:

import sympathy
import sympathy.app
import sympathy.db
import capex.data

var dbstring as string
var dbConfig as DynamicMap
prop db as SQLDatabase

func configure(key as string, value as string, relativeTo as File, error as Error) override as bool
{
	if key == "dbConfig" {
		dbConfig = JSONParser.parse(value) as DynamicMap
		return true
	}
	if key == "db" {
		dbstring = value
		return true
	}
	return base.configure(key, value, relativeTo, error)
}

func ensureTableExists(table as SQLTableInfo) as bool
{
	assert table:
		Log.error(ctx, "null table object")
	assert db.ensureTableExists(table):
		Log.error(ctx, "Failed to create table: `" .. table.getName() .. "'")
	return true
}

func initializeServer(server as HTTPServer) override as bool
{
	assert base.initializeServer(server)
	if String.isNotEmpty(dbstring) {
		assert db = initializeSQLDatabase(dbstring):
			Log.error(ctx, "Unable to connect to database: `" .. dbstring .. "'")
	}
	else if dbConfig {
		assert db = initializeSQLDatabase(dbConfig):
			Log.error(ctx, "Unable to connect to database: `" .. String.asString(dbConfig) .. "'")
	}
	else {
		Log.error(ctx, "No database configured.")
		return false
	}
	return true
}

func initializeSQLDatabase(dbstring as string) virtual as SQLDatabase:
	return SQLDatabaseProvider.getDatabase(ctx, dbstring)

func initializeSQLDatabase(config as DynamicMap) virtual as SQLDatabase:
	return SQLDatabaseProvider.getDatabase(ctx, config)
