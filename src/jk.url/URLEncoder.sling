
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func encode(str as string, percentOnly as bool = false, encodeUnreservedChars as bool = true) static as string
{
	assert str
	var buffer = String.toUTF8Buffer(str)
	var sb = new StringBuilder()
	for(var i = 0; i < sizeof buffer; i++) {
		var c = Buffer.getByte(buffer, i) as char
		if c < 1:
			break
		if (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') {
			sb.appendCharacter(c)
		}
		else if (c == '-' || c == '.' || c == '_' || c == '~') && encodeUnreservedChars == false {
			sb.appendCharacter(c)
		}
		else if c == ' ' && percentOnly == false {
			sb.appendCharacter('+')
		}
		else {
			sb.appendCharacter('%')
			sb.appendString(String.forIntegerHex((c as int) & 0xff))
		}
	}
	return sb.toString()
}
