
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.test

class is UnitTest:

func testGettingOfBufferSize
{
	var str = "Hello World"
	var buff = String.toUTF8Buffer(str)
	ASSERT(Buffer.getSize(buff) == 11)
}

func testGettingOfInt8OnBuffer
{
	var str = "Hello World"
	var buff = String.toUTF8Buffer(str)
	ASSERT(Buffer.getInt8(buff, 2) == 108)
}

func testSettingOfByteOnBuffer
{
	var str = "Hello World"
	var buff = String.toUTF8Buffer(str)
	var byteOn4thIndexBefore = Buffer.getInt8(buff, 4)
	Buffer.setByte(buff, 4, 100 as uint8)
	var byteOn4thIndexAfter = Buffer.getInt8(buff, 4)
	ASSERT(byteOn4thIndexBefore == 111 && byteOn4thIndexAfter == 100)
}

func testResizingOfBuffer
{
	var str = "Hello World"
	var buff = String.toUTF8Buffer(str)
	var strSizeBefore = Buffer.getSize(buff)
	var strResized = Buffer.resize(buff, 5)
	var strSizeAfter = Buffer.getSize(strResized)
	ASSERT(strSizeBefore == 11 && strSizeAfter == 5)
}

func testCopyingOfBuffer
{
	var strA = "Hello World"
	var strABuffer = String.toUTF8Buffer(strA)
	var byteInIndex1Before = Buffer.getInt8(strABuffer, 1)
	var strB = "Testing Copy Form Func"
	var strBBuffer = String.toUTF8Buffer(strB)
	var byteInIndex3 = Buffer.getInt8(strBBuffer, 3)
	Buffer.copyFrom(strABuffer, strBBuffer, 3, 1, 1)
	var byteInIndex1After = Buffer.getInt8(strABuffer, 1)
	ASSERT(byteInIndex1Before == 101 && byteInIndex3 == 116 && byteInIndex1After == 101)
}

func testGettingOfInt16LEOnBuffer
{
	var str = "Hello World"
	var buff = String.toUTF8Buffer(str)
	ASSERT(Buffer.getInt16LE(buff, 4) == 8303)
}

func testGettingOfInt16BEOnBuffer
{
	var str = "Hello World"
	var buff = String.toUTF8Buffer(str)
	ASSERT(Buffer.getInt16BE(buff, 4) == 28448)
}

func testGettingOfInt32LEOnBuffer
{
	var str = "Hello World"
	var buff = String.toUTF8Buffer(str)
	ASSERT(Buffer.getInt32LE(buff, 4) == 1867980911)
}

func testGettingOfInt32BEOnBuffer
{
	var str = "Hello World"
	var buff = String.toUTF8Buffer(str)
	ASSERT(Buffer.getInt32BE(buff, 4) == 1864390511)
}

func testBufferLiterals
{
	var buffer = new buffer { 0x00, 0x01, 0x02, 0x03, 0x04 }
	ASSERT(Buffer.getSize(buffer) == 5)
	ASSERT(Buffer.getInt8(buffer, 0) == 0x00)
	ASSERT(Buffer.getInt8(buffer, 1) == 0x01)
	ASSERT(Buffer.getInt8(buffer, 2) == 0x02)
	ASSERT(buffer[0] == 0x00)
	ASSERT(buffer[1] == 0x01)
	ASSERT(buffer[2] == 0x02)
	ASSERT(buffer[3] == 0x03)
	ASSERT(buffer[4] == 0x04)
}

func forIntMethods
{
	var b1 = Buffer.forInt16BE(0x0102 as uint16)
	ASSERT(b1[0] == 0x01)
	var b2 = Buffer.forInt16LE(0x0304 as uint16)
	ASSERT(b2[0] == 0x04)
	var b3 = Buffer.forInt32BE(0x01020304 as uint32)
	ASSERT(b3[0] == 0x01)
	var b4 = Buffer.forInt32LE(0x01020304 as uint32)
	ASSERT(b4[0] == 0x04)
	var b5 = Buffer.forInt64BE(0x0102030405060708)
	ASSERT(b5[0] == 0x01)
	var b6 = Buffer.forInt64LE(0x0102030405060708)
	ASSERT(b6[0] == 0x08)
	var ff = 0xcafebabe as float
	var b7 = Buffer.forFloat32BE(ff)
	ASSERT(b7[0] == 0x4f)
	var b8 = Buffer.forFloat32LE(ff)
	ASSERT(b8[0] == 0xbb)
	var b9 = Buffer.forDouble64BE(123.456)
	ASSERT(b9[0] == 0x40)
	var b10 = Buffer.forDouble64LE(123.456)
	ASSERT(b10[0] == 0x77)
}

func execute override as bool
{
	START_TESTS()
	TEST("get the size of the buffer", testGettingOfBufferSize())
	TEST("get Int8 value on the given index", testGettingOfInt8OnBuffer())
	TEST("set value of byte on the give index", testSettingOfByteOnBuffer())
	TEST("resize buffer", testResizingOfBuffer())
	TEST("copy buffer", testCopyingOfBuffer())
	TEST("get Int16LE value on the given index", testGettingOfInt16LEOnBuffer())
	TEST("get Int16BE value on the given index", testGettingOfInt16BEOnBuffer())
	TEST("get Int32LE value on the given index", testGettingOfInt32LEOnBuffer())
	TEST("get Int32BE value on the given index", testGettingOfInt32BEOnBuffer())
	TEST("buffer literals", testBufferLiterals())
	TEST("buffer forInt methods", forIntMethods())
	END_TESTS()
}
