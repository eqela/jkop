
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.env
import jk.http.server
import jk.worker

class is CommonServer:

class MyHTTPServer is HTTPServer
{
	pvar myParent as parent

	func onMaintenance override
	{
		base.onMaintenance()
		myParent.onMaintenance()
	}
}

pvar handler as HTTPServerRequestHandler
pvar worker as typeinfo

var enableRequestLogging as bool
var enableRateLimit as string
var timeoutDelay as int
var maintenanceTimerDelay as int
var workers = WorkerPool.forContext(ctx)

ctor
{
	initConfigValue("ENABLE_REQUEST_LOGGING", "true")
	initConfigValue("ENABLE_RATE_LIMIT", null)
	initConfigValue("TIMEOUT_DELAY", "30")
	initConfigValue("MAINTENANCE_TIMER_DELAY", "0")
	initConfigValue("MAX_WORKER_COUNT", "200")
	initConfigValue("MAX_WORKER_QUEUE", "1000")
}

func configure(key as string, value as string, relativeTo as File, error as Error) override as bool
{
	if key == "ENABLE_REQUEST_LOGGING" || key == "enableRequestLogging" {
		enableRequestLogging = Boolean.asBoolean(value)
		return true
	}
	if key == "ENABLE_RATE_LIMIT" || key == "enableRateLimit" {
		enableRateLimit = value
		return true
	}
	if key == "TIMEOUT_DELAY" || key == "timeoutDelay" {
		timeoutDelay = Integer.asInteger(value)
		if timeoutDelay < 30:
			timeoutDelay = 30
		return true
	}
	if key == "MAINTENANCE_TIMER_DELAY" || key == "maintenanceTimerDelay" {
		maintenanceTimerDelay = Integer.asInteger(value)
		if maintenanceTimerDelay < 0:
			maintenanceTimerDelay = 0
		return true
	}
	if key == "MAX_WORKER_COUNT" || key == "maxWorkerCount" {
		workers.setMaxWorkers(Integer.asInteger(value))
		return true
	}
	if key == "MAX_WORKER_QUEUE" || key == "maxWorkerQueue" {
		workers.setMaxQueue(Integer.asInteger(value))
		return true
	}
	return base.configure(key, value, relativeTo, error)
}

func initializeHandlers(server as HTTPServer) virtual
{
	if handler:
		server.pushRequestHandler(handler)
	if worker:
		server.pushRequestHandler(func(req as HTTPServerRequest, next as function) {
			handleRequestWithWorker(req, worker)
		})
}

func initializeServer(server as HTTPServer) virtual as bool
{
	if String.isNotEmpty(enableRateLimit) {
		var limit = new HTTPServerRateLimitHandler()
		if enableRateLimit == "true" || enableRateLimit == "yes" {
			nop // all good, use default settings
		}
		else {
			var comps = String.split(enableRateLimit, ':', 3)
			limit.setCountLimit(Integer.asInteger(Vector.get(comps, 0)))
			limit.setCountDuration(Integer.asInteger(Vector.get(comps, 1)))
			limit.setIgnoreDuration(Integer.asInteger(Vector.get(comps, 2)))
		}
		server.pushRequestHandler(limit)
	}
	initializeHandlers(server)
	return true
}

func initializeNetworkServer(server as NetworkServer) override as bool
{
	assert base.initializeNetworkServer(server)
	if server is HTTPServer {
		assert initializeServer(server as! HTTPServer)
		if enableRequestLogging:
			(server as! HTTPServer).addRequestHandlerListener(new HTTPServerRequestLogger().setLogContext(ctx).setLogdir(getLoggingDirectory()))
	}
	return true
}

func createServer override as NetworkServer
{
	var server = new MyHTTPServer()
	server.setTimeoutDelay(timeoutDelay)
	server.setMaintenanceTimerDelay(maintenanceTimerDelay)
	server.setMyParent(this)
	server.setPort(getListenPort())
	return server
}

func handleRequestWithWorker(req as HTTPServerRequest, worker as typeinfo)
{
	assert req
	var fulldata as buffer
	workers.executeWorker(worker, req.toMyPacket(), func(data as buffer, size as int) {
		if not data {
			if not fulldata {
				req.sendResponse(HTTPServerResponse.forHTTPInternalError())
			}
			else {
				req.sendResponse(HTTPServerResponse.forMyPacket(fulldata))
			}
		}
		else {
			fulldata = Buffer.append(fulldata, data, size)
		}
	})
}

func executeForHandler(handler as HTTPServerRequestHandler, args as array<string>) as int
{
	setHandler(handler)
	return executeMain(args)
}
