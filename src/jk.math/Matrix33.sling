
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func forZero static as this
{
	return forValues(new double[] {
		0.0, 0.0, 0.0,
		0.0, 0.0, 0.0,
		0.0, 0.0, 0.0
	})
}

func forIdentity static as this
{
	return forValues(new double[] {
		1.0, 0.0, 0.0,
		0.0, 1.0, 0.0,
		0.0, 0.0, 1.0
	})
}

func invertMatrix(m as this) static as this
{
	var d = m.v[0]*m.v[4]*m.v[8] + m.v[3]*m.v[7]*m.v[2] + m.v[6]*m.v[1]*m.v[5] - m.v[0]*m.v[7]*m.v[5] - m.v[3]*m.v[1]*m.v[8] - m.v[6]*m.v[4]*m.v[2]
	var v = new this()
	v.v[0] = (m.v[4]*m.v[8] - m.v[7]*m.v[5])/d
	v.v[3] = (m.v[6]*m.v[5] - m.v[3]*m.v[8])/d
	v.v[6] = (m.v[3]*m.v[7] - m.v[6]*m.v[4])/d
	v.v[1] = (m.v[7]*m.v[2] - m.v[1]*m.v[8])/d
	v.v[4] = (m.v[0]*m.v[8] - m.v[6]*m.v[2])/d
	v.v[7] = (m.v[6]*m.v[1] - m.v[0]*m.v[7])/d
	v.v[2] = (m.v[1]*m.v[5] - m.v[4]*m.v[2])/d
	v.v[5] = (m.v[3]*m.v[2] - m.v[0]*m.v[5])/d
	v.v[8] = (m.v[0]*m.v[4] - m.v[3]*m.v[1])/d
	return v
}

func forTranslate(translateX as double, translateY as double) static as this
{
	return forValues(new double[] {
		1.0, 0.0, translateX,
		0.0, 1.0, translateY,
		0.0, 0.0, 1.0
	})
}

func forRotation(angle as double) static as this
{
	var c = Math.cos(angle)
	var s = Math.sin(angle)
	return forValues(new double[] {
		c, s, 0.0,
		-s, c, 0.0,
		0.0, 0.0, 1.0
	})
}

func forRotationWithCenter(angle as double, centerX as double, centerY as double) static as this
{
	var translate = forTranslate(centerX, centerY)
	var rotate = forRotation(angle)
	var translateBack = forTranslate(-centerX, -centerY)
	var translatedRotated = multiplyMatrix(translate, rotate)
	return multiplyMatrix(translatedRotated, translateBack)
}

func forSkew(skewX as double, skewY as double) static as this
{
	return forValues(new double[] {
		1.0, skewX, 0.0,
		skewY, 1.0, 0.0,
		0.0, 0.0, 1.0
	})
}

func forScale(scaleX as double, scaleY as double) static as this
{
	return forValues(new double[] {
		scaleX, 0.0, 0.0,
		0.0, scaleY, 0.0,
		0.0, 0.0, 1.0
	})
}

func forFlip(flipX as bool, flipY as bool) static as this
{
	var xmat33 = forValues(new double[] {
		1.0, 0.0, 0.0,
		0.0, -1.0, 0.0,
		0.0, 0.0, 1.0
	})
	var ymat33 = forValues(new double[] {
		-1.0, 0.0, 0.0,
		0.0, 1.0, 0.0,
		0.0, 0.0, 1.0
	})
	if flipX && flipY {
		return multiplyMatrix(xmat33, ymat33)
	}
	else if flipX {
		return xmat33
	}
	else if flipY {
		return ymat33
	}
	return forIdentity()
}

func forValues(mv as array<double>) static as this
{
	var v = new this()
	var i as int
	for(i = 0; i < 9; i++) {
		if i >= sizeof mv {
			v.v[i] = 0.0
		}
		else {
			v.v[i] = mv[i]
		}
	}
	return v
}

func multiplyScalar(v as double, mm as this) static as this
{
	var mat33 = forZero()
	mat33.v[0] = mm.v[0] * v
	mat33.v[1] = mm.v[1] * v
	mat33.v[2] = mm.v[2] * v
	mat33.v[3] = mm.v[3] * v
	mat33.v[4] = mm.v[4] * v
	mat33.v[5] = mm.v[5] * v
	mat33.v[6] = mm.v[6] * v
	mat33.v[7] = mm.v[7] * v
	mat33.v[8] = mm.v[8] * v
	return mat33
}

func multiplyMatrix(a as this, b as this) static as this
{
	var matrix33 = new this()
	matrix33.v[0] = a.v[0] * b.v[0] + a.v[1] * b.v[3] + a.v[2] * b.v[6]
	matrix33.v[1] = a.v[0] * b.v[1] + a.v[1] * b.v[4] + a.v[2] * b.v[7]
	matrix33.v[2] = a.v[0] * b.v[2] + a.v[1] * b.v[5] + a.v[2] * b.v[8]
	matrix33.v[3] = a.v[3] * b.v[0] + a.v[4] * b.v[3] + a.v[5] * b.v[6]
	matrix33.v[4] = a.v[3] * b.v[1] + a.v[4] * b.v[4] + a.v[5] * b.v[7]
	matrix33.v[5] = a.v[3] * b.v[2] + a.v[4] * b.v[5] + a.v[5] * b.v[8]
	matrix33.v[6] = a.v[6] * b.v[0] + a.v[7] * b.v[3] + a.v[8] * b.v[6]
	matrix33.v[7] = a.v[6] * b.v[1] + a.v[7] * b.v[4] + a.v[8] * b.v[7]
	matrix33.v[8] = a.v[6] * b.v[2] + a.v[7] * b.v[5] + a.v[8] * b.v[8]
	return matrix33
}

func multiplyVector(a as this, b as Vector2) static as Vector2
{
	var x = a.v[0] * b.x + a.v[1] * b.y + a.v[2] * 1.0
	var y = a.v[3] * b.x + a.v[4] * b.y + a.v[5] * 1.0
	return Vector2.create(x, y)
}

var v public = new double[9]
