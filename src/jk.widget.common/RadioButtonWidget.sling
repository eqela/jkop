
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is LayerWidget is WidgetWithValue #widget:

class MyRadioButtonWidget #widget
{
	ui HorizontalBoxWidget
	{
		spacing = context.getHeightValue("2000um")
		AlignWidget {
			LayerWidget radio {
				heightRequest = context.getHeightValue("4000um")
				widthRequest = context.getHeightValue("4000um")
				CanvasWidget outline {
				}
				LayerWidget {
					margin = context.getHeightValue("500um")
					CanvasWidget canvas {
					}
				}
			}
		}
		LabelWidget label {
		}
	}

	pvar widgetIndex as int
	pvar widgetContainer as parent
	pvar widgetColor as Color
	pvar widgetOutLineColor as Color
	pvar widgetText as string
	pvar widgetFontSize as int
	pvar widgetFontResource as string
	pvar widgetFontFamily as string
	pvar widgetFontBold as bool
	pvar widgetTextColor as Color
	var enabled = true

	func initializeWidget override
	{
		base.initializeWidget()
		label.setWidgetText(widgetText)
		label.setWidgetFontSize(widgetFontSize)
		if widgetFontResource:
			label.setWidgetFontResource(widgetFontResource)
		if widgetFontFamily:
			label.setWidgetFontFamily(widgetFontFamily)
		if widgetFontBold:
			label.setWidgetFontBold(true)
		if widgetTextColor:
			label.setWidgetTextColor(widgetTextColor)
		if not widgetOutLineColor:
			widgetOutLineColor = Color.black()
		outline.setWidgetColor(widgetOutLineColor)
		outline.setWidgetRoundingRadius(context.getHeightValue("2000um"))
		canvas.setWidgetColor(Color.white())
		canvas.setWidgetRoundingRadius(context.getHeightValue("1500um"))
		Widget.setWidgetClickHandler(radio, func {
			if enabled:
				widgetContainer.updateSelectedWidget(widgetIndex)
		})
		Widget.setWidgetClickHandler(label, func {
			if enabled:
				widgetContainer.updateSelectedWidget(widgetIndex)
		})
	}

	func setWidgetEnabled(v as bool) as this
	{
		enabled = v
		if not enabled {
			Widget.setAlpha(this, 0.5)
		}
		else {
			Widget.setAlpha(this, 1.0)
		}
		return this
	}

	func onSelected
	{
		if not widgetColor:
			widgetColor = Color.black()
		canvas.setWidgetColor(widgetColor)
		canvas.setWidgetRoundingRadius(context.getHeightValue("1500um"))
	}

	func onDeSelected
	{
		canvas.setWidgetColor(Color.white())
		canvas.setWidgetRoundingRadius(context.getHeightValue("1500um"))
	}
}

func forGroup(context as GuiApplicationContext, items as vector<string>) static as this
{
	var v = new this(context)
	v.setWidgetItems(items)
	return v
}

const HORIZONTAL = 0
const VERTICAL = 1

var selectedWidgetIndex = -1
var vrb as vector<MyRadioButtonWidget>
pvar widgetItems as vector<string>
pvar widgetFontSize as int
pvar widgetFontResource as string
pvar widgetFontFamily as string
pvar widgetTextColor as Color
pvar widgetFontBold as bool
pvar widgetOnSelectedColor as Color
pvar widgetOutlineColor as Color
pvar widgetOrientation = VERTICAL
pvar widgetClickHandler as function<void, int>

func initializeWidget override
{
	base.initializeWidget()
	vrb = new vector<MyRadioButtonWidget>
	var box as ContainerWidget
	if widgetOrientation == HORIZONTAL {
		box = HorizontalBoxWidget.forContext(context, context.getHeightValue("2500um"), context.getHeightValue("1500um"))
	}
	else {
		box = VerticalBoxWidget.forContext(context, context.getHeightValue("2500um"), context.getHeightValue("1500um"))
	}
	for(var i = 0; i < Vector.getSize(widgetItems); i++) {
		var d = Vector.get(widgetItems, i)
		if not d:
			continue
		var rb = new MyRadioButtonWidget(context)
		rb.setWidgetText(d)
		rb.setWidgetIndex(i)
		rb.setWidgetContainer(this)
		rb.setWidgetFontSize(widgetFontSize)
		rb.setWidgetFontResource(widgetFontResource)
		rb.setWidgetFontFamily(widgetFontFamily)
		rb.setWidgetFontBold(widgetFontBold)
		rb.setWidgetTextColor(widgetTextColor)
		rb.setWidgetColor(widgetOnSelectedColor)
		rb.setWidgetOutLineColor(widgetOutlineColor)
		vrb += rb
		if widgetOrientation == HORIZONTAL {
			(box as! HorizontalBoxWidget).addWidget(rb, 1.0)
		}
		else {
			box.addWidget(rb)
		}
	}
	addWidget(box)
}

func setWidgetEnabled(v as bool) as this
{
	foreach rb in vrb:
		rb.setWidgetEnabled(v)
	return this
}

func setWidgetValue(value as object):
	setSelectWidgetValue(String.asString(value))

func getWidgetValue as object
{
	var index = getSelectedWidgetIndex()
	if not widgetItems || index < 0:
		return null
	return Vector.get(widgetItems, index)
}

func getSelectedWidgetIndex as int:
	return selectedWidgetIndex

func setSelectWidgetValue(selectedWidget as string):
	updateSelectedWidget(findIndexForWidgetValue(selectedWidget))

func setSelectedWidgetIndex(index as int):
	updateSelectedWidget(index)

func updateSelectedWidget(index as int)
{
	if selectedWidgetIndex > -1 {
		var widget = Vector.get(vrb, selectedWidgetIndex)
		if widget:
			widget.onDeSelected()
	}
	var ww = Vector.get(vrb, index)
	if ww:
		ww.onSelected()
	selectedWidgetIndex = index
	if widgetClickHandler:
		widgetClickHandler(index)
}

func findIndexForWidgetValue(id as string) private as int
{
	var v = -1
	if widgetItems {
		var n = 0
		var it as Iterator<string> #force = Vector.iterate(widgetItems)
		while it {
			var item = it.next()
			if item == null:
				break
			if item == id {
				v = n
				break
			}
			n ++
		}
	}
	return v
}
