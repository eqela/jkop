
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is TitleContainerWidget abstract #widget:

ui LayerWidget
{
}

var contentArea protected as SwitcherLayerWidget
var actionBar protected as ActionBarWidget
var dimWidget as Widget
var sidebarWidget as Widget
var sidebarSlotLeft as LayerWidget
var sidebarIsFixed = false
var sidebarIsDisplayed = false
prop widgetEnableSidebar = true
prop widgetEnableActionBar = true
prop widgetActionBarIsFloating = false
prop widgetActionBarBackgroundColor as Color
prop widgetActionBarTextColor as Color
prop widgetActionBarMenuItemSpacing as int #notLiteral
prop widgetBackgroundColor as Color
prop widgetBurgerMenuImageResourceName = "burger"

ctor(ctx as GuiApplicationContext)
{
	base(ctx)
	widgetActionBarBackgroundColor = Color.black()
	widgetActionBarTextColor = Color.white()
}

func getActionBarMenuItems virtual as vector<Widget>:
	return null

func getMenuHandler virtual as function:
	return null

func getAppIconResource virtual as string:
	return null

func getAppMenuHandler virtual as function:
	return null

func getAppMenu virtual as Menu:
	return null

func defaultLeftButtonConfiguration
{
	assert actionBar
	var handler = getMenuHandler()
	if widgetEnableSidebar == false {
		actionBar.configureLeftButton(null, null)
	}
	else if handler == null {
		if sidebarIsFixed == false {
			actionBar.configureLeftButton(widgetBurgerMenuImageResourceName, func {
				displaySidebarWidget()
			})
		}
		else {
			actionBar.configureLeftButton(null, null)
		}
	}
	else {
		actionBar.configureLeftButton(widgetBurgerMenuImageResourceName, handler)
	}
}

func updateMenuButton virtual:
	defaultLeftButtonConfiguration()

func createSidebarWidget virtual as Widget:
	return null

func enableFixedSidebar private
{
	if sidebarWidget == null || sidebarSlotLeft == null || sidebarIsFixed:
		return
	hideSidebarWidget(false)
	sidebarIsFixed = true
	sidebarSlotLeft.addWidget(sidebarWidget)
	updateMenuButton()
}

func disableFixedSidebar private
{
	if sidebarIsDisplayed || sidebarIsFixed == false:
		return
	Widget.removeFromParent(sidebarWidget)
	sidebarIsFixed = false
	updateMenuButton()
}

func updateSidebarWidthRequest(sz as int #notLiteral) private as int
{
	var v = 0
	if sidebarIsFixed == false && sidebarIsDisplayed && sidebarWidget {
		var layer = Widget.getParent(sidebarWidget) as LayerWidget
		if layer {
			v = 0.8 * sz as int
			layer.setWidgetMaximumWidthRequest(v)
		}
	}
	return v
}

func computeWidgetLayout(widthConstraint as int #notLiteral) override
{
	if widthConstraint > context.getWidthValue("200mm") {
		enableFixedSidebar()
	}
	else {
		disableFixedSidebar()
	}
	// FIXME: We can't do this in the middle of a layout ... updateSidebarWidthRequest(widthConstraint)
	base.computeWidgetLayout(widthConstraint)
}

func displaySidebarWidget(animated as bool = true)
{
	if sidebarIsFixed || sidebarIsDisplayed || sidebarWidget == null:
		return
	if dimWidget == null:
		dimWidget = CanvasWidget.forColor(context, Color.forRGBADouble(0.0, 0.0, 0.0, 0.8))
	addWidget(dimWidget)
	sidebarIsDisplayed = true
	var box final = new HorizontalBoxWidget(context)
	box.addWidget(LayerWidget.forWidget(context, sidebarWidget))
	var filler = new LayerWidget(context)
	Widget.setWidgetClickHandler(filler, func {
		hideSidebarWidget()
	})
	box.addWidget(filler, 1)
	var sidebarWidthRequest = updateSidebarWidthRequest(Widget.getWidth(this))
	addWidget(box)
	if animated {
		Widget.setAlpha(box, 0.0)
		var sx final = -sidebarWidthRequest
		Widget.move(box, sx, Widget.getY(box))
		Widget.setAlpha(dimWidget, 0.0)
		var anim = WidgetAnimation.forDuration(context, 250)
		anim.addCallback(func(completion as double) {
			var dx = (sx + (0 - sx) * completion) as int
			if dx > 0:
				dx = 0
			Widget.move(box, dx, Widget.getY(box))
			Widget.setAlpha(dimWidget, completion)
			Widget.setAlpha(box, completion)
		})
		anim.start()
	}
}

func hideSidebarWidget(animated as bool = true)
{
	if sidebarIsDisplayed == false:
		return
	sidebarIsDisplayed = false
	var box final = Widget.getParent(Widget.getParent(sidebarWidget))
	if animated {
		var fx final = -Widget.getWidth(sidebarWidget)
		var anim = WidgetAnimation.forDuration(context, 250)
		anim.addCallback(func(completion as double) {
			var dx = (fx * completion) as int
			Widget.move(box, dx, Widget.getY(box))
			Widget.setAlpha(dimWidget, 1.0 - completion)
		})
		anim.setEndListener(func {
			Widget.removeFromParent(sidebarWidget)
			Widget.removeFromParent(box)
			Widget.removeFromParent(dimWidget)
		})
		anim.start()
	}
	else {
		Widget.removeFromParent(sidebarWidget)
		Widget.removeFromParent(box)
		Widget.removeFromParent(dimWidget)
	}
}

func createBackground virtual
{
	var bgc = getWidgetBackgroundColor()
	if bgc:
		addWidget(CanvasWidget.forColor(context, bgc))
}

func initializeWidget override
{
	base.initializeWidget()
	createBackground()
	var mainContainer = VerticalBoxWidget.forContext(context)
	if widgetEnableActionBar {
		actionBar = new ActionBarWidget(context)
		actionBar.setWidgetBackgroundColor(widgetActionBarBackgroundColor)
		actionBar.setWidgetTextColor(widgetActionBarTextColor)
		actionBar.setWidgetMenuItemSpacing(widgetActionBarMenuItemSpacing)
		var appIcon = getAppIconResource()
		if String.isEmpty(appIcon) == false {
			var menu = getAppMenu()
			if menu {
				actionBar.configureRightButtonMenu(appIcon, menu)
			}
			else {
				var handler = getAppMenuHandler()
				if handler {
					actionBar.configureRightButton(appIcon, handler)
				}
			}
		}
	}
	if actionBar && widgetActionBarIsFloating == false:
		mainContainer.addWidget(actionBar)
	contentArea = new SwitcherLayerWidget(context)
	if actionBar && widgetActionBarIsFloating == true {
		var ll = new LayerWidget(context)
		ll.addWidget(contentArea)
		ll.addWidget(VerticalBoxWidget.forContext(context)
			.addWidget(actionBar, 0.0)
			.addWidget(new ContainerWidget(context), 1.0)
		)
		mainContainer.addWidget(ll, 1.0)
	}
	else {
		mainContainer.addWidget(contentArea, 1.0)
	}
	var superMainContainer = HorizontalBoxWidget.forContext(context)
	sidebarSlotLeft = new LayerWidget(context)
	superMainContainer.addWidget(sidebarSlotLeft)
	superMainContainer.addWidget(mainContainer, 1)
	addWidget(superMainContainer)
	sidebarWidget = createSidebarWidget()
	updateMenuButton()
}

func updateWidgetTitle(title as string)
{
	if actionBar:
		actionBar.setWidgetTitle(title)
}

func onCurrentWidgetChanged
{
	assert contentArea
	var widget as Widget
	var widgets = Widget.getChildren(contentArea)
	if widgets && Vector.getSize(widgets) > 0:
		widget = Vector.get(widgets, Vector.getSize(widgets)-1)
	if widget && widget is DisplayAwareWidget:
		(widget as! DisplayAwareWidget).onWidgetDisplayed()
	if widget && widget is TitledWidget {
		updateWidgetTitle((widget as! TitledWidget).getWidgetTitle())
	}
	else {
		updateWidgetTitle("")
	}
	if widget && widget is ActionBarControlWidget {
		if not actionBar:
			return
		actionBar.removeOverlay()
		var customBar = (widget as! ActionBarControlWidget).createActionBarOverlay(actionBar)
		if customBar:
			actionBar.addOverlay(customBar)
		actionBar.clearMenuItems()
		var menuItems = (widget as! ActionBarControlWidget).getActionBarItems()
		if menuItems:
			actionBar.configureMenuItems(menuItems)
		(widget as! ActionBarControlWidget).setActionBarBackgroundColor(actionBar)
	}
	else {
		if actionBar {
			actionBar.removeOverlay()
			actionBar.clearMenuItems()
			actionBar.setActionBarBackgroundColor(widgetActionBarBackgroundColor)
		}
		var menuItems = getActionBarMenuItems()
		if menuItems:
			actionBar.configureMenuItems(menuItems)
	}
	updateMenuButton()
}
