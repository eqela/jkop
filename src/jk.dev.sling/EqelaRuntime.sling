
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.env
import jk.process

class:

prop executableFile:_executableFile as File
{
	get {
		if not _executableFile:
			_executableFile = getCurrentRuntime()
		if not _executableFile {
			var ef = ExternalCommand.findInPath("sushi")
			if not ef:
				ef = ExternalCommand.findInPath("eqela")
			_executableFile = ef
		}
		if not _executableFile:
			Error.throw("commandNotFound", "sushi")
		return _executableFile
	}
	set {
		_executableFile = value
	}
}

func getCurrentRuntime as File
{
	IFDEF "target_sushi" {
		var vm = File.forPath(lang "lua" string {{{ _vm.get_sushi_executable_path() }}})
		if vm.isFile() && (vm.getBasename() == "sushi" || vm.getBasename() == "eqela"):
			return vm
	}
	return null
}

func getLauncher as ProcessLauncher
{
	var exe = executableFile
	var pl = ProcessLauncher.forFile(exe)
	if not pl:
		Error.throw("failedToCreateProcessLauncher", exe)
	return pl
}

func getLauncherForFile(file as File) as ProcessLauncher
{
	if not file:
		Error.throw("missingParameter", "EqelaRuntime:getLauncherForFile:file")
	var v = getLauncher()
	v.addToParams(file.getPath())
	return v
}
