
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.sql

class is SQLDatabase abstract:

meta
{
	description [[
		Microsoft SQL Server database driver.
	]]
}

prop databaseName as string

func instance private static as this
{
	IFDEF "target_netx" {
		return new MSSQLDatabaseForDotNet()
	}
	ELSE {
		Error.throw("notSupported", "MSSQL")
		return null
	}
}

func forConnectionString(ctx as LoggingContext, connectionString as string) static as this
{
	if String.isEmpty(connectionString):
		Error.throw("emptyConnectionString", null, StackTrace.generate())
	var ss = String.split(connectionString, ':')
	if Vector.getSize(ss) < 4:
		Error.throw("invalidConnectionString", connectionString)
	var address = Vector.get(ss, 0)
	var username = Vector.get(ss, 1)
	var password = Vector.get(ss, 2)
	var database = Vector.get(ss, 3)
	if String.isEmpty(address):
		Error.throw("emptyAddress", connectionString)
	if String.isEmpty(username):
		Error.throw("emptyUsername", connectionString)
	if String.isEmpty(database):
		Error.throw("emptyDatabaseName", connectionString)
	return forConnectionDetails(ctx, address, username, password, database)
}

func forConnectionDetails(ctx as LoggingContext, serverAddress as string, username as string, password as string, database as string) static as this
{
	if String.isEmpty(serverAddress) || String.isEmpty(username) || password == null || String.isEmpty(database):
		Error.throw("invalidConnectionDetails", null, StackTrace.generate())
	var v = instance()
	if not v:
		Error.throw("failedToCreateMSSQLClientInstance", null)
	v.ctx = ctx
	v.setConnectionDetails(serverAddress, username, password, database)
	return v
}

func getDatabaseTypeId override as string:
	return "mssql"

func setConnectionDetails(serverAddress as string, username as string, password as string, database as string) abstract

func executeSingleRowQueryStatement(stmt as SQLStatement) override async as DynamicMap
{
	var it = assert await executeQueryStatement(stmt)
	var v as DynamicMap #force = it.next()
	it.close()
	return v
}

func checkIfTableExists(table as string) override async as bool
{
	assert String.isNotEmpty(table) && String.isNotEmpty(databaseName)
	var stmt = assert await prepareStatement("SELECT TABLE_NAME FROM information_schema.tables WHERE table_type = 'BASE TABLE' AND table_name = ? LIMIT 1;")
	stmt.addParamString(databaseName)
	stmt.addParamString(table)
	var sr = assert await executeSingleRowQueryStatement(stmt)
	return String.equals(table, sr.getString("TABLE_NAME"))
}

func getAllTableNames override async as vector<string>
{
	assert String.isNotEmpty(databaseName)
	var stmt = assert await prepareStatement("SELECT TABLE_NAME FROM information_schema.tables WHERE table_type = 'BASE TABLE';")
	var it = assert await executeQueryStatement(stmt)
	var v = new vector<string>
	loop {
		var vv = it.next()
		if not vv:
			break
		v += vv.getString("TABLE_NAME")
	}
	it.close()
	return v
}

func columnToCreateString(cc as SQLTableColumnInfo) private as string
{
	var sb = new StringBuilder()
	var columnName = cc.getName()
	sb.appendString(columnName)
	sb.appendCharacter(' ')
	var tt = cc.getType()
	if tt == SQLTableColumnInfo.TYPE_INTEGER_KEY {
		sb.appendString("INTEGER AUTO_INCREMENT, PRIMARY KEY (" .. columnName .. ")")
	}
	else if tt == SQLTableColumnInfo.TYPE_INTEGER {
		sb.appendString("INTEGER")
	}
	else if tt == SQLTableColumnInfo.TYPE_LONG_KEY {
		sb.appendString("BIGINT AUTO_INCREMENT, PRIMARY KEY (" .. columnName .. ")")
	}
	else if tt == SQLTableColumnInfo.TYPE_LONG {
		sb.appendString("BIGINT")
	}
	else if tt == SQLTableColumnInfo.TYPE_STRING {
		sb.appendString("VARCHAR(255)")
	}
	else if tt == SQLTableColumnInfo.TYPE_STRING_KEY {
		sb.appendString("VARCHAR(255), PRIMARY KEY (" .. columnName .. ")")
	}
	else if tt == SQLTableColumnInfo.TYPE_TEXT {
		sb.appendString("LONGTEXT")
	}
	else if tt == SQLTableColumnInfo.TYPE_BLOB {
		sb.appendString("LONGBLOB")
	}
	else if tt == SQLTableColumnInfo.TYPE_DOUBLE {
		sb.appendString("REAL")
	}
	else {
		Log.error(ctx, "Unknown column type: " .. String.forInteger(tt))
		sb.appendString("UNKNOWN")
	}
	return sb.toString()
}

func prepareCreateTableStatement(table as string, columns as vector<SQLTableColumnInfo>) async override as SQLStatement
{
	assert String.isNotEmpty(table) && columns
	var sb = new StringBuilder()
	sb.appendString("CREATE TABLE ")
	sb.appendString(table)
	sb.appendString(" (")
	var first = true
	foreach column as SQLTableColumnInfo in columns {
		if not first:
			sb.appendCharacter(',')
		sb.appendCharacter(' ')
		sb.appendString(columnToCreateString(column))
		first = false
	}
	sb.appendString(" );")
	return await prepareStatement(sb.toString())
}

func prepareDeleteTableStatement(table as string) async override as SQLStatement
{
	assert String.isNotEmpty(table)
	var sb = new StringBuilder()
	sb.appendString("DROP TABLE ")
	sb.appendString(table)
	sb.appendString(";")
	return await prepareStatement(sb.toString())
}

func getLastInsertId(table as string) override async as long
{
	var v = assert await executeSingleRowQueryStatement(await prepareStatement("SELECT IDENT_CURRENT('" .. table .. "') AS id;"))
	return v.getLongInteger("id")
}

func getPrimaryKeyColumnName(table as string) override async as string
{
	var v = assert await executeSingleRowQueryStatement(await prepareStatement("SELECT COLUMN_NAME FROM information_schema.KEY_COLUMN_USAGE WHERE CONSTRAINT_NAME LIKE 'PK_%' AND TABLE_NAME='" .. table .. "';"))
	return v.getString("COLUMN_NAME")
}

func getIdentityColumnName(table as string) override async as string
{
	var v = assert await executeSingleRowQueryStatement(await prepareStatement("SELECT name FROM sys.columns WHERE object_id = object_id('" .. table .. "') AND is_identity=1;"))
	return v.getString("name")
}

func checkIfColumnExists(table as string, name as string) override async as bool:
	return false

func checkIfColumnTypeMatches(table as string, column as SQLTableColumnInfo) override async as bool:
	return false

func prepareCreateColumnStatement(table as string, column as SQLTableColumnInfo) stub async override as SQLStatement
func prepareUpdateColumnTypeStatement(table as string, column as SQLTableColumnInfo) stub async override as SQLStatement
