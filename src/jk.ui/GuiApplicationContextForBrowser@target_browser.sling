
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.base64

class is GuiApplicationContext:

var instance static as this
var imageCache = new map<string, Image>
var screenDensity = 0

func getInstance static as this
{
	if not instance:
		instance = new this()
	return instance
}

func clearResources:
	imageCache = new map<string, Image>

func prepareResources(resources as array<string>, callback as function)
{
	if resources == null || sizeof resources < 1 {
		if callback:
			callback()
		return
	}
	var loadedResources = 0
	var numberOfFonts = 0
	var totalResources = sizeof resources
	var onResourceLoadingComplete = func {
		loadedResources ++
		if loadedResources >= totalResources {
			logInfo("All resources have been loaded")
			if callback:
				callback()
		}
	}
	var onLoad #used = func {
		logDebug("Resource loaded")
		onResourceLoadingComplete()
	}
	var onError #used = func {
		logError("Failed to load resource")
		onResourceLoadingComplete()
	}
	var onFontLoad #used = func {
		for(var i=0; i < numberOfFonts; i++) {
			logDebug("Resource loaded")
			onResourceLoadingComplete()
		}
		numberOfFonts = 0
	}
	var onFontError #used = func {
		for(var i=0; i < numberOfFonts; i++) {
			logError("Failed to load resource")
			onResourceLoadingComplete()
		}
		numberOfFonts = 0
	}
	var style as object
	foreach path in resources {
		var pp = path
		var slash = String.getLastIndexOfCharacter(pp, '/')
		if slash >= 0:
			pp = String.getEndOfString(pp, slash+1)
		var dot = String.getLastIndexOfCharacter(pp, '.')
		if dot < 0 {
			onResourceLoadingComplete()
			continue
		}
		var ext = String.getEndOfString(pp, dot+1)
		pp = String.getSubString(pp, 0, dot)
		if String.equalsIgnoreCase(ext, "png") || String.equalsIgnoreCase(ext, "jpg") || String.equalsIgnoreCase(ext, "gif") {
			logDebug("Start loading resource: `" .. pp .. ": `" .. path .. "'")
			var imgo = new ImageForBrowser()
			var image as object
			lang "js" {{{
				image = new Image();
				image.onload = onLoad;
				image.onerror = onError;
				image.src = path;
			}}}
			imgo.image = image
			imageCache[pp] = imgo
		}
		else if String.equalsIgnoreCase(ext, "otf") || String.equalsIgnoreCase(ext, "ttf") || String.equalsIgnoreCase(ext, "woff") {
			logDebug("Start loading resource: `" .. pp .. ": `" .. path .. "'")
			var head = HTMLDOM.getDocumentHead()
			if style == null {
				style = HTMLDOM.createElement("style")
				HTMLDOM.appendChild(head, style)
			}
			HTMLDOM.appendChild(style, HTMLDOM.createTextNode("@font-face { font-family: " .. pp .. "; src: url('" .. path .. "')}"))
			if HTMLDOM.isInternetExplorer() || HTMLDOM.isEdge() {
				numberOfFonts++
				onResourceLoadingComplete()
			}
			else {
				if HTMLDOM.doesBrowserSupportFontLoading() {
					lang "js" {{{
						numberOfFonts++;
						document.fonts.load("12px " + pp).then(onFontLoad, onFontError);
					}}}
				}
				else {
					logWarning("Browser does not support font loading: `" .. path .. "'")
					onResourceLoadingComplete()
				}
			}
		}
		else {
			logWarning("Unsupported resource file type `" .. ext .. "': `" .. path .. "'")
			onResourceLoadingComplete()
		}
	}
}

func getResourceImage(id as string) override as Image:
	return Map.getValue(imageCache, id)

func getImageForBuffer(buffer as buffer, mimeType as string) override as Image
{
	assert validateBufferAndMimeType(buffer, mimeType)
	var b64str #used = Base64Encoder.encode(buffer)
	var imgo = new ImageForBrowser()
	var image as object
	lang "js" {{{
		image = new Image();
		image.src = "data:" + mimeType + ";base64," + b64str;
	}}}
	imgo.image = image
	return imgo
}

func getImageForBuffer(buffer as buffer, mimeType as string, callback as function<void, Image>) override
{
	assert callback
	assert validateBufferAndMimeType(buffer, mimeType):
		callback(null)
	var b64str #used = Base64Encoder.encode(buffer)
	lang "js" {{{
		var image = new Image();
		image.onload = function() {
			var imgo = CaveImageForBrowser.NEW();
			imgo.image = image;
			callback(imgo);
		};
		image.onerror = function() {
			callback(null);
		};
		image.src = "data:" + mimeType + ";base64," + b64str;
	}}}
}

func validateBufferAndMimeType(buffer as buffer, mimeType as string) private as bool
{
	assert buffer && Buffer.getSize(buffer) > 0
	assert String.isNotEmpty(mimeType) && String.contains(mimeType, "image")
	return true
}

func showConfirmDialog(title as string, message as string, okcallback as function, cancelcallback as function) override
{
	var result as bool
	lang "js" {{{
		result = confirm(message);
	}}}
	if result {
		if okcallback:
			okcallback()
	}
	else {
		if cancelcallback:
			cancelcallback()
	}
}

func showMessageDialog(title as string, message as string) override:
	showMessageDialog(title, message, null)

func showMessageDialog(title as string, message as string, callback as function) override
{
	lang "js" {{{
		window.alert(message);
	}}}
	if callback:
		callback()
}

func showErrorDialog(message as string) override:
	showErrorDialog(message, null)

func showErrorDialog(message as string, callback as function) override
{
	lang "js" {{{
		window.alert(message);
	}}}
	if callback:
		callback()
}

func getScreenTopMargin override as int:
	return 0

func getScreenWidth override as int
{
	var v as int
	lang "js" {{{
		v = window.screen.availWidth;
	}}}
	return v
}

func getScreenHeight override as int
{
	var v as int
	lang "js" {{{
		v = window.screen.availHeight;
	}}}
	return v
}

func getScreenDensity override as int
{
	if screenDensity < 1 {
		var ppi as int
		// HACK: Firefox (and likely others) stubbornly uses a DPI value of n*96, regardless of what it really is.
		// But in reality, most people wouldn't have 96 DPI anymore .. Thus we'll make a reasonable middle-ground guess
		// of 1.3x the DPI (thus 1.3in, not 1in)
		lang "js" {{{
			var div = document.createElement("div");
			div.setAttribute("style", "width: 1.3in; padding: 0; visibility: hidden; position: fixed; left: 0; top: 0;");
			var bodys = document.getElementsByTagName("body");
			bodys[0].appendChild(div);
			ppi = div.offsetWidth;
			if(ppi < 1) {
				ppi = 1;
			}
			bodys[0].removeChild(div);
		}}}
		var qs = WebBrowserContext.getQueryString()
		if String.isEmpty(qs) == false {
			foreach q in String.split(qs, '&') {
				if String.startsWith(q, "jkopDpi=") == false:
					continue
				var val = String.getEndOfString(q, 8)
				if String.isEmpty(val) == false:
					ppi = String.toInteger(val)
				break
			}
		}
		screenDensity = ppi
	}
	return screenDensity
}

func getHeightValue(spec as string) override as int:
	return Length.asPoints(spec, getScreenDensity())

func getWidthValue(spec as string) override as int:
	return Length.asPoints(spec, getScreenDensity())

func startTimer(timeout as long, callback as function) override
{
	lang "js" {{{
		setTimeout(callback, timeout);
	}}}
}
