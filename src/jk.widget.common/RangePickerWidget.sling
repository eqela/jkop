
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.math

class is ResizeAwareWidget is WidgetWithValue #widget:

class RangeControlWidget #widget
{
	ui LayerWidget
	{
		widthRequest = context.getHeightValue("4mm")
		heightRequest = context.getHeightValue("4mm")
		CanvasWidget outline {
			color = Color.instance("#C0C0C0")
			roundingRadius = context.getHeightValue("800um")
		}
		LayerWidget {
			margin = context.getHeightValue("10um")
			CanvasWidget main {
				color = Color.instance("#ffffff")
				roundingRadius = context.getHeightValue("800um")
			}
		}
	}

	func setWidgetColor(color as Color)
	{
		main.setWidgetColor(color)
	}

	func setWidgetRoundingRadius(radius as int #notLiteral)
	{
		outline.setWidgetRoundingRadius(radius)
		main.setWidgetRoundingRadius(radius)
	}
}

class SelectedControl
{
	var widget public as Widget
	var control public as int
}

ui LayerWidget
{
	heightRequest = context.getHeightValue("4mm")
	LayerWidget con {
		CanvasWidget background {
		}
		AlignWidget {
			LayerWidget range : 0.5, 0.5, true {
				marginLeft = context.getHeightValue("2mm")
				marginRight = context.getHeightValue("2mm")
				heightRequest = context.getHeightValue("1mm")
				CanvasWidget outOfRangeColor {
					color = Color.instance("#A9A9A9")
				}
				CanvasWidget insideOfRangeColor {
					color = Color.instance("#FF8C00")
				}
			}
			RangeControlWidget leftControl : 0.0, 0.5 {
			}
			RangeControlWidget rightControl : 1.0, 0.5 {
			}
		}
	}
}

prop widgetMaximumValue = 100
prop widgetLeftControlChangeListener as function<void, double>
prop widgetRightControlChangeListener as function<void, double>
prop widgetDisableLeftControl as bool
var selectedControl as SelectedControl
var refX as double
var firstLayoutDone as bool
var rangeValue as int
var leftValue = -1.0
var rightValue = -1.0

const LEFT_CONTROL = 0
const RIGHT_CONTROL = 1

ctor(ctx as GuiApplicationContext)
{
	base(ctx)
	forceCreateWidget()
}

func initializeWidget override
{
	base.initializeWidget()
	if widgetDisableLeftControl:
		Widget.removeFromParent(leftControl)
	Widget.setWidgetPointerHandlers(con, func(x as double, y as double) {
		onStartHandler(x, y)
	}, func(x as double, y as double) {
		onTouchHandler(x, y)
	}, func(x as double, y as double) {
		onEndHandler(x, y)
	})
}

func isInside(x as double, y as double, widget as Widget) private as bool
{
	var wx = Widget.getX(widget)
	var wy = Widget.getY(widget)
	return x >= wx && y >= wy && x <= wx + Widget.getWidth(widget) && y <= wy + Widget.getHeight(widget)
}

func onStartHandler(x as double, y as double) private
{
	resetSelectedControl()
	if isInside(x, y, leftControl) {
		selectedControl.widget = leftControl
		selectedControl.control = LEFT_CONTROL
		refX = x
	}
	else if isInside(x, y, rightControl) {
		selectedControl.widget = rightControl
		selectedControl.control = RIGHT_CONTROL
		refX = x
	}
}

func onTouchHandler(x as double, y as double) private
{
	assert selectedControl
	var dx = Widget.getX(selectedControl.widget) + (x - refX) as int
	moveControl(dx, selectedControl.control)
	refX = x
}

func onEndHandler(x as double, y as double) private:
	resetSelectedControl()

func calculateValueForX(x as double) private as double
{
	var y = x / rangeValue
	return Math.round((y * widgetMaximumValue) * 100) / 100
}

func calculateXForValue(value as double) private as double
{
	var x = value / widgetMaximumValue
	return x * rangeValue
}

func updateInsideOfRangeCanvas private
{
	var x = Widget.getX(leftControl) + Widget.getWidth(leftControl) / 2
	var width = (Widget.getX(rightControl) + Widget.getWidth(rightControl) / 2) - x
	Widget.setLayoutSize(insideOfRangeColor, width, Widget.getHeight(insideOfRangeColor))
	Widget.move(insideOfRangeColor, x, Widget.getY(insideOfRangeColor))
}

func resetSelectedControl
{
	if not selectedControl:
		selectedControl = new SelectedControl()
	selectedControl.widget = null
	selectedControl.control = -1
}

func moveLeftControlTo(value as double):
	moveControl(calculateXForValue(value), LEFT_CONTROL)

func moveRightControlTo(value as double):
	moveControl(calculateXForValue(value), RIGHT_CONTROL)

func moveControl(value as double, control as int)
{
	assert control == LEFT_CONTROL || control == RIGHT_CONTROL
	resetSelectedControl()
	selectedControl.control = control
	var x = value
	if control == LEFT_CONTROL {
		selectedControl.widget = leftControl
		var rx = Widget.getX(rightControl) as! double
		x = x < 0 ? 0.0 : x
		x = x > rx ? rx : x
		if widgetLeftControlChangeListener {
			leftValue = calculateValueForX(x)
			widgetLeftControlChangeListener(leftValue)
		}
	}
	else if control == RIGHT_CONTROL {
		selectedControl.widget = rightControl
		var mx = rangeValue as! double
		var lx = Widget.getX(leftControl) as! double
		x = x > mx ? mx : x
		x = x < lx ? lx : x
		if widgetRightControlChangeListener {
			rightValue = calculateValueForX(x)
			widgetRightControlChangeListener(rightValue)
		}
	}
	Widget.move(selectedControl.widget, x as! int, Widget.getY(selectedControl.widget))
	updateInsideOfRangeCanvas()
}

func setWidgetStyle(style as string) as this
{
	setWidgetControlColor(context.getStyleColor(style, "controlColor"))
	setWidgetBackgroundColor(context.getStyleColor(style, "backgroundColor"))
	setWidgetOutOfRangeColor(context.getStyleColor(style, "outOfRangeColor"))
	setWidgetInsideOfRangeColor(context.getStyleColor(style, "insideOfRangeColor"))
	return this
}

func setWidgetBackgroundColor(color as Color):
	background.setWidgetColor(color)

func setWidgetOutOfRangeColor(color as Color):
	outOfRangeColor.setWidgetColor(color)

func setWidgetInsideOfRangeColor(color as Color):
	insideOfRangeColor.setWidgetColor(color)

func setWidgetControlColor(color as Color)
{
	leftControl.setWidgetColor(color)
	rightControl.setWidgetColor(color)
}

func setWidgetRoundingRadius(radius as int #notLiteral)
{
	leftControl.setWidgetRoundingRadius(radius)
	rightControl.setWidgetRoundingRadius(radius)
}

func onWidgetResized
{
	rangeValue = Widget.getWidth(range) - Widget.getWidth(rightControl)
	if not firstLayoutDone:
		firstLayoutDone = true
	if leftValue < 0 || rightValue < 0:
		return
	if not widgetDisableLeftControl:
		moveLeftControlTo(leftValue)
	moveRightControlTo(rightValue)
}

func setWidgetValue(value as object)
{
	assert value
	assert value is string
	var v = String.split(value as! string, '-', 2)
	if not firstLayoutDone {
		leftValue = String.toDouble(v[0])
		rightValue = String.toDouble(v[1])
	}
	else {
		if not widgetDisableLeftControl:
			moveLeftControlTo(String.toDouble(v[0]))
		moveRightControlTo(String.toDouble(v[1]))
	}
}

func setWidgetValueForDynamicMap(value as DynamicMap)
{
	assert value
	moveLeftControlTo(value.getDouble("from"))
	moveRightControlTo(value.getDouble("to"))
}

func setWidgetFromValue(fvalue as double):
	moveLeftControlTo(fvalue)

func setWidgetToValue(tvalue as double):
	moveRightControlTo(tvalue)

func getWidgetValue as object:
	return String.forDouble(leftValue) .. "-" .. String.forDouble(rightValue)

func getWidgetValueAsDynamicMap as DynamicMap
{
	var v = new DynamicMap()
	v.setDouble("from", leftValue)
	v.setDouble("to", rightValue)
	return v
}

func getWidgetFromValue as double:
	return leftValue

func getWidgetToValue as double:
	return rightValue
