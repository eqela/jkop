
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs

class:

class MagicNumberInfo public
{
	var magic public as string
	var description public as string
	var mimeType public as string
}

var myInstance static private as this

func instance static as this
{
	if not myInstance:
		myInstance = new this()
	return myInstance
}

func createUnknown private static as MagicNumberInfo
{
	var v = new MagicNumberInfo()
	v.magic = ""
	v.description = "Unknown"
	v.mimeType = "application/unknown"
	return v
}

func determineTypeForFile(file as File) static as MagicNumberInfo
{
	if not file:
		return createUnknown()
	var reader = file.read()
	if not reader:
		return createUnknown()
	var buffer = malloc 32
	var r = reader.read(buffer)
	reader.close()
	if r < 1:
		return createUnknown()
	if r < 32:
		buffer = Buffer.getSubBuffer(buffer, 0, r)
	return determineMimeTypeForBuffer(buffer)
}

func determineMimeTypeForBuffer(buffer as buffer) static as MagicNumberInfo
{
	if not buffer:
		return createUnknown()
	var sz = sizeof buffer
	if sz < 1:
		return createUnknown()
	var sb = new StringBuilder()
	if sz > 32:
		sz = 32
	for(var n=0; n<sz; n++):
		sb.appendString(String.forIntegerHex(Buffer.getByte(buffer, n) as int, 2))
	var o = instance()
	var v = o.determineTypeForContentString(sb.toString())
	if v == null:
		return createUnknown()
	var w = new MagicNumberInfo()
	w.magic = v.magic
	w.description = v.description
	w.mimeType = v.mimeType
	if w.magic == null:
		w.magic = ""
	if String.isEmpty(w.description):
		w.description = "Unknown"
	if String.isEmpty(w.mimeType):
		w.mimeType = "application/unknown"
	return w
}

var entries private = new vector<MagicNumberInfo>

ctor private
{
	add("EDABEEDB", "RPM package", null)
	add("53503031", "Amazon Kindle Update Package", null)
	add("00000100", "ICO icon", "image/vnd.microsoft.icon")
	add("667479703367", "3GPP and 3GPP2 multimedia files", "video/3gpp")
	add("1F9D", "Compressed file (LZW)", null)
	add("1FA0", "Compressed file (LZH)", null)
	add("425A68", "Compressed file (bzip2)", "application/bzip2")
	add("474946383761", "GIF image", "image/gif")
	add("474946383961", "GIF image", "image/gif")
	add("49492A00100000004352", "Canon RAW image format version 2", "image/x-canon-cr2")
	add("49492A00", "TIFF image (little endian)", "image/tiff")
	add("4D4D002A", "TIFF image (big endian)", "image/tiff")
	add("802A5FD7", "Kodak Cineon Image", "image/x-kodak-cineon")
	add("524E4301", "RNC compressed file", null)
	add("524E4302", "RNC compressed file", null)
	add("53445058", "SMPTE DPX image (big endian)", "image/x-smpte-dpx")
	add("58504453", "SMPTE DPX image (little endian)", "image/x-smpte-dpx")
	add("762F3101", "OpenEXR image", "image/x-openexr")
	add("425047FB", "Better Portable Graphics format", "image/x-bpg")
	add("FFD8FFDB", "JPEG image", "image/jpeg")
	add("FFD8FFE0....4A4649460001", "JPEG image", "image/jpeg")
	add("FFD8FFE1....457869660000", "JPEG image", "image/jpeg")
	add("4C5A4950", "LZIP compressed file", null)
	add("4D5A", "EXE executable file", "application/x-exe")
	add("504B0304", "ZIP compressed file", "application/zip")
	add("504B0506", "ZIP compressed file", "application/zip")
	add("504B0708", "ZIP compressed file", "application/zip")
	add("526172211A0700", "RAR compressed file (version 1.50 onwards)", "application/x-rar")
	add("526172211A070100", "RAR compressed file (version 5.0 onwards)", "application/x-rar")
	add("7F454C46", "ELF binary", "application/x-elf")
	add("89504E470D0A1A0A", "PNG image", "application/png")
	add("CAFEBABE", "Java CLASS file", "application/x-java-class")
	add("FEEDFACE", "Mach-O binary (32 bit)", "application/x-mach-o-binary")
	add("FEEDFACF", "Mach-O binary (64 bit)", "application/x-mach-o-binary")
	add("CEFAEDFE", "Mach-O binary (32 bit)", "application/x-mach-o-binary")
	add("CFFAEDFE", "Mach-O binary (64 bit)", "application/x-mach-o-binary")
	add("25215053", "Postscript document", "application/postscript")
	add("25504446", "PDF document", "application/pdf")
	add("3026B2758E66CF11A6D900AA0062CE6C", "Advanced Streaming Format", "video/x-ms-asf")
	add("2453444930303031", "System Deployment Image", null)
	add("4F676753", "OGG media", "application/ogg")
	add("38425053", "Photoshop document (PSD)", "application/psd")
	add("52494646........57415645", "Waveform (WAV) audio", "audio/wav")
	add("52494646........41564920", "Audio video interleave (AVI) video", "video/avi")
	add("FFFB", "MP3 audio", "audio/mp3")
	add("494433", "MP3 audio", "audio/mp3")
	add("424D", "BMP bitmap", "image/bmp")
	add("4344303031", "ISO image", "application/x-iso9660-image")
	add("664C6143", "Free Lossless Audio Codec (FLAC)", "audio/flac")
	add("4D546864", "MIDI sound", "audio/midi")
	add("D0CF11E0A1B11AE1", "Compound file format", null)
	add("6465780A30333500", "Dalvix executable (dex)", "application/x-dex")
	add("4B444d", "VMDK", "application/x-vmdk")
	add("43723234", "Google Chrome extension", "application/x-chrome-extension")
	add("41474433", "FreeHand 8 document", "application/x-freehand8")
	add("05070000424F424F0507000000000000000000000001", "AppleWorks 5 document", "application/x-appleworks5")
	add("0607E100424F424F0607E10000000000000000000001", "AppleWorkd 6 document", "application/x-appleworks6")
	add("455202000000", "Roxio Toast disc image or DMG", null)
	add("8B455202000000", "Roxio Toast disc image or DMG", null)
	add("7801730D626260", "Apple Disk Image (DMG)", "application/x-dmg")
	add("78617221", "Extensible Archive Format (XAR)", "application/x-xar")
	add("504D4F43434D4F43", "Windows Files and Settings Transfer Repository", null)
	add("4E45531A", "Nintendo Entertainment System (NES) ROM", null)
	add("7573746172003030", "TAR archive", "application/tar")
	add("7573746172202000", "TAR archive", "application/tar")
	add("746F7833", "Open source portable voxel file", null)
	add("4D4C5649", "Magic Lantern Video", "application/x-mlv")
	add("44434D0150413330", "Windows Update Binary Delta Compression", null)
	add("377ABCAF271C", "7ZIP archive", "application/7zip")
	add("1F8B", "GZIP archive", "application/gzip")
	add("FD377A585A0000", "XZ archive", "application/xz")
	add("04224D18", "LZ4 Frame Format", null)
	add("4D534346", "Microsoft Cabinet (CAB)", "application/cab")
	add("535A444488F02733", "Microsoft Quantum Compressed", null)
	add("464C4946", "Free Lossless Image Format", "image/flif")
	add("1A45DFA3", "Matroska Media Container", "video/mkv")
	add("41542654464F524D........444A56", "DjVu Document", "application/djvu")
	add("3082", "DER encoded X.509 certificate", null)
	add("4449434D", "DICOM Medical File Format", null)
	add("774F4646", "WOFF File Format 1.0", "application/x-woff-1")
	add("774F4632", "WOFF File Format 2.0", "application/x-woff-2")
	add("3C3F786D6C20", "XML", "text/xml")
	add("0061736D", "WebAssembly Binary Format", "application/wasm")
	add("CF8401", "Lepton Compressed JPEG Image", "image/x-lepton")
	add("435753", "Flash SWF", "application/swf")
	add("465753", "Flash SWF", "application/swf")
	add("213C617263683E", "Linux DEB File", "application/x-deb")
	add("52494646........57454250", "Google WebP Image", "image/webp")
	add("27051956", "U-Boot uImage", "application/x-uimage")
	add("7B5C72746631", "Rich Text Format (RTF)", "text/rtf")
	add("54415045", "Microsoft Tape Format", null)
	add("47", "MPEG Video", "video/mpeg")
	add("000001BA", "MPEG Video", "video/mpeg")
	add("000001B3", "MPEG Video", "video/mpeg")
	add("7801", "Zlib Compression (low compression)", "application/x-zlib")
	add("789C", "Zlib Compression (default compression)", "application/x-zlib")
	add("78DA", "Zlib Compression (best compression)", "application/x-zlib")
}

func isEntryMatching(entry as MagicNumberInfo, str as string) private as bool
{
	assert str
	assert entry
	assert entry.magic
	var sit = assert String.iterate(str)
	var mit = assert String.iterate(entry.magic)
	loop {
		var sc = sit.getNextChar()
		var mc = mit.getNextChar()
		if mc < 1:
			break
		if mc == '.':
			continue
		if sc == mc:
			continue
		return false
	}
	return true
}

func determineTypeForContentString(str as string) private as MagicNumberInfo
{
	assert str
	foreach entry in entries {
		if isEntryMatching(entry, str):
			return entry
	}
	return null
}

func add(ident as string, description as string, mimeType as string) private
{
	assert ident
	var v = new MagicNumberInfo()
	v.magic = ident
	v.description = description
	v.mimeType = mimeType
	entries += v
}
