
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is IOManager private:

depend "dll:Mono.Posix.dll"

prop epollfd = -1
var exitflag as bool
var running = false
var commpipewritefd = -1
var readlist as vector<IOManagerEntry> = null
var writelist as vector<IOManagerEntry> = null

class MyEntry is IOManagerEntry is FileDescriptor
{
	prop fdObject as FileDescriptor
	prop master as parent
	var rrl as function
	var wrl as function
	var added = false

	func getFileDescriptor as int
	{
		if(fdObject == null) {
			return(-1)
		}
		return(fdObject.getFileDescriptor())
	}

	func onReadReady
	{
		var rrl = this.rrl
		if(rrl != null) {
			rrl()
		}
	}

	func onWriteReady
	{
		var wrl = this.wrl
		if(wrl != null) {
			wrl()
		}
	}

	func setListeners(rrl as function, wrl as function)
	{
		this.rrl = rrl
		this.wrl = wrl
		update()
	}

	func setReadListener(rrl as function)
	{
		this.rrl = rrl
		update()
	}

	func setWriteListener(wrl as function)
	{
		this.wrl = wrl
		update()
	}

	func update
	{
		remove()
		if(fdObject == null || master == null) {
			return
		}
		if(rrl == null && wrl == null) {
			return
		}
		var fd #used = getFileDescriptor()
		var epollfd #used = master.getEpollfd()
		lang "cs" {{{
			var ev = new Mono.Unix.Native.EpollEvent();
			ev.events = Mono.Unix.Native.EpollEvents.EPOLLIN;
			ev.fd = fd;
			ev.ptr = (System.IntPtr)0; // FIXME - We need to point this object in this pointer.
			if(Mono.Unix.Native.Syscall.epoll_ctl(epollfd, Mono.Unix.Native.EpollOp.EPOLL_CTL_ADD, fd, ref ev) == -1) {
		}}}
		PRINT("IOManagerMonoEpoll: Failed to add to epoll")
		lang "cs" {{{
				added = false;
			}
			else {
				added = true;
			}
		}}}
		if(added == false) {
			if(rrl != null) {
				Vector.append(master.readlist, this)
			}
			if(wrl != null) {
				Vector.append(master.writelist, this)
			}
		}
	}

	func remove
	{
		if(added == false || fdObject == null || master == null) {
			return
		}
		var fd #used = getFileDescriptor()
		var epollfd #used = master.getEpollfd()
		lang "cs" {{{
			if(Mono.Unix.Native.Syscall.epoll_ctl(epollfd, Mono.Unix.Native.EpollOp.EPOLL_CTL_DEL, fd, 0) == -1) {
		}}}
		PRINT("IOManagerMonoEpoll: Failed to delete from epoll")
		lang "cs" {{{
			}
			else {
				added = false;
			}
		}}}
		Vector.removeValue(master.readlist, this)
		Vector.removeValue(master.writelist, this)
	}
}

ctor
{
	readlist = new vector<IOManagerEntry>
	writelist = new vector<IOManagerEntry>
	lang "cs" {{{
		epollfd = Mono.Unix.Native.Syscall.epoll_create(1);
	}}}
}

dtor
{
	Vector.clear(readlist)
	Vector.clear(writelist)
	if(epollfd >= 0) {
		lang "cs" {{{
			Mono.Unix.Native.Syscall.close(epollfd);
		}}}
	}
	epollfd = -1
}

func doExecute(ctx as LoggingContext) override as bool
{
	var epollfd = this.epollfd
	if(epollfd < 0) {
		Log.error(ctx, "IOManagerMonoEpoll: Failed to create epollfd!")
		return(false)
	}
	var r as int
	exitflag = false
	running = true
	lang "cs" {{{
		var pipes = new int[2];
		if(Mono.Unix.Native.Syscall.pipe(pipes) != 0) {
	}}}
	Log.error(ctx, "IOManagerMonoEpoll: Failed to create controller pipe")
	lang "cs" {{{
		}
		var ev = new Mono.Unix.Native.EpollEvent();
		ev.events = Mono.Unix.Native.EpollEvents.EPOLLIN;
		ev.fd = pipes[0];
		ev.ptr = (System.IntPtr)0;
		if(Mono.Unix.Native.Syscall.epoll_ctl(epollfd, Mono.Unix.Native.EpollOp.EPOLL_CTL_ADD, pipes[0], ref ev) == -1) {
	}}}
	Log.error(ctx, "IOManagerMonoEpoll: Failed to add controller pipe to epoll")
	lang "cs" {{{
		}
		commpipewritefd = pipes[1];
		var events = new Mono.Unix.Native.EpollEvent[1024];
	}}}
	Log.debug(ctx, "IOManagerMonoEpoll: Started")
	while(exitflag == false) {
		lang "cs" {{{
			r = Mono.Unix.Native.Syscall.epoll_wait(epollfd, events, 1024, -1);
		}}}
		if(r > 0) {
			for (var x=0; x<r; x++) {
				var epollErr = lang "cs" int {{{ (int)Mono.Unix.Native.EpollEvents.EPOLLERR }}}
				var epollHup = lang "cs" int {{{ (int)Mono.Unix.Native.EpollEvents.EPOLLHUP }}}
				var epollIn = lang "cs" int {{{ (int)Mono.Unix.Native.EpollEvents.EPOLLIN }}}
				var epollOut = lang "cs" int {{{ (int)Mono.Unix.Native.EpollEvents.EPOLLOUT }}}
				var epollEvents = lang "cs" int {{{ (int)events[x].events }}}
				if((epollEvents & epollErr) != 0) {
					; // var entryfd = lang "cs" int {{{ events[x].fd; }}};
				}
				if((epollEvents & epollHup) != 0) {
					; // var entryfd = lang "cs" int {{{ events[x].fd; }}};
				}
				if((epollEvents & epollIn) != 0) {
					var entryfd = lang "cs" int {{{ events[x].fd; }}}
					foreach(entry as MyEntry in readlist) {
						if(entryfd == entry.getFileDescriptor()) {
							entry.onReadReady()
						}
					}
				}
				if((epollEvents & epollOut) != 0) {
					var entryfd = lang "cs" int {{{ events[x].fd; }}}
					foreach(entry as MyEntry in readlist) {
						if(entryfd == entry.getFileDescriptor()) {
							entry.onWriteReady()
						}
					}
				}
			}
		}
	}
	lang "cs" {{{
		Mono.Unix.Native.Syscall.close(pipes[0]);
		Mono.Unix.Native.Syscall.close(pipes[1]);
		pipes = null;
	}}}
	commpipewritefd = -1
	running = false
	Log.debug(ctx, "IOManagerMonoEpoll: Ended")
	return(true)
}

func stop override
{
	exitflag = true
	if(commpipewritefd >= 0) {
		; // FIXME - Should be written in the equivalent C#
		// lang "cs" {{{
		// 	char c = 1
		// 	write(commpipewritefd, &c, 1)
		// }}}
	}
}

func isRunning as bool
{
	return(running)
}

func add(o as object) override as IOManagerEntry
{
	var fdObject = o as FileDescriptor
	if(fdObject == null) {
		return(null)
	}
	return(new MyEntry().setMaster(this).setFdObject(fdObject))
}

func startTimer(delay as long, handler as function<bool>) override stub as IOManagerTimer
