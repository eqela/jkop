
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is NavigationFrameWidget is KeyListener #widget:

func switchToContainer(widget as Widget, newWidget as Widget) static as bool
{
	var ng as this
	var pp = Widget.getParent(widget)
	while pp {
		if pp is this {
			ng = pp as! this
			break
		}
		pp = Widget.getParent(pp)
	}
	assert ng
	return ng.switchWidget(newWidget)
}

func pushToContainer(widget as Widget, newWidget as Widget) static as bool
{
	var ng as this
	var pp = Widget.getParent(widget)
	while pp {
		if pp is this {
			ng = pp as! this
			break
		}
		pp = Widget.getParent(pp)
	}
	assert ng
	return ng.pushWidget(newWidget)
}

func popFromContainer(widget as Widget) static as Widget
{
	var ng as this
	var pp = Widget.getParent(widget)
	while pp {
		if pp is this {
			ng = pp as! this
			break
		}
		pp = Widget.getParent(pp)
	}
	assert ng
	return ng.popWidget()
}

func findNavigationWidget(widget as Widget) static as this
{
	var pp = Widget.getParent(widget)
	while pp {
		if pp is this:
			return pp as! this
		pp = Widget.getParent(pp)
	}
	return null
}

prop widgetBackImageResourceName = "backarrow"
var widgetStack as Stack<Widget>
var contentWidget as Widget

ctor(ctx as GuiApplicationContext)
{
	base(ctx)
	widgetStack = new Stack<Widget>()
}

func createMainWidget virtual as Widget:
	return null

func initializeWidget override
{
	base.initializeWidget()
	var main = contentWidget
	if not main:
		main = createMainWidget()
	if main:
		pushWidget(main)
}

func updateMenuButton override
{
	assert actionBar
	var handler = getMenuHandler()
	if widgetStack && widgetStack.getSize() > 1 {
		actionBar.configureLeftButton(widgetBackImageResourceName, func {
			popWidget()
		})
	}
	else {
		defaultLeftButtonConfiguration()
	}
}

func onKeyEvent(event as KeyEvent) virtual
{
	if event.isKeyPress(KeyEvent.KEY_BACK) {
		if widgetStack && widgetStack.getSize() > 1 {
			if popWidget():
				event.consume()
		}
	}
}

func setWidgetContent(widget as Widget)
{
	assert widget
	if widgetStack.getSize() > 0:
		return
	assert contentArea:
		contentWidget = widget
	pushWidget(widget)
}

func pushWidget(widget as Widget) as bool
{
	if contentArea == null || widget == null:
		return false
	widgetStack.push(widget)
	contentArea.addWidget(widget)
	onCurrentWidgetChanged()
	return true
}

func switchWidget(widget as Widget) as bool
{
	assert widget
	popWidget()
	return pushWidget(widget)
}

func popWidget as Widget
{
	assert contentArea
	var topmost = assert widgetStack.pop()
	Widget.removeFromParent(topmost)
	onCurrentWidgetChanged()
	return topmost
}

func peekWidget as Widget:
	return widgetStack.peek()

