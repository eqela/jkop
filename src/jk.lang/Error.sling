
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is StringObject is StringObjectWithDebug:

func throw(code as string, detail as dynamic) static:
	throw ExceptionWithError.forError(forCode(code, detail))

func forCode(code as string, detail as dynamic = null) static as this:
	return new this().setCode(code).setDetail(detail)

func asString(error as this) static as string
{
	if not error:
		return "error"
	return error.toString()
}

func set(error as this, code as string, detail as dynamic) static as this
{
	assert error
	error.setCode(code)
	error.setDetail(detail)
	return error
}

func setErrorCode(error as this, code as string) static as this:
	return set(error, code, null)

func setErrorDetail(error as this, detail as dynamic) static as this:
	return set(error, null, detail)

func isError(o as object) static as bool
{
	assert o
	assert o is this
	var e = o as! this
	if String.isEmpty(e.getCode()):
		return false
	return true
}

prop code as string
prop detail as dynamic

func clear as this
{
	code = null
	detail = null
	return this
}

func toStringWithDefault(debug as bool, defaultError as string) as string
{
	var details as string
	if detail is StringObjectWithDebug {
		details = (detail as! StringObjectWithDebug).toStringWithDebug(debug)
	}
	else {
		details = String.asString(detail)
	}
	if String.isEmpty(code) == false {
		if String.isEmpty(details) == false:
			return code .. ":" .. details
		return code
	}
	if String.isEmpty(details) == false:
		return "errorWithDetail:" .. details
	return defaultError
}

func toStringWithDebug(debug as bool) as string:
	return toStringWithDefault(debug, "unknownError")

func toString as string:
	return toStringWithDebug(false)
