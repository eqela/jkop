
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.gfx
import jk.render
import jk.math

class is CommonGraphRenderer:

var colors = GraphColors.getColors()
var currentColor = -1
prop showPercentages = false

func getNextColor as Color
{
	var n = currentColor
	currentColor++
	if currentColor >= Vector.getSize(colors):
		currentColor = 0
	return colors[n]
}

func renderGraph(ctx as RenderingContext, ox as double, oy as double, width as double, height as double) override
{
	var values = getValues()
	if values == null || sizeof values < 2:
		return
	var labels = getLabels()
	currentColor = 0
	var labelheight = height * 0.025
	var valueCount = sizeof values
	var total = 0.0
	for(var n=0; n<valueCount; n++) {
		if values[n] <= 0.0:
			continue
		total += values[n]
	}
	if total <= 0.0:
		return
	var centerx = ox + width / 2
	var centery = oy + height / 2
	var radius as double
	if width > height {
		radius = height / 2
	}
	else {
		radius = width / 2
	}
	var fullcircle = 2.0 * Math.M_PI
	var prev = 0.0
	ctx.setStrokeStyle(Color.black())
	for(var n=0; n<valueCount; n++) {
		if values[n] <= 0.0:
			continue
		var p = values[n] / total
		var arcr = fullcircle * p
		ctx.beginPath()
		ctx.moveTo(centerx, centery)
		ctx.arc(centerx, centery, radius, prev, prev + arcr, false)
		ctx.lineTo(centerx, centery)
		ctx.setFillStyle(getNextColor())
		ctx.fill()
		ctx.stroke()
		ctx.closePath()
		var label = Vector.get(labels, n)
		if showPercentages {
			var pp = String.forDouble(p * 100.0) .. "%"
			if label {
				label = label .. " (" .. pp .. ")"
			}
			else {
				label = pp
			}
		}
		if String.isNotEmpty(label) {
			ctx.save()
			var labelFont = FontDescription.forName("Arial")
			labelFont.setSize(Length.forPoints(labelheight))
			labelFont.setBold(true)
			ctx.setFillStyle(Color.black())
			ctx.setStrokeStyle(Color.white())
			ctx.setFont(labelFont)
			ctx.setTextAlign(RenderingContext.ALIGN_CENTER)
			ctx.setTextBaseline(RenderingContext.BASELINE_MIDDLE)
			var centerr = prev + arcr/2
			var lx = centerx + Math.cos(centerr) * radius
			var ly = centery + Math.sin(centerr) * radius
			ctx.strokeText(label, lx, ly, 0)
			ctx.fillText(label, lx, ly, 0)
			ctx.restore()
		}
		prev += arcr
	}
}
