
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is UDPSocket:

var socket as !"java.net.DatagramSocket"

ctor
{
	lang "kotlin" {{{
		try {
			socket = java.net.DatagramSocket()
		}
		catch (e: Exception) {
			e.printStackTrace()
		}
	}}}
}

func send(message as buffer, address as string, port as int) override as int
{
	if address == null || message == null || port < 0:
		return 0
	var v = 0
	lang "kotlin" {{{
		try {
			socket!!.setBroadcast(false)
			val host = java.net.InetAddress.getByName(address)
			val msg = message.toByteArray()
			val packet = java.net.DatagramPacket(msg, msg.size, host, port)
			socket!!.send(packet)
			v = socket!!.getSendBufferSize()
		}
		catch (e: Exception) {
			println("EXCEPTION CAUGHT in UDPSocket.send: ")
			e.printStackTrace()
		}
	}}}
	return v
}

func sendBroadcast(message as buffer, address as string, port as int) override as int
{
	if message == null || address == null || port < 0:
		return 0
	var v = 0
	lang "kotlin" {{{
		try {
			socket!!.setBroadcast(true)
			val host = java.net.InetAddress.getByName(address)
			val msg = message.toByteArray()
			val packet = java.net.DatagramPacket(msg, msg.size, host, port)
			socket!!.send(packet)
			v = socket!!.getSendBufferSize()
		}
		catch (e: Exception) {
			println("EXCEPTION CAUGHT in UDPSocket.sendBroadcast: ")
			e.printStackTrace()
		}
	}}}
	return v
}

func receive(message as buffer, timeout as int) override as int
{
	if message == null:
		return 0
	var v = 0
	lang "kotlin" {{{
		try {
			socket!!.setSoTimeout(timeout/1000)
			val msg = message.toByteArray()
			v = msg.size
			val packet = java.net.DatagramPacket(msg, v)
			socket!!.receive(packet)
		}
		catch (e: Exception) {
			println("EXCEPTION CAUGHT in UDPSocket.receive: ")
			e.printStackTrace()
		}
	}}}
	return v
}

func bind(port as int) override as bool
{
	var v = false
	lang "kotlin" {{{
		try {
			socket = java.net.DatagramSocket(port);
		}
		catch (e: Exception) {
			println("EXCEPTION CAUGHT IN UDPSocket.bind: ");
			e.printStackTrace()
		}
		if(socket != null) {
			v = (port == socket!!.getLocalPort())
		}
	}}}
	return v
}

func close override
{
	lang "kotlin" {{{
		try {
			socket!!.close()
		}
		catch (e: Exception){
			println("EXCEPTION CAUGHT IN UDPSocketImpl.close: ")
			e.printStackTrace()
		}
	}}}
}

func getLocalAddress override as string
{
	var addr as !"java.net.InetAddress"
	lang "kotlin" {{{
		if(socket != null) {
			addr = socket?.getLocalAddress()
		}
		if(addr != null) {
			return (addr.toString())
		}
	}}}
	return null
}

func getLocalPort override as int
{
	var port = 0
	lang "kotlin" {{{
		if(socket != null) {
			port = socket!!.getLocalPort().toInt()
		}
	}}}
	return port
}
