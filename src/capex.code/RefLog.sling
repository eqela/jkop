
/*
 * This file is part of Jkop
 * Copyright (c) 2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func error(ctx as LoggingContext, text as string, ref as SourceReference = null, trace as string = null) static
{
	var isInDebugMode = true
	if ctx:
		isInDebugMode = ctx.isInDebugMode()
	message(ctx, ErrorMessage.forText(text, ref, isInDebugMode, trace))
}

func warning(ctx as LoggingContext, text as string, ref as SourceReference = null) static:
	message(ctx, WarningMessage.forText(text, ref))

func info(ctx as LoggingContext, text as string, ref as SourceReference = null) static:
	message(ctx, InfoMessage.forText(text, ref))

func debug(ctx as LoggingContext, text as string, ref as SourceReference = null) static:
	message(ctx, DebugMessage.forText(text, ref))

func status(ctx as LoggingContext, text as string) static:
	message(ctx, StatusMessage.forText(text))

func message(ctx as LoggingContext, msg as Message) static
{
	assert ctx && msg
	if ctx is RefLogContext {
		(ctx as! RefLogContext).onMessage(msg)
		return
	}
	var txt = assert msg.toString(ctx.isInDebugMode())
	if msg is DebugMessage {
		Log.debug(ctx, txt)
	}
	else if msg is WarningMessage {
		Log.warning(ctx, txt)
	}
	else if msg is ErrorMessage {
		Log.error(ctx, txt)
	}
	else if msg is StatusMessage {
		Log.status(ctx, txt)
	}
	else {
		Log.info(ctx, txt)
	}
}
