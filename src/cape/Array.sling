
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

**
** The Array class provides convenience methods for dealing with static array objects.
** For dynamic array support, use vectors instead.
**

class:

class MyArrayObject <T> is ArrayObject<T> is ObjectWithSize private
{
	prop array as array<T>

	func toArray as array<T>:
		return array

	func getSize as int:
		return SIZE array
}

**
** Returns the given array as an ArrayObject (which is an object type)
** that can be used wherever an object is required.
**

func asObject <T> (array as array<T>) static as ArrayObject<T>
{
	var v = new MyArrayObject<T>()
	v.setArray(array)
	return v
}

func isEmpty <T> (array as array<T>) static as bool
{
	if array == null:
		return true
	if SIZE(array) < 1:
		return true
	return false
}

func isNotEmpty <T> (array as array<T>) static as bool:
	return not isEmpty(array)

func contains <T> (array as array<T> #used, element as T #used) static as bool
{
	assert array
	IFDEF "target_cs" {
		return lang "cs" bool {{{ System.Array.Exists(array, elem => elem.Equals(element)) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" bool {{{ java.util.Arrays.asList(array).contains(element) }}}
	}
	ELSE IFDEF "target_html" {
		return lang "js" bool {{{ array.includes(element) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" bool {{{ array.contains(element) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" bool {{{ array.contains(element) }}}
	}
	ELSE {
		foreach oo in array {
			if element == oo:
				return true
		}
		return false
	}
}

/*
// FIXME: Must have compiler support for expanding runtime generics for Java
**
** Creates a new array that is composed of all the elements in the given
** vector. The size of the array will be the same as that of the given vector.
** Essentially, converts a vector into an array.
**

func forVector <T> (vector as vector<T>) static as array<T> #runtimeGenerics
{
	if(vector == null) {
		return null
	}
	var sz = Vector.getSize(vector)
	var v = new T[sz]
	for(var n = 0; n<sz; n++) {
		v[n] = vector[n]
	}
	return v
}
*/

**
** Creates a new vector object that will be composed of all the elements in the
** given array. Essentially converts an array into a vector.
**

func toVector <T> (array as array<T>) static as vector<T>:
	return Vector.forArray(array)

/*
// FIXME: Must have compiler support for expanding runtime generics for Java
**
** Receives an existing array and resizes the array to the given newSize, preserving
** contents currently stored in the array. Depending on the implementation and platform,
** this may allocate a new array and copy the contents, or may represent the same
** array with a different size. In any case, consider the returned value as the new
** array and discard the old one after the resizing is done.
**

func resize <T> (array as array<T>, newSize as int) static as array<T> #runtimeGenerics
{
	if(newSize < 1) {
		return null
	}
	var v = new T[newSize]
	if(array == null) {
		return v
	}
	var osz = SIZE(array)
	for(var n=0 ; n<osz; n++) {
		v[n] = array[n]
	}
	return v
}
*/

func copyFrom <T>(array as array<T>, src as array<T>, soffset as int, doffset as int, size as int) static
{
	assert array
	assert src
	IFDEF "target_cs" {
		lang "cs" {{{
			System.Array.Copy(src, soffset, array, doffset, size);
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" {{{
			java.lang.System.arraycopy(src, soffset, array, doffset, size);
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" {{{
			var arrayToCopy = src!!.copyOfRange(soffset, soffset + size)
			var it = arrayToCopy.asIterable()
			var index = doffset
			for (item in it) {
				array!!.set(index, item)
				index++
			}
		}}}
	}
	ELSE {
		for(var n=0; n<size; n++):
			array[doffset+n] = src[soffset+n]
	}
}
