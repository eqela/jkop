
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is JSONObject abstract:

func asJsonValue(value as object) as object
{
	assert value
	if value is JSONObject {
		var oj = value as! JSONObject
		return oj.toJsonObject()
	}
	return value
}

macro SET_VALUE_OBJECT(map, key, value)
{
	if value:
		map.set(key, asJsonValue(value))
}

macro SET_VALUE_VECTOR(map, key, value)
{
	if value {
		var ss = new DynamicVector()
		foreach vv in value:
			ss.append(asJsonValue(vv))
		map.set(key, ss)
	}
}

macro GET_VALUE_OBJECT(property, type, key, map)
{
	{
		var values = map.getDynamicMap(key)
		if not values:
			values = JSONParser.parse(map.getString(key)) as DynamicMap
		if values {
			var oo = new __type__()
			if oo.fromJsonObject(values):
				property = oo
		}
	}
}

macro GET_VALUE_STRING(property, name, map):
	property = map.getString(name)

macro GET_VALUE_DOUBLE(property, name, map)
{
	if map.get(name):
		property = Double.asObject(map.getDouble(name))
}

macro GET_VALUE_BOOLEAN(property, name, map)
{
	if map.get(name):
		property = Boolean.asObject(map.getBoolean(name))
}

macro GET_VALUE_LONG_INTEGER(property, name, map)
{
	if map.get(name):
		property = LongInteger.asObject(map.getLongInteger(name))
}

macro GET_VALUE_INTEGER(property, name, map)
{
	if map.get(name):
		property = Integer.asObject(map.getInteger(name))
}

macro GET_VALUE_BUFFER(property, name, map):
	property = map.getBuffer(name)

macro GET_VALUE_OBJECT_VECTOR(pp, type, key, map)
{
	{
		var ss = map.getVector(key)
		if not ss {
			var v1 = JSONParser.parse(map.getString(key)) as DynamicVector
			if v1:
				ss = v1.toVector()
		}
		if ss {
			pp = new vector<__type__>
			foreach s in ss {
				var oo = new __type__()
				if oo.fromJsonObject(s):
					pp += oo
			}
		}
	}
}

macro GET_VALUE_STRING_VECTOR(pp, key, map)
{
	{
		var ss = map.getVector(key)
		if not ss {
			var v1 = JSONParser.parse(map.getString(key)) as DynamicVector
			if v1:
				ss = v1.toVector()
		}
		if ss {
			pp = new vector<string>
			foreach s in ss {
				var so = String.asString(s)
				if so:
					pp += so
			}
		}
	}
}

macro GET_VALUE_DOUBLE_VECTOR(pp, key, map)
{
	{
		var ss = map.getVector(key)
		if ss {
			pp = new vector<DoubleObject>
			foreach s in ss {
				var so = Double.asDouble(s)
				if so:
					pp += so
			}
		}
	}
}

macro GET_VALUE_BOOLEAN_VECTOR(pp, key, map)
{
	{
		var ss = map.getVector(key)
		if ss {
			pp = new vector<BooleanObject>
			foreach s in ss {
				var so = Boolean.asBoolean(s)
				if so:
					pp += so
			}
		}
	}
}

macro GET_VALUE_LONG_INTEGER_VECTOR(pp, key, map)
{
	{
		var ss = map.getVector(key)
		if ss {
			pp = new vector<LongIntegerObject>
			foreach s in ss {
				var so = LongInteger.asLong(s)
				if so:
					pp += so
			}
		}
	}
}

macro GET_VALUE_INTEGER_VECTOR(pp, key, map)
{
	{
		var ss = map.getVector(key)
		if ss {
			pp = new vector<IntegerObject>
			foreach s in ss {
				var so = Integer.asInteger(s)
				if so:
					pp += so
			}
		}
	}
}

macro GET_VALUE_BUFFER_VECTOR(pp, key, map)
{
	{
		var ss = map.getVector(key)
		if ss {
			pp = new vector<buffer>
			foreach s in ss {
				var so = Buffer.asBuffer(s)
				if so:
					pp += so
			}
		}
	}
}

func toJsonObject abstract as object
func fromJsonObject(o as object) abstract as bool
