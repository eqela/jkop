
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2017 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class imports cape imports cave:

func forText(context as GuiApplicationContext, text as string) static as this
{
	var v = new this(context)
	v.setWidgetText(text)
	return(v)
}

IFDEF("target_html")
{
	basetype Widget

	func createElement override as object
	{
		var v = HTMLDOM.createElement("div")
		var input = HTMLDOM.createElement("input")
		HTMLDOM.setAttribute(input, "type", "checkbox")
		var label = HTMLDOM.createElement("label")
		HTMLDOM.setStyle(label, "margin-left", "5px")
		HTMLDOM.setStyle(label, "font-size", "14px")
		HTMLDOM.appendChild(v, input)
		HTMLDOM.appendChild(v, label)
		return(v)
	}
}

IFDEF("target_android")
{
	basetype !"android.widget.CheckBox" type extends
	basetype Widget type isAlso
}

IFDEF("target_ios")
{
	// FIXME
	basetype Widget
}

var widgetContext as GuiApplicationContext
var widgetText as string

ctor(context as GuiApplicationContext)
{
	IFDEF("target_android") {
		base((context as! cave.GuiApplicationContextForAndroid).getActivityContext())
	}
	widgetContext = context
}

func setWidgetText(text as string)
{
	widgetText = text
	IFDEF("target_html") {
		var child = HTMLDOM.getChild(element, 1)
		HTMLDOM.setInnerHTML(child, text)
	}
	ELSE {
		ERROR("Not implemented")
	}
}

func getWidgetText as string
{
	return(widgetText)
}

func getWidgetChecked as bool
{
	IFDEF("target_html") {
		return(lang "js" bool {{{ this.element.firstChild.checked }}})
	}
	ELSE IFDEF("target_android") {
		return(lang "java" bool {{{ isChecked() }}})
	}
	ELSE {
		ERROR("Not implemented.")
		return(false)
	}
}

func setWidgetChecked(x as bool)
{
	IFDEF("target_html") {
		var child = HTMLDOM.getChild(element, 0)
		if(x == true) {
			HTMLDOM.setAttribute(child, "checked", "checked")
		}
		else {
			lang "js" {{{
				child.removeAttribute("checked");
			}}}
		}
	}
	ELSE {
		ERROR("Not implemented")
	}
}
