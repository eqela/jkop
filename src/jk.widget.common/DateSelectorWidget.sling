
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.time

class is LayerWidget is WidgetWithValue #widget:

func forContext(context as GuiApplicationContext) static as this
{
	return new this(context)
}

ctor(ctx as GuiApplicationContext)
{
	base(ctx)
	widgetContext = ctx
}

var widgetContext as GuiApplicationContext
var dayBox as SelectWidget
var monthBox as SelectWidget
var yearBox as SelectWidget
var value as string
pvar skipYears = 0

func initializeWidget override
{
	base.initializeWidget()
	dayBox = SelectWidget.forStringList(context, [
		"1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
		"11", "12", "13", "14", "15", "16", "17", "18", "19",
		"20", "21", "22", "23", "24", "25", "26", "27", "28",
		"29", "30", "31"
	])
	monthBox = SelectWidget.forKeyValueStrings(context, [
		"1:January",
		"2:February",
		"3:March",
		"4:April",
		"5:May",
		"6:June",
		"7:July",
		"8:August",
		"9:September",
		"10:October",
		"11:November",
		"12:December"
	])
	monthBox.setWidgetValueChangeHandler(func {
		onChangeValues()
	})
	var cy = SystemClock.asDateTimeLocal().getYear()
	if cy < 1:
		cy = 2016
	cy -= skipYears
	var yearOptions = new KeyValueList<string, string>()
	for(var i = cy; i >= 1920; i--) {
		var str = String.forInteger(i)
		yearOptions.add(str, str)
	}
	yearBox = SelectWidget.forKeyValueList(context, yearOptions)
	yearBox.setWidgetValueChangeHandler(func {
		onChangeValues()
	})
	var box = HorizontalBoxWidget.forContext(context)
	box.setWidgetSpacing(context.getHeightValue("1mm"))
	box.addWidget(dayBox, 1)
	box.addWidget(monthBox, 2)
	box.addWidget(yearBox, 1)
	addWidget(box)
	applyValueToWidgets()
}

func applyValueToWidgets private
{
	if dayBox == null || monthBox == null || yearBox == null:
		return
	assert value
	var year = String.getSubString(value, 0, 4)
	var month = String.getSubString(value, 4, 2)
	var day = String.getSubString(value, 6, 2)
	if String.startsWith(day, "0"):
		day = String.getEndOfString(day, 1)
	if String.startsWith(month, "0"):
		month = String.getEndOfString(month, 1)
	yearBox.setWidgetValue(year)
	monthBox.setWidgetValue(month)
	dayBox.setWidgetValue(day)
}

func getValueFromWidgets private
{
	if dayBox == null || monthBox == null || yearBox == null:
		return
	var year = String.asString(yearBox.getWidgetValue())
	var month = String.asString(monthBox.getWidgetValue())
	var day = String.asString(dayBox.getWidgetValue())
	var sb = new StringBuilder()
	sb.appendString(year)
	if String.getLength(month) == 1:
		sb.appendCharacter('0')
	sb.appendString(month)
	if String.getLength(day) == 1:
		sb.appendCharacter('0')
	sb.appendString(day)
	value = sb.toString()
}

func setWidgetValue(value as object)
{
	this.value = value as string
	applyValueToWidgets()
}

func getWidgetValue as object
{
	getValueFromWidgets()
	return value
}

func isLeapYear(year as int) private as bool
{
	if year != 0 {
		if year % 4 == 0 && year % 100 != 0 || year % 400 == 0:
			return true
	}
	return false
}

func getNumberOfDays(month as int, year as int) private as int
{
	if month == 4 || month == 6 || month == 9 || month == 11 {
		return 30
	}
	else if month == 2 {
		if isLeapYear(year):
			return 29
		return 28
	}
	return 31
}

func onChangeValues private
{
	assert String.isNotEmpty(monthBox.getSelectedWidgetValue())
	assert String.isNotEmpty(yearBox.getSelectedWidgetValue())
	var numberOfDays = getNumberOfDays(String.toInteger(monthBox.getSelectedWidgetValue()), String.toInteger(yearBox.getSelectedWidgetValue()))
	var d = new vector<string>
	for(var x = 1; x <= numberOfDays; x++):
		d += String.forInteger(x)
	dayBox.setWidgetItemsAsStringList(d)
}
