
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is TextProtocolConnection abstract:

pvar useCRLF = false

func sendLine(text as string)
{
	if useCRLF {
		sendText(text .. "\r\n")
	}
	else {
		sendText(text .. "\n")
	}
}

func onTextReceived(data as string) override
{
	// FIXME: Should rather collect all incoming data to a string buffer, and only
	// proceed once a newline is encountered. With the current implementation, only
	// single packet lines will be observed (Windows telnet will not be compatible).
	if data == null:
		return
	var str = data
	if String.endsWith(str, "\r\n") {
		str = String.getSubString(str, 0, String.getLength(str) - 2)
	}
	else if String.endsWith(str, "\n") {
		str = String.getSubString(str, 0, String.getLength(str) - 1)
	}
	var nn = String.getIndexOfCharacter(str, '\n')
	if nn < 0 {
		onLineReceived(str)
		return
	}
	foreach line in String.split(str, '\n') {
		if String.endsWith(line, "\r"):
			line = String.getSubString(line, 0, String.getLength(line)-1)
		onLineReceived(line)
	}
}

func onLineReceived(data as string) abstract
