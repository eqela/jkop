
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is SpriteEntity is PointerListener is KeyListener imports motion imports cape imports cave:

var targetx as double
var targety as double
var movex as double
var movey as double
var speed = 10
var center as double

func createSprite override as Sprite
{
	var txt = scene.createTextureForImageResource("runner")
	var ref = layer.getReferenceWidth()
	var runner = SpriteUtil.addTextureSpriteForWidth(scene, layer, txt, 0.1 * ref)
	movex = 0.5
	movey = 1.0
	runner.move(movex, movey)
	center = runner.getWidth() * 0.5
	return(runner)
}

func tick(gameTime as TimeValue, delta as double) override
{
	base.tick(gameTime, delta)
	var movex = sprite.getX()
	var movey = sprite.getY()
	if(targetx >= 0 && targety >= 0 && (targetx != movex || targety != movey)) {
		movex -= (movex - targetx) / speed
		movey -= (movey - targety) / speed
		sprite.move(movex, movey)
	}
}

func onPointerEvent(event as PointerEvent) as bool
{
	if(event.action == PointerEvent.MOVE) {
		targetx = event.getX() - center
		targety = event.getY() - center
	}
	return(false)
}

func onKeyEvent(event as KeyEvent)
{
	if(event.isKey(KeyEvent.KEY_UP)) {
		sprite.move(sprite.getX(), sprite.getY() - 0.01 * layer.getReferenceHeight())
		targetx = -1.0
		targety = -1.0
		event.consume()
	}
	else if(event.isKey(KeyEvent.KEY_DOWN)) {
		sprite.move(sprite.getX(), sprite.getY() + 0.01 * layer.getReferenceHeight())
		targetx = -1.0
		targety = -1.0
		event.consume()
	}
	else if(event.isKey(KeyEvent.KEY_LEFT)) {
		sprite.move(sprite.getX() - 0.01 * layer.getReferenceWidth(), sprite.getY())
		targetx = -1.0
		targety = -1.0
		event.consume()
	}
	else if(event.isKey(KeyEvent.KEY_RIGHT)) {
		sprite.move(sprite.getX() + 0.01 * layer.getReferenceWidth(), sprite.getY())
		targetx = -1.0
		targety = -1.0
		event.consume()
	}
}

func getRunnerX as double
{
	return(sprite.getX())
}

func getRunnerY as double
{
	return(sprite.getY())
}
