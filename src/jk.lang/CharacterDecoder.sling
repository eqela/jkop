
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is CharacterIterator abstract:

const UTF8 = 0
const ASCII = 1
const UCS2 = 2
var encoding = 0
var current protected = 0 as char
var surrogatePair as char[]
var counter = 0
var currentSize = 0
var ended = false

func resetDecoder
{
	current = 0 as char
	surrogatePair = null
	counter = 0
	currentSize = 0
	ended = false
}

func copyTo(o as this)
{
	o.encoding = encoding
	o.current = current
	o.currentSize = currentSize
	o.ended = ended
}

func moveToPreviousByte virtual as bool:
	return false

func moveToNextByte virtual as bool:
	return false

func getCurrentByte virtual as int:
	return 0

func setEncoding(ee as string) as this
{
	if String.equalsIgnoreCase(ee, "UTF8") || String.equalsIgnoreCase(ee, "UTF-8") {
		encoding = UTF8
		currentSize = 1
		return this
	}
	if String.equalsIgnoreCase(ee, "ASCII") {
		encoding = ASCII
		currentSize = 1
		return this
	}
	if String.equalsIgnoreCase(ee, "UCS2") || String.equalsIgnoreCase(ee, "UCS-2") {
		encoding = UCS2
		currentSize = 2
		return this
	}
	return null
}

func getEncoding as string:
	return encoding

func moveToPreviousChar as bool
{
	var op = getCurrentPosition()
	var cs = currentSize
	if cs > 1 {
		var n as int
		for(n=0; n<cs-1; n++):
			assert moveToPreviousByte()
	}
	var v = doMoveToPreviousChar()
	if not v:
		setCurrentPosition(op)
	if v && ended:
		ended = false
	return v
}

func convertToChar(v as int) private as char
{
	IFDEF "target_js" {
		lang "js" {{{
			if(!String.fromCodePoint) {
				var fromCodePoint = function(_) {
					var codeUnits = [];
					var index = -1;
					var result = "";
					var lengthOfArgs = arguments.length;
					while(++index < lengthOfArgs) {
						var codePoint = Number(arguments[index]);
						if(!isFinite(codePoint) || codePoint < 0 || codePoint > 0x10FFFF || Math.floor(codePoint) != codePoint) {
							console.log("Invalid code point");
						}
						if(codePoint <= 0xFFFF) {
							codeUnits.push(codePoint);
						}
						else {
							codePoint -= 0x10000;
							codeUnits.push((codePoint >> 10) + 0xD800, (codePoint % 0x400) + 0xDC00);
						}
						if(index + 1 == lengthOfArgs || codeUnits.length > 0x4000) {
							result += String.fromCharCode.apply(null, codeUnits);
							codeUnits.length = 0;
						}
					}
					return result;
				};
				String.fromCodePoint = fromCodePoint;
			};
			return String.fromCodePoint(v);
		}}}
	}
	ELSE IFDEF "target_cs" {
		lang "cs" {{{
			string pair = char.ConvertFromUtf32(System.Convert.ToInt32(v));
			if(pair.Length > 1) {
				surrogatePair = new char[] {pair[0], pair[1]};
			}
		}}}
		if surrogatePair:
			return getSurrogatePair()
	}
	ELSE IFDEF "target_java" {
		lang "java" {{{
			if(java.lang.Character.charCount(v) == 2) {
				surrogatePair = java.lang.Character.toChars(v);
			}
		}}}
		if surrogatePair:
			return getSurrogatePair()
	}
	IFDEF "target_kotlin" {
		lang "kotlin" {{{
			if(java.lang.Character.charCount(v) == 2) {
				surrogatePair = java.lang.Character.toChars(v)
			}
		}}}
		if surrogatePair:
			return getSurrogatePair()
	}
	return v as char
}

func getSurrogatePair as char
{
	assert surrogatePair
	var c = surrogatePair[counter]
	counter ++
	if counter == 2 {
		counter = 0
		surrogatePair = null
	}
	return c
}

func doMoveToPreviousChar as bool
{
	if encoding == UTF8 {
		assert moveToPreviousByte()
		var c2 = getCurrentByte() as int
		if c2 <= 0x7F {
			current = c2 as char
			currentSize = 1
			return true
		}
		assert moveToPreviousByte()
		var c1 = getCurrentByte() as int
		if (c1 & 0xC0) == 0xC0 {
			assert moveToNextByte()
			var v = ((c1 & 0x1F) << 6) as int
			v += (c2 & 0x3F) as int
			current = convertToChar(v)
			currentSize = 2
			return true
		}
		assert moveToPreviousByte()
		var c0 = getCurrentByte() as int
		if (c0 & 0xE0) == 0xE0 {
			assert moveToNextByte()
			assert moveToNextByte()
			var v = ((c0 & 0x0F) << 12) as int
			v += ((c1 & 0x3F) << 6) as int
			v += (c2 & 0x3F) as int
			current = convertToChar(v)
			currentSize = 3
			return true
		}
		assert moveToPreviousByte()
		var cm1 = getCurrentByte() as int
		if (cm1 & 0xF0) == 0xF0 {
			assert moveToNextByte()
			assert moveToNextByte()
			assert moveToNextByte()
			var v = ((cm1 & 0x07) << 18) as int
			v += ((c0 & 0x3F) << 12) as int
			v += ((c1 & 0x3F) << 6) as int
			v += (c2 & 0x3F) as int
			current = convertToChar(v)
			currentSize = 4
			return true
		}
		moveToNextByte()
		moveToNextByte()
		moveToNextByte()
		current = '?'
		currentSize = 1
		return true
	}
	if encoding == ASCII {
		assert moveToPreviousByte()
		current = getCurrentByte() as char
		return true
	}
	if encoding == UCS2 {
		assert moveToPreviousByte()
		var c1 = getCurrentByte() as int
		assert moveToPreviousByte()
		var c0 = getCurrentByte() as int
		assert moveToNextByte()
		current = (c0 << 8 & c1) as char
		return true
	}
	println "Unsupported encoding in CharacterDecoder: " .. String.forInteger(encoding)
	return false
}

func moveToNextChar as bool
{
	var v = doMoveToNextChar()
	if v == false {
		current = 0 as char
		ended = true
	}
	return v
}

func doMoveToNextChar as bool
{
	if encoding == UTF8 {
		if surrogatePair {
			current = getSurrogatePair()
			return true
		}
		assert moveToNextByte()
		var b1 = getCurrentByte()
		var v = -1
		if b1 <= 0x7F { // 1 byte
			v = b1 as int
			currentSize = 1
		}
		else if b1 >= 0xF0 { // 4 bytes
			v = ((b1 & 0x07) << 18) as int
			assert moveToNextByte()
			var b2 = getCurrentByte()
			v += ((b2 & 0x3F) << 12) as int
			assert moveToNextByte()
			var b3 = getCurrentByte()
			v += ((b3 & 0x3F) << 6) as int
			assert moveToNextByte()
			var b4 = getCurrentByte()
			v += (b4 & 0x3F) as int
			currentSize = 4
		}
		else if b1 >= 0xE0 { // 3 bytes
			v = ((b1 & 0x0F) << 12) as int
			assert moveToNextByte()
			var b2 = getCurrentByte()
			v += ((b2 & 0x3F) << 6) as int
			assert moveToNextByte()
			var b3 = getCurrentByte()
			v += (b3 & 0x3F) as int
			currentSize = 3
		}
		else if b1 >= 0xC0 { // 2 bytes
			v = ((b1 & 0x1F) << 6) as int
			assert moveToNextByte()
			var b2 = getCurrentByte()
			v += (b2 & 0x3F) as int
			currentSize = 2
		}
		else { // invalid byte
			v = '?' as int
			currentSize = 1
		}
		current = convertToChar(v)
		return true
	}
	if encoding == ASCII {
		assert moveToNextByte()
		current = getCurrentByte() as char
		return true
	}
	if encoding == UCS2 {
		assert moveToNextByte()
		var c0 = getCurrentByte() as int
		assert moveToNextByte()
		var c1 = getCurrentByte() as int
		current = (c0 << 8 & c1) as char
		return true
	}
	println "Unsupported encoding in CharacterDecoder: " .. String.forInteger(encoding)
	return false
}

func getCurrentChar as char:
	return current

func getNextChar as char
{
	if moveToNextChar() == false:
		return 0 as char
	return current
}

func hasEnded as bool:
	return ended

func getCurrentPosition abstract as int
func setCurrentPosition(position as int) abstract
