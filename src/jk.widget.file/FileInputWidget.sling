
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class #widget:

func forType(context as GuiApplicationContext, type as string) static as this
{
	var v = new this(context)
	v.setWidgetType(type)
	return v
}

IFDEF "target_html"
{
	is Widget

	func createElement override as object
	{
		return HTMLDOM.createElement("input")
	}

	func prepareElement(v as object) override
	{
		base.prepareElement(v)
		HTMLDOM.setAttribute(v, "type", "file")
	}
}

IFDEF "target_android"
{
	// FIXME
	is Widget
}

IFDEF "target_ios_objc"
{
	// FIXME
	is Widget
}

IFDEF "target_swift"
{
	depend "swift-import:UIKit"
	is Widget
}

var widgetContext as GuiApplicationContext
var widgetType as string
var widgetListener as function

ctor(context as GuiApplicationContext)
{
	IFDEF "target_android" {
		base((context as! GuiApplicationContextForAndroid).getActivityContext())
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			super.init(frame:Â CGRect.zero)
		}}}
	}
	widgetContext = context
}

func setWidgetType(type as string)
{
	widgetType = type
	IFDEF "target_html" {
		HTMLDOM.setAttribute(element, "accept", type .. "/*")
	}
	ELSE {
		ERROR "Not implemented"
	}
}

func getWidgetType as string:
	return widgetType

func setWidgetListener(event as string, listener as function)
{
	widgetListener = listener
	IFDEF "target_html" {
		HTMLDOM.addEventListener(element, event, listener)
	}
	ELSE {
		ERROR "Not implemented"
	}
}

func getWidgetFileName as string
{
	IFDEF "target_html" {
		var str = HTMLDOM.getValue(element)
		var x = String.getLastIndexOfString(str, "\\", String.getLength(str))
		var fileName = String.getEndOfString(str, x + 1)
		return fileName
	}
	ELSE {
		ERROR "Not implemented"
		return null
	}
}

func getWidgetFileMimeType as string
{
	ERROR "Not implemented"
	return null
}

func getWidgetFileContents as buffer
{
	ERROR "Not implemented"
	return null
}
