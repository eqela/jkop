
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import capex.net

class is NetworkConnectionManager abstract:

prop port as int
var socket as TCPSocket
var esocket as IOManagerEntry
var acceptBatchSize as int

func initialize override as bool
{
	assert base.initialize()
	assert socket = TCPSocket.createAndListen(port) {
		Log.error(logContext, "Failed to listen on TCP port " .. String.forInteger(port))
		cleanup()
	}
	if socket.setBlocking(false) == true {
		acceptBatchSize = 1024
	}
	else {
		acceptBatchSize = 1
	}
	assert esocket = ioManager.addWithReadListener(socket, onIncomingConnection) {
		Log.error(logContext, "Failed to register with event loop")
		cleanup()
	}
	Log.info(logContext, "TCP server initialized, listening on port " .. String.forInteger(port))
	return true
}

func cleanup override
{
	if esocket {
		esocket.remove()
		esocket = null
	}
	if socket {
		socket.close()
		socket = null
	}
	base.cleanup()
}

func onIncomingConnection private
{
	var n = 0
	loop {
		if n >= acceptBatchSize:
			break
		var nn = socket.accept()
		if not nn:
			break
		onNewSocket(nn)
		n ++
	}
}
