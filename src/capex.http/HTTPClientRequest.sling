
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import capex.util

class is StringObject:

func forGET(url as string) static as this
{
	var v = new this()
	v.setMethod("GET")
	v.setUrl(url)
	return v
}

func forPOST(url as string, mimeType as string, data as SizedReader) static as this
{
	var v = new this()
	v.setMethod("POST")
	v.setUrl(url)
	if String.isEmpty(mimeType) == false:
		v.addHeader("Content-Type", mimeType)
	if data:
		v.setBody(data)
	return v
}

func forPOST(url as string, file as File) static as this
{
	assert url
	assert file
	var reader = assert file.read()
	return forPOST(url, MimeTypeRegistry.typeForFile(file), reader)
}

func forPOST(url as string, mimeType as string, data as buffer) static as this
{
	var v = new this()
	v.setMethod("POST")
	v.setUrl(url)
	if String.isEmpty(mimeType) == false:
		v.addHeader("Content-Type", mimeType)
	if data:
		v.setBody(BufferReader.forBuffer(data))
	return v
}

func forPUT(url as string, mimeType as string, data as SizedReader) static as this
{
	var v = new this()
	v.setMethod("PUT")
	v.setUrl(url)
	if String.isEmpty(mimeType) == false:
		v.addHeader("Content-Type", mimeType)
	if data:
		v.setBody(data)
	return v
}

func forPUT(url as string, file as File) static as this
{
	assert url
	assert file
	var reader = assert file.read()
	return forPUT(url, MimeTypeRegistry.typeForFile(file), reader)
}

func forPUT(url as string, mimeType as string, data as buffer) static as this
{
	var v = new this()
	v.setMethod("PUT")
	v.setUrl(url)
	if String.isEmpty(mimeType) == false:
		v.addHeader("Content-Type", mimeType)
	if data:
		v.setBody(BufferReader.forBuffer(data))
	return v
}

func forDELETE(url as string) static as this
{
	var v = new this()
	v.setMethod("DELETE")
	v.setUrl(url)
	return v
}

prop method as string
prop protocol as string
prop username as string
prop password as string
prop serverAddress as string
prop serverPort as int
prop requestPath as string
prop body as SizedReader
var queryParams as KeyValueList<string,string>
prop rawHeaders as KeyValueListForStrings
prop headers as map<string,string>

ctor
{
	protocol = "http"
	serverPort = 80
	requestPath = "/"
	method = "GET"
}

func setUrl(url as string)
{
	var uu = URL.forString(url)
	setProtocol(uu.getScheme())
	setUsername(uu.getUsername())
	setPassword(uu.getPassword())
	setServerAddress(uu.getHost())
	var pp = String.toInteger(uu.getPort())
	if pp < 1 {
		if protocol == "https" {
			pp = 443
		}
		else if protocol == "http" {
			pp = 80
		}
	}
	setServerPort(pp)
	setRequestPath(uu.getPath())
	queryParams = uu.getRawQueryParameters()
}

func addHeader(key as string, value as string)
{
	if rawHeaders == null:
		rawHeaders = new KeyValueListForStrings()
	if headers == null:
		headers = new map<string,string>
	rawHeaders.add(key, value)
	headers[String.toLowerCase(key)] = value
}

func addQueryParameter(key as string, value as string)
{
	if queryParams == null:
		queryParams = new KeyValueList<string,string>()
	queryParams.add(key, value)
}

func getHeader(key as string) as string
{
	assert headers
	return Map.get(headers, key)
}

func setUserAgent(agent as string)
{
	addHeader("User-Agent", agent)
}

func getUrl as string
{
	var sb = new StringBuilder()
	sb.append(protocol)
	sb.append("://")
	sb.append(serverAddress)
	if serverPort == 80 && protocol == "http" {
		; // no need to include
	}
	else if serverPort == 443 && protocol == "https" {
		; // no need to include
	}
	else {
		sb.append(':')
		sb.append(String.forInteger(serverPort))
	}
	var path = getRequestPath()
	if String.isEmpty(path):
		path = "/"
	sb.append(path)
	return sb.toString()
}

func toString(defaultUserAgent as string) as string
{
	var rq = new StringBuilder()
	var body = getBody()
	var path = getRequestPath()
	if String.isEmpty(path):
		path = "/"
	rq.append(getMethod())
	rq.append(' ')
	rq.append(path)
	var first = true
	if queryParams {
		var it as Iterator<KeyValuePair<string,string>> #force = queryParams.iterate()
		while it {
			var kv = it.next()
			if kv == null:
				break
			if first {
				rq.append('?')
				first = false
			}
			else {
				rq.append('&')
			}
			rq.append(kv.key)
			var val = kv.value
			if val {
				rq.append('=')
				rq.append(URLEncoder.encode(val, false, false))
			}
		}
	}
	rq.append(' ')
	rq.append("HTTP/1.1\r\n")
	var hasUserAgent = false
	var hasHost = false
	var hasContentLength = false
	if rawHeaders {
		var it = (rawHeaders as! KeyValueList<string,string>).iterate()
		loop {
			var kvp = it.next()
			if kvp == null:
				break
			var key = kvp.key
			if String.equalsIgnoreCase(key, "user-agent") {
				hasUserAgent = true
			}
			else if String.equalsIgnoreCase(key, "host") {
				hasHost = true
			}
			else if String.equalsIgnoreCase(key, "content-length") {
				hasContentLength = true
			}
			rq.append(key)
			rq.append(": ")
			rq.append(kvp.value)
			rq.append("\r\n")
		}
	}
	if hasUserAgent == false && defaultUserAgent {
		rq.append("User-Agent: ")
		rq.append(defaultUserAgent)
		rq.append("\r\n")
	}
	if hasHost == false:
		rq.append("Host: " .. getServerAddress() .. "\r\n")
	if body && hasContentLength == false {
		var bs = body.getSize()
		var bss = String.forInteger(bs)
		rq.append("Content-Length: " .. bss .. "\r\n")
	}
	rq.append("\r\n")
	return rq.toString()
}

func toString as string
{
	return toString(null)
}
