
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log

class abstract:

model ResponseList public
{
	resources as Resource[]
	headers as DynamicMap
	hasMoreResults as boolean
}

model Response public
{
	id as string
	resource as Resource
	headers as DynamicMap
	statusCode as int
}

model Resource public
{
	id as string
	indexingPolicy as IndexingPolicy
	partitionKey as PartitionKey
	uniqueKeyPolicy as UniqueKeyPolicy
	conflictResolutionPolicy as ConflictResolutionPolicy
	geospatialConfig as GeospatialConfig
}

model IndexingPolicy public
{
	indexingMode as string
	automatic as boolean
	includedPaths as Path[]
	excludedPaths as Path[]
}

model PartitionKey public
{
	paths as vector<string>
	kind as string
	version as int
}

model UniqueKeyPolicy public
{
	uniqueKeys as DynamicVector
}

model ConflictResolutionPolicy public
{
	mode as string
	conflictResolutionPath as string
	conflictResolutionProcedure as string
}

model GeospatialConfig public
{
	type as string
}

model Path public
{
	path as string
}

model ItemList public
{
	resources as DynamicVector
	headers as DynamicMap
	hasMoreResults as boolean
}

model Item public
{
	resource as DynamicMap
	headers as DynamicMap
	statusCode as int
}

prop ctx as LoggingContext

ctor(ctx as LoggingContext):
	this.ctx = ctx

ctor(ctx as LoggingContext, endpoint as string, key as string)
{
	this.ctx = ctx
	initialize(endpoint, key)
}

func initialize(endpoint as string, key as string) abstract
func createDatabase(databaseName as string) abstract async
func getAllDatabases abstract async as ResponseList
func getDatabaseById(databaseId as string) abstract async as Response
func deleteDatabaseById(databaseId as string) abstract async
func createContainer(containerName as string, databaseId as string) abstract async
func getAllContainers(databaseId as string) abstract async as ResponseList
func getContainerById(containerId as string, databaseId as string) abstract async as Response
func deleteContainer(containerId as string, databaseId as string) abstract async
func addItem(item as DynamicMap, containerId as string, databaseId as string) abstract async
func getAllItems(containerId as string, databaseId as string) abstract async as ItemList
func getItemById(itemId as string, containerId as string, databaseId as string) abstract async as Item
func updateItem(item as DynamicMap, containerId as string, databaseId as string) abstract async
func deleteItemById(itemId as string, containerId as string, databaseId as string) abstract async
