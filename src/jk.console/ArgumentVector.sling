
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func forStringVector(args as vector<string>) static as this
{
	var v = new this()
	v.setArgs(args)
	return v
}

func forArray(args as array<string>) static as this
{
	var v = new this()
	var vv = new vector<string>
	foreach arg in args:
		vv += arg
	v.setArgs(vv)
	return v
}

pvar args as vector<string>
pvar position = 0
pvar optionValue as string

func getCurrent as string
{
	assert args
	return Vector.get(args, position)
}

func moveToNext:
	position ++

func hasMore as bool
{
	assert args
	if position < Vector.getSize(args):
		return true
	return false
}

func acceptFlag(flag as string) as bool
{
	assert flag
	var cc = assert getCurrent()
	if cc == "-" .. flag {
		moveToNext()
		return true
	}
	if cc == "--" .. flag {
		moveToNext()
		return true
	}
	return false
}

func acceptOption(str as string) as bool
{
	assert String.isNotEmpty(str)
	var cc = assert getCurrent()
	var f1 = "-" .. str
	var f2 = "--" .. str
	if String.startsWith(cc, f1 .. "=") {
		moveToNext()
		optionValue = String.getEndOfString(cc, String.getLength(f1) + 1)
		return true
	}
	if String.startsWith(cc, f2 .. "=") {
		moveToNext()
		optionValue = String.getEndOfString(cc, String.getLength(f2) + 1)
		return true
	}
	if cc == f1 || cc == f2 {
		moveToNext()
		optionValue = getCurrent()
		if not optionValue {
			position --
		}
		else {
			moveToNext()
			return true
		}
	}
	return false
}

func acceptValue(value as string) as bool
{
	assert value
	var cc = assert getCurrent()
	if cc == value {
		moveToNext()
		return true
	}
	return false
}

func acceptAnyValue as string
{
	var cc = assert getCurrent()
	moveToNext()
	return cc
}

func acceptParameter as string
{
	var cc = assert getCurrent()
	if String.startsWith(cc, "-"):
		return null
	moveToNext()
	return cc
}

func requireParameter(name as string) as string
{
	var v = acceptParameter()
	if not v:
		Error.throw("missingValue", name)
	return v
}

func acceptAllValues as vector<string>
{
	var v = new vector<string>
	loop {
		var cc = acceptAnyValue()
		if cc {
			v += cc
		}
		else {
			break
		}
	}
	return v
}
