
/*
 * This file is part of Jkop
 * Copyright (c) 2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is Exception:

func forMessage(message as string, source as SourceReference = null, trace as string = null) static as this
{
	var v = new this()
	v.setError(ErrorMessage.forText(message, source, true, trace))
	return v
}

func forErrorMessage(error as ErrorMessage) static as this
{
	var v = new this()
	v.setError(error)
	return v
}

macro THROW(message, source)
{
	throw ReferenceError.forMessage(message, source)
}

prop error as ErrorMessage

func getMessage as string
{
	assert error
	return error.getMessage()
}

func getReference as SourceReference
{
	assert error
	return error.getReference()
}

func addRelatedMessage(message as string, source as SourceReference) as this
{
	addRelatedMessageObject(ErrorMessage.forText(message, source))
	return this
}

func addRelatedMessageObject(message as Message)
{
	assert error && message
	error.addRelatedMessage(message)
}

func toString(debug as bool = false) as string
{
	assert error
	return error.toString(debug)
}
