
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is SSLSocket:

prop ctx as LoggingContext
prop socket as TCPSocket
prop serverAddress as string
var acceptInvalidCertificate as bool
var requireClientCertificate = false
var clientSocket private as !"java.net.Socket"
var serverSocket private as !"java.net.ServerSocket"

func setAcceptInvalidCertificate(v as bool) override:
	acceptInvalidCertificate = v

func setRequireClientCertificate(v as bool) override:
	requireClientCertificate = v

func open(cSocket as ConnectedSocket, certFile as File = null, keyFile as File = null, isServer as bool = false, passphrase as string = null) as bool
{
	socket = cSocket as TCPSocket
	assert socket
	var v = true
	if isServer {

		// FIXME: No implementation yet.

		v = false
	}
	else {
		IFDEF "target_android" {
			clientSocket = (socket as! TCPSocketForAndroid).getJavaClientSocket()
		}
		ELSE IFDEF "target_j2se" {
			clientSocket = (socket as! TCPSocketForJava).getJavaClientSocket()
		}
		assert clientSocket
		var address = serverAddress
		if String.isEmpty(address):
			address = socket.getRemoteAddress()
		assert String.isNotEmpty(address)
		var port = socket.getRemotePort()
		if port < 1:
			port = 443
		lang "java" {{{
			try {
				javax.net.ssl.SSLSocketFactory factory = (javax.net.ssl.SSLSocketFactory)javax.net.ssl.SSLSocketFactory.getDefault();
				clientSocket = (javax.net.ssl.SSLSocket)factory.createSocket(clientSocket, address, port, true);
				clientSocket.setKeepAlive(true);
			}
			catch(java.lang.Exception e) {
				e.printStackTrace();
				v = false;
			}
		}}}
	}
	return v
}

func read(buffer as buffer) override as int:
	return readWithTimeout(buffer, -1)

func close override
{
	lang "java" {{{
		try {
			if(clientSocket != null) {
				clientSocket.close();
				clientSocket = null;
			}
			if(serverSocket != null) {
				serverSocket.close();
				serverSocket = null;
			}
		}
		catch(java.io.IOException e) {
			e.printStackTrace();
		}
	}}}
	if socket != null {
		socket.close()
		socket = null
	}
}

func readWithTimeout(buffer as buffer, timeout as int) override as int
{
	// FIXME: No read with timeout implementation yet.

	assert socket && clientSocket
	if not buffer:
		return -1
	var v = 0
	lang "java" {{{
		try {
			java.io.InputStream ins = clientSocket.getInputStream();
			if(socket.getBlocking() == false && ins.available() < 1) {
				return(0);
			}
			else {
				v = ins.read(buffer);
			}
		}
		catch(java.lang.Exception e) {
			e.printStackTrace();
			v = -1;
		}
	}}}
	if v < 1 {
		close()
		v = -1
	}
	return v
}

func write(buffer as buffer, size as int) override as int
{
	assert socket && clientSocket
	if not buffer:
		return -1
	var v = 0
	lang "java" {{{
		try {
			java.io.OutputStream os = clientSocket.getOutputStream();
			os.write(buffer);
			os.flush();
			v = size;
		}
		catch(java.lang.Exception e)
		{
			e.printStackTrace();
			v = -1;
		}
	}}}
	if v < 1 {
		close()
		v = -1
	}
	return v
}

func getSocket override as ConnectedSocket:
	return socket
