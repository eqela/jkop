
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

IFDEF "target_swift" {
	depend "swift-import:UIKit"
	depend "swift-import:CoreGraphics"
	depend "swift-import:ImageIO"
}

func createCircularImage(m as Image) static as Image
{
	assert m
	var image = m
	var minSize = Math.min(image.getPixelWidth(), image.getPixelHeight()) as int
	image = image.crop(0, 0, minSize, minSize)
	IFDEF "target_iosoc" {
		var outputImage as !"UIImage"
		var bytesData #used = image.toPNGData()
		lang "objc" {{{
			NSData *imageData = [NSData dataWithBytes:[bytesData bytes] length:[bytesData length]];
			UIImage *uiImage = [UIImage imageWithData:imageData];
			CGRect rect = CGRectMake(0, 0, [image getPixelWidth], [image getPixelHeight]);
			UIGraphicsBeginImageContextWithOptions(rect.size, NO, uiImage.scale); {
				UIBezierPath *interior = [UIBezierPath bezierPathWithOvalInRect:rect];
				[interior addClip];
				[uiImage drawInRect:rect];
			}
			outputImage = UIGraphicsGetImageFromCurrentImageContext();
			UIGraphicsEndImageContext();
		}}}
		return ImageForIOS.forUIImage(outputImage)
	}
	IFDEF "target_swift" {
		var outputImage as !"UIImage"
		var bytesData #used = image.toPNGData()
		lang "swift" {{{
			let uiImage = UIImage(data: bytesData as! Data)
			let rect = CGRect(x: 0, y: 0, width: image.getPixelWidth(), height: image.getPixelHeight())
			UIGraphicsBeginImageContextWithOptions(rect.size, _: false, _: uiImage!.scale)
			do {
				let interior = UIBezierPath(ovalIn: rect)
				interior.addClip()
				uiImage?.draw(in: rect)
			}
			outputImage = UIGraphicsGetImageFromCurrentImageContext()
			UIGraphicsEndImageContext()
		}}}
		return ImageForSwift.forUIImage(outputImage)
	}
	ELSE IFDEF "target_android" {
		var w #used = image.getPixelWidth()
		var h #used = image.getPixelHeight()
		var img = assert (image as ImageForAndroid).getAndroidBitmap()
		var output as !"android.graphics.Bitmap"
		lang "java" {{{
			output = android.graphics.Bitmap.createBitmap(w, h, android.graphics.Bitmap.Config.ARGB_8888);
			android.graphics.Canvas canvas = new android.graphics.Canvas(output);
			android.graphics.Paint paint = new android.graphics.Paint();
			android.graphics.Rect rect = new android.graphics.Rect(0, 0, w, h);
			android.graphics.RectF rectf = new android.graphics.RectF(rect);
			paint.setAntiAlias(true);
			canvas.drawARGB(0, 0, 0, 0);
			canvas.drawOval(rectf, paint);
			paint.setXfermode(new android.graphics.PorterDuffXfermode(android.graphics.PorterDuff.Mode.SRC_IN));
			canvas.drawBitmap(img, rect, rect, paint);
		}}}
		return ImageForAndroid.forAndroidBitmap(output)
	}
	ELSE IFDEF "target_kotlin" {
		var w #used = image.getPixelWidth()
		var h #used = image.getPixelHeight()
		var img = assert (image as ImageForKotlin).getKotlinBitmap()
		var output as !"android.graphics.Bitmap"
		lang "kotlin" {{{
			output = android.graphics.Bitmap.createBitmap(w, h, android.graphics.Bitmap.Config.ARGB_8888)
			var canvas = android.graphics.Canvas(output)
			var paint = android.graphics.Paint()
			var rect = android.graphics.Rect(0, 0, w, h)
			var rectf = android.graphics.RectF(rect)
			paint.setAntiAlias(true)
			canvas.drawARGB(0, 0, 0, 0)
			canvas.drawOval(rectf, paint)
			paint.setXfermode(android.graphics.PorterDuffXfermode(android.graphics.PorterDuff.Mode.SRC_IN))
			canvas.drawBitmap(img, rect, rect, paint)
		}}}
		return ImageForKotlin.forKotlinBitmap(output)
	}
	ELSE {
		ERROR "Not implemented"
		return null
	}
}

func createCircularImage(oimage as Image, callback as function<void, Image>) static
{
	assert callback
	assert oimage:
		callback(null)
	IFNDEF "target_html" {
		callback(createCircularImage(oimage))
	}
	ELSE {
		var minSize = Math.min(oimage.getPixelWidth(), oimage.getPixelHeight()) as int
		oimage.crop(0, 0, minSize, minSize, func(image as Image) {
			assert image:
				callback(null)
			lang "js" {{{
				var iiw = image.image.width;
				var iih = image.image.height;
				var whr = iiw/2;
				var cnv = document.createElement("canvas");
				cnv.width = iiw;
				cnv.height = iih;
				var ctx = cnv.getContext("2d");
				ctx.save();
				ctx.beginPath();
				ctx.arc(whr, whr, whr, 0, 2 * Math.PI);
				ctx.clip();
				try {
					ctx.drawImage(image.image, 0, 0);
				}
				catch(err) {
					return(null);
				}
				ctx.closePath();
				ctx.restore();
				var src = cnv.toDataURL();
				var imo = new Image();
				imo.onload = function() {
					var img = CaveImageForBrowser.NEW();
					img.image = imo;
					callback(img);
				};
				imo.src = src;
			}}}
		})
	}
}
