
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class imports cape:

var colorBlack static as this
var colorWhite static as this

func black static as this
{
	if not colorBlack:
		colorBlack = instance("black")
	return colorBlack
}

func white static as this
{
	if not colorWhite:
		colorWhite = instance("white")
	return colorWhite
}

func asColor(o as object) static as this
{
	assert o
	if o is this:
		return o as! this
	if o is string:
		return instance(o as! string)
	return null
}

func instance(str as string = null) static as this
{
	if(str == "none") {
		return(null)
	}
	var v = new this()
	if(str != null) {
		if(v.parse(str) == false) {
			v = null
		}
	}
	return(v)
}

func forString(str as string) static as this
{
	if(str == "none") {
		return(null)
	}
	var v = new this()
	if(str != null) {
		if(v.parse(str) == false) {
			v = null
		}
	}
	return(v)
}

func forRGBDouble(r as double, g as double, b as double) static as this
{
	var v = new this()
	v.setRed(r)
	v.setGreen(g)
	v.setBlue(b)
	v.setAlpha(1.0)
	return(v)
}

func forRGBADouble(r as double, g as double, b as double, a as double) static as this
{
	var v = new this()
	v.setRed(r)
	v.setGreen(g)
	v.setBlue(b)
	v.setAlpha(a)
	return(v)
}

func forRGB(r as int, g as int, b as int) static as this
{
	var v = new this()
	v.setRed(r / 255.0)
	v.setGreen(g / 255.0)
	v.setBlue(b / 255.0)
	v.setAlpha(1.0)
	return(v)
}

func forRGBA(r as int, g as int, b as int, a as int) static as this
{
	var v = new this()
	v.setRed(r / 255.0)
	v.setGreen(g / 255.0)
	v.setBlue(b / 255.0)
	v.setAlpha(a / 255.0)
	return(v)
}

func forRGBAInteger(value as int) static as this
{
	var v = new this()
	v.setRed(((value >> 24) & 0xff) / 255.0)
	v.setGreen(((value >> 16) & 0xff) / 255.0)
	v.setBlue(((value >> 8) & 0xff) / 255.0)
	v.setAlpha((value & 0xff) / 255.0)
	return v
}

func forARGBInteger(value as int) static as this
{
	var v = new this()
	v.setAlpha(((value >> 24) & 0xff) / 255.0)
	v.setRed(((value >> 16) & 0xff) / 255.0)
	v.setGreen(((value >> 8) & 0xff) / 255.0)
	v.setBlue((value & 0xff) / 255.0)
	return v
}

func forRGBInteger(value as int) static as this
{
	var v = new this()
	v.setRed(((value >> 16) & 0xff) / 255.0)
	v.setGreen(((value >> 8) & 0xff) / 255.0)
	v.setBlue((value & 0xff) / 255.0)
	v.setAlpha(1.0)
	return v
}

prop red = 0.0
prop green = 0.0
prop blue = 0.0
prop alpha = 0.0

ctor
{
}

ctor(str as string)
{
	parse(str)
}

func getRedInt as int:
	return(((red * 255) as int))

func getGreenInt as int:
	return(((green * 255) as int))

func getBlueInt as int:
	return(((blue * 255) as int))

func getAlphaInt as int:
	return(((alpha * 255) as int))

func isWhite as bool
{
	if(red + green + blue >= 3.0) {
		return(true)
	}
	return(false)
}

func isBlack as bool
{
	if(red + green + blue <= 0) {
		return(true)
	}
	return(false)
}

func isLightColor as bool
{
	if(red + green + blue >= 1.5) {
		return(true)
	}
	return(false)
}

func isDarkColor as bool
{
	return(!isLightColor())
}

func hexCharToInt(c as char) private as int
{
	if(c >= '0' && c <= '9') {
		return((c as int) - ('0' as int))
	}
	if(c >= 'a' && c <= 'f') {
		IFDEF("target_js") {
			return(lang "js" int {{{ 10 + ((c).charCodeAt()) - (('a').charCodeAt()) }}})
		}
		ELSE {
			return(10 + (c as int) - ('a' as int))
		}
	}
	if(c >= 'A' && c <= 'F') {
		IFDEF("target_js") {
			return(lang "js" int {{{ 10 + ((c).charCodeAt()) - (('A').charCodeAt()) }}})
		}
		ELSE {
			return(10 + (c as int) - ('A' as int))
		}
	}
	return(0)
}

func hexDigitToInt(hx as string) private as int
{
	if(String.isEmpty(hx)) {
		return(0)
	}
	var c0 = hexCharToInt(String.charAt(hx, 0))
	if(String.getLength(hx) < 2) {
		return(c0)
	}
	return(c0 * 16 + hexCharToInt(String.charAt(hx, 1)))
}

func parse(s as string) as bool
{
	if(s == null) {
		red = 0.0
		green = 0.0
		blue = 0.0
		alpha = 1.0
		return(true)
	}
	var v = true
	alpha = 1.0
	if(String.charAt(s, 0) == '#') {
		var slength = String.getLength(s)
		if(slength == 7 || slength == 9) {
			red = hexDigitToInt(String.getSubString(s, 1,2)) / 255.0
			green = hexDigitToInt(String.getSubString(s, 3,2)) / 255.0
			blue = hexDigitToInt(String.getSubString(s, 5,2)) / 255.0
			if(slength == 9) {
				alpha = hexDigitToInt(String.getSubString(s, 7,2)) / 255.0
			}
			v = true
		}
		else {
			red = 0.0
			blue = 0.0
			green = 0.0
			v = false
		}
	}
	else {
		if(s == "black") {
			red = 0.0
			green = 0.0
			blue = 0.0
		}
		else if(s == "white") {
			red = 1.0
			green = 1.0
			blue = 1.0
		}
		else if(s == "red") {
			red = 1.0
			green = 0.0
			blue = 0.0
		}
		else if(s == "green") {
			red = 0.0
			green = 1.0
			blue = 0.0
		}
		else if(s == "blue") {
			red = 0.0
			green = 0.0
			blue = 1.0
		}
		else if(s == "lightred") {
			red = 0.6
			green = 0.4
			blue = 0.4
		}
		else if(s == "lightgreen") {
			red = 0.4
			green = 0.6
			blue = 0.4
		}
		else if(s == "lightblue") {
			red = 0.4
			green = 0.4
			blue = 0.6
		}
		else if(s == "yellow") {
			red = 1.0
			green = 1.0
			blue = 0.0
		}
		else if(s == "cyan") {
			red = 0.0
			green = 1.0
			blue = 1.0
		}
		else if(s == "orange") {
			red = 1.0
			green = 0.5
			blue = 0.0
		}
		else {
			v = false
		}
	}
	return(v)
}

func decimalStringToInteger(str as string) private as int
{
	if(String.isEmpty(str)) {
		return(0)
	}
	var v = 0
	var m = String.getLength(str)
	var n = 0
	for(n = 0; n < m; n++) {
		var c = String.charAt(str, n)
		if(c >= '0' && c <= '9') {
			v = v * 10
			v += c - '0' as int
		}
		else {
			break
		}
	}
	return(v)
}

func dup(arg as string = null) as this
{
	var f = 1.0
	if(arg != null) {
		if(arg == "light") {
			f = 1.2
		}
		else if(arg == "dark") {
			f = 0.8
		}
		else if(String.endsWith(arg, "%")) {
			f = (decimalStringToInteger(arg) as double) / 100.0
		}
	}
	var v = new this()
	if(f > 1.0) {
		v.setRed(red + (1.0-red) * (f - 1.0))
		v.setGreen(green + (1.0-green) * (f - 1.0))
		v.setBlue(blue + (1.0-blue) * (f - 1.0))
	}
	else if(f < 1.0) {
		v.setRed(red * f)
		v.setGreen(green * f)
		v.setBlue(blue * f)
	}
	else {
		v.setRed(red)
		v.setGreen(green)
		v.setBlue(blue)
	}
	v.setAlpha(alpha)
	return(v)
}

func toRGBAInt32 as int32
{
	var v as int32 = 0
	v |= (((red * 255 as int32) & 0xff) as int32) << 24
	v |= (((green * 255 as int32) & 0xff) as int32) << 16
	v |= (((blue * 255 as int32) & 0xff) as int32) << 8
	v |= (((alpha * 255 as int32) & 0xff) as int32)
	return(v)
}

func toARGBInt32 as int32
{
	var v as int32 = 0
	v |= (((alpha * 255 as int32) & 0xff) as int32) << 24
	v |= (((red * 255 as int32) & 0xff) as int32) << 16
	v |= (((green * 255 as int32) & 0xff) as int32) << 8
	v |= (((blue * 255 as int32) & 0xff) as int32)
	return(v)
}

func toString as string
{
	return(toRgbaString())
}

func toRgbString as string
{
	var r = String.forIntegerHex((red * 255) as int)
	var g = String.forIntegerHex((green * 255) as int)
	var b = String.forIntegerHex((blue * 255) as int)
	var sb = new StringBuilder()
	sb.append("#")
	to2Digits(r, sb)
	to2Digits(g, sb)
	to2Digits(b, sb)
	return(sb.toString())
}

func toRgbaString as string
{
	var a = String.forIntegerHex((alpha * 255) as int)
	return(toRgbString() .. a)
}

func toHtmlRgbaString as string
{
	var sb = new StringBuilder()
	sb.append("rgba(")
	sb.append(String.forInteger((red * 255) as int))
	sb.append(',')
	sb.append(String.forInteger((green * 255) as int))
	sb.append(',')
	sb.append(String.forInteger((blue * 255) as int))
	sb.append(',')
	sb.append(String.forDouble(alpha))
	sb.append(")")
	return sb.toString()
}

func toHtmlCompatibleString as string
{
	if alpha >= 1.0:
		return toRgbString()
	return toHtmlRgbaString()
}

func toRGBInteger as int
{
	var v = (blue * 255) as int
	v |= ((green * 255) as int) << 8
	v |= ((red * 255) as int) << 16
	return v
}

func to2Digits(val as string, sb as StringBuilder)
{
	if(String.getLength(val) == 1) {
		sb.append('0')
	}
	sb.append(val)
}

IFDEF "target_iosoc" {
	depend "objc-header-h:<UIKit/UIKit.h>"

	func toUIColor as !"UIColor":
		return lang "objc" !"UIColor" {{{ [UIColor colorWithRed:red green:green blue:blue alpha:alpha] }}}

	func toAppleColor as !"UIColor":
		return toUIColor()
}

IFDEF "target_swift" {
	depend "swift-import:UIKit"

	func toUIColor as !"UIColor":
		return lang "swift" !"UIColor" {{{ UIColor(red: CGFloat(red), green: CGFloat(green), blue: CGFloat(blue), alpha: CGFloat(alpha)) }}}

	func toAppleColor as !"UIColor":
		return toUIColor()
}

IFDEF "target_macosoc" {
	depend "objc-header-h:<AppKit/AppKit.h>"

	func toNSColor as !"NSColor":
		return lang "objc" !"NSColor" {{{ [NSColor colorWithRed:red green:green blue:blue alpha:alpha] }}}

	func toAppleColor as !"NSColor":
		return toNSColor()
}

IFDEF "target_uwp" {
	func toBrush as !"Windows.UI.Xaml.Media.Brush"
	{
		var r #used = getRedInt() as uint8
		var g #used = getGreenInt() as uint8
		var b #used = getBlueInt() as uint8
		var a #used = getAlphaInt() as uint8
		var v as !"Windows.UI.Xaml.Media.Brush"
		lang "cs" {{{
			v = new Windows.UI.Xaml.Media.SolidColorBrush(Windows.UI.Color.FromArgb(a, r, g, b));
		}}}
		return v
	}
}
