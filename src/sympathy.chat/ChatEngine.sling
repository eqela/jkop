
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

import cape
import capex.data
import capex.net
import capex.crypto

prop ctx as LoggingContext
prop server as WSServer
prop port = 9090
var userMap private as DynamicMap
var channelMap private as DynamicMap
var connectionSize private as int
var random private as Random

ctor
{
	userMap = new DynamicMap()
	channelMap = new DynamicMap()
	connectionSize = 0
	random = new Random()
}

func create(port as int, ctx as LoggingContext, server as WSServer = null) static as this:
	return new this().setPort(port).setCtx(ctx).setServer(server)

func initialize(mgr as IOManager) as bool
{
	assert mgr:
		logError("No IOManager instance specified.")
	if not server {
		logWarning("No WebSocket server instance specified. Creating a new instance to listen on port: " .. String.forInteger(port) .. ".")
		server = new WSServer()
	}
	server.setPort(port)
	var engine final = this
	server.setCreateConnectionHandlerObject(func as WSServerConnectionHandler {
		return new ChatConnectionHandler().setEngine(engine).setLogContext(ctx)
	})
	assert server.initialize(mgr, ctx):
		logError("Failed to initialize WebSocket server.")
	logInfo("Successfully initialized chat engine.")
	return true
}

func generateId private as string:
	return MD5Encoder.encode(String.forInteger(SystemClock.asSeconds()) .. String.forInteger(random.nextInt(9999999)) .. String.forInteger(random.nextInt(9999999)) .. String.forInteger(random.nextInt(9999999)))

func logError(message as string)
{
	assert ctx
	ctx.logError("ChatEngine: " .. message)
}

func logWarning(message as string)
{
	assert ctx
	ctx.logWarning("ChatEngine: " .. message)
}

func logInfo(message as string)
{
	assert ctx
	ctx.logInfo("ChatEngine: " .. message)
}

func logDebug(message as string)
{
	assert ctx
	ctx.logDebug("ChatEngine: " .. message)
}

func onDataReceived(data as buffer, connection as ChatConnectionHandler)
{
	assert connection
	assert data {
		connection.close()
	}
	var user = connection.getUser()
	if user == null {
		onAuthenticateConnection(data, connection)
		return
	}
	onParseData(data, connection)
}

prop authenticateConnectionCallback as function<string, buffer>

func onAuthenticateConnection(data as buffer, connection as ChatConnectionHandler)
{
	var id as string
	if authenticateConnectionCallback == null {
		logWarning("No 'authenticateConnectionCallback' set. No authentication done.")
		loop {
			id = generateId()
			if userMap.get(id) == null:
				break
		}
	}
	else {
		id = authenticateConnectionCallback(data)
	}
	if String.isEmpty(id) {
		connection.close()
		return
	}
	var user = getUser(id)
	if user == null {
		user = new ChatUser()
		user.setId(id)
		userMap.set(id, user)
	}
	connection.setUser(user)
	loop {
		var connectionId = generateId()
		if user.getConnection(connectionId) == null {
			connection.setConnectionId(connectionId)
			break
		}
	}
	user.addConnection(connection)
	connectionSize++
	logDebug("New connection. Now: (" .. String.forInteger(connectionSize) .. "/" .. String.forInteger(userMap.getCount()) .. ") connected")

	// Create and send an acknowledge command that the client is connected.
	// The 'userId' can be changed and make it dynamic.

	var v = new DynamicMap()
	v.set("userId", id)
	v.set("type", 2)
	v.set("command", 1)
	var message = assert ChatMessage.forDataBuffer(String.toUTF8Buffer(JSONEncoder.encode(v))) {
		// FIXME: Not sure if we should just close the connection when this happens.
		connection.close()
	}
	var r = connection.sendMessage(message)
	if r < 1:
		return
	// FIXME: Should send an acknowledge command that the client is connected
	if user.getConnectionCount() == 1:
		onUserOnline(user)
}

func getUser(id as string) as ChatUser:
	return userMap.get(id) as ChatUser

func onUserDisconnect(id as string, connection as ChatConnectionHandler)
{
	var user = assert userMap.get(id) as ChatUser
	user.removeConnection(connection)
	connectionSize--
	logDebug("Connection closed. Now: (" .. String.forInteger(connectionSize) .. "/" .. String.forInteger(userMap.getCount()) .. ") connected")
	if user.isOnline() == false:
		onUserOffline(user)
}

func onUserOnline(user as ChatUser)
{
	assert user
	logDebug("User: '" .. user.getId() .. "' is now online")
	// FIXME: Here we would like to broadcast to all the user's contacts that it is now online
}

func onUserOffline(user as ChatUser)
{
	assert user
	logDebug("User: '" .. user.getId() .. "' is now offline with last active on: " .. String.forInteger(user.getLastActive()))
	// FIXME: Here we would like to broadcast to all the user's contacts that it is now offline
}

func onParseData(data as buffer, connection as ChatConnectionHandler) private
{
	assert connection
	assert data {
		connection.close()
	}
	var m = assert ChatMessage.forDataBuffer(data) {
		connection.close()
	}
	switch m.getMessageType() {
		case ChatMessage.COMMAND_TYPE: {
			// We would want to have commands
			// like: SEEN, TYPING, ONLINE, OFFLINE,
			// UPLOADING_FILE, DONE_UPLOADING_FILE, etc.
			break
		}
		case ChatMessage.DATA_TYPE: {
			onNewMessage(m, connection)
			break
		}
		case ChatMessage.UNKNOWN_TYPE: {
			;
		}
		default: {
			connection.close()
		}
	}
}

func getChannel(id as string) private as ChatChannel:
	return channelMap.get(id) as ChatChannel

func checkRecipients(message as ChatMessage) private as DynamicVector
{
	// FIXME: Improve this please
	assert message
	var r = assert message.getRecipients()
	var nr = new DynamicVector()
	var s = assert message.getSenderId()
	nr.append(s)
	foreach(rc as string in r.toVector()) {
		var exists = false
		foreach(nrc as string in nr.toVector()) {
			if String.equals(nrc, rc) {
				exists = true
				break
			}
		}
		if exists == false:
			nr.append(rc)
	}
	return nr
}

func createChannelAndGetId(message as ChatMessage) private as string
{
	assert message
	var r = assert checkRecipients(message)
	if r.getSize() < 2:
		return null
	message.setRecipients(r)
	var id as string
	loop {
		id = generateId()
		if channelMap.get(id) == null:
			break
	}
	var channel = assert ChatChannel.create(this, message)
	channelMap.set(id, channel)
	logDebug("New channel '" .. id .. "' created")
	return id
}

func onNewMessage(message as ChatMessage, connection as ChatConnectionHandler)
{
	var channelId = message.getChannelId()
	if String.isEmpty(channelId) {
		channelId = createChannelAndGetId(message)
		message.setChannelId(channelId)
	}
	var c = assert getChannel(channelId) {
		connection.close()
	}
	c.addMessage(message)
}

func broadcastMessage(message as ChatMessage)
{
	assert message
	var recipients = assert message.getRecipients()
	foreach(userId as string in recipients.toVector()) {
		var user = getUser(userId)
		if user == null {
			// FIXME: Should do something even though we expect that this would never happen.
			continue
		}
		if user.isOnline() == false {
			// FIXME: How should we handle offline recipient?
			continue
		}
		var brokenConnections = new vector<string>
		foreach(connectionId as string in user.getConnectionIds()) {
			var connection = user.getConnection(connectionId)
			if connection == null{
				brokenConnections += connectionId
				continue
			}
			var r = connection.sendMessage(message)
			if r < 1 {
				// FIXME: How should we handle offline recipient?
				;
			}
		}
		foreach(connectionId as string in brokenConnections) {
			user.removeConnectionForId(connectionId)
		}
		if user.isOnline() == false {
			// FIXME: We should broadcast that this user is offline.
			continue
		}
	}
}
