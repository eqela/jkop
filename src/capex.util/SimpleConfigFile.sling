
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func forFile(file as File) static as this
{
	var v = new this()
	assert v.read(file)
	return v
}

func forMap(val as DynamicMap) static as this
{
	var v = new this()
	v.setDataAsMap(val)
	return v
}

func readFileAsMap(file as File) static as DynamicMap
{
	var cf = assert forFile(file)
	return cf.getDataAsMap()
}

var data as KeyValueList<string,string>
var mapData as DynamicMap
var file as File

ctor:
	data = new KeyValueList<string,string>()

func getFile as File:
	return file

func getRelativeFile(fileName as string) as File
{
	assert file
	assert fileName
	var p = assert file.getParent()
	return p.entry(fileName)
}

func clear
{
	data.clear()
	mapData = null
}

func setDataAsMap(val as DynamicMap) as this
{
	clear()
	var keys = val.iterateKeys()
	while keys {
		var key = keys.next()
		if not key:
			break
		data.add(key, val.getString(key))
	}
	return this
}

func getDataAsMap as DynamicMap
{
	if not mapData {
		mapData = new DynamicMap()
		var it = data.iterate()
		while it {
			var kvp = it.next()
			if not kvp:
				break
			mapData.set(kvp.key, kvp.value)
		}
	}
	return mapData
}

func getDynamicMapValue(key as string, defval as DynamicMap) as DynamicMap
{
	var str = getStringValue(key, null)
	if not str:
		return defval
	var v = JSONParser.parse(str) as DynamicMap
	if not v:
		return defval
	return v
}

func getDynamicVectorValue(key as string, defval as DynamicVector) as DynamicVector
{
	var str = getStringValue(key, null)
	if not str:
		return defval
	var v = JSONParser.parse(str) as DynamicVector
	if not v:
		return defval
	return v
}

func getStringValue(key as string, defval as string = null) as string
{
	var val = getDataAsMap()
	if not val:
		return defval
	var v = val.getString(key)
	if not v:
		return defval
	if String.startsWith(v, "\"\"\"\n") && String.endsWith(v, "\n\"\"\""):
		v = String.getSubString(v, 4, String.getLength(v) - 8)
	return v
}

func getIntegerValue(key as string, defval as int = 0) as int
{
	var val = getDataAsMap()
	if not val:
		return defval
	return val.getInteger(key, defval)
}

func getDoubleValue(key as string, defval as double = 0.0) as double
{
	var val = getDataAsMap()
	if not val:
		return defval
	return val.getDouble(key, defval)
}

func getBooleanValue(key as string, defval as bool = false) as bool
{
	var val = getDataAsMap()
	if not val:
		return defval
	return val.getBoolean(key, defval)
}

func getFileValue(key as string, defval as File = null) as File
{
	var v = getRelativeFile(getStringValue(key, null))
	if not v:
		return defval
	return v
}

func iterate as Iterator<KeyValuePair<string,string>>
{
	assert data
	return data.iterate()
}

func read(file as File) virtual as bool
{
	assert file
	var reader = assert file.read()
	var ins = PrintReader.forReader(reader)
	var line as string
	var tag as string
	var lineBuffer as StringBuilder
	var terminator as string
	while(line = ins.readLine()) {
		if lineBuffer {
			lineBuffer.append(line)
			if line == terminator {
				line = lineBuffer.toString()
				lineBuffer = null
				terminator = null
			}
			else {
				lineBuffer.append('\n')
				continue
			}
		}
		line = String.strip(line)
		if String.isEmpty(line) || String.startsWith(line, "#"):
			continue
		if String.endsWith(line, "{") {
			if String.indexOf(line, ':') < 0 {
				if not tag:
					tag = String.strip(String.getSubString(line, 0, String.getLength(line)-1))
				continue
			}
			else {
				lineBuffer = new StringBuilder()
				lineBuffer.append(line)
				lineBuffer.append('\n')
				terminator = "}"
				continue
			}
		}
		if String.endsWith(line, "[") {
			lineBuffer = new StringBuilder()
			lineBuffer.append(line)
			lineBuffer.append('\n')
			terminator = "]"
			continue
		}
		if String.endsWith(line, "\"\"\"") {
			lineBuffer = new StringBuilder()
			lineBuffer.append(line)
			lineBuffer.append('\n')
			terminator = "\"\"\""
			continue
		}
		if tag && line == "}" {
			tag = null
			continue
		}
		var sp = String.split(line, ':', 2)
		if not sp:
			continue
		var key = String.strip(Vector.get(sp, 0))
		var val = String.strip(Vector.get(sp, 1))
		if String.startsWith(val, "\"") && String.endsWith(val, "\""):
			val = String.getSubString(val, 1, String.getLength(val)-2)
		if String.isEmpty(key):
			continue
		if tag:
			key = key .. "[" .. tag .. "]"
		data.add(key, val)
	}
	this.file = file
	reader.close()
	return true
}

func write(outfile as File) virtual as bool
{
	assert outfile
	assert data
	var wr = assert outfile.write()
	var os = PrintWriterWrapper.forWriter(wr)
	if os {
		var it = data.iterate()
		while it {
			var kvp = it.next()
			if not kvp:
				break
			os.println(kvp.key .. ": " .. kvp.value)
		}
	}
	wr.close()
	return true
}
