
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2017 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is LayerWidget imports cave:

func forText(context as GuiApplicationContext, text as string, handler as function) static as this
{
	var v = new this(context)
	v.setWidgetText(text)
	v.setWidgetClickHandler(handler)
	return(v)
}

ctor(ctx as GuiApplicationContext)
{
	base(ctx)
	widgetContext = ctx
}

var widgetContext as GuiApplicationContext
var widgetClickHandler as function
prop widgetText as string
prop isRounded as bool
prop widgetRoundingRadius as double
prop widgetBackgroundColor as Color
prop widgetTextColor as Color
prop widgetFontSize as int
prop widgetFontFamily = "Arial"
prop padding = -1

func setWidgetClickHandler(handler as function) as this
{
	widgetClickHandler = handler
	Widget.setWidgetClickHandler(this, handler)
	return(this)
}

func initializeWidget override
{
	base.initializeWidget()
	var bgc = widgetBackgroundColor
	if(bgc == null) {
		bgc = Color.forRGBDouble(0.6, 0.6, 0.6)
	}
	var fgc = widgetTextColor
	if(fgc == null) {
		if(bgc.isLightColor()) {
			fgc = Color.forRGB(0, 0, 0)
		}
		else {
			fgc = Color.forRGB(0xff, 0xff, 0xff)
		}
	}
	var padding = this.padding
	if(padding < 0) {
		padding = context.getHeightValue("2mm")
	}
	var canvas = CanvasWidget.forColor(context, bgc)
	if(isRounded) {
		canvas.setWidgetRounded(isRounded)
		canvas.setWidgetRoundingRadius(widgetRoundingRadius)
	}
	addWidget(canvas)
	var label = LabelWidget.forText(context, widgetText)
	label.setWidgetTextColor(fgc)
	label.setWidgetFontFamily(widgetFontFamily)
	if(widgetFontSize > 0) {
		label.setWidgetFontSize(widgetFontSize)
	}
	addWidget(AlignWidget.forWidget(context, label, 0.5, 0.5, padding))
	IFDEF("target_html") {
		HTMLDOM.setStyle(element, "cursor", "pointer")
	}
}
