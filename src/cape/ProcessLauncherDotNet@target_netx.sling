
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

IFNDEF "target_uwp"
{
	class MyProcess is Process is ProcessWithIO
	{
		var process public as !"System.Diagnostics.Process"
		var exitCode = 0
		var stdin as Writer
		var stdout as Reader
		var stderr as Reader

		func close
		{
			lang "cs" {{{
				if(process != null) {
					exitCode = process.ExitCode;
					process.Close();
					process = null;
				}
			}}}
		}

		func getStandardInput as Writer
		{
			if(stdin == null) {
				var stream as !"System.IO.Stream"
				lang "cs" {{{
					stream = process.StandardInput.BaseStream;
				}}}
				stdin = DotNetStreamWriter.forStream(stream)
			}
			return stdin
		}

		func getStandardOutput as Reader
		{
			if(stdout == null) {
				var stream as !"System.IO.Stream"
				lang "cs" {{{
					stream = process.StandardOutput.BaseStream;
				}}}
				stdout = DotNetStreamReader.forStream(stream)
			}
			return stdout
		}

		func getStandardError as Reader
		{
			if(stderr == null) {
				var stream as !"System.IO.Stream"
				lang "cs" {{{
					stream = process.StandardError.BaseStream;
				}}}
				stderr = DotNetStreamReader.forStream(stream)
			}
			return stderr
		}

		func getId as string
		{
			var id = 0
			lang "cs" {{{
				if(process != null) {
					id = process.Id;
				}
			}}}
			return String.forInteger(id)
		}

		func isRunning as bool
		{
			var v = false
			lang "cs" {{{
				if(process != null) {
					try {
						int x = process.ExitCode;
					}
					catch {
						v = true;
					}
				}
			}}}
			return v
		}

		func getExitStatus as int
		{
			if(isRunning()) {
				return -1
			}
			lang "cs" {{{
				if(process != null) {
					int v;
					try {
						v = process.ExitCode;
					}
					catch {
						v = -1;
					}
					exitCode = v;
				}
			}}}
			close()
			return exitCode
		}

		func sendInterrupt
		{
		}

		func getPid private as int
		{
			var pp = process
			if not pp:
				return -1
			var v = -1
			try {
				v = lang "cs" int {{{ pp.Id }}}
			}
			catch {
				v = -1
			}
			return v
		}

		func killRequest
		{
			if OS.isMacOS() || OS.isLinux() {
				var pid = getPid()
				if pid >= 0 {
					var killcmd = ProcessLauncher.forCommand("kill")
					if killcmd {
						killcmd.addToParams(String.forInteger(pid))
						killcmd.execute()
						return
					}
				}
			}
			killForce()
		}

		func killForce
		{
			var pp = assert process
			lang "cs" {{{
				try {
					pp.Kill();
				}
				catch {
				}
			}}}
		}

		func kill(timeout as int)
		{
			killRequest()
			var pp = process
			lang "cs" {{{
				if(pp != null) {
					pp.WaitForExit(timeout);
				}
			}}}
			killForce()
		}

		func waitForExit as int
		{
			var pp = process
			lang "cs" {{{
				if(pp != null) {
					pp.WaitForExit();
				}
			}}}
			return getExitStatus()
		}
	}

	func startProcess(launcher as ProcessLauncher, wait as bool, pipeHandler as BufferDataReceiver, withIO as bool, errorBuffer as StringBuilder) static as Process
	{
		var ff = assert launcher.getFile()
		var sb = new StringBuilder()
		foreach param in launcher.getParams() {
			if sb.count() > 0:
				sb.append(' ')
			sb.append('"')
			var it = String.iterate(param)
			loop {
				var c = it.getNextChar()
				if Character.isEOF(c):
					break
				if c == '"' {
					sb.append('"')
					sb.append('"')
				}
				else {
					sb.append(c)
				}
			}
			sb.append('"')
		}
		var sbs = sb.toString()
		if sbs == null:
			sbs = ""
		var np = new MyProcess()
		var cwdp as string
		var cwd = launcher.getCwd()
		if cwd:
			cwdp = cwd.getPath()
		lang "cs" {{{
			System.Diagnostics.ProcessStartInfo pi = new System.Diagnostics.ProcessStartInfo();
			pi.UseShellExecute = false;
			pi.FileName = ff.getPath();
			if(withIO) {
				pi.RedirectStandardOutput = true;
				pi.RedirectStandardError = true;
				pi.RedirectStandardInput = true;
			}
			else if(pipeHandler != null) {
				pi.RedirectStandardOutput = true;
				pi.RedirectStandardError = true;
				pi.RedirectStandardInput = false;
			}
			else {
				pi.RedirectStandardOutput = false;
				pi.RedirectStandardError = false;
				pi.RedirectStandardInput = false;
			}
			pi.Arguments = sbs;
			pi.WorkingDirectory = cwdp;
		}}}
		var env = launcher.getEnv()
		if env && Map.count(env) > 0 {
			var keys as vector<string> #force = Map.getKeys(env)
			foreach key in keys {
				var val = env[key]
				if val == null:
					val = ""
				lang "cs" {{{
					pi.EnvironmentVariables[key] = val;
				}}}
			}
		}
		lang "cs" {{{
			try {
				np.process = System.Diagnostics.Process.Start(pi);
			}
			catch(System.Exception e) {
				if(errorBuffer != null) {
					errorBuffer.append(e.ToString());
				}
				np = null;
			}
		}}}
		assert np
		if wait {
			lang "cs" {{{
				System.Action<System.Runtime.Loader.AssemblyLoadContext> killHandler1 = ctx => {
					np.kill(1000);
				};
				System.ConsoleCancelEventHandler killHandler2 = (sender, args) => {
					np.kill(1000);
				};
				System.Runtime.Loader.AssemblyLoadContext.Default.Unloading += killHandler1;
				System.Console.CancelKeyPress += killHandler2;
			}}}
			if pipeHandler {
				lang "cs" {{{
					try {
						var bb0 = new byte[1024];
						var bb1 = new byte[1024];
						System.IO.Stream sro = np.process.StandardOutput.BaseStream;
						System.IO.Stream sre = np.process.StandardError.BaseStream;
						var tasks = new System.Threading.Tasks.Task<int>[2];
						tasks[0] = sro.ReadAsync(bb0, 0, 1024);
						tasks[1] = sre.ReadAsync(bb1, 0, 1024);
						while(true) {
							if(tasks[0] == null && tasks[1] == null) {
								break;
							}
							System.Threading.Tasks.Task<int>[] tts = null;
							var t0index = 0;
							var t1index = 1;
							if(tasks[0] != null && tasks[1] == null) {
								tts = new System.Threading.Tasks.Task<int>[1];
								tts[0] = tasks[0];
								t0index = 0;
								t1index = -1;
							}
							else if(tasks[0] == null && tasks[1] != null) {
								tts = new System.Threading.Tasks.Task<int>[1];
								tts[0] = tasks[1];
								t0index = -1;
								t1index = 0;
							}
							else {
								tts = new System.Threading.Tasks.Task<int>[2];
								tts[0] = tasks[0];
								tts[1] = tasks[1];
								t0index = 0;
								t1index = 1;
							}
							var tt = System.Threading.Tasks.Task.WaitAny(tts);
							if(t0index >= 0 && tt == t0index) {
								if(tasks[0] != null) {
									if(tasks[0].Result < 1) {
										tasks[0] = null;
									}
									else {
										if(pipeHandler.onBufferData(bb0, tasks[0].Result) == false) {
											np.killForce();
											break;
										}
										tasks[0] = sro.ReadAsync(bb0, 0, 1024);
									}
								}
							}
							else if(t1index >= 0 && tt == t1index) {
								if(tasks[1] != null) {
									if(tasks[1].Result < 1) {
										tasks[1] = null;
									}
									else {
										if(pipeHandler.onBufferData(bb1, tasks[1].Result) == false) {
											np.killForce();
											break;
										}
										tasks[1] = sre.ReadAsync(bb1, 0, 1024);
									}
								}
							}
							else {
								break;
							}
						}
					}
					catch(System.Exception e) {
						if(errorBuffer != null) {
							errorBuffer.append(e.ToString());
						}
					}
				}}}
			}
			np.waitForExit()
			lang "cs" {{{
				System.Runtime.Loader.AssemblyLoadContext.Default.Unloading -= killHandler1;
				System.Console.CancelKeyPress -= killHandler2;
			}}}
			np.close()
		}
		return np
	}
}
