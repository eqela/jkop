
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.console
import jk.serverconfig

class:

func execute(args as array<string>, initializer as function<promise<void>,LoggingContext,WebServer>) static async as int
{
	var ctx = new ConsoleApplicationContext()
	try {
		var server = WebServer.instance(ctx)
		if initializer:
			await initializer(ctx, server)
		await server.execute(String.toInteger(ServerConfig.require("PORT")))
	}
	catch e {
		Log.error(ctx, String.asString(e))
		return 1
	}
	return 0
}

func execute2(args as array<string>, port1 as int, port2 as int, initializer as function<promise<void>,LoggingContext,WebServer,WebServer>) static async as int
{
	var ctx = new ConsoleApplicationContext()
	try {
		var server1 = WebServer.instance(ctx)
		var server2 = WebServer.instance(ctx)
		if initializer:
			await initializer(ctx, server1, server2)
		await server1.start(port1)
		await server2.start(port2)
		await WebServer.waitForServers(ctx, [ server1, server2 ])
	}
	catch e {
		Log.error(ctx, String.asString(e))
		return 1
	}
	return 0
}
