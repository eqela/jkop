
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2017 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func parseFile(file as File) static as RichTextDocument
{
	return(new this().setFile(file).parse())
}

func parseString(data as string) static as RichTextDocument
{
	return(new this().setData(data).parse())
}

prop file as File
prop data as string

func skipEmptyLines(pr as LineReader) as string
{
	var line as string
	while((line = pr.readLine()) != null) {
		line = String.strip(line)
		if(line != null && String.startsWith(line, "#")) {
			continue
		}
		if(String.isEmpty(line) == false) {
			break
		}
	}
	return(line)
}

func readPreformattedParagraph(id as string, pr as LineReader) as RichTextPreformattedParagraph
{
	var sb = new StringBuilder()
	var line as string
	while((line  = pr.readLine()) != null) {
		if(String.startsWith(line,"---") && String.endsWith(line, "---")) {
			var lid = String.subString(line, 3, String.getLength(line)-6)
			if(lid != null) {
				lid = String.strip(lid)
			}
			if(String.isEmpty(id)) {
				if(String.isEmpty(lid)) {
					break
				}
			}
			else if(String.equals(id, lid)) {
				break
			}
		}
		sb.append(line)
		sb.append('\n')
	}
	return(new RichTextPreformattedParagraph().setId(id).setText(sb.toString()))
}

func readBlockParagraph(id as string, pr as LineReader) as RichTextBlockParagraph
{
	var sb = new StringBuilder()
	var line as string
	while((line = pr.readLine()) != null) {
		if(String.startsWith(line, "--") && String.endsWith(line, "--")) {
			var lid = String.subString(line, 2, String.getLength(line)-4)
			if(lid != null) {
				lid = String.strip(lid)
			}
			if(String.isEmpty(id)) {
				if(String.isEmpty(lid)) {
					break
				}
			}
			else if(String.equals(id, lid)) {
				break
			}
		}
		sb.append(line)
		sb.append('\n')
	}
	return(new RichTextBlockParagraph().setId(id).setText(sb.toString()))
}

func processInput(pr as LineReader, doc as RichTextDocument) as bool
{
	var line = skipEmptyLines(pr)
	if(line == null) {
		return(false)
	}
	if(line == "-") {
		doc.addParagraph(new RichTextSeparatorParagraph())
		return(true)
	}
	if(String.startsWith(line, "@content ")) {
		var id = String.subString(line, 9)
		if(id != null) {
			id = String.strip(id)
		}
		doc.addParagraph(new RichTextContentParagraph().setContentId(id))
		return(true)
	}
	if(String.startsWith(line, "@image ")) {
		var ref = String.subString(line,7)
		if(ref != null) {
			ref = String.strip(ref)
		}
		doc.addParagraph(new RichTextImageParagraph().setFilename(ref))
		return(true)
	}
	if(String.startsWith(line, "@image100 ")) {
		var ref = String.subString(line,10)
		if(ref != null) {
			ref = String.strip(ref)
		}
		doc.addParagraph(new RichTextImageParagraph().setFilename(ref))
		return(true)
	}
	if(String.startsWith(line, "@image75 ")) {
		var ref = String.subString(line,9)
		if(ref != null) {
			ref = String.strip(ref)
		}
		doc.addParagraph(new RichTextImageParagraph().setFilename(ref).setWidth(75))
		return(true)
	}
	if(String.startsWith(line, "@image50 ")) {
		var ref = String.subString(line,9)
		if(ref != null) {
			ref = String.strip(ref)
		}
		doc.addParagraph(new RichTextImageParagraph().setFilename(ref).setWidth(50))
		return(true)
	}
	if(String.startsWith(line, "@image25 ")) {
		var ref = String.subString(line, 9)
		if(ref != null) {
			ref = String.strip(ref)
		}
		doc.addParagraph(new RichTextImageParagraph().setFilename(ref).setWidth(25))
		return(true)
	}
	if(String.startsWith(line, "@reference ")) {
		var ref = String.subString(line,11)
		if(ref != null) {
			ref = String.strip(ref)
		}
		var sq = String.quotedStringToVector(ref, ' ')
		var rrf = Vector.getAt(sq, 0)
		var txt = Vector.getAt(sq, 1)
		doc.addParagraph(new RichTextReferenceParagraph().setReference(rrf).setText(txt))
		return(true)
	}
	if(String.startsWith(line, "@set ")) {
		var link = String.subString(line, 5)
		if(link != null) {
			link = String.strip(link)
		}
		var sq = String.quotedStringToVector(link, ' ')
		var key = Vector.getAt(sq, 0)
		var val = Vector.getAt(sq, 1)
		if(String.isEmpty(key)) {
			return(true)
		}
		doc.setMetadata(key, val)
		return(true)
	}
	if(String.startsWith(line, "@link ")) {
		var link = String.subString(line, 6)
		if(link != null) {
			link = String.strip(link)
		}
		var sq =String.quotedStringToVector(link, ' ')
		var url = Vector.getAt(sq, 0)
		var txt = Vector.getAt(sq, 1)
		var flags = Vector.getAt(sq, 2)
		if(String.isEmpty(txt)) {
			txt = url
		}
		var v = new RichTextLinkParagraph()
		v.setLink(url)
		v.setText(txt)
		if(String.equals("internal", flags)) {
			v.setPopup(false)
		}
		else {
			v.setPopup(true)
		}
		doc.addParagraph(v)
		return(true)
	}
	if(String.startsWith(line,"---") && String.endsWith(line, "---")) {
		var id = String.subString(line, 3, String.getLength(line)-6)
		if(id != null) {
			id = String.strip(id)
		}
		if(String.isEmpty(id)) {
			id = null
		}
		doc.addParagraph(readPreformattedParagraph(id, pr))
		return(true)
	}
	if(String.startsWith(line,"--") && String.endsWith(line, "--")) {
		var id = String.subString(line, 2, String.getLength(line) - 4)
		if(id != null) {
			id = String.strip(id)
		}
		if(String.isEmpty(id)) {
			id = null
		}
		doc.addParagraph(readBlockParagraph(id, pr))
		return(true)
	}
	var sb = new StringBuilder()
	var pc = 0 as char
	do {
		line = String.strip(line)
		if(String.isEmpty(line)) {
			break
		}
		if(String.startsWith(line,"#") == false) {
			var it = String.iterate(line)
			var c as char
			if(sb.count() > 0 && pc != ' ') {
				sb.append(' ')
				pc = ' '
			}
			while((c = it.getNextChar()) > 0) {
				if(c == ' ' || c == '\t' || c == '\r' || c == '\n') {
					if(pc == ' ') {
						continue
					}
					c = ' '
				}
				sb.append(c)
				pc = c
			}
		}
	}
	while((line = pr.readLine()) != null)
	var s = sb.toString()
	if(String.isEmpty(s)) {
		return(false)
	}
	doc.addParagraph(RichTextStyledParagraph.forString(s))
	return(true)
}

func parse as RichTextDocument
{
	var pr as LineReader
	if(file != null) {
		pr = PrintReader.forReader(file.read())
	}
	else if(data != null) {
		pr = new StringLineReader(data)
	}
	if(pr == null) {
		return(null)
	}
	var v = new RichTextDocument()
	while(processInput(pr, v)) {
		; // continue
	}
	return(v)
}
