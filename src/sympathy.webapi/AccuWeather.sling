
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

import capex.http

class MyHTTPClientListener is HTTPClientListener
{
	prop listener as function<void, buffer, Error>
	var body as buffer

	func onError(message as string) override
	{
		if listener:
			listener(null, Error.forMessage(message))
	}

	func onAborted override
	{
		if listener:
			listener(null, Error.forCode("aborted"))
	}

	func onDataReceived(buffer as buffer) override as bool
	{
		body = Buffer.append(body, buffer)
		return true
	}

	func onResponseCompleted override
	{
		base.onResponseCompleted()
		if listener {
			if not body {
				listener(null, Error.forMessage("No data received from AccuWeather"))
				return
			}
			listener(body, null)
		}
	}
}

prop apiKey as string
prop locationHost = "http://dataservice.accuweather.com/locations/"
prop currentConditionHost = "http://dataservice.accuweather.com/currentconditions/"
prop forecastHost = "http://dataservice.accuweather.com/forecasts/"
prop version = "v1"
prop details = true
prop metric = true

func forApiKey(key as string) static as this
{
	if String.isEmpty(key):
		return null
	return new this().setApiKey(key)
}

func queryLocation(latitude as double, longitude as double, listener as function<void, DynamicMap, Error>)
{
	var op = new HTTPClientOperation()
	var req = HTTPClientRequest.forGET(locationHost .. version .. "/cities/geoposition/search.json?q=" .. String.forDouble(latitude) .. "," .. String.forDouble(longitude) .. "&apikey=" .. apiKey)
	op.executeRequest(req, new MyHTTPClientListener().setListener(func(buff as buffer, err as Error) {
		if err {
			listener(null, err)
			return
		}
		var data = JSONParser.parse(buff) as DynamicMap
		if not data {
			listener(null, Error.forMessage("Invalid JSON format from AccuWeather"))
			return
		}
		listener(data, null)
	}))
}

func queryCurrentCondition(key as string, listener as function<void, DynamicMap, Error>)
{
	var op = new HTTPClientOperation()
	var req = HTTPClientRequest.forGET(currentConditionHost .. version .."/" .. key .. "?apikey=" .. apiKey .. "&details=" .. String.forBoolean(details))
	op.executeRequest(req, new MyHTTPClientListener().setListener(func(buff as buffer, err as Error) {
		if err {
			listener(null, err)
			return
		}
		var data = JSONParser.parse(buff) as DynamicVector
		if not data {
			listener(null, Error.forMessage("Invalid data from AccuWeather"))
			return
		}
		var currentCondition = data.get(0) as DynamicMap
		if not currentCondition {
			listener(null, Error.forMessage("Invalid JSON format from AccuWeather"))
			return
		}
		listener(currentCondition, null)
	}))
}

func queryForecast(key as string, forecastDays as int, listener as function<void, DynamicMap, Error>)
{
	var op = new HTTPClientOperation()
	var req = HTTPClientRequest.forGET(forecastHost .. version .."/daily/".. String.forInteger(forecastDays) .."day/" .. key .. "?apikey=" .. apiKey .. "&metric=" .. String.forBoolean(metric))
	op.executeRequest(req, new MyHTTPClientListener().setListener(func(buff as buffer, err as Error) {
		if err {
			listener(null, err)
			return
		}
		var data = JSONParser.parse(buff) as DynamicMap
		if not data {
			listener(null, Error.forMessage("Invalid JSON format from AccuWeather"))
			return
		}
		listener(data, null)
	}))
}
