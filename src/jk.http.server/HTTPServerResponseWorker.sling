
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.time
import jk.text

class abstract:

var context protected as LoggingContext
var session protected as HTTPServerResponseSession
var startTime as TimeValue

func setContext(v as LoggingContext) as this
{
	context = v
	return this
}

func getContext as LoggingContext:
	return context

func setSession(v as HTTPServerResponseSession) as this
{
	session = v
	return this
}

func getSession as HTTPServerResponseSession:
	return session

func getMimeType abstract as string

func getWorkerDescription abstract as string

func onStart virtual
{
	startTime = SystemClock.asTimeValue()
	Log.debug(context, "Response worker `" .. getWorkerDescription() .. "' started.")
	session.writeHeader()
}

func tick virtual as bool
{
	execute()
	return false
}

func execute virtual
{
}

func onEnd virtual
{
	session.end()
	var diff = StringUtil.formatLongInteger(TimeValue.diff(SystemClock.asTimeValue(), startTime), ',')
	Log.debug(context, "Response worker `" .. getWorkerDescription() .. "' ended. Wrote " .. StringUtil.formatInteger(session.getTotalBytes(), ',') .. " bytes. Duration=" .. diff .. " us")
}

func abort
{
	if session:
		session.end()
}
