
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

class NullObject public
{
}

func parse(buffer as buffer) static as object
{
	if buffer == null:
		return null
	return forBuffer(buffer).acceptObject()
}

func parse(str as string) static as object
{
	if String.isEmpty(str):
		return null
	return forString(str).acceptObject()
}

func parse(file as File) static as object
{
	if file == null:
		return null
	return parse(file.getContentsUTF8())
}

func forString(str as string) static as this
{
	var v = new this()
	v.setDataString(str)
	return v
}

func forBuffer(buffer as buffer) static as this
{
	var v = new this()
	v.setDataBuffer(buffer)
	return v
}

var iterator as CharacterIterator

func setDataString(str as string)
{
	iterator = CharacterIteratorForString.forString(str)
	iterator.moveToNextChar()
}

func setDataBuffer(buffer as buffer)
{
	iterator = CharacterIteratorForBuffer.forBuffer(buffer)
	iterator.moveToNextChar()
}

func skipSpaces private
{
	loop {
		if iterator.hasEnded():
			break
		var c = iterator.getCurrentChar()
		if c == ' ' || c == '\t' || c == '\r' || c == '\n' {
			iterator.moveToNextChar()
			continue
		}
		break
	}
}

func acceptChar(c as char) private as bool
{
	skipSpaces()
	if iterator.getCurrentChar() == c {
		iterator.moveToNextChar()
		return true
	}
	return false
}

func acceptString private as string
{
	skipSpaces()
	var ss = iterator.getCurrentChar()
	if ss != '\'' && ss != '"':
		return null
	var i = 0
	var sb = new StringBuilder()
	loop {
		var c = iterator.getNextChar()
		i ++
		if Character.isEOF(c) {
			for(var n = 0 ; n < i ; n++):
				iterator.moveToPreviousChar()
			return null
		}
		if c == ss {
			iterator.moveToNextChar()
			break
		}
		if c == '\\' {
			c = iterator.getNextChar()
			if c == 'u' {
				var v = new StringBuilder()
				var x = 0
				while x < 4 {
					if iterator.hasEnded():
						break
					v.append(iterator.getNextChar())
					x++
				}
				c = String.toIntegerFromHex(v.toString()) as char
			}
			else if c == 't' {
				c = '\t'
			}
			else if c == 'r' {
				c = '\r'
			}
			else if c == 'n' {
				c = '\n'
			}
			else if c == 'b' {
				c = '\b'
			}
			else if c == 'f' {
				c = '\f'
			}
		}
		sb.append(c)
	}
	return sb.toString()
}

func acceptBoolean private as BooleanObject
{
	skipSpaces()
	var ss = iterator.getCurrentChar()
	if ss != 't' && ss != 'f':
		return null
	var sb = new StringBuilder()
	sb.append(ss)
	var li = 5
	if ss == 't':
		li = 4
	var btc = 0
	loop {
		var c = iterator.getNextChar()
		btc++
		if c != 'a' && c != 'l' && c != 's' && c != 'e' && c != 'r' && c != 'u' {
			iterator.moveToNextChar()
			btc++
			break
		}
		sb.append(c)
		if sb.count() == li {
			iterator.moveToNextChar()
			btc++
			break
		}
	}
	var v = sb.toString()
	if li == 4 && "true" == v:
		return Boolean.asObject(true)
	if li == 5 && "false" == v:
		return Boolean.asObject(false)
	var i = 0
	while i < btc {
		iterator.moveToPreviousChar()
		i++
	}
	return null
}

func acceptNumber private as object
{
	skipSpaces()
	var ss = iterator.getCurrentChar()
	if ss != '-' && ss != '+' && ss != '.' && (ss < '0' || ss > '9'):
		return null
	var sb = new StringBuilder()
	sb.append(ss)
	loop {
		var c = iterator.getNextChar()
		if c != '.' && c != 'e' && c != 'E' && c != '-' && (c < '0' || c > '9'):
			break
		sb.append(c)
	}
	var s = sb.toString()
	if String.getIndexOf(s, '.') > -1:
		return Double.asObject(Double.asDouble(s))
	var value = String.toLong(s)
	if value >= -2147483648L && value <= 2147483647L:
		return Integer.asObject(value as int)
	return LongInteger.asObject(value)
}

func acceptNull private as NullObject
{
	skipSpaces()
	var ss = iterator.getCurrentChar()
	if ss != 'n':
		return null
	var sb = new StringBuilder()
	sb.append(ss)
	var btc = 0
	loop {
		var c = iterator.getNextChar()
		btc++
		if c != 'u' && c != 'l' {
			iterator.moveToNextChar()
			btc++
			break
		}
		sb.append(c)
		if sb.count() == 4 {
			iterator.moveToNextChar()
			btc++
			break
		}
	}
	if "null" == sb.toString():
		return new NullObject()
	var i = 0
	while i < btc {
		iterator.moveToPreviousChar()
		i++
	}
	return null
}

func acceptObject private as object
{
	if acceptChar('[') {
		var v = new DynamicVector()
		loop {
			if acceptChar(']'):
				break
			var o = acceptObject()
			if o == null:
				return null
			v.append(o)
			acceptChar(',')
		}
		return v
	}
	if acceptChar('{') {
		var v = new DynamicMap()
		loop {
			if acceptChar('}'):
				break
			var key = acceptString()
			if key == null:
				return null
			if acceptChar(':') == false:
				return null
			var val = acceptObject()
			if val == null:
				return null
			if val is NullObject {
				v.set(key, null)
			}
			else {
				v.set(key, val)
			}
			acceptChar(',')
		}
		return v
	}
	var s = acceptString()
	if s:
		return s
	var b = acceptBoolean()
	if b:
		return b
	var n = acceptNull()
	if n:
		return n
	var v = acceptNumber()
	if v:
		return v
	return null
}

func getNextToken as object
{
	if acceptChar('['):
		return "["
	if acceptChar(']'):
		return "]"
	if acceptChar('{'):
		return "{"
	if acceptChar('}'):
		return "}"
	if acceptChar(','):
		return ","
	var s = acceptString()
	if s:
		return s
	var b = acceptBoolean()
	if b:
		return b
	var n = acceptNull()
	if n:
		return n
	var v = acceptNumber()
	if v:
		return v
	return null
}

func pushData(string as string)
{
	assert string
	if iterator == null {
		setDataString(string)
		return
	}
	var sb = new StringBuilder()
	loop {
		var c = iterator.getNextChar()
		if Character.isEOF(c):
			break
		sb.append(c)
	}
	sb.append(string)
	setDataString(sb.toString())
}
