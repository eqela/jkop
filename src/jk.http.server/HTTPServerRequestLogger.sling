
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.log
import jk.time
import jk.io

class is HTTPServerRequestHandlerListener:

pvar logdir as File
pvar logContext as LoggingContext

func onRequestHandled(request as HTTPServerRequest, resp as HTTPServerResponse, written as int, aremoteAddress as string)
{
	var remoteAddress = aremoteAddress
	if String.isEmpty(remoteAddress):
		remoteAddress = "-"
	var username as string = null
	if String.isEmpty(username):
		username = "-"
	var sessionid as string = null
	if String.isEmpty(sessionid):
		sessionid = "-"
	var dt = SystemClock.asDateTimeUTC()
	var logTime as string
	if dt {
		logTime = String.forInteger(dt.getDayOfMonth()) .. "/" ..
			String.forInteger(dt.getMonth()) .. "/" ..
			String.forInteger(dt.getYear()) .. "/" ..
			String.forInteger(dt.getHours()) .. "/" ..
			String.forInteger(dt.getMinutes()) .. "/" ..
			String.forInteger(dt.getSeconds()) .. " UTC"
	}
	else {
		logTime = "[DATE/TIME]"
	}
	var rf = request.getHeader("referer")
	if String.isEmpty(rf):
		rf = "-"
	var logLine = remoteAddress .. " " .. username .. " " .. sessionid .. " [" .. logTime .. "] \"" .. request.getMethod() .. " " .. request.getURLPath() .. " " .. request.getVersion() .. "\" " .. resp.getStatus() .. " " .. String.forInteger(written) .. " \"" .. rf .. "\" \"" .. request.getHeader("user-agent") .. "\""
	if logdir {
		var logidname as string
		if dt {
			logidname = "accesslog_" .. String.forInteger(dt.getYear()) .. String.forInteger(dt.getMonth()) .. String.forInteger(dt.getDayOfMonth()) .. ".log"
		}
		else {
			logidname = "accesslog.log"
		}
		var os = PrintWriterWrapper.forWriter(logdir.entry(logidname).append())
		if os == null && logdir.isDirectory() == false {
			logdir.createDirectoryRecursive()
			os = PrintWriterWrapper.forWriter(logdir.entry(logidname).append())
		}
		if os:
			os.println(logLine)
		Log.debug(logContext, logLine)
	}
	else {
		if logContext {
			Log.info(logContext, logLine)
		}
		else {
			println logLine
		}
	}
}
