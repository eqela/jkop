
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is cape.Iterator<cape.DynamicMap> abstract imports cape:

func next abstract as DynamicMap
func nextValues(values as vector<object>) abstract as bool
func step abstract as bool
func getColumnCount abstract as int
func getColumnName(n as int) abstract as string
func getColumnNames abstract as vector<string>
func getColumnObject(n as int) abstract as object
func getColumnInt(n as int) abstract as int
func getColumnLong(n as int) abstract as long
func getColumnDouble(n as int) abstract as double
func getColumnBuffer(n as int) abstract as buffer
func close abstract

**
** Converts the data into an instance of DynamicVector
** of records. Each record is an instance of DynamicMap.
**

func toVectorOfMaps as DynamicVector
{
	var v = new DynamicVector()
	loop {
		var o = next()
		if o == null:
			break
		v.append(o)
	}
	return v
}

**
** Converts the data into a vector of records.
** Each record is a vector of column objects.
** The first record is a vector of column names.
**

func toVectorList as vector
{
	var data = new vector
	var cc = getColumnCount()
	var cols = new vector
	Vector.setCapacity(cols, cc)
	for(var n = 0 ; n < cc ; n++):
		cols += getColumnName(n)
	data += cols
	loop {
		if not step():
			break
		var record = new vector
		Vector.setCapacity(record, cc)
		for(var n = 0 ; n < cc ; n++) {
			var co = getColumnObject(n)
			if co == null:
				co = ""
			record += co
		}
		data += record
	}
	return data
}

**
** Encodes the column name(s) into a vector as a string and
** appends it to the supplied instance of StringBuilder.
**

func headerJSON(sb as StringBuilder)
{
	sb.append('[')
	var cc = getColumnCount()
	for(var n = 0 ; n < cc ; n++) {
		if n > 0:
			sb.append(',')
		JSONEncoder.encodeStringToBuilder(getColumnName(n), sb)
	}
	sb.append(']')
}

**
** Encodes the next record into a vector of objects as a string and
** appends it to the supplied instance of StringBuilder.
** Returns false if there is no record left to encode.
**

func nextJSON(sb as StringBuilder) as bool
{
	if not step():
		return false
	var cc = getColumnCount()
	sb.append(",[")
	for(var n = 0 ; n < cc ; n++) {
		if n > 0:
			sb.append(',')
		JSONEncoder.encodeStringToBuilder(String.asString(getColumnObject(n)), sb)
	}
	sb.append(']')
	return true
}

**
** Encodes the data into a string with a vector list JSON format.
**

func toVectorListJSON as string
{
	var sb = new StringBuilder()
	sb.append('[')
	headerJSON(sb)
	loop {
		if not nextJSON(sb):
			break
	}
	sb.append(']')
	return sb.toString()
}
