
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func createClassInstance(qualifiedName as string) static as object
{
	// FIXME
	return null
}

func callMethod(object as object, methodName as string, arguments as array<dynamic>) static as dynamic
{
	// FIXME
	return null
}

func getDataTypeName(variable as dynamic) static as string
{
	IFDEF "target_sushi" {
		if variable is string {
			return "string"
		}
		else if variable is function {
			return "function"
		}
		else if variable is boolean {
			return "boolean"
		}
		else if variable is int {
			return "integer"
		}
		else if variable is float {
			return "float"
		}
		else if variable is double {
			return "double"
		}
		else if variable is char {
			return "character"
		}
		else {
			var qualifiedName as string
			lang "lua" {{{
				qualifiedName = variable._qualifiedClassName
			}}}
			if String.isNotEmpty(qualifiedName):
				return "class:" .. qualifiedName
		}
	}
	return "unknown"
}

func isSubClassOf(subclass as typeinfo, parentclass as typeinfo) static as bool
{
	IFDEF "target_cs" {
		assert subclass
		assert parentclass
		return lang "cs" bool {{{ parentclass.IsAssignableFrom(subclass) }}}
	}
	ELSE IFDEF "target_sushi" {
		assert subclass
		assert parentclass
		var sc = lang "lua" string {{{ subclass }}}
		var pc = lang "lua" string {{{ parentclass }}}
		if String.startsWith(sc, "class:") == false:
			return false
		if String.startsWith(pc, "class:") == false:
			return false
		sc = String.getSubString(sc, 6)
		pc = String.getSubString(pc, 6)
		var o = assert createClassInstance(sc)
		var v = false
		lang "lua" {{{
			if o['_isType.' .. pc] then
				v = true
			end
		}}}
		return v
	}
	ELSE {
		ERROR "Not implemented"
		return false
	}
}
