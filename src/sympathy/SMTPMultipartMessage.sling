
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is SMTPMessage imports capex.util, capex.crypto:

ctor
{
	setContentType("multipart/mixed")
}

prop attachments as DynamicVector
var message as string

func getMessageBody override as string
{
	if(attachments == null || attachments.getSize() < 1) {
		return(null)
	}
	if(String.isEmpty(message) == false) {
		return(message)
	}
	var subject = getSubject()
	var date = getDate()
	var myName = getMyName()
	var myAddress = getMyAddress()
	var text = getText()
	var recipientsTo = getRcptsTo()
	var recipientsCC = getRcptsCC()
	var messageID = getMessageID()
	var replyTo = getReplyTo()
	var sb = new StringBuilder()
	sb.append("From: ")
	sb.append(myName)
	sb.append(" <")
	sb.append(myAddress)
	if(String.isEmpty(replyTo) == false) {
		sb.append(">\r\nReply-To: ")
		sb.append(myName)
		sb.append(" <")
		sb.append(replyTo)
	}
	sb.append(">\r\nTo: ")
	var first = true
	if(recipientsTo != null) {
		foreach(to as string in recipientsTo.toVector()) {
			if(first == false) {
				sb.append(", ")
			}
			sb.append(to)
			first = false
		}
	}
	sb.append("\r\nCc: ")
	first = true
	if(recipientsCC != null) {
		foreach(to as string in recipientsCC.toVector()) {
			if(first == false) {
				sb.append(", ")
			}
			sb.append(to)
			first = false
		}
	}
	// FIXME - How about the BCC?
	sb.append("\r\nSubject: ")
	sb.append(subject)
	sb.append("\r\nMIME-Version: 1.0")
	sb.append("\r\nContent-Type: ")
	sb.append("multipart/mixed")
	sb.append("; boundary=\"XXXXboundarytext\"")
	sb.append("\r\nDate: ")
	sb.append(date)
	sb.append("\r\nMessage-ID: <")
	sb.append(messageID)
	sb.append(">\r\n\r\n")
	sb.append("This is a multipart message in MIME format.")
	sb.append("\r\n")
	sb.append("\r\n--XXXXboundarytext")
	sb.append("\r\nContent-Type: text/plain")
	sb.append("\r\n")
	sb.append("\r\n")
	sb.append(text)
	foreach(file as File in attachments.toVector()) {
		sb.append("\r\n--XXXXboundarytext")
		sb.append("\r\nContent-Type: ")
		var contentType = MimeTypeRegistry.typeForFile(file)
		if(String.isEmpty(contentType) == false && String.getIndexOf(contentType, "text") == 0) {
			sb.append(contentType)
			sb.append("\r\nContent-Disposition: attachment; filename=")
			sb.append(file.getBasename())
			sb.append("\r\n")
			sb.append("\r\n")
			sb.append(file.getContentsUTF8())
		}
		else {
			sb.append(contentType)
			sb.append("\r\nContent-Transfer-Encoding: Base64")
			sb.append("\r\nContent-Disposition: attachment filename=")
			sb.append(file.getBasename())
			sb.append("\r\n")
			sb.append("\r\n")
			sb.append(Base64Encoder.encode(file.getContentsBuffer()))
		}
	}
	sb.append("\r\n")
	sb.append("\r\n--XXXXboundarytext--")
	return(message = sb.toString())
}
