
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.gfx.util

class is WidgetWithLayout #widget:

func forImage(context as GuiApplicationContext, image as Image) static as this
{
	var v = new this(context)
	v.setWidgetImage(image)
	return v
}

func forImageResource(context as GuiApplicationContext, resName as string) static as this
{
	var v = new this(context)
	v.setWidgetImageResource(resName)
	return v
}

IFDEF "target_ios"
{
	extend !"UIImageView"
	isAlso Widget

	IFDEF "target_objc" {
		depend "objc-header-m:<UIKit/UIKit.h>"
	}
	ELSE IFDEF "target_swift" {
		depend "swift-import:UIKit"
	}
}

IFDEF "target_android"
{
	extend !"android.widget.ImageView"
	isAlso Widget
}

IFDEF "target_html"
{
	is Widget

	func createElement override as object:
		return HTMLDOM.createElement("img")
}

IFDEF "target_uwp"
{
	// FIXME
	extend !"Windows.UI.Xaml.Controls.Control"
	isAlso Widget
}

const STRETCH = 0
const FIT = 1
const FILL = 2

var widgetContext as GuiApplicationContext
var widgetImage as Image
prop widgetImageWidth #notLiteral = 0
prop widgetImageHeight #notLiteral = 0
prop widgetImageRounded = false
var widgetImageScaleMethod = 0
var lastLayoutWidth = 0

ctor(context as GuiApplicationContext)
{
	IFDEF "target_android" {
		base((context as! GuiApplicationContextForAndroid).getActivityContext())
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			super.init(frame: CGRect.zero)
		}}}
	}
	widgetContext = context
	setWidgetImageScaleMethod(STRETCH)
}

func setWidgetImageScaleMethod(method as int)
{
	widgetImageScaleMethod = method
	IFDEF "target_html" {
		if method == STRETCH {
			HTMLDOM.setStyle(element, "object-fit", "fill")
		}
		else if method == FIT {
			HTMLDOM.setStyle(element, "object-fit", "contain")
		}
		else if method == FILL {
			HTMLDOM.setStyle(element, "object-fit", "cover")
		}
		else {
			Log.warning(widgetContext, "Unsupported image scale method: " .. String.forInteger(method))
			HTMLDOM.setStyle(element, "object-fit", "fill")
		}
	}
	ELSE IFDEF "target_ios" {
		if method == FIT {
			IFDEF "target_objc" {
				lang "objc" {{{
					[self setContentMode:UIViewContentModeScaleAspectFit];
				}}}
			}
			ELSE IFDEF "target_swift" {
				lang "swift" {{{
					self.contentMode = UIView.ContentMode.scaleAspectFit
				}}}
			}
		}
		else if method == FILL {
			IFDEF "target_objc" {
				lang "objc" {{{
					[self setClipsToBounds: YES];
					[self setContentMode:UIViewContentModeScaleAspectFill];
				}}}
			}
			ELSE IFDEF "target_swift" {
				lang "swift" {{{
					self.clipsToBounds = true
					self.contentMode = UIView.ContentMode.scaleAspectFill
				}}}
			}
		}
		else {
			if method != STRETCH:
				Log.warning(widgetContext, "Unsupported image scale method: " .. String.forInteger(method))
			IFDEF "target_objc" {
				lang "objc" {{{
					[self setContentMode:UIViewContentModeScaleToFill];
				}}}
			}
			ELSE IFDEF "target_swift" {
				lang "swift" {{{
					self.contentMode = UIView.ContentMode.scaleAspectFill
				}}}
			}
		}
	}
	ELSE IFDEF "target_android" {
		IFDEF "target_java" {
			if method == FIT {
				lang "java" {{{
					setScaleType(android.widget.ImageView.ScaleType.CENTER_INSIDE);
				}}}
			}
			else if method == FILL {
				lang "java" {{{
					setScaleType(android.widget.ImageView.ScaleType.CENTER_CROP);
				}}}
			}
			else {
				if method != STRETCH:
					Log.warning(widgetContext, "Unsupported image scale method: " .. String.forInteger(method))
				lang "java" {{{
					setScaleType(android.widget.ImageView.ScaleType.FIT_XY);
				}}}
			}
		}
		ELSE IFDEF "target_kotlin" {
			if method == FIT {
				lang "kotlin" {{{
					setScaleType(android.widget.ImageView.ScaleType.CENTER_INSIDE)
				}}}
			}
			else if method == FILL {
				lang "kotlin" {{{
					setScaleType(android.widget.ImageView.ScaleType.CENTER_CROP)
				}}}
			}
			else {
				if method != STRETCH:
					Log.warning(widgetContext, "Unsupported image scale method: " .. String.forInteger(method))
				lang "kotlin" {{{
					setScaleType(android.widget.ImageView.ScaleType.FIT_XY)
				}}}
			}
		}
	}
	ELSE {
		ERROR "Not implemented"
	}
}

func setWidgetImage(image as Image)
{
	if widgetImageRounded {
		widgetImage = ImageUtil.createCircularImageSync(image)
	}
	else {
		widgetImage = image
	}
	IFDEF "target_android" {
		var ifa = widgetImage as ImageForAndroid
		if ifa == null {
			base.setImageBitmap(null)
		}
		else {
			base.setImageBitmap(ifa.getAndroidBitmap())
		}
	}
	ELSE IFDEF "target_html" {
		var src as string
		var img = widgetImage as ImageForBrowser
		if img {
			var bm = img.image
			if bm:
				src = lang "js" string {{{ bm.src }}}
			HTMLDOM.removeStyle(element, "display")
		}
		else {
			HTMLDOM.setStyle(element, "display", "none")
		}
		HTMLDOM.setAttribute(element, "src", src)
	}
	ELSE IFDEF "target_ios" {
		var uiImage as !"UIImage"
		var img = image as ImageForIOS
		if img:
			uiImage = img.uiImage
		IFDEF "target_objc" {
			lang "objc" {{{
				[self setImage:uiImage];
			}}}
		}
		ELSE IFDEF "target_swift" {
			lang "swift" {{{
				self.image = uiImage
			}}}
		}
	}
	ELSE {
		ERROR "Not implemented"
	}
	Widget.onLayoutChanged(this)
}

func setWidgetImageResource(resName as string)
{
	var img as Image
	if String.isEmpty(resName) == false && widgetContext {
		img = widgetContext.getResourceImage(resName)
		if img == null:
			Log.error(widgetContext, "Failed to get resource image: `" .. resName .. "'")
	}
	setWidgetImage(img)
}

func setWidgetLayoutChanged
{
}

func hasWidgetLayoutChanged as bool:
	return false

func layoutWidget(widthConstraint as int #notLiteral, force as bool) as bool
{
	if widthConstraint >= 0 && widthConstraint == lastLayoutWidth:
		return true
	if widgetImage == null {
		Widget.setLayoutSize(this, widgetImageWidth, widgetImageHeight)
		lastLayoutWidth = Widget.getWidth(this)
		return true
	}
	if widthConstraint < 0 && widgetImageWidth < 1 && widgetImageHeight < 1:
		return false
	var width = -1
	var height = -1
	if widgetImageWidth > 0 && widgetImageHeight > 0 {
		width = widgetImageWidth
		height = widgetImageHeight
	}
	else if widgetImageWidth > 0 {
		width = widgetImageWidth
	}
	else if widgetImageHeight > 0 {
		height = widgetImageHeight
	}
	else {
		width = widthConstraint
	}
	if width > 0 && widthConstraint >= 0 && width > widthConstraint {
		width = widthConstraint
		height = -1
	}
	if height < 0:
		height = widgetImage.getPixelHeight() * width / widgetImage.getPixelWidth()
	if width < 0:
		width = widgetImage.getPixelWidth() * height / widgetImage.getPixelHeight()
	Widget.setLayoutSize(this, width, height)
	lastLayoutWidth = Widget.getWidth(this)
	return true
}
