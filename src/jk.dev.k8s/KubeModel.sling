
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

model Time #dynamic
{
	// FIXME: ?
}

model FieldsV1 #dynamic
{
	// FIXME: ?
}

model ManagedFieldsEntry #dynamic
{
	apiVersion as string
	fieldsType as string
	fieldsV1 as FieldsV1
	manager as string
	operation as string
	time as Time
}

model OwnerReference #dynamic
{
	apiVersion as string
	blockOwnerDeletion as bool
	controller as bool
	kind as string
	name as string
	uid as string
}

model ObjectMeta #dynamic
{
	annotations as DynamicMap
	clusterName as string
	creationTimestamp as Time
	deletionGracePeriodSeconds as int
	deletionTimestamp as Time
	finalizers as string[]
	generateName as string
	generation as int
	labels as DynamicMap
	managedFields as ManagedFieldsEntry[]
	name as string
	namespace as string
	ownerReferences as OwnerReference[]
	resourceVersion as string
	selfLink as string
	uid as string
}

model ListMeta #dynamic
{
	continue as string
	remainingItemCount as int
	resourceVersion as string
	selfLink as string
}

model ServicePort #dynamic
{
	appProtocol as string
	name as string
	nodePort as int
	port as int
	protocol as string
	targetPort as string
}

model ClientIPConfig #dynamic
{
	timeoutSeconds as int
}

model SessionAffinityConfig #dynamic
{
	clientIP as ClientIPConfig
}

model ServiceSpec #dynamic
{
	allocateLoadBalancerNodePorts as bool
	clusterIP as string
	clusterIPs as string[]
	externalIPs as string[]
	externalName as string
	externalTrafficPolicy as string
	healthCheckNodePort as int
	ipFamilies as string[]
	ipFamilyPolicy as string
	loadBalancerIP as string
	loadBalancerSourceRanges as string[]
	ports as ServicePort[]
	publishNotReadyAddresses as bool
	selector as DynamicMap
	sessionAffinity as string
	sessionAffinityConfig as SessionAffinityConfig
	topologyKeys as string[]
	type as string
}

model ServiceStatus #dynamic
{
	apiVersion as string
	items as Service[]
	kind as string
	metadata as ListMeta
}

model Service #dynamic
{
	apiVersion as string
	kind as string
	metadata as ObjectMeta
	spec as ServiceSpec
	status as ServiceStatus
}

model ServiceList #dynamic
{
	apiVersion as string
	items as Service[]
	kind as string
	metadata as ListMeta
}
