
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.time

class #widget:

class MyContainerWidget is ContainerWidget private #widget
{
	class MyChild
	{
		var widget public as Widget
		var x public as int
	}

	ctor(ctx as GuiApplicationContext)
	{
		base(ctx)
		children = new vector<MyChild>
	}

	var animating as bool
	var children as vector<MyChild>
	var currentIndex as int
	var widgetWidth as int
	pvar widgetAnimationDuration as long = 1000
	pvar widgetAnimationProgressListener as function<void, double>
	pvar widgetCurrentWidgetChangeListener as function<void, int, Widget>

	func onWidgetHeightChanged(height as int #notLiteral) override
	{
		base.onWidgetHeightChanged(height)
		foreach child in Widget.getChildren(this):
			Widget.resizeHeight(child, height)
	}

	func computeWidgetLayout(widthConstraint as int #notLiteral) override
	{
		var widgets = Widget.getChildren(this)
		var childCount = sizeof widgets
		var wc = widthConstraint
		var mw as int
		var mh as int
		foreach child in widgets {
			Widget.layout(child, wc)
			var tw = Widget.getWidth(child)
			if tw > mw:
				mw = tw
			var th = Widget.getHeight(child)
			if th > mh:
				mh = th
		}
		for(var i = 0; i < childCount; i++) {
			children[i].x = i*mw
			Widget.move(children[i].widget, children[i].x, 0)
		}
		widgetWidth = mw
		Widget.setLayoutSize(this, mw, 0)
		updateChildren()
	}

	func moveToNext as bool
	{
		if currentIndex == sizeof children - 1:
			return false
		return moveToIndex(currentIndex + 1)
	}

	func moveToPrevious as bool
	{
		if currentIndex == 0:
			return false
		return moveToIndex(currentIndex - 1)
	}

	func moveToFirst as bool:
		return moveToIndex(0)

	func moveToIndex(index as int) as bool
	{
		if animating:
			return false
		var idx final = index
		if idx < 0 && idx > sizeof children - 1:
			return false
		var anim = WidgetAnimation.forDuration(context, widgetAnimationDuration)
		anim.addCallback(func(completion as double) {
			if completion > 1.0:
				completion = 1.0
			widgetAnimationProgressListener(completion)
			for(var i = 0; i < sizeof children; i++) {
				var child = children[i]
				var b = child.x
				var c = (i-idx) * widgetWidth
				var dx = ((c - b) * completion) + b as int
				Widget.move(child.widget, dx, 0)
			}
		})
		anim.setEndListener(func {
			updateChildren()
		})
		anim.start()
		animating = true
		return true
	}

	func updateChildren private
	{
		for(var i = 0; i < sizeof children; i++) {
			var child = children[i]
			child.x = Widget.getX(child.widget)
			if child.x == 0 {
				currentIndex = i
				widgetCurrentWidgetChangeListener(currentIndex, child.widget)
			}
		}
		animating = false
	}

	func addWidget(widget as Widget) override as ContainerWidget
	{
		var child = new MyChild()
		child.widget = widget
		children += child
		Widget.addChild(this, widget)
		return this
	}

	func clear
	{
		Widget.removeChildrenOf(this)
		Vector.clear(children)
		currentIndex = 0
	}
}

ui LayerWidget
{
	CanvasWidget background {
		color = Color.black()
	}
	MyContainerWidget carousell {
		animationProgressListener = func(completion as double) {
			if widgetAnimationProgressListener:
				widgetAnimationProgressListener(completion)
		}
		currentWidgetChangeListener = func(index as int, widget as Widget) {
			if widgetCurrentWidgetChangeListener:
				widgetCurrentWidgetChangeListener(index, widget)
		}
	}
}

pvar widgetAnimationProgressListener as function<void, double>
pvar widgetCurrentWidgetChangeListener as function<void, int, Widget>
pvar widgetAutoSwitch as bool
pvar widgetAutoSwitchInterval = 1.0
var timerRunning as bool

func initializeWidget override
{
	base.initializeWidget()
	if widgetAutoSwitch:
		start()
}

func start private
{
	if widgetAutoSwitchInterval < 1:
		return
	timerRunning = true
	onTick(SystemClock.asSeconds(), widgetAutoSwitchInterval * 1000 as long)
}

func stop private:
	timerRunning = false

func onTick(lastTick as long, timeoutSeconds as long) private
{
	var diff = SystemClock.asSeconds() - lastTick
	var nextTick = timeoutSeconds
	if diff > 0:
		nextTick -= diff
	var tos final = timeoutSeconds
	context.startTimer(nextTick, func {
		onPeriodicTimer()
		if timerRunning:
			onTick(SystemClock.asSeconds(), tos)
	})
}

func onPeriodicTimer
{
	if not widgetAutoSwitch:
		stop()
	if not carousell.moveToNext():
		carousell.moveToFirst()
}

func setWidgetBackgroundColor(color as Color):
	background.setWidgetColor(color)

func setWidgetAnimationDuration(duration as long):
	carousell.setWidgetAnimationDuration(duration)

func setWidgetEntry(widget as Widget):
	carousell.addWidget(widget)

func setWidgetSelected(index as int):
	carousell.moveToIndex(index)

func setWidgetToNext:
	carousell.moveToNext()

func setWidgetToPrevious:
	carousell.moveToPrevious()

func clearEntries:
	carousell.clear()
