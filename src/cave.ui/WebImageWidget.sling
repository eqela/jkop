
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is AsynchronousImageWidget imports capex.web #widget:

func forPlaceholderImage(context as GuiApplicationContext, image as Image) static as this
{
	var v = new this(context)
	v.setWidgetPlaceholderImage(image)
	return(v)
}

ctor(context as GuiApplicationContext)
{
	base(context)
}

func setWidgetImageResource(resName as string)
{
	var img = onStartLoading(false)
	if(img != null) {
		img.setWidgetImageResource(resName)
	}
	onEndLoading()
}

func setWidgetImage(image as Image)
{
	var img = onStartLoading(false)
	if(img != null) {
		img.setWidgetImage(image)
	}
	onEndLoading()
}

func setWidgetImageUrl(url as string, callback as function<void,Error> = null)
{
	setWidgetImageUrl(url, null, null, callback)
}

func setWidgetImageUrl(url as string, headers as KeyValueList<string,string>, body as buffer, callback as function<void,Error>)
{
	var client = NativeWebClient.instance()
	if(client == null) {
		Log.error(context, "Failed to create web client.")
		if(callback != null) {
			callback(Error.forCode("noWebClient"))
		}
		return
	}
	Log.debug(context, VALUE "__THIS__" .. ": Start loading image: `" .. url .."'")
	var img final = onStartLoading()
	var uu final = url
	var cb final = callback
	client.query("GET", url, headers, body, func(rcode as string, rheaders as KeyValueList<string,string>, rbody as buffer) {
		onEndLoading()
		if(rbody == null || Buffer.getSize(rbody) < 1) {
			Log.error(context, VALUE "__THIS__" .. ": FAILED loading image: `" .. uu .."'")
			if(cb != null) {
				cb(Error.forCode("failedToDownload"))
			}
			return
		}
		var mimeType as string
		var hdrv as vector<KeyValuePair<string,string>> #force = rheaders.asVector()
		foreach(hdr in hdrv) {
			if(String.equalsIgnoreCase(hdr.key, "content-type")) {
				var vv = hdr.value
				if(vv != null) {
					var sc = String.indexOf(vv, ';')
					if(sc < 0) {
						mimeType = vv
					}
					else {
						mimeType = String.getSubString(vv, sc)
					}
				}
			}
		}
		var imgo = context.getImageForBuffer(rbody, mimeType)
		if(imgo == null) {
			Log.error(context, VALUE "__THIS__" .. ": Failed to create image from the returned data")
			if(cb != null) {
				cb(Error.forCode("failedToCreateImage"))
			}
			return
		}
		Log.debug(context, VALUE "__THIS__" .. ": DONE loading image: `" .. uu .."'")
		img.setWidgetImage(imgo)
	})
}
