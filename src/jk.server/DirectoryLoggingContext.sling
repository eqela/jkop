
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.fs
import jk.io
import jk.console
import jk.time
import jk.text

class is LoggingContext:

func create(logDir as File, logIdPrefix as string = null, dbg as bool = true) static as this
{
	var v = new this()
	v.setLogDir(logDir)
	v.setEnableDebugMessages(dbg)
	if String.isNotEmpty(logIdPrefix):
		v.setLogIdPrefix(logIdPrefix)
	return v
}

prop logDir as File
prop logIdPrefix = "messages"
var currentLogIdName as string
var os as PrintWriter
var ctx as LoggingContext
var enableDebugMessages private = true
var alsoPrintOnConsole private = false
var errorCount private = 0
var warningCount private = 0
var infoCount private = 0
var debugCount private = 0

func setEnableDebugMessages(value as bool)
{
	enableDebugMessages = value
	var cac = ctx as ConsoleApplicationContext
	if cac:
		cac.setEnableDebugMessages(enableDebugMessages)
}

func setAlsoPrintOnConsole(value as bool)
{
	alsoPrintOnConsole = value
	if alsoPrintOnConsole {
		ctx = new ConsoleApplicationContext().setEnableDebugMessages(enableDebugMessages)
		return
	}
	ctx = null
}

func logError(text as string)
{
	message("ERROR", text)
	errorCount ++
}

func logWarning(text as string)
{
	message("WARNING", text)
	warningCount ++
}

func logInfo(text as string)
{
	message("INFO", text)
	infoCount ++
}

func logDebug(text as string)
{
	message("DEBUG", text)
	debugCount ++
}

func logStatus(text as string):
	message("STATUS", text)

func message(type as string, text as string) private
{
	if not enableDebugMessages && String.equalsIgnoreCase("debug", type):
		return
	var dt = SystemClock.asDateTimeUTC()
	var logTime as string
	if dt {
		logTime = String.forInteger(dt.getYear()) .. "-" ..
			String.forIntegerWithPadding(dt.getMonth(), 2) .. "-" ..
			String.forIntegerWithPadding(dt.getDayOfMonth(), 2) .. " " ..
			String.forIntegerWithPadding(dt.getHours(), 2) .. ":" ..
			String.forIntegerWithPadding(dt.getMinutes(), 2) .. ":" ..
			String.forIntegerWithPadding(dt.getSeconds(), 2) .. " UTC"
	}
	else {
		logTime = "DATE/TIME"
	}
	var logLine = "[" .. logTime .. "]: " .. text
	if alsoPrintOnConsole {
		if "ERROR" == type {
			Log.error(ctx, logLine)
		}
		else if "WARNING" == type {
			Log.warning(ctx, logLine)
		}
		else if "INFO" == type {
			Log.info(ctx, logLine)
		}
		else if "DEBUG" == type {
			Log.debug(ctx, logLine)
		}
		else if "STATUS" == type {
			Log.status(ctx, logLine)
		}
	}
	logLine = "[" .. StringUtil.padToLength(type, 7) .. "] " .. logLine
	if logDir {
		var logIdName as string
		if dt {
			logIdName = logIdPrefix .. "_" .. String.forInteger(dt.getYear()) .. String.forIntegerWithPadding(dt.getMonth(), 2) .. String.forIntegerWithPadding(dt.getDayOfMonth(), 2) .. ".log"
		}
		else {
			logIdName = logIdPrefix .. ".log"
		}
		if not os || currentLogIdName != logIdName {
			currentLogIdName = logIdName
			os = PrintWriterWrapper.forWriter(logDir.entry(currentLogIdName).append())
			if not os && not logDir.isDirectory() {
				logDir.createDirectoryRecursive()
				os = PrintWriterWrapper.forWriter(logDir.entry(currentLogIdName).append())
			}
		}
		if os {
			if not os.println(logLine):
				return
			if os is FlushableWriter:
				(os as! FlushableWriter).flush()
		}
	}
}

func isInDebugMode as bool:
	return enableDebugMessages

func getErrorCount as int:
	return errorCount

func getWarningCount as int:
	return warningCount

func getInfoCount as int:
	return infoCount

func getDebugCount as int:
	return debugCount

func resetCounters
{
	errorCount = 0
	warningCount = 0
	infoCount = 0
	debugCount = 0
}

dtor
{
	if os {
		if os is Closable:
			(os as! Closable).close()
		os = null
	}
}
