
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

**
** The Boolean class provides convenience methods for dealing with boolean values
** (either true or false).
**

class is BooleanObject:

**
** Returns the given boolean value as a BooleanObject (which is an object type)
** that can be used wherever an object is required.
**

func asObject(value as bool) static as this
{
	var v = new this()
	v.setValue(value)
	return v
}

**
** Converts the given object to a boolean value, as much as is possible. Various
** different objects can be supplied (including instances of BooleanObject, IntegerObject,
** StringObject, DoubleObject, CharacterObject, ObjectWithSize as well as strings.
**

func asBoolean(obj as dynamic, default as bool = false) static as bool
{
	if obj == null:
		return false
	if obj is bool:
		return obj as bool
	if obj is BooleanObject {
		var bo = obj as! BooleanObject
		return bo.toBoolean()
	}
	if obj is int {
		if obj as int == 0:
			return false
		return true
	}
	if obj is IntegerObject {
		if (obj as! IntegerObject).toInteger() == 0:
			return false
		return true
	}
	if obj is long {
		if obj as long == 0:
			return false
		return true
	}
	if obj is LongIntegerObject {
		if (obj as! LongIntegerObject).toLong() == 0:
			return false
		return true
	}
	if obj is string {
		var str = String.toLowerCase(obj as! string)
		if str == "yes" || str == "true" || str == "1":
			return true
		if str == "no" || str == "false" || str == "0":
			return false
		return default
	}
	if obj is StringObject {
		var str = (obj as! StringObject).toString()
		if str {
			str = String.toLowerCase(str)
			if str == "yes" || str == "true" || str == "1":
				return true
			if str == "no" || str == "false" || str == "0":
				return false
		}
		return default
	}
	if obj is double {
		if obj as double == 0.0:
			return false
		return true
	}
	if obj is DoubleObject {
		if (obj as! DoubleObject).toDouble() == 0.0:
			return false
		return true
	}
	if obj is char {
		if obj as int == 0:
			return false
		return true
	}
	if obj is CharacterObject {
		if ((obj as! CharacterObject).toCharacter() as int) == 0:
			return false
		return true
	}
	if obj is ObjectWithSize {
		var sz = (obj as! ObjectWithSize).getSize()
		if sz == 0:
			return false
		return true
	}
	return default
}

pvar value as bool

func toBoolean as bool:
	return value
