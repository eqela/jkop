
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.sql
import jk.http.server
import jk.log
import jk.text

class is HTTPServerResponseWorker:

func forResultSet(results as SQLResultSetIterator) static as this
{
	var v = new this()
	v.setResultSet(results)
	return v
}

pvar resultSet as SQLResultSetIterator
pvar recordsPerPacket = 100
var sb as StringBuilder
var totalRecords = 0L

func getMimeType override as string:
	return "application/json; charset=\"UTF-8\""

func getWorkerDescription override as string:
	return VALUE "__THIS__"

func onStart override
{
	base.onStart()
	session.writeData(String.toUTF8Buffer("["))
	sb = new StringBuilder()
	resultSet.headerJSON(sb)
	session.writeData(String.toUTF8Buffer(sb.toString()))
}

func tick override as bool
{
	var v = true
	sb.clear()
	for(var n = 0 ; n < recordsPerPacket ; n ++) {
		if not resultSet.nextJSON(sb) {
			v = false
			break
		}
		totalRecords ++
	}
	var ss = sb.toString()
	if String.getLength(ss) > 0 {
		if not session.writeData(String.toUTF8Buffer(ss)) {
			Log.debug(context, "Remote connection closed. " .. VALUE "__THIS__" .. " aborted.")
			v = false
		}
	}
	return v
}

func onEnd override
{
	session.writeData(String.toUTF8Buffer("]"))
	Log.debug(context, VALUE "__THIS__" .. " ended. " .. StringUtil.formatLongInteger(totalRecords, ',') .. " records were sent.")
	base.onEnd()
}
