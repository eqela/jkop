
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func forZero static as this
{
	return forValues(new double[] {
		0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0,
		0.0, 0.0, 0.0, 0.0
	})
}

func forIdentity static as this
{
	return forValues(new double[] {
		1.0, 0.0, 0.0, 0.0,
		0.0, 1.0, 0.0, 0.0,
		0.0, 0.0, 1.0, 0.0,
		0.0, 0.0, 0.0, 1.0
	})
}

func forTranslate(translateX as double, translateY as double, translateZ as double) static as this
{
	return forValues(new double[] {
		1.0, 0.0, 0.0, translateX,
		0.0, 1.0, 0.0, translateY,
		0.0, 0.0, 1.0, translateZ,
		0.0, 0.0, 0.0, 1.0
	})
}

func forXRotation(angle as double) static as this
{
	var c = Math.cos(angle)
	var s = Math.sin(angle)
	return forValues(new double[] {
		1.0, 0.0, 0.0, 0.0,
		0.0, c, -s, 0.0,
		0.0, s, c, 0.0,
		0.0, 0.0, 0.0, 1.0
	})
}

func forYRotation(angle as double) static as this
{
	var c = Math.cos(angle)
	var s = Math.sin(angle)
	return forValues(new double[] {
		c, 0.0, s, 0.0,
		0.0, 1.0, 0.0, 0.0,
		-s, 0.0, c, 0.0,
		0.0, 0.0, 0.0, 1.0
	})
}

func forZRotation(angle as double) static as this
{
	var c = Math.cos(angle)
	var s = Math.sin(angle)
	return forValues(new double[] {
		c, -s, 0.0, 0.0,
		s, c, 0.0, 0.0,
		0.0, 0.0, 1.0, 0.0,
		0.0, 0.0, 0.0, 1.0
	})
}

func forSkew(vx as double, vy as double, vz as double) static as this
{
	return forValues(new double[] {
		1.0, vx, vx, 0.0,
		vy, 1.0, vy, 0.0,
		vz, vz, 1.0, 0.0,
		0.0, 0.0, 0.0, 1.0
	})
}

func forXRotationWithCenter(angle as double, centerX as double, centerY as double, centerZ as double) static as this
{
	var translate = forTranslate(centerX, centerY, centerZ)
	var rotate = forXRotation(angle)
	var translateBack = forTranslate(-centerX, -centerY, -centerZ)
	var translatedRotated = multiplyMatrix(translate, rotate)
	return multiplyMatrix(translatedRotated, translateBack)
}

func forYRotationWithCenter(angle as double, centerX as double, centerY as double, centerZ as double) static as this
{
	var translate = forTranslate(centerX, centerY, centerZ)
	var rotate = forYRotation(angle)
	var translateBack = forTranslate(-centerX, -centerY, -centerZ)
	var translatedRotated = multiplyMatrix(translate, rotate)
	return multiplyMatrix(translatedRotated, translateBack)
}

func forZRotationWithCenter(angle as double, centerX as double, centerY as double, centerZ as double) static as this
{
	var translate = forTranslate(centerX, centerY, centerZ)
	var rotate = forZRotation(angle)
	var translateBack = forTranslate(-centerX, -centerY, -centerZ)
	var translatedRotated = multiplyMatrix(translate, rotate)
	return multiplyMatrix(translatedRotated, translateBack)
}

func forScale(scaleX as double, scaleY as double, scaleZ as double) static as this
{
	return forValues(new double[] {
		scaleX, 0.0, 0.0, 0.0,
		0.0, scaleY, 0.0, 0.0,
		0.0, 0.0, scaleZ, 0.0,
		0.0, 0.0, 0.0, 1.0
	})
}

func forFlipXY(flipXY as bool) static as this
{
	if flipXY {
		return forValues(new double[] {
			1.0, 0.0, 0.0, 0.0,
			0.0, 1.0, 0.0, 0.0,
			0.0, 0.0, -1.0, 0.0,
			0.0, 0.0, 0.0, 1.0
		})
	}
	return forIdentity()
}

func forFlipXZ(flipXZ as bool) static as this
{
	if flipXZ {
		return forValues(new double[] {
			1.0, 0.0, 0.0, 0.0,
			0.0, -1.0, 0.0, 0.0,
			0.0, 0.0, 1.0, 0.0,
			0.0, 0.0, 0.0, 1.0
		})
	}
	return forIdentity()
}

func forFlipYZ(flipYZ as bool) static as this
{
	if flipYZ {
		return forValues(new double[] {
			-1.0, 0.0, 0.0, 0.0,
			0.0, 1.0, 0.0, 0.0,
			0.0, 0.0, 1.0, 0.0,
			0.0, 0.0, 0.0, 1.0
		})
	}
	return forIdentity()
}

func forValues(mv as array<double>) static as this
{
	var v = new this()
	var i as int
	for(i = 0; i < 16; i++) {
		if i >= sizeof mv {
			v.v[i] = 0.0
		}
		else {
			v.v[i] = mv[i]
		}
	}
	return v
}

func multiplyScalar(v as double, mm as this) static as this
{
	return forValues(new double[] {
		mm.v[0] * v, mm.v[1] * v, mm.v[2] * v, mm.v[3] * v,
		mm.v[4] * v, mm.v[5] * v, mm.v[6] * v, mm.v[7] * v,
		mm.v[8] * v, mm.v[9] * v, mm.v[10] * v, mm.v[11] * v,
		mm.v[12] * v, mm.v[3] * v, mm.v[14] * v, mm.v[15] * v
	})
}

func multiplyMatrix(a as this, b as this) static as this
{
	var matrix44 = new this()
	matrix44.v[0] = a.v[0] * b.v[0] + a.v[1] * b.v[4] + a.v[2] * b.v[8] + a.v[3] * b.v[12]
	matrix44.v[1] = a.v[0] * b.v[1] + a.v[1] * b.v[5] + a.v[2] * b.v[9] + a.v[3] * b.v[13]
	matrix44.v[2] = a.v[0] * b.v[2] + a.v[1] * b.v[6] + a.v[2] * b.v[10] + a.v[3] * b.v[14]
	matrix44.v[3] = a.v[0] * b.v[3] + a.v[1] * b.v[7] + a.v[2] * b.v[11] + a.v[3] * b.v[15]
	matrix44.v[4] = a.v[4] * b.v[0] + a.v[5] * b.v[4] + a.v[6] * b.v[8] + a.v[7] * b.v[12]
	matrix44.v[5] = a.v[4] * b.v[1] + a.v[5] * b.v[5] + a.v[6] * b.v[9] + a.v[7] * b.v[13]
	matrix44.v[6] = a.v[4] * b.v[2] + a.v[5] * b.v[6] + a.v[6] * b.v[10] + a.v[7] * b.v[14]
	matrix44.v[7] = a.v[4] * b.v[3] + a.v[5] * b.v[7] + a.v[6] * b.v[11] + a.v[7] * b.v[15]
	matrix44.v[8] = a.v[8] * b.v[0] + a.v[9] * b.v[4] + a.v[10] * b.v[8] + a.v[11] * b.v[12]
	matrix44.v[9] = a.v[8] * b.v[1] + a.v[9] * b.v[5] + a.v[10] * b.v[9] + a.v[11] * b.v[13]
	matrix44.v[10] = a.v[8] * b.v[2] + a.v[9] * b.v[6] + a.v[10] * b.v[10] + a.v[11] * b.v[14]
	matrix44.v[11] = a.v[8] * b.v[3] + a.v[9] * b.v[7] + a.v[10] * b.v[11] + a.v[11] * b.v[15]
	matrix44.v[12] = a.v[12] * b.v[0] + a.v[13] * b.v[4] + a.v[14] * b.v[8] + a.v[15] * b.v[12]
	matrix44.v[13] = a.v[12] * b.v[1] + a.v[13] * b.v[5] + a.v[14] * b.v[9] + a.v[15] * b.v[13]
	matrix44.v[14] = a.v[12] * b.v[2] + a.v[13] * b.v[6] + a.v[14] * b.v[10] + a.v[15] * b.v[14]
	matrix44.v[15] = a.v[12] * b.v[3] + a.v[13] * b.v[7] + a.v[14] * b.v[11] + a.v[15] * b.v[15]
	return matrix44
}

func multiplyVector(a as this, b as Vector3) static as Vector3
{
	var x = a.v[0] * b.x + a.v[1] * b.y + a.v[2] * b.z + a.v[3] * 1.0
	var y = a.v[4] * b.x + a.v[5] * b.y + a.v[6] * b.z + a.v[7] * 1.0
	var z = a.v[8] * b.x + a.v[9] * b.y + a.v[10] * b.z + a.v[11] * 1.0
	return Vector3.create(x, y, z)
}

var v public = new double[16]
