
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is ConsoleApplicationMain:

import capex.util

var configFile as File

func initialize override as bool
{
	assert base.initialize():
		Log.error(ctx, "Initialization failed")
	var existingConfiguration as StringSet
	foreach arg in args {
		if arg.isOption("config") {
			assert not configFile:
				Log.error(ctx, "Duplicate config file parameter supplied: `" .. arg.getComplete() .. "'")
			configFile = File.forPath(arg.getStringValue())
			continue
		}
		if arg.isOption() {
			var orig = arg.getStringValue()
			if String.startsWith(orig, "O") {
				var option = String.getSubString(orig, 1)
				if String.isNotEmpty(option) {
					var value = arg.getStringValue()
					var error = new Error()
					assert acceptConfiguration(option, value, null, error):
						Log.error(ctx, error.toStringWithDefault("Unsupported configuration option: `" .. option .. "'"))
					if not existingConfiguration:
						existingConfiguration = new StringSet()
					existingConfiguration.add(option)
				}
			}
		}
	}
	if configFile {
		var config = assert SimpleConfigFile.forFile(configFile):
			Log.error(ctx, "Failed to read configuration file `" .. configFile.getPath() .. "'")
		var iter = config.iterate()
		if iter {
			var error = new Error()
			loop {
				var v = iter.next()
				if not v:
					break
				var key = v.key
				var value = v.value
				if existingConfiguration && existingConfiguration.contains(key):
					continue
				assert acceptConfiguration(key, value, configFile.getParent(), error):
					Log.error(ctx, error.toStringWithDefault("Unsupported configuration option: `" .. key .. "'"))
			}
		}
	}
	return true
}

func execute override as bool:
	return true

func acceptConfiguration(key as string, value as string, relativeTo as File, error as Error) virtual as bool:
	return false
