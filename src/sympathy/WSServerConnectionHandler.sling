
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import capex.net

class is WSProtocolSource:

var connection protected as WSServerConnection
var logContext protected as LoggingContext
var connectionIndexCounter static = 0
var connectionIndex = connectionIndexCounter++
prop connectionId as string
var protocol as WSProtocol

func setProtocol(protocol as WSProtocol) as this
{
	if this.protocol:
		this.protocol.setSource(null)
	this.protocol = protocol
	if protocol:
		protocol.setSource(this)
	return this
}

func getProtocol as WSProtocol:
	return protocol

func getConnectionIdString as string
{
	if String.isEmpty(connectionId):
		return String.forInteger(connectionIndex)
	return String.forInteger(connectionIndex) .. ":" .. connectionId
}

func logDebug(text as string):
	Log.debug(logContext, "(ws=" .. getConnectionIdString() .. ") " .. text)

func logInfo(text as string):
	Log.info(logContext, "(ws=" .. getConnectionIdString() .. ") " .. text)

func logWarning(text as string):
	Log.warning(logContext, "(ws=" .. getConnectionIdString() .. ") " .. text)

func logError(text as string):
	Log.error(logContext, "(ws=" .. getConnectionIdString() .. ") " .. text)

func setConnection(conn as WSServerConnection) as this
{
	connection = conn
	return this
}

func getConnection as WSServerConnection:
	return connection

func setLogContext(ctx as LoggingContext) as this
{
	logContext = ctx
	return this
}

func getLogContext as LoggingContext:
	return logContext

func sendString(data as string):
	sendResponse(WSServerMessage.forText(data))

func sendBuffer(data as buffer):
	sendResponse(WSServerMessage.forBinary(data))

func sendResponse(message as WSServerMessage) as int
{
	if connection == null:
		return -1
	return connection.sendResponse(message)
}

func onMaintenance virtual
{
}

func onOpened virtual
{
	if protocol:
		protocol.onConnectionOpened()
}

func onClosed virtual
{
	if protocol:
		protocol.onConnectionClosed()
}

func closeConnection:
	close()

func close
{
	assert connection:
		onClosed()
	connection.close()
	setProtocol(null)
}

func onCloseMessage(message as WSServerMessage) virtual
{
}

func onPingMessage(message as WSServerMessage) virtual as bool
{
	return false
}

func onPongMessage(message as WSServerMessage) virtual
{
}

func onDataMessage(message as WSServerMessage) virtual
{
	if protocol && message {
		if message.isDataText() {
			protocol.onStringMessage(message.getPayloadBufferString())
		}
		else {
			protocol.onBinaryMessage(message.getPayloadBuffer())
		}
	}
}
