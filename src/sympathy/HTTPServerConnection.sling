
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import capex.text

class is NetworkConnection:

class ParserState private
{
	var method public as string
	var uri public as string
	var version public as string
	var key public as string
	var headers public as KeyValueList<string,string>
	var headersDone public as bool
	var bodyDone public as bool
	var hdr public as StringBuilder
	var contentLength public as int
	var bodyIsChunked public = false
	var dataCounter public as int
	var bodyStream public as DataStream
	var savedBodyChunk public as buffer
	var bodyBuffer public as buffer
}

prop requests = 0
prop responses = 0

var parser as ParserState
var currentRequest as HTTPServerRequest
var closeAfterSend = false
var sendWritten = 0
var sendBodyBuffer as buffer = null
var sendBody as Reader = null
var sendBuffer as buffer = null
var responseToSend as HTTPServerResponse = null
var requestQueue as Queue<HTTPServerRequest> = null
var isWaitingForBodyReceiver = false

ctor:
	parser = new ParserState()

func getIsWaitingForBodyReceiver as bool:
	return isWaitingForBodyReceiver

func getHTTPServer as HTTPServerBase:
	return getManager() as HTTPServerBase

func getWriteBufferSize as int
{
	var server = getHTTPServer()
	if server == null:
		return 1024 * 512
	return server.getWriteBufferSize()
}

func getSmallBodyLimit as int
{
	var server = getHTTPServer()
	if server == null:
		return 1024 * 32
	return server.getSmallBodyLimit()
}

func resetParser
{
	parser.method = null
	parser.uri = null
	parser.version = null
	parser.key = null
	parser.headers = null
	parser.headersDone = false
	if parser.bodyStream:
		parser.bodyStream.onDataStreamAbort()
	parser.bodyStream = null
	parser.bodyDone = false
	parser.hdr = null
	parser.contentLength = 0
	parser.bodyIsChunked = false
	parser.dataCounter = 0
}

func initialize override as bool
{
	assert base.initialize()
	updateListeningMode()
	return true
}

func updateListeningMode
{
	var writeFlag = false
	var readFlag = true
	if responseToSend:
		writeFlag = true
	if isWaitingForBodyReceiver || closeAfterSend:
		readFlag = false
	if readFlag && writeFlag {
		enableReadWriteMode()
	}
	else if readFlag {
		enableReadMode()
	}
	else if writeFlag {
		enableWriteMode()
	}
	else {
		enableIdleMode()
	}
}

func setBodyReceiver(stream as DataStream)
{
	if isWaitingForBodyReceiver == false {
		if stream {
			if stream.onDataStreamStart(0):
				stream.onDataStreamEnd()
		}
		return
	}
	parser.bodyStream = stream
	if stream {
		isWaitingForBodyReceiver = false
		updateListeningMode()
		var ll = parser.contentLength
		if parser.bodyIsChunked:
			ll = -1
		if stream.onDataStreamStart(ll) == false {
			parser.bodyStream = null
			sendErrorResponse(HTTPServerResponse.forHTTPInternalError())
			resetParser()
			return
		}
		var sbc = parser.savedBodyChunk
		parser.savedBodyChunk = null
		if sbc:
			onBodyData(sbc, 0, SIZE(sbc))
	}
}

func isExpectingBody as bool
{
	if parser.method == "POST" || parser.method == "PUT" || parser.method == "PATCH" || parser.contentLength > 0 || parser.bodyIsChunked:
		return true
	return false
}

func onHeadersDone private
{
	var hasBody = isExpectingBody()
	if hasBody {
		var sbl = getSmallBodyLimit()
		if sbl > 0 && parser.contentLength > 0 && parser.contentLength < sbl {
			parser.bodyBuffer = MALLOC(parser.contentLength)
			return
		}
		isWaitingForBodyReceiver = true
	}
	var req = HTTPServerRequest.forDetails(parser.method, parser.uri, parser.version, parser.headers)
	onCompleteRequest(req)
	if hasBody == false:
		resetParser()
	updateListeningMode()
}

func onHeaderData(inputBuffer as buffer, offset as int, sz as int) private
{
	assert inputBuffer
	var p = 0
	while p < sz {
		var c = inputBuffer[p + offset] as char
		p ++
		if c == '\r':
			continue
		if parser.method == null {
			if c == '\n' {
				// ignore empty lines and other garbage in the beginning
				continue
			}
			if c == ' ' {
				if parser.hdr {
					parser.method = parser.hdr.toString()
					parser.hdr = null
				}
				continue
			}
		}
		else if parser.uri == null {
			if c == ' ' {
				if parser.hdr {
					parser.uri = parser.hdr.toString()
					parser.hdr = null
				}
				continue
			}
			else if c == '\n' {
				if parser.hdr {
					parser.uri = parser.hdr.toString()
					parser.hdr = null
				}
				parser.version = "HTTP/0.9"
				parser.headersDone = true
				onHeadersDone()
				if p < sz:
					onData(inputBuffer, offset + p, sz-p)
				return
			}
		}
		else if parser.version == null {
			if c == '\n' {
				if parser.hdr {
					parser.version = parser.hdr.toString()
					parser.hdr = null
				}
				continue
			}
		}
		else if parser.key == null {
			if c == ':' {
				if parser.hdr {
					parser.key = parser.hdr.toString()
					parser.hdr = null
				}
				continue
			}
			else if c == '\n' {
				if parser.hdr {
					sendErrorResponse(HTTPServerResponse.forHTTPInvalidRequest())
					resetParser()
					return
				}
				parser.headersDone = true
				onHeadersDone()
				if p < sz:
					onData(inputBuffer, offset + p, sz-p)
				return
			}
			if c >= 'A' && c <= 'Z':
				c = ('a' + c - 'A') as char
		}
		else if c == ' ' && parser.hdr == null {
			continue
		}
		else if c == '\n' {
			var value as string
			if parser.hdr {
				value = parser.hdr.toString()
				parser.hdr = null
			}
			if parser.headers == null:
				parser.headers = new KeyValueList<string,string>()
			parser.headers.add(parser.key, value)
			if String.equalsIgnoreCase(parser.key, "content-length") && value {
				parser.contentLength = String.toInteger(value)
			}
			else if String.equalsIgnoreCase(parser.key, "transfer-encoding") && value && String.contains(value, "chunked") {
				parser.bodyIsChunked = true
			}
			parser.key = null
			continue
		}
		if parser.hdr == null:
			parser.hdr = new StringBuilder()
		parser.hdr.append(c)
		if parser.hdr.count() > 32 * 1024 {
			sendErrorResponse(HTTPServerResponse.forHTTPInvalidRequest())
			resetParser()
			return
		}
	}
}

func onBodyData(inputBuffer as buffer, offset as int, sz as int) private
{
	assert inputBuffer
	assert sz > 0
	if parser.bodyBuffer == null && parser.bodyStream == null {
		sendErrorResponse(HTTPServerResponse.forHTTPInvalidRequest())
		resetParser()
		return
	}
	if parser.contentLength > 0 {
		var p = 0
		if parser.dataCounter + sz <= parser.contentLength {
			p = sz
		}
		else {
			p = parser.contentLength - parser.dataCounter
		}
		if parser.bodyBuffer {
			Buffer.copyFrom(parser.bodyBuffer, inputBuffer, offset, parser.dataCounter, p)
		}
		else {
			if parser.bodyStream.onDataStreamContent(Buffer.getSubBuffer(inputBuffer, offset, p), p) == false {
				sendErrorResponse(HTTPServerResponse.forHTTPInternalError())
				parser.bodyStream = null
				resetParser()
				return
			}
		}
		parser.dataCounter += p
		if parser.dataCounter >= parser.contentLength {
			parser.bodyDone = true
			if parser.bodyBuffer {
				var req = HTTPServerRequest.forDetails(parser.method, parser.uri, parser.version, parser.headers)
				req.setBodyBuffer(parser.bodyBuffer)
				parser.bodyBuffer = null
				onCompleteRequest(req)
				resetParser()
			}
			else {
				if parser.bodyStream.onDataStreamEnd() == false {
					sendErrorResponse(HTTPServerResponse.forHTTPInternalError())
					parser.bodyStream = null
					resetParser()
					return
				}
				parser.bodyStream = null
			}
			if p < sz:
				onData(inputBuffer, offset + p, sz-p)
		}
		return
	}
	else if parser.bodyIsChunked {
		// FIXME
		sendErrorResponse(HTTPServerResponse.forHTTPInvalidRequest("Chunked content body is not supported."))
		resetParser()
		return
	}
	else {
		sendErrorResponse(HTTPServerResponse.forHTTPInvalidRequest())
		resetParser()
	}
}

func onData(buffer as buffer, offset as int = 0, asz as int = -1)
{
	assert buffer
	var sz = asz
	if sz < 0:
		sz = Buffer.getSize(buffer) - offset
	if isWaitingForBodyReceiver {
		parser.savedBodyChunk = Buffer.getSubBuffer(buffer, offset, sz)
		return
	}
	if parser.headersDone && parser.bodyDone {
		// should not happen, but we'll consider it a sanity check
		resetParser()
	}
	if parser.headersDone == false {
		onHeaderData(buffer, offset, sz)
	}
	else if parser.bodyDone == false {
		onBodyData(buffer, offset, sz)
	}
}

func onOpened override
{
}

func onClosed override:
	resetParser()

func onError(message as string) override:
	Log.error(logContext, message)

func onDataReceived(data as buffer, size as int) override:
	onData(data, 0, size)

func onWriteReady override:
	sendData()

func onCompleteRequest(req as HTTPServerRequest)
{
	assert req
	requests ++
	req.setServer(getHTTPServer())
	req.setConnection(this)
	if currentRequest == null {
		currentRequest = req
		handleCurrentRequest()
	}
	else {
		if requestQueue == null:
			requestQueue = new Queue<HTTPServerRequest>()
		requestQueue.push(req)
	}
}

func handleNextRequest private
{
	assert currentRequest == null
	assert requestQueue
	var req = assert requestQueue.pop() as HTTPServerRequest
	currentRequest = req
	handleCurrentRequest()
}

func sendErrorResponse(response as HTTPServerResponse)
{
	closeAfterSend = true
	sendResponse(null, response)
}

func handleCurrentRequest private
{
	assert currentRequest
	var server = assert getHTTPServer()
	var method = currentRequest.getMethod()
	var url = currentRequest.getUrlString()
	if String.isEmpty(method) || String.isEmpty(url) {
		closeAfterSend = true
		sendResponse(currentRequest, HTTPServerResponse.forHTTPInvalidRequest())
		return
	}
	if currentRequest.getVersion() == "HTTP/0.9" && method != "GET" {
		closeAfterSend = true
		sendResponse(currentRequest, HTTPServerResponse.forHTTPInvalidRequest())
		return
	}
	server.handleIncomingRequest(currentRequest)
}

func getStatusCode(status as string) static as string
{
	assert status
	var comps as Iterator<string> #force = Vector.iterate(String.split(status, ' '))
	if comps:
		return comps.next() as string
	return null
}

func validateCurrentRequest(req as HTTPServerRequest) as bool
{
	assert req
	if currentRequest == null {
		Log.error(logContext, "Sending a response, but no current request!")
		Log.error(logContext, StackTrace.generate())
		close()
		return false
	}
	if currentRequest != req {
		Log.error(logContext, "Sending a response for an incorrect request")
		close()
		return false
	}
	return true
}

func startResponse(req as HTTPServerRequest, resp as HTTPServerResponse) as HTTPServerResponseSession
{
	assert socket
	if req:
		assert validateCurrentRequest(req)
	var server = getHTTPServer()
	if server:
		server.onRequestComplete(req, resp, 0, getRemoteAddress())
	var v = new HTTPServerResponseSession()
	v.setSocket(exportSocket())
	v.setRequest(req)
	v.setResponse(resp)
	v.setServer(server)
	currentRequest = null
	close()
	return v
}

func sendResponse(req as HTTPServerRequest, aresp as HTTPServerResponse)
{
	assert socket
	if req:
		assert validateCurrentRequest(req)
	if isWaitingForBodyReceiver {
		// Here we are still waiting for the body receiver (so the client
		// is still sending the body), but we are already issuing the response.
		// This is usually eg. a "rejection" response where the client will not be
		// allowed to upload, etc. So to ensure that the state of the connection
		// remains consistent, we close it right after.
		closeAfterSend = true
	}
	responses ++
	var resp = aresp
	if resp == null:
		resp = HTTPServerResponse.forTextString("")
	var inm as string
	if req:
		inm = req.getETag()
	if inm {
		if String.equals(inm, resp.getETag()) {
			resp = new HTTPServerResponse()
			resp.setStatus("304")
			resp.setETag(aresp.getETag())
		}
	}
	var status = resp.getStatus()
	var bod = resp.getBody()
	var ver as string
	var met as string
	if req {
		ver = req.getVersion()
		met = req.getMethod()
	}
	var headers = resp.getHeaders()
	var server = getHTTPServer()
	if String.equals("HTTP/0.9", ver) {
		closeAfterSend = true
	}
	else {
		if status == null || String.getLength(status) < 1 {
			status = "200"
			resp.setStatus(status)
		}
		if req && req.getConnectionClose():
			closeAfterSend = true
		var fs = HTTPServerResponse.getFullStatus(status)
		// headers
		{
			var reply = new StringBuilder()
			if ver == null || String.getLength(ver) < 1 {
				reply.append("HTTP/1.1")
			}
			else {
				reply.append(ver)
			}
			reply.append(' ')
			reply.append(fs)
			reply.append('\r')
			reply.append('\n')
			if String.startsWith(fs, "400 "):
				closeAfterSend = true
			if headers {
				var it = headers.iterate()
				while it {
					var kvp = it.next()
					if kvp == null:
						break
					reply.append(kvp.key)
					reply.append(':')
					reply.append(' ')
					reply.append(kvp.value)
					reply.append('\r')
					reply.append('\n')
				}
			}
			if closeAfterSend:
				reply.append("Connection: close\r\n")
			if server {
				reply.append("Server: ")
				reply.append(server.getServerName())
			}
			reply.append('\r')
			reply.append('\n')
			reply.append("Date: ")
			reply.append(VerboseDateTimeString.forNow())
			reply.append('\r')
			reply.append('\n')
			reply.append('\r')
			reply.append('\n')
			sendBuffer = String.toUTF8Buffer(reply.toString())
		}
	}
	sendWritten = 0
	if bod {
		if String.equals("HEAD", met) == false:
			sendBody = bod
	}
	responseToSend = resp
	updateListeningMode()
}

func sendData private
{
	assert socket
	var remoteAddress = getRemoteAddress()
	// Get more data to send, if necessary
	if Buffer.getSize(sendBuffer) == 0 {
		if sendBody {
			if sendBody is BufferReader {
				sendBuffer = (sendBody as! BufferReader).getBuffer()
				sendBody = null
			}
			else {
				if sendBodyBuffer == null:
					sendBodyBuffer = MALLOC(getWriteBufferSize())
				var n = sendBody.read(sendBodyBuffer)
				if n < 1 {
					sendBody = null
				}
				else if n == SIZE(sendBodyBuffer) {
					sendBuffer = sendBodyBuffer
				}
				else {
					sendBuffer = Buffer.getSubBuffer(sendBodyBuffer, 0, n)
				}
			}
		}
	}
	// Send the current buffer
	if Buffer.getSize(sendBuffer) > 0 {
		var socket = this.socket
		var r = socket.write(sendBuffer, Buffer.getSize(sendBuffer))
		if r < 0 {
			sendBuffer = null
			sendBody = null
			close()
			return
		}
		else if r == 0 {
			;
		}
		else {
			sendWritten += r
			var osz = Buffer.getSize(sendBuffer)
			if r < osz {
				sendBuffer = Buffer.getSubBuffer(sendBuffer, r, osz - r)
			}
			else {
				sendBuffer = null
			}
		}
	}
	// all done
	if Buffer.getSize(sendBuffer) == 0 && sendBody == null {
		var server = getHTTPServer()
		if server:
			server.onRequestComplete(currentRequest, responseToSend, sendWritten, remoteAddress)
		currentRequest = null
		responseToSend = null
		if closeAfterSend {
			close()
		}
		else {
			updateListeningMode()
			handleNextRequest()
		}
	}
	lastActivity = SystemClock.asSeconds()
}
