
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is GuiApplicationContext:

depend "uwp-import:System"

var instance static as this

func getInstance static as this
{
	if not instance:
		instance = new this()
	return instance
}

func getApplicationDataDirectory stub override as cape.File
func getResourceImage(id as string) stub override as Image
func getImageForBuffer(buffer as buffer, mimeType as string) stub override as Image

func showMessageDialog(title as string, message as string) override
{
	lang "cs" {{{
		var dlg = new Windows.UI.Xaml.Controls.ContentDialog() {
			Title = title,
			Content = message,
			SecondaryButtonText = "OK"
		};
		dlg.ShowAsync();
	}}}
}

func showMessageDialog(title as string, message as string, callback as function) override #dotnetasync
{
	lang "cs" {{{
		var dlg = new Windows.UI.Xaml.Controls.ContentDialog() {
			Title = title,
			Content = message,
			SecondaryButtonText = "OK"
		};
		await dlg.ShowAsync();
	}}}
	if callback:
		callback()
}

func showConfirmDialog(title as string, message as string, okcallback as function, cancelcallback as function) stub override

func showErrorDialog(message as string) override
{
	lang "cs" {{{
		var dlg = new Windows.UI.Xaml.Controls.ContentDialog() {
			Title = "ERROR",
			Content = message,
			SecondaryButtonText = "OK"
		};
		dlg.ShowAsync();
	}}}
}

func showErrorDialog(message as string, callback as function) override #dotnetasync
{
	lang "cs" {{{
		var dlg = new Windows.UI.Xaml.Controls.ContentDialog() {
			Title = "ERROR",
			Content = message,
			SecondaryButtonText = "OK"
		};
		await dlg.ShowAsync();
	}}}
	if callback:
		callback()
}

func getScreenTopMargin override as int:
	return 0

func getScreenWidth override as int:
	return lang "cs" int {{{ (int)Windows.Graphics.Display.DisplayInformation.GetForCurrentView().ScreenWidthInRawPixels }}}

func getScreenHeight override as int:
	return lang "cs" int {{{ (int)Windows.Graphics.Display.DisplayInformation.GetForCurrentView().ScreenHeightInRawPixels }}}

func getScreenDensity override as int:
	return lang "cs" int {{{ (int)Windows.Graphics.Display.DisplayInformation.GetForCurrentView().LogicalDpi }}}

func getHeightValue(spec as string) override as int:
	return cave.Length.asPoints(spec, getScreenDensity())

func getWidthValue(spec as string) override as int:
	return cave.Length.asPoints(spec, getScreenDensity())

func startTimer(timeout as long, callback as function) override
{
	assert callback
	lang "cs" {{{
		var dt = new Windows.UI.Xaml.DispatcherTimer();
		dt.Interval = new System.TimeSpan(0, 0, 0, 0, (int)timeout);
		dt.Tick += (object sender, object e) => {
			callback();
			dt.Stop();
		};
		dt.Start();
	}}}
}

func enableKeepAwakeMode override:
	ERROR "Not implemented"

func disableKeepAwakeMode override:
	ERROR "Not implemented"
