
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is WebClient:

import capex.web

class MyHTTPClientListener is HTTPClientListener
{
	prop listener as function<void, string, KeyValueList<string,string>, buffer>
	var response private as HTTPClientResponse
	var body private as buffer

	func onError(message as string) override
	{
		if listener:
			listener(null, null, String.toUTF8Buffer(message))
	}

	func onAborted override
	{
		if listener:
			listener(null, null, String.toUTF8Buffer("aborted"))
	}

	func onDataReceived(buffer as buffer) override as bool
	{
		body = Buffer.append(body, buffer)
		return true
	}

	func onResponseReceived(response as HTTPClientResponse) override as bool
	{
		assert response
		this.response = response
		return true
	}

	func onResponseCompleted override
	{
		base.onResponseCompleted()
		if listener:
			listener(response.getHttpStatus(), response.getRawHeaders(), body)
	}
}

func query(method as string, url as string, headers as KeyValueList<string,string>, body as buffer, callback as function<void, string, KeyValueList<string,string>, buffer>) override
{
	var contentType as string
	if headers {
		foreach kvp in headers.asVector() as! vector<KeyValuePair<string, string>> {
			if String.equalsIgnoreCase(kvp.key, "Content-Type") {
				contentType = kvp.value
				break
			}
		}
	}
	var req as HTTPClientRequest
	if String.equalsIgnoreCase(method, "GET") {
		req = HTTPClientRequest.forGET(url)
	}
	else if String.equalsIgnoreCase(method, "POST") {
		req = HTTPClientRequest.forPOST(url, contentType, body)
	}
	else if String.equalsIgnoreCase(method, "PUT") {
		req = HTTPClientRequest.forPUT(url, contentType, body)
	}
	else if String.equalsIgnoreCase(method, "DELETE") {
		req = HTTPClientRequest.forDELETE(url)
	}
	else {
		callback(null, null, null)
		return
	}
	if headers {
		foreach kvp in headers.asVector() as! vector<KeyValuePair<string, string>> {
			if String.equals(kvp.key, "Content-Type") && String.isNotEmpty(req.getHeader("content-type")):
				continue
			req.addHeader(kvp.key, kvp.value)
		}
	}
	var op = new HTTPClientOperation()
	op.setAcceptInvalidCertificate(true)
	op.executeRequest(req, new MyHTTPClientListener().setListener(callback))
	op.closeConnection(null)
}
