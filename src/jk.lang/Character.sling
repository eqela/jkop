
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is CharacterObject:

func asObject(character as char) static as this
{
	var v = new this()
	v.setCharacter(character)
	return v
}

func toUppercase(c as char) static as char
{
	if c >= 'a' && c <= 'z':
		return (c - 'a' + 'A') as char
	return c
}

func toLowercase(c as char) static as char
{
	if c >= 'A' && c <= 'Z':
		return (c - 'A' + 'a') as char
	return c
}

func isDigit(c as char) static as bool:
	return c >= '0' && c <='9'

func isLowercaseAlpha(c as char) static as bool:
	return c >= 'a' && c <= 'z'

func isUppercaseAlpha(c as char) static as bool:
	return c >= 'A' && c <= 'Z'

func isHexDigit(c as char) static as bool
{
	var v = (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F') || (c >= '0' && c <= '9')
	return v
}

func isAlnum(c as char) static as bool #deprecated
{
	var v = (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')
	return v
}

func isAlpha(c as char) static as bool
{
	var v = (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')
	return v
}

func isAlphaNumeric(c as char) static as bool
{
	var v = (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')
	return v
}

func isLowercaseAlphaNumeric(c as char) static as bool
{
	var v = (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')
	return v
}

func isUppercaseAlphaNumeric(c as char) static as bool
{
	var v = (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')
	return v
}

pvar character as char

func toCharacter as char:
	return character

func isEOF(c as char) static as bool:
	return c == 0 || c == -1

func getHexDigit(c as char) static as int
{
	var v as int
	if c >= '0' && c <= '9' {
		v = (c - '0') as int
	}
	else if c >= 'a' && c <= 'f' {
		v = (10 + c - 'a') as int
	}
	else if c >= 'A' && c <= 'F' {
		v = (10 + c - 'A') as int
	}
	else {
		return 0
	}
	return v
}
