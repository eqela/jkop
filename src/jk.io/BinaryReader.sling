
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is Closable:

func forReader(reader as Reader) static as this
{
	var v = new this()
	v.setReader(reader)
	return v
}

pvar reader as Reader
var buffer1 as buffer
var buffer2 as buffer
var buffer4 as buffer

func isOK as bool
{
	assert reader
	return true
}

func close
{
	var rc = reader as Closable
	if rc:
		rc.close()
	reader = null
}

func seek(position as int64) as bool
{
	var sr = assert reader as SeekableReader
	return sr.setCurrentPosition(position)
}

func read1 as buffer
{
	assert reader
	if not buffer1:
		buffer1 = malloc 1
	var r = reader.read(buffer1)
	assert r == 1:
		close()
	return buffer1
}

func read2 as buffer
{
	assert reader
	if not buffer2:
		buffer2 = malloc 2
	var r = reader.read(buffer2)
	assert r == 2:
		close()
	return buffer2
}

func read4 as buffer
{
	assert reader
	if not buffer4:
		buffer4 = malloc 4
	var r = reader.read(buffer4)
	assert r == 4:
		close()
	return buffer4
}

func readBuffer(size as int64) as buffer
{
	assert reader
	assert size > 0
	var b = malloc size
	var r = reader.read(b)
	assert r == size:
		close()
	return b
}

func readInt8 as uint8
{
	var b = assert read1()
	return Buffer.getInt8(b, 0)
}

func readInt16LE as uint16
{
	var b = assert read2()
	return Buffer.getInt16LE(b, 0)
}

func readInt16BE as uint16
{
	var b = assert read2()
	return Buffer.getInt16BE(b, 0)
}

func readInt32LE as uint32
{
	var b = assert read4()
	return Buffer.getInt32LE(b, 0)
}

func readInt32BE as uint32
{
	var b = assert read4()
	return Buffer.getInt32BE(b, 0)
}
