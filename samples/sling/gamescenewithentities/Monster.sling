
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is SpriteEntity imports motion imports cape:

var movex as double
var movey as double
var runner as Runner
var images as vector<string>

ctor
{
	images = new vector<string>
	images += "monster1"
	images += "monster2"
	images += "monster3"
	images += "monster4"
	images += "monster5"
}

func createSprite override as Sprite
{
	var rndImage = new Random().nextInt(5)
	var img = Vector.get(images, rndImage)
	var txt = scene.createTextureForImageResource(img)
	var ref = layer.getReferenceWidth()
	var monster = SpriteUtil.addTextureSpriteForWidth(scene, layer, txt, 0.1 * ref)
	movex = new Random().nextDouble()
	movey = new Random().nextDouble()
	monster.move(movex, movey)
	var ms = scene as GameScene
	runner = ms.getRunner()
	return(monster)
}

func tick(gameTime as TimeValue, delta as double) override
{
	base.tick(gameTime, delta)
	sprite.setRotation(sprite.getRotation() + delta * Math.M_PI)
}
