
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is HTTPServerRequestHandlerContainer:

class FunctionRequestHandler is HTTPServerRequestHandler private
{
	pvar handler as function<void,HTTPServerRequest,function>

	func handleRequest(req as HTTPServerRequest, next as function)
	{
		handler(req, next)
	}
}

class RequestProcessor private
{
	pvar requestHandlers as vector<HTTPServerRequestHandler>
	pvar request as HTTPServerRequest
	pvar last as function
	var current = 0

	func start
	{
		current = -1
		next()
	}

	func next
	{
		current ++
		var handler = Vector.get(requestHandlers, current)
		if handler == null {
			if last == null {
				defaultLast()
			}
			else {
				last()
			}
			return
		}
		handler.handleRequest(request, next)
		request.resetResources()
	}

	func defaultLast:
		request.sendResponse(HTTPServerResponse.forHTTPNotFound())
}

var requestHandlers protected as vector<HTTPServerRequestHandler>

func iterateRequestHandlers override as Iterator<HTTPServerRequestHandler>
{
	assert requestHandlers
	return Vector.iterate(requestHandlers) as! Iterator<HTTPServerRequestHandler>
}

func pushRequestHandler(handler as function<void,HTTPServerRequest,function>)
{
	assert handler
	pushRequestHandler(new FunctionRequestHandler().setHandler(handler))
}

func pushRequestHandler(handler as HTTPServerRequestHandler)
{
	assert handler
	if requestHandlers == null:
		requestHandlers = new vector<HTTPServerRequestHandler>
	requestHandlers += handler
	if handler is HTTPServerComponent && isInitialized():
		(handler as! HTTPServerComponent).initialize(getServer())
}

func handleRequest(req as HTTPServerRequest, next as function) override
{
	// FIXME: Shouldn't create a new one for every request
	var rp = new RequestProcessor()
	rp.setRequestHandlers(requestHandlers)
	rp.setRequest(req)
	rp.setLast(next)
	rp.start()
}
