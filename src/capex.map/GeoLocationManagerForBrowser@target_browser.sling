
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is GeoLocationManager:

var instance static as this

func getInstance static as this
{
	if(instance == null) {
		instance = new this()
	}
	return instance
}

ctor
{
	lang "js" {{{
		if(navigator.geolocation) {
			this.locationManager = navigator.geolocation;
		}
	}}}
}

var locationManager as object
var id as int #used

func startLocationUpdates(callback as function<void,bool>) override
{
	if(locationManager == null) {
		callback(false)
	}
	lang "js" {{{
		this.id = this.locationManager.watchPosition(function(pos) {
			this.successHandler(pos);
		}.bind(this)
		, null
		, { enableHighAccuracy:true });
	}}}
	callback(true)
}

func stopLocationUpdates override
{
	if(locationManager == null) {
		return
	}
	lang "js" {{{
		this.locationManager.clearWatch(this.id);
	}}}
}

func getLastLocation(callback as function<void, GeoLocation, Error>) override
{
	var error = Error.forCode("failedToGetLastLocation")
	if(locationManager == null) {
		callback(null, error)
	}
	var location as GeoLocation #used
	lang "js" {{{
		this.locationManager.getCurrentPosition(function(pos) {
			location = CapexMapGeoLocation.NEW();
			location.setLatitude(pos.coords.latitude);
			location.setLongitude(pos.coords.longitude);
			callback(location, null);
		}, function(err) {
			callback(null, error);
		}, { enableHighAccuracy:true, timeout: 10000 });
	}}}
}

func successHandler(loc as object) private
{
	var l #used = new GeoLocation()
	lang "js" {{{
		l.setLatitude(loc.coords.latitude);
		l.setLongitude(loc.coords.longitude);
	}}}
	notifyListeners(l)
}

func isLocationServiceEnabled override as bool:
	return locationManager != null
