
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is Renderer abstract:

import cave

prop title as string
prop yTitle as string
prop xTitle as string
prop legends as vector<string>
prop labels as vector<string>
prop values as array<double>

func render(ctx as RenderingContext, width as double, height as double)
{
	var margin = width * 0.01
	var graphx = margin
	var graphy = margin
	var graphwidth = width - margin*2
	var graphheight = height - margin*2
	if String.isNotEmpty(title) {
		ctx.save()
		var titleFont = FontDescription.forName("Arial")
		var tfh = height * 0.035
		titleFont.setSize(Length.forPoints(tfh))
		ctx.setFillStyle(Color.black())
		ctx.setFont(titleFont)
		ctx.setTextAlign(RenderingContext.ALIGN_CENTER)
		ctx.setTextBaseline(RenderingContext.BASELINE_MIDDLE)
		ctx.fillText(title, width / 2, tfh / 2, 0)
		ctx.restore()
		graphy += tfh + margin
		graphheight -= (tfh + margin)
	}
	if String.isNotEmpty(xTitle) {
		ctx.save()
		var titleFont = FontDescription.forName("Arial")
		var tfh = height * 0.02
		titleFont.setSize(Length.forPoints(tfh))
		ctx.setFillStyle(Color.forString("#404040"))
		ctx.setFont(titleFont)
		ctx.setTextAlign(RenderingContext.ALIGN_CENTER)
		ctx.setTextBaseline(RenderingContext.BASELINE_MIDDLE)
		ctx.fillText(xTitle, width / 2, height - margin - tfh / 2, 0)
		ctx.restore()
		graphheight -= (tfh + margin)
	}
	if String.isNotEmpty(yTitle) {
		ctx.save()
		var titleFont = FontDescription.forName("Arial")
		var tfh = height * 0.02
		titleFont.setSize(Length.forPoints(tfh))
		ctx.setFillStyle(Color.forString("#404040"))
		ctx.setFont(titleFont)
		ctx.setTextAlign(RenderingContext.ALIGN_CENTER)
		ctx.setTextBaseline(RenderingContext.BASELINE_MIDDLE)
		ctx.translate(margin + tfh / 2, height / 2)
		ctx.rotate(-Math.M_PI / 2)
		ctx.fillText(yTitle, 0, 0, 0)
		ctx.restore()
		graphwidth -= (tfh + margin)
		graphx += tfh + margin
	}
	renderGraph(ctx, graphx, graphy, graphwidth, graphheight)
}

func renderGraph(ctx as RenderingContext, ox as double, oy as double, width as double, height as double) abstract
