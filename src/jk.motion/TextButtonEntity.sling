
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is MultiSpriteEntity is PointerListener:

func forText(text as string) static as this
{
	var tp = TextProperties.forText(text)
	tp.setFontSizeAbsolute(2.0)
	tp.setFontSizeDescription("5mm")
	return forTextProperties(tp)
}

func forTextProperties(text as TextProperties) static as this
{
	var v = new this()
	v.setText(text)
	return v
}

pvar backgroundColor as Color
pvar pressedColor as Color
pvar text as TextProperties
var boxSprite as TextureSprite
var textSprite as TextSprite
var pressed = false
pvar clickHandler as function

ctor
{
	backgroundColor = Color.forRGB(128, 128, 128)
	pressedColor = Color.white()
}

func initialize override
{
	base.initialize()
	var tt = text
	if tt == null {
		tt = TextProperties.forText("Button")
		tt.setFontSizeAbsolute(2.0)
	}
	var bgc = backgroundColor
	if bgc == null:
		bgc = Color.forRGBA(0,0,0,0)
	boxSprite = SpriteUtil.addColorSprite(scene, layer, bgc, 0.1)
	textSprite = layer.addTextSprite(text)
	var th = textSprite.getHeight()
	boxSprite.resize(textSprite.getWidth() + th, th * 2)
	layoutSprites(getX(), getY())
}

func resize(width as double, height as double)
{
	if boxSprite {
		boxSprite.resize(width, height)
		onLayout()
	}
}

func onPressedChanged
{
	if pressed {
		boxSprite.setTexture(scene.createTextureForColor(pressedColor))
	}
	else {
		boxSprite.setTexture(scene.createTextureForColor(backgroundColor))
	}
}

func cleanup override
{
	base.cleanup()
	if boxSprite {
		boxSprite.removeFromContainer()
		boxSprite = null
	}
	if textSprite {
		textSprite.removeFromContainer()
		textSprite = null
	}
}

func getWidth as double
{
	if boxSprite:
		return boxSprite.getWidth()
	return 0.0
}

func getHeight as double
{
	if boxSprite:
		return boxSprite.getHeight()
	return 0.0
}

func layoutSprites(x as double, y as double) override
{
	boxSprite.move(x, y)
	textSprite.move(x + (boxSprite.getWidth()/2) - (textSprite.getWidth()/2), y + (boxSprite.getHeight()/2) - (textSprite.getHeight()/2))
}

func onClicked virtual
{
	if clickHandler:
		clickHandler()
}

func onPointerEvent(event as PointerEvent) as bool
{
	if event.isInside(getX(), getY(), getWidth(), getHeight()) == false {
		if pressed {
			pressed = false
			onPressedChanged()
		}
		return false
	}
	if pressed {
		if pressed && event.action == PointerEvent.CANCEL {
			pressed = false
			onPressedChanged()
			return false
		}
		if pressed && event.action == PointerEvent.UP {
			pressed = false
			onPressedChanged()
			onClicked()
			return false
		}
		return true
	}
	if event.action == PointerEvent.DOWN {
		pressed = true
		onPressedChanged()
		return true
	}
	return false
}
