
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class #widget:

class CellWidget private #widget
{
	func forWidget(ctx as GuiApplicationContext, widget as Widget, align as double = 0.0) static as this
	{
		var v = new this(ctx)
		v.setContentWidget(widget, align)
		return v
	}

	ui LayerWidget
	{
		AlignWidget align {
		}
	}

	var contentWidget as Widget
	var contentWidgetAlign = 0.5
	var contentWidgetWidth = 0
	var contentWidgetWeight = 0.0

	func initializeWidget override
	{
		base.initializeWidget()
		updateWidget()
	}

	func getCellWeight as double:
		return contentWidgetWeight

	func updateWidget private
	{
		assert getInitialized()
		Widget.removeChildrenOf(align)
		if contentWidget:
			align.addWidget(contentWidget, contentWidgetAlign, 0.5)
		if contentWidgetWidth > 0:
			setWidgetWidthRequest(contentWidgetWidth)
		var parent = Widget.getParent(this) as HorizontalBoxWidget
		if parent:
			parent.setWidgetWeight(this, contentWidgetWeight)
	}

	func setContentWidget(widget as Widget, vv as double)
	{
		contentWidget = widget
		contentWidgetAlign = vv
		updateWidget()
	}

	func setCellWidth(width as int)
	{
		contentWidgetWidth = width
		if contentWidgetWidth < 1 {
			contentWidgetWeight = 1.0
		}
		else {
			contentWidgetWeight = 0.0
		}
		updateWidget()
	}

	func setCellAlign(vv as double)
	{
		this.contentWidgetAlign = vv
		updateWidget()
	}
}

class RowWidget private #widget
{
	func forTextValues(context as GuiApplicationContext, data as array<string>) static as this
	{
		var v = new this(context)
		foreach str in data:
			v.addText(str)
		return v
	}

	ui LayerWithBackgroundColorWidget
	{
		HorizontalBoxWidget box {
			margin = context.getStylePixels("jkwidget", "table-spacing", "2mm")
			spacing = context.getStylePixels("jkwidget", "table-spacing", "2mm")
		}
	}

	var childWidgets as vector<CellWidget>
	pvar widgetTextColor as Color

	func initializeWidget override
	{
		base.initializeWidget()
		foreach widget in childWidgets:
			box.addWidget(widget, widget.getCellWeight())
	}

	func reset
	{
		childWidgets = null
		if getInitialized():
			Widget.removeChildrenOf(box)
	}

	func addText(text as string, align as double = 0.0, width as int = 0)
	{
		addCellWidget(LabelWidget.forText(context, text).setWidgetTextColor(widgetTextColor), align, width)
	}

	func addClickableText(text as string, clickid as string, clickHandler as function<void,string>, align as double = 0.0, width as int = 0)
	{
		var handler = func {
			if clickHandler:
				clickHandler(clickid)
		}
		addCellWidget(HyperLinkWidget.forText(context, text, handler).setWidgetTextColor(widgetTextColor), align, width)
	}

	func addCellWidget(widget as Widget, align as double = 0.0, width as int = 0)
	{
		assert widget
		var cell = CellWidget.forWidget(context, widget, align)
		cell.setCellWidth(width)
		if not childWidgets:
			childWidgets = new vector<CellWidget>
		childWidgets += cell
		if getInitialized():
			box.addWidget(cell, cell.getCellWeight())
	}

	func getCellWidgets as vector<CellWidget>:
		return childWidgets
}

class ColumnInfo private
{
	pvar label as string
	pvar width as int
	pvar align as double
	pvar sortid as string
}

pvar widgetSortHandler as function<void,string>
var rowWidgets as vector<Widget>
var columns as array
var data as vector<array>

ui VerticalBoxWidget
{
	RowWidget header {
		color = context.getStyleColor("jkwidget", "table-header-color", "#777777")
		textColor = context.getStyleColor("jkwidget", "table-header-text-color", "#FFFFFF")
	}
	LayerWidget scrollerLayer : 1.0 {
	}
}

func initializeWidget override
{
	base.initializeWidget()
	updateWidgetColumns()
	updateDataWidgets()
}

func parseColumnInfo(value as string) private as ColumnInfo
{
	var v = new ColumnInfo()
	if not value:
		return v
	foreach comp in String.split(value, ',') {
		var vals = String.split(comp, '=', 2)
		var key = Vector.get(vals, 0)
		var val = Vector.get(vals, 1)
		if key == "label" {
			v.setLabel(val)
		}
		else if key == "width" {
			v.setWidth(context.getWidthValue(val))
		}
		else if key == "align" {
			if val == "left" {
				v.setAlign(0.0)
			}
			else if val == "center" {
				v.setAlign(0.5)
			}
			else if val == "right" {
				v.setAlign(1.0)
			}
			else {
				v.setAlign(0.0)
			}
		}
		else if key == "sortid" {
			v.setSortid(val)
		}
	}
	return v
}

func onSort(sortid as string) private
{
	if widgetSortHandler:
		widgetSortHandler(sortid)
}

func setWidgetHasHeader(value as bool)
{
	Widget.setVisible(header, value)
}

func setWidgetColumns(columns as array)
{
	this.columns = columns
	if getInitialized():
		updateWidgetColumns()
}

func updateWidgetColumns
{
	header.reset()
	foreach cc in columns {
		var column = String.asString(cc)
		var ci = parseColumnInfo(column)
		var sortid = ci.getSortid()
		if String.isNotEmpty(sortid) {
			var handler = func(vv as string) {
				onSort(vv)
			}
			header.addClickableText(ci.getLabel(), sortid, handler, ci.getAlign(), ci.getWidth())
		}
		else {
			header.addText(ci.getLabel(), ci.getAlign(), ci.getWidth())
		}
	}
	foreach row as RowWidget in rowWidgets:
		updateCellProperties(row)
}

func getColumnInfo(idx as int) private as ColumnInfo
{
	if not columns:
		return new ColumnInfo()
	if idx < 0 || idx >= sizeof columns:
		return new ColumnInfo()
	return parseColumnInfo(String.asString(columns[idx]))
}

func updateCellProperties(row as RowWidget) private
{
	assert row
	var cells = assert row.getCellWidgets()
	var n = 0
	while n < Vector.getSize(cells) {
		var cell = Vector.get(cells, n)
		if cell {
			var ci = getColumnInfo(n)
			cell.setCellWidth(ci.getWidth())
			cell.setCellAlign(ci.getAlign())
		}
		n++
	}
}

func setWidgetData(data as vector<array>)
{
	this.data = data
	if getInitialized():
		updateDataWidgets()
}

func setRowStyle(row as RowWidget) private
{
	row.setWidgetColor(context.getStyleColor("jkwidget", "table-row-color", "#EEEEEE"))
	row.setWidgetTextColor(context.getStyleColor("jkwidget", "table-row-text-color", "#000000"))
}

func updateDataWidgets private
{
	var widgets = new vector<Widget>
	foreach entry in data {
		var v = new RowWidget(context)
		setRowStyle(v)
		foreach cell in entry {
			if cell is Widget {
				v.addCellWidget(cell as! Widget)
			}
			else {
				v.addText(String.asString(cell))
			}
		}
		widgets += v
	}
	rowWidgets = widgets
	foreach row as RowWidget in widgets:
		updateCellProperties(row)
	var original = Vector.get(Widget.getChildren(scrollerLayer), 0)
	var scroller = new DynamicVerticalScrollerWidget(context)
	scroller.setWidgetContainerSpacing(context.getHeightValue("1mm"))
	scroller.setWidgetContainerMargin(context.getHeightValue("1mm"))
	scroller.setWidgetProvider(StaticWidgetProvider.forWidgets(widgets))
	scroller.clear()
	Widget.setVisible(scroller, false)
	scrollerLayer.addWidget(scroller)
	if original {
		context.startTimer(0, func {
			Widget.removeFromParent(original)
			Widget.setVisible(scroller, true)
		})
	}
}
