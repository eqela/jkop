
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class #widget:

meta
{
	description [[
		The DynamicVerticalScrollerWidget implements a vertically scrolling area, composed of a series
		of widgets that are stacked vertically and are scrollable. The widgets themselves are created dynamically
		as needed as the user scrolls the list. This way, it is possible to add "infinite scrollers" or scrollers
		that would have a very large number of elements.
	]]
}

class MyContainerWidget #widget
{
	ui VerticalBoxWidget
	{
	}

	prop widgetHeightChangeListener as function<void, int>

	func onWidgetHeightChanged(height as int) override
	{
		base.onWidgetHeightChanged(height)
		if widgetHeightChangeListener:
			widgetHeightChangeListener(height)
	}

	func clear:
		Widget.removeChildrenOf(this)
}

ui LayerWidget
{
	VerticalScrollerWidget scroller {
		scrollBarDisabled = true
		MyContainerWidget container {
			heightChangeListener = func(height as int) {
				onContainerHeightChanged(height)
			}
		}
	}
}

func forHandler(context as GuiApplicationContext, handler as function<Widget>) static as this
{
	var v = new this(context)
	v.setWidgetProviderHandler(handler)
	return v
}

func forProvider(context as GuiApplicationContext, provider as WidgetProvider) static as this
{
	var v = new this(context)
	v.setWidgetProvider(provider)
	return v
}

func forWidgets(context as GuiApplicationContext, widgets as vector<Widget>) static as this
{
	var v = new this(context)
	v.setWidgetProvider(StaticWidgetProvider.forWidgets(widgets))
	return v
}

prop widgetProviderHandler as function<Widget>
prop widgetProvider as WidgetProvider
prop widgetItemAddCount = 5
var lastContainerHeight private = -1
var onScrollNearEndEventRaised private = false

func setWidgetContainerSpacing(height as int #notLiteral)
{
	if not container:
		forceCreateWidget()
	container.setWidgetSpacing(height)
}

func setWidgetContainerMargin(height as int #notLiteral)
{
	if not container:
		forceCreateWidget()
	container.setWidgetMargin(height)
}

func initializeWidget override
{
	base.initializeWidget()
	scroller.setOnScrolledHandler(func(direction as int) {
		onScroll(direction)
	})
	onAddWidget(container)
}

func onScroll(direction as int) private
{
	assert scroller.isNearEnd() && not onScrollNearEndEventRaised
	onScrollNearEndEventRaised = true
	var containerHeight = Widget.getHeight(container)
	assert containerHeight > Widget.getHeight(scroller) && lastContainerHeight != containerHeight:
		onScrollNearEndEventRaised = false
	lastContainerHeight = containerHeight
	onScrollNearEnd()
	onScrollNearEndEventRaised = false
}

func onContainerHeightChanged(newHeight as int) private
{
	if((Widget.getHeight(scroller) * 2) > newHeight):
		showNextWidgets()
}

var isAdding private = false

func onScrollNearEnd private:
	showNextWidgets()

func showNextWidgets private
{
	assert not isAdding
	isAdding = true
	var count = widgetItemAddCount
	while count > 0 {
		onAddWidget(container)
		count--
	}
	isAdding = false
}

func onAddWidget(container as ContainerWidget) virtual
{
	var widget as Widget
	if widgetProvider {
		widget = widgetProvider.getNextWidget()
	}
	else if widgetProviderHandler {
		widget = widgetProviderHandler()
	}
	if widget:
		container.addWidget(widget)
}

func clear
{
	container.clear()
	if widgetProvider:
		widgetProvider.reset()
	showNextWidgets()
}
