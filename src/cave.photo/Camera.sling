
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import cape
import cave
import cave.ui

class:

IFDEF "target_ios"
{
	depend "plist: { \"NSPhotoLibraryUsageDescription\" : \"This app requires access to the photo library.\" }"
	depend "plist: { \"NSCameraUsageDescription\" : \"This app requires access to the camera.\" }"

	class MyPickerDelegate implements !"UIImagePickerControllerDelegate"
	{
		prop callback as function<void,Image,Error>

		lang "objc" {{{
			- (void)imagePickerController:(UIImagePickerController*)picker didFinishPickingMediaWithInfo:(NSDictionary*)info
			{
				UIImage *image = [info objectForKey:@"UIImagePickerControllerOriginalImage"];
				[self onImagePicked:image];
				objc_removeAssociatedObjects(picker);
				[picker dismissViewControllerAnimated:YES completion:NULL];
			}

			- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker
			{
				[picker dismissViewControllerAnimated:YES completion:NULL];
			}
		}}}

		func onImagePicked(image as !"UIImage")
		{
			if(callback != null) {
				callback(ImageForIOS.forUIImage(image), null)
			}
		}
	}
}
ELSE IFDEF "target_android" {
	depend "androidPermission:android.permission.CAMERA"
}
ELSE IFDEF "target_swift" {
	depend "plist: { \"NSPhotoLibraryUsageDescription\" : \"This app requires access to the photo library.\" }"
	depend "plist: { \"NSCameraUsageDescription\" : \"This app requires access to the camera.\" }"

	class MyPickerDelegate implements !"UIImagePickerControllerDelegate" implements !"UINavigationControllerDelegate"
	{
		prop callback as function<void,Image,Error>

		lang "swift" {{{
			func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any])
			{
				var image = info[.originalImage] as? UIImage
				self.onImagePicked(image)
				objc_removeAssociatedObjects(picker)
				picker.dismiss(animated: true)
			}

			func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
				picker.dismiss(animated: true)
			}

		}}}

		func onImagePicked(image as !"UIImage")
		{
			if callback:
				callback(ImageForSwift.forUIImage(image), null)
		}
	}
}

func isSupported static as bool
{
	IFDEF("target_android") {
		return true
	}
	ELSE IFDEF("target_ios_objc") {
		return true
	}
	ELSE IFDEF("target_swift") {
		return true
	}
	ELSE {
		return false
	}
}

var context as GuiApplicationContext

ctor(context as GuiApplicationContext)
{
	this.context = context
}

func takePicture(widget as Widget, callback as function<void,Image,Error>)
{
	var cb final = callback
	IFDEF "target_android" {
		var screen = ScreenForWidget.findScreenForWidget(widget)
		if(screen == null) {
			if(cb != null) {
				cb(null, Error.forCode("no_screen_found"))
			}
			return
		}
		screen.setAndroidActivityResultHandler(func(requestCode as int, resultCode as int, data as !"android.content.Intent") {
			if(requestCode != 0) {
				if(cb != null) {
					cb(null, Error.forCode("invalid_request_code"))
				}
				return
			}
			var ok as int
			IFDEF "target_java" {
				ok = lang "java" int {{{ android.app.Activity.RESULT_OK }}}
			}
			ELSE IFDEF "target_kotlin" {
				ok = lang "kotlin" int {{{ android.app.Activity.RESULT_OK }}}
			}
			if(resultCode != ok) {
				if(cb != null) {
					cb(null, null)
				}
				return
			}
			var img as Image
			IFDEF "target_java" {
				lang "java"{{{
					android.os.Bundle extras = data.getExtras();
					android.graphics.Bitmap ib = (android.graphics.Bitmap)extras.get("data");
					img = cave.ImageForAndroid.forAndroidBitmap(ib);
				}}}
			}
			ELSE IFDEF "target_kotlin" {
				lang "kotlin" {{{
					val extras = android.os.Bundle(data!!.getExtras())
					val ib: android.graphics.Bitmap = extras.get("data") as android.graphics.Bitmap
					img = cave.ImageForAndroid.forAndroidBitmap(ib)
				}}}
			}
			if(cb != null) {
				if(img == null) {
					cb(null, Error.forCode("no_image_data"))
				}
				else {
					cb(img, null)
				}
			}
		})
		var act = (context as GuiApplicationContextForAndroid).getAndroidActivityContext() as !"android.app.Activity"
		var aac = context as! AndroidApplicationContext
		var perms = new string[] { "android.permission.CAMERA" }
		var activity final = act
		aac.requestPermissions(perms, func(granted as bool) {
			if not granted {
				cb(null, Error.forCode("permission_not_granted"))
				return
			}
			else {
				IFDEF "target_java" {
					lang "java" {{{
						android.content.Intent takePictureIntent = new android.content.Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
						if(takePictureIntent.resolveActivity(activity.getPackageManager()) == null) {
						}
						else {
							activity.startActivityForResult(takePictureIntent, 0);
						}
					}}}
				}
				ELSE IFDEF "target_kotlin" {
					lang "kotlin" {{{
						val takePictureIntent = android.content.Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE)
						if(takePictureIntent.resolveActivity(activity!!.getPackageManager()) == null) {
						}
						else {
							activity.startActivityForResult(takePictureIntent, 0)
						}
					}}}
				}
			}
		})
	}
	ELSE IFDEF "target_ios_objc" {
		var screen = ScreenForWidget.findScreenForWidget(widget)
		if(screen == null) {
			if(cb != null) {
				cb(null, Error.forCode("no_screen_found"))
			}
			return
		}
		var delegate = new MyPickerDelegate()
		delegate.setCallback(callback)
		lang "objc" {{{
			UIImagePickerController *picker = [[UIImagePickerController alloc] init];
			picker.delegate = delegate;
			picker.allowsEditing = YES;
			if([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera]) {
				picker.sourceType = UIImagePickerControllerSourceTypeCamera;
			}
			else {
				picker.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;
			}
			picker.modalPresentationStyle = UIModalPresentationFullScreen;
			objc_setAssociatedObject(picker, "_pickerDelegate", delegate, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
			[screen presentViewController:picker animated:YES completion:nil];
		}}}
	}
	ELSE IFDEF("target_swift") {
		var screen = ScreenForWidget.findScreenForWidget(widget)
		if not screen {
			if cb:
				cb(null, Error.forCode("no_screen_found"))
			return
		}
		var delegate = new MyPickerDelegate()
		delegate.setCallback(callback)
		lang "swift" {{{
			var picker = UIImagePickerController()
			picker.delegate = delegate as! UIImagePickerControllerDelegate & UINavigationControllerDelegate
			picker.allowsEditing = true
			if UIImagePickerController.isSourceTypeAvailable(.camera) {
				picker.sourceType = UIImagePickerController.SourceType.camera
			}
			else {
				picker.sourceType = UIImagePickerController.SourceType.photoLibrary
			}
			picker.modalPresentationStyle = UIModalPresentationStyle.fullScreen
			objc_setAssociatedObject(picker, "_pickerDelegate", delegate, objc_AssociationPolicy.OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			screen.present(picker, animated: true)
		}}}
	}
	ELSE {
		ERROR("Not implemented")
		if(cb != null) {
			cb(null, Error.forCode("not_supported"))
		}
	}
}
