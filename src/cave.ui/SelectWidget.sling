
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is WidgetWithValue #widget:

func forKeyValueList(context as GuiApplicationContext, options as KeyValueList<string, string>) static as this
{
	var v  = new this(context)
	v.setWidgetItemsAsKeyValueList(options)
	return v
}

func forKeyValueStrings(context as GuiApplicationContext, options as array) static as this
{
	var v = new this(context)
	v.setWidgetItemsAsKeyValueStrings(options)
	return v
}

func forKeyValueStrings(context as GuiApplicationContext, options as vector<string>) static as this
{
	var v = new this(context)
	v.setWidgetItemsAsKeyValueStrings(options)
	return v
}

func forStringList(context as GuiApplicationContext, options as array) static as this
{
	var v = new this(context)
	v.setWidgetItemsAsStringList(options)
	return v
}

func forStringList(context as GuiApplicationContext, options as vector<string>) static as this
{
	var v = new this(context)
	v.setWidgetItemsAsStringList(options)
	return v
}

func forStringList(context as GuiApplicationContext, options as DynamicVector) static as this
{
	var v = new this(context)
	v.setWidgetItemsAsStringList(options)
	return v
}

IFDEF "target_android"
{
	basetype !"android.widget.Spinner" type extends
	basetype !"android.widget.AdapterView.OnItemSelectedListener" type implements
	basetype Widget type isAlso

	var ignoreInitialSelectEvent private = true
	var selectedWidgetIndex = -1
	IFDEF "target_java" {
		var adapter as !"android.widget.ArrayAdapter<java.lang.String>"
	}
	ELSE IFDEF "target_kotlin" {
		var adapter as !"android.widget.ArrayAdapter<kotlin.String>"
	}

	func requestLayout override
	{
		Widget.onLayoutChanged(this)
		base.requestLayout()
	}

	class MyAdapter
	{
		IFDEF "target_java" {
			basetype !"android.widget.ArrayAdapter<java.lang.String>" type extends

			ctor(ctx as !"android.content.Context", resId as int, obj as !"java.util.List<java.lang.String>")
			{
				base(ctx, resId, obj)
				widgetContext = ctx
			}
		}
		ELSE IFDEF "target_kotlin" {
			basetype !"android.widget.ArrayAdapter<kotlin.String>" type extends

			ctor(ctx as !"android.content.Context", resId as int, obj as !"kotlin.collections.ArrayList<kotlin.String?>")
			{
				base(ctx, resId, obj)
				widgetContext = ctx
			}
		}

		var widgetContext as !"android.content.Context"
		var tv as !"android.widget.TextView"
		var queueSize as double
		var queueFontFamily as string
		var queueFontResource as string
		var queueTextColor as Color
		var queuePadding as int

		func getView(pos as int, view as !"android.view.View", viewGroup as !"android.view.ViewGroup") override as !"android.view.View"
		{
			IFDEF "target_java" {
				lang "java" {{{
					tv = (android.widget.TextView)super.getView(pos, view, viewGroup);
				}}}
			}
			ELSE IFDEF "target_kotlin" {
				lang "kotlin" {{{
					tv = super.getView(pos, view, viewGroup) as android.widget.TextView
				}}}
			}
			tv.setPadding(0, 0, 0, 0)
			updateFont()
			updateColor()
			updatePadding()
			return tv
		}

		func setWidgetFontSize(sz as double)
		{
			queueSize = sz
			updateFont()
		}

		func setWidgetFontFamily(ff as string)
		{
			queueFontFamily = ff
			updateFont()
		}

		func setWidgetFontResource(res as string)
		{
			queueFontResource = res
			updateFont()
		}

		func setWidgetTextColor(color as Color)
		{
			queueTextColor = color
			updateColor()
		}

		func setWidgetPadding(padding as int)
		{
			queuePadding = padding
			updatePadding()
		}

		func updateFont
		{
			if tv {
				IFDEF "target_java" {
					lang "java" {{{
						tv.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, (float)queueSize);
						if(queueFontResource != null) {
							tv.setTypeface(android.graphics.Typeface.createFromAsset(widgetContext.getAssets(), queueFontResource), android.graphics.Typeface.NORMAL);
						}
						else {
							tv.setTypeface(android.graphics.Typeface.create(queueFontFamily, android.graphics.Typeface.NORMAL));
						}
					}}}
				}
				ELSE IFDEF "target_kotlin" {
					lang "kotlin" {{{
						tv!!.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, queueSize.toFloat())
						if(queueFontResource != null) {
							tv!!.setTypeface(android.graphics.Typeface.createFromAsset(widgetContext!!.getAssets(), queueFontResource), android.graphics.Typeface.NORMAL)
						}
						else {
							tv!!.setTypeface(android.graphics.Typeface.create(queueFontFamily, android.graphics.Typeface.NORMAL))
						}
					}}}
				}
			}
		}

		func updateColor
		{
			if tv {
				IFDEF "target_java" {
					lang "java" {{{
						if(queueTextColor != null) {
							tv.setTextColor(queueTextColor.toARGBInt32());
						}
					}}}
				}
				ELSE IFDEF "target_kotlin" {
					lang "kotlin" {{{
						if(queueTextColor != null) {
							tv!!.setTextColor(queueTextColor!!.toARGBInt32())
						}
					}}}
				}
			}
		}

		func updatePadding
		{
			if tv {
				IFDEF "target_java" {
					lang "java" {{{
						tv.setPadding(queuePadding, queuePadding, queuePadding, queuePadding);
					}}}
				}
				ELSE IFDEF "target_kotlin" {
					lang "kotlin" {{{
						tv!!.setPadding(queuePadding, queuePadding, queuePadding, queuePadding)
					}}}
				}
			}
		}
	}

	IFDEF "target_java" {
		lang "java" {{{
			public void onItemSelected(android.widget.AdapterView<?> parent, android.view.View view, int position, long id) {
				selectedWidgetIndex = position;
				android.widget.TextView sview = (android.widget.TextView)parent.getChildAt(0);
				if(sview != null) {
					cave.Color textColor = getActualWidgetTextColor();
					sview.setTextColor(textColor.toARGBInt32());
					sview.setEllipsize(android.text.TextUtils.TruncateAt.END);
					sview.setSingleLine();
				}
				if(ignoreInitialSelectEvent) {
					ignoreInitialSelectEvent = false;
					return;
				}
				onWidgetSelectionChanged();
			}

			public void onNothingSelected(android.widget.AdapterView<?> parent) {
				selectedWidgetIndex = -1;
				onWidgetSelectionChanged();
			}
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" {{{
			public override fun onItemSelected(parent: android.widget.AdapterView<*>?, view: android.view.View, position: kotlin.Int, id: kotlin.Long) {
				selectedWidgetIndex = position
				var sview: android.widget.TextView = parent!!.getChildAt(0) as android.widget.TextView
				if(sview != null) {
					var textColor: cave.Color? = getActualWidgetTextColor()
					sview.setTextColor(textColor!!.toARGBInt32())
					sview.setEllipsize(android.text.TextUtils.TruncateAt.END)
					sview.setSingleLine()
				}
				if(ignoreInitialSelectEvent) {
					ignoreInitialSelectEvent = false
					return
				}
				onWidgetSelectionChanged()
			}

			public override fun onNothingSelected(parent: android.widget.AdapterView<*>?) {
				selectedWidgetIndex = -1
				onWidgetSelectionChanged()
			}
		}}}
	}
}

ELSE IFDEF "target_ios_objc"
{
	basetype !"UITextField" type extends
	basetype !"UIPickerViewDelegate" type implements
	basetype Widget type isAlso

	var pickerView as !"UIPickerView"

	lang "objc" {{{
		- (NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView {
			return 1;
		}

		- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component {
			return([self getWidgetItemCount]);
		}

		- (NSString *)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component {
			return([self getWidgetTextForIndex:row]);
		}

		- (void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component {
			[self onWidgetSelectionChanged];
		}

		- (CGRect)caretRectForPosition:(UITextPosition *)position {
			return CGRectZero;
		}

		- (CGRect)textRectForBounds:(CGRect)bounds {
			return CGRectInset(bounds, widgetPadding, widgetPadding);
		}

		- (CGRect)editingRectForBounds:(CGRect)bounds {
			return CGRectInset(bounds, widgetPadding, widgetPadding);
		}
	}}}
}

ELSE IFDEF "target_swift"
{
	basetype !"UITextField" type extends
	basetype !"UIPickerViewDelegate" type implements
	basetype !"UIPickerViewDataSource" type implements
	basetype Widget type isAlso

	var pickerView as !"UIPickerView"

	lang "swift" {{{
		public func numberOfComponents(in pickerView: UIPickerView) -> Int {
			return 1
		}

		public func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
			return Int(self.getWidgetItemCount())
		}

		public func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
			return self.getWidgetTextForIndex(row)
		}
		public func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
			self.onWidgetSelectionChanged()
		}

		override public func caretRect(for position: UITextPosition) -> CGRect {
			return CGRect.zero
		}

		override public func textRect(forBounds bounds: CGRect) -> CGRect {
			return bounds.insetBy(dx: CGFloat(widgetPadding), dy: CGFloat(widgetPadding))
		}

		override public func editingRect(forBounds bounds: CGRect) -> CGRect {
			return bounds.insetBy(dx: CGFloat(widgetPadding), dy: CGFloat(widgetPadding))
		}
	}}}
}

ELSE IFDEF "target_macosoc"
{
	basetype !"NSTextField" type extends
	basetype Widget type isAlso
}

ELSE IFDEF "target_reactjs"
{
	depend "js:React:react"
	basetype !"React.Component" type extends
	basetype Widget type isAlso

	func getWidgetFontSizeHTMLString as string:
		return String.forDouble(this.widgetFontSize) .. "px"

	func getWidgetPaddingHTMLString as string:
		return String.forInteger(widgetPadding) .. "px"

	func getWidgetBackgroundColorHTMLString as string
	{
		if widgetBackgroundColor:
			return HTMLDOM.colorToRGBA(widgetBackgroundColor)
		return "rgba(0,0,0,0)"
	}

	func getWidgetTextColorHTMLString as string:
		return HTMLDOM.colorToRGBA(widgetTextColor)

	func widgetHasCustomAppearance as bool:
		return widgetBackgroundColor || widgetTextColor || widgetPadding > 0

	func getWidgetItemsAsJSX as object
	{
		var v as object
		lang "js" {{{
			v = [];
		}}}
		if widgetItems {
			var it as Iterator<KeyValuePair<string, string>> #force = widgetItems.iterate()
			while it {
				var item = it.next()
				if not item:
					break
				lang "js" {{{
					v.push(<option value={item.key}>{item.value}</option>);
				}}}
			}
		}
		return v
	}

	lang "js" {{{
		render() {
			var style = {
				fontFamily: this.widgetFontFamily,
				fontSize: this.getWidgetFontSizeHTMLString()
			};
			if(this.widgetHasCustomAppearance()) {
				style.backgroundColor = this.getWidgetBackgroundColorHTMLString();
				style.color = this.getWidgetTextColorHTMLString();
				style.padding = this.getWidgetPaddingHTMLString();
				style.appearance = "none";
				style.WebkitAppearance = "none";
				style.MozAppearance = "none";
				style.border = "0px";
				style.borderRadius = "0px";
			};
			var opts = this.getWidgetItemsAsJSX();
			return(<select style={style} onChange={this.onWidgetSelectionChanged} ref={(select) => { this.selectElement = select; }}>{opts}</select>);
		}
	}}}
}

ELSE IFDEF "target_html"
{
	basetype Widget

	func createElement override as object
	{
		var v = HTMLDOM.createElement("select")
		var myObject #used = this
		lang "js" {{{
			v.onchange = function() {
				myObject.onWidgetSelectionChanged();
			};
		}}}
		return(v)
	}

	func prepareElement(v as object) override
	{
		base.prepareElement(v)
		HTMLDOM.addEventListener(element, "focus", func {
			onFocusListener()
		})
		HTMLDOM.addEventListener(element, "blur", func {
			onLoseFocusListener()
		})
	}
}

ELSE IFDEF "target_uwp"
{
	basetype !"Windows.UI.Xaml.Controls.ComboBox" type extends
	basetype Widget type isAlso
}

ELSE
{
	basetype Widget
}

prop widgetOnFocusHandler as function
prop widgetOnLoseFocusHandler as function
var widgetContext as GuiApplicationContext
var widgetItems as KeyValueList<string, string>
var widgetValueChangeHandler as function
var widgetBackgroundColor as Color
var widgetTextColor as Color
var widgetPadding as int
var widgetFontFamily as string
var widgetFontResource as string
var widgetFontSize as double
var widgetFontUnderline as bool
var widgetFontItalic as bool
var widgetFontBold as bool
var widgetIsEnabled = true

ctor(context as GuiApplicationContext)
{
	IFDEF "target_android" {
		IFDEF "target_java" {
			base((context as! cave.GuiApplicationContextForAndroid).getActivityContext(), lang "java" int {{{ android.widget.Spinner.MODE_DROPDOWN }}})
		}
		ELSE IFDEF "target_kotlin" {
			base((context as! cave.GuiApplicationContextForAndroid).getActivityContext(), lang "kotlin" int {{{ android.widget.Spinner.MODE_DROPDOWN }}})
		}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			super.init(frame: CGRect.zero)
			let picker = UIPickerView()
			picker.delegate = self
			picker.dataSource = self
			picker.showsSelectionIndicator = true
			self.inputView = picker
			self.placeholder = "(select)"
			let toolBar = UIToolbar(frame: CGRect(x: 0, y: 0, width: 320, height: 44))
			toolBar.barStyle = UIBarStyle.default
			let flexButton = UIBarButtonItem(barButtonSystemItem: UIBarButtonItem.SystemItem.flexibleSpace, target: self, action: nil)
			let barButtonDone = UIBarButtonItem(title: "Done", style: UIBarButtonItem.Style.bordered, target:self, action: #selector(onPickerDone))
			toolBar.items = [flexButton, barButtonDone]
			toolBar.isUserInteractionEnabled = true
			self.inputAccessoryView = toolBar
			pickerView = picker
		}}}
	}
	widgetContext = context
	setWidgetStyle(VALUE "__THIS__")
	IFDEF "target_android" {
		IFDEF "target_java" {
			lang "java" {{{
				setOnItemSelectedListener(this);
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				setOnItemSelectedListener(this)
			}}}
		}
	}
	IFDEF "target_ios_objc" {
		lang "objc" {{{
			UIPickerView *picker = [[UIPickerView alloc] init];
			picker.delegate = self;
			picker.dataSource = self;
			picker.showsSelectionIndicator = YES;
			self.inputView = picker;
			[self setPlaceholder:@"(select)"];
			UIToolbar *toolBar= [[UIToolbar alloc] initWithFrame:CGRectMake(0,0,320,44)];
			[toolBar setBarStyle:UIBarStyleDefault];
			UIBarButtonItem *flexButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:self action:nil];
			UIBarButtonItem *barButtonDone = [[UIBarButtonItem alloc] initWithTitle:@"Done" style:UIBarButtonItemStyleBordered target:self action:@selector(onPickerDone)];
			toolBar.items = @[flexButton, barButtonDone];
			toolBar.userInteractionEnabled = YES;
			self.inputAccessoryView = toolBar;
			pickerView = picker;
		}}}
	}
}

func setWidgetStyle(style as string) as this
{
	widgetFontFamily = widgetContext.getStyleString(style, "fontFamily")
	if String.isEmpty(widgetFontFamily):
		widgetFontFamily = "Arial"
	widgetFontSize = widgetContext.getStylePixels(style, "fontSize")
	if widgetFontSize < 1.0:
		widgetFontSize = widgetContext.getHeightValue("3mm")
	widgetFontResource = widgetContext.getStyleString(style, "fontResource")
	widgetTextColor = widgetContext.getStyleColor(style, "textColor")
	widgetBackgroundColor = widgetContext.getStyleColor(style, "backgroundColor")
	widgetPadding = widgetContext.getStylePixels(style, "padding")
	updateWidgetFont()
	updateWidgetAppearance(true)
	return this
}

func setWidgetFontFamily(family as string) as this
{
	widgetFontFamily = family
	updateWidgetFont()
	Widget.onLayoutChanged(this)
	return this
}

func setWidgetFontResource(res as string) as this
{
	widgetFontResource = res
	updateWidgetFont()
	Widget.onLayoutChanged(this)
	return this
}

func setWidgetFontSize(fontSize as double #notLiteral) as this
{
	widgetFontSize = fontSize
	updateWidgetFont()
	Widget.onLayoutChanged(this)
	return this
}

func setWidgetFontUnderline(underline as bool) as this
{
	widgetFontUnderline = underline
	updateWidgetFont()
	Widget.onLayoutChanged(this)
	return this
}

func setWidgetFontItalic(italic as bool) as this
{
	widgetFontItalic = italic
	updateWidgetFont()
	Widget.onLayoutChanged(this)
	return this
}

func setWidgetFontBold(bold as bool) as this
{
	widgetFontBold = bold
	updateWidgetFont()
	Widget.onLayoutChanged(this)
	return this
}

func updateWidgetFont private
{
	IFDEF "target_html" {
		HTMLDOM.setFontFamily(element, widgetFontFamily)
		HTMLDOM.setStyle(element, "font-size", String.forDouble(widgetFontSize) .. "px")
		if widgetFontBold:
			HTMLDOM.setStyle(element, "font-weight", "bold")
		if widgetFontItalic:
			HTMLDOM.setStyle(element, "font-style", "italic")
		if widgetFontUnderline:
			HTMLDOM.setStyle(element, "text-decoration", "underline")
	}
	ELSE IFDEF "target_ios_objc" {
		lang "objc" {{{
			[self setMinimumFontSize:widgetFontSize];
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			self.minimumFontSize = CGFloat(widgetFontSize)
		}}}
	}
	ELSE IFDEF "target_android" {
		if adapter {
			(adapter as! MyAdapter).setWidgetFontSize(widgetFontSize)
			(adapter as! MyAdapter).setWidgetFontFamily(widgetFontFamily)
			(adapter as! MyAdapter).setWidgetFontResource(widgetFontResource)
			(adapter as! MyAdapter).setWidgetTextColor(widgetTextColor)
			(adapter as! MyAdapter).setWidgetPadding(widgetPadding)
		}
	}
	ELSE IFDEF "target_reactjs" {
		lang "js" {{{
			this.forceUpdate();
		}}}
	}
	ELSE {
		ERROR "Not implemented"
	}
}

func setWidgetPadding(value as int #notLiteral) as this
{
	widgetPadding = value
	updateWidgetAppearance(true)
	return this
}

func getWidgetPadding as int:
	return widgetPadding

func setWidgetTextColor(color as Color) as this
{
	widgetTextColor = color
	updateWidgetAppearance(false)
	return this
}

func getWidgetTextColor as Color:
	return widgetTextColor

func setWidgetBackgroundColor(color as Color) as this
{
	widgetBackgroundColor = color
	updateWidgetAppearance(false)
	return this
}

func getWidgetBackgroundColor as Color:
	return widgetBackgroundColor

func getActualWidgetTextColor as Color
{
	var textColor = widgetTextColor
	if textColor == null {
		if widgetBackgroundColor != null {
			if widgetBackgroundColor.isLightColor() {
				textColor = Color.black()
			}
			else {
				textColor = Color.white()
			}
		}
		else {
			textColor = Color.black()
		}
	}
	return textColor
}

func updateWidgetAppearance(layoutChanged as bool) private
{
	var textColor #used = getActualWidgetTextColor()
	IFDEF "target_android" {
		IFDEF "target_java" {
			lang "java" {{{
				if(widgetBackgroundColor != null) {
					setBackgroundColor(widgetBackgroundColor.toARGBInt32());
				}
				else {
					setBackgroundColor(0);
				}
			}}}
		}
		ELSE IFDEF "target_kotlin" {
			lang "kotlin" {{{
				if(widgetBackgroundColor != null) {
					setBackgroundColor(widgetBackgroundColor!!.toARGBInt32())
				}
				else {
					setBackgroundColor(0)
				}
			}}}
		}
	}
	ELSE IFDEF "target_ios_objc" {
		var bgc #used = widgetBackgroundColor
		lang "objc" {{{
			if(bgc != nil) {
				self.backgroundColor = [bgc toUIColor];
			}
			else {
				self.backgroundColor = nil;
			}
			self.textColor = [textColor toUIColor];
			// Padding is used automatically: See above
		}}}
	}
	ELSE IFDEF "target_swift" {
		var bgc #used = widgetBackgroundColor
		lang "swift" {{{
			if(bgc != nil) {
				self.backgroundColor = bgc.toUIColor()
			}
			else {
				self.backgroundColor = nil
			}
			self.textColor = textColor.toUIColor()
		}}}
	}
	ELSE IFDEF "target_html" {
		if widgetBackgroundColor || widgetTextColor || widgetPadding > 0 {
			if widgetBackgroundColor == null {
				HTMLDOM.setStyle(element, "background-color", "rgba(0,0,0,0)")
			}
			else {
				HTMLDOM.setStyle(element, "background-color", HTMLDOM.colorToRGBA(widgetBackgroundColor))
			}
			HTMLDOM.setStyle(element, "color", HTMLDOM.colorToRGBA(textColor))
			HTMLDOM.setStyle(element, "padding", String.forInteger(widgetPadding) .. "px ")
			HTMLDOM.setStyle(element, "appearance", "none")
			HTMLDOM.setStyle(element, "-webkit-appearance", "none")
			HTMLDOM.setStyle(element, "-moz-appearance", "none")
			HTMLDOM.setStyle(element, "border", "0px")
			HTMLDOM.setStyle(element, "border-radius", "0px")
		}
		else {
			HTMLDOM.removeStyle(element, "appearance")
			HTMLDOM.removeStyle(element, "-webkit-appearance")
			HTMLDOM.removeStyle(element, "-moz-appearance")
			HTMLDOM.removeStyle(element, "border")
			HTMLDOM.removeStyle(element, "border-radius")
			HTMLDOM.removeStyle(element, "color")
			HTMLDOM.removeStyle(element, "padding")
		}
	}
	ELSE IFDEF "target_reactjs" {
		lang "js" {{{
			this.forceUpdate();
		}}}
	}
	ELSE {
		ERROR "Not implemented"
	}
	if layoutChanged:
		Widget.onLayoutChanged(this)
}

IFDEF "target_ios_objc"
{
	func onPickerDone
	{
		var index #used = getSelectedWidgetIndex()
		var text #used = lang "objc" string {{{ [self getWidgetTextForIndex:index] }}}
		lang "objc" {{{
			[self setText:text];
			[self resignFirstResponder];
		}}}
	}
}

IFDEF "target_swift"
{
	lang "swift" {{{
		@objc public func onPickerDone() {
			let index: Swift.Int = self.getSelectedWidgetIndex()
			self.text = self.getWidgetTextForIndex(index)
			self.resignFirstResponder()
		}
	}}}
}

func setWidgetItemsAsKeyValueList(items as KeyValueList<string, string>)
{
	var selectedIndex = getSelectedWidgetIndex()
	widgetItems = items
	IFDEF "target_android" {
		var list = new vector<string>
		if widgetItems {
			var it as Iterator<KeyValuePair<string, string>> #force = widgetItems.iterate()
			while it {
				var item = it.next()
				if item == null:
					break
				list += item.value
			}
		}
		IFDEF "target_java" {
			adapter = new MyAdapter((widgetContext as! cave.GuiApplicationContextForAndroid).getAndroidActivityContext(), lang "java" int {{{ android.R.layout.simple_spinner_item }}}, list)
			adapter.setDropDownViewResource(lang "java" int {{{ android.R.layout.simple_spinner_dropdown_item }}})
		}
		ELSE IFDEF "target_kotlin" {
			adapter = new MyAdapter((widgetContext as! cave.GuiApplicationContextForAndroid).getAndroidActivityContext(), lang "kotlin" int {{{ android.R.layout.simple_spinner_item }}}, list)
			adapter.setDropDownViewResource(lang "kotlin" int {{{ android.R.layout.simple_spinner_dropdown_item }}})
		}
		ignoreInitialSelectEvent = true
		base.setAdapter(adapter)
		updateWidgetFont()
	}
	ELSE IFDEF "target_html" {
		HTMLDOM.setTextContent(element, "")
		if widgetItems {
			var it as Iterator<KeyValuePair<string, string>> #force = widgetItems.iterate()
			while it {
				var item = it.next()
				if item == null:
					break
				var option = HTMLDOM.createElement("option")
				HTMLDOM.setTextContent(option, item.value)
				HTMLDOM.setAttribute(option, "value", item.key)
				HTMLDOM.appendChild(element, option)
			}
		}
	}
	ELSE IFDEF "target_reactjs" {
		lang "js" {{{
			this.forceUpdate();
		}}}
	}
	ELSE IFDEF "target_ios_objc" {
		lang "objc" {{{
			[pickerView reloadAllComponents];
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			pickerView.reloadAllComponents()
		}}}
	}
	ELSE {
		ERROR "Not implemented."
	}
	setSelectedWidgetIndex(selectedIndex)
}

func addWidgetItem(value as string):
	addWidgetItem(value, value)

func addWidgetItem(k as string, v as string)
{
	var list = widgetItems
	if not list:
		list = new KeyValueList<string,string>()
	list.add(k, v)
	setWidgetItemsAsKeyValueList(list)
}

func removeWidgetItem(index as int)
{
	assert widgetItems
	var list = widgetItems
	var selectedIndex = getSelectedWidgetIndex()
	list.remove(index)
	setWidgetItemsAsKeyValueList(list)
	setSelectedWidgetIndex(selectedIndex)
}

func setWidgetItemsAsKeyValueStrings(options as vector<string>)
{
	var list = new KeyValueList<string,string>()
	if options {
		foreach option in options {
			var comps = String.split(option, ':', 2)
			var kk = Vector.get(comps, 0)
			var vv = Vector.get(comps, 1)
			if vv == null:
				vv = kk
			list.add(kk, vv)
		}
	}
	setWidgetItemsAsKeyValueList(list)
}

func setWidgetItemsAsKeyValueStrings(options as array)
{
	var list = new KeyValueList<string,string>()
	if options {
		foreach option as string in options {
			var comps = String.split(option, ':', 2)
			var kk = Vector.get(comps, 0)
			var vv = Vector.get(comps, 1)
			if vv == null:
				vv = kk
			list.add(kk, vv)
		}
	}
	setWidgetItemsAsKeyValueList(list)
}

func setWidgetItemsAsStringList(options as DynamicVector)
{
	var list = new KeyValueList<string,string>()
	if options {
		foreach option as string in options.toVector() {
			list.add(option, option)
		}
	}
	setWidgetItemsAsKeyValueList(list)
}

func setWidgetItemsAsStringList(options as vector<string>)
{
	var list = new KeyValueList<string,string>()
	if options {
		foreach option in options:
			list.add(option, option)
	}
	setWidgetItemsAsKeyValueList(list)
}

func setWidgetItemsAsStringList(options as array)
{
	var list = new KeyValueList<string,string>()
	if options {
		foreach option as string in options:
			list.add(option, option)
	}
	setWidgetItemsAsKeyValueList(list)
}

func adjustSelectedWidgetItemIndex(index as int) as int
{
	if widgetItems == null || widgetItems.count() < 1:
		return -1
	if index < 0:
		return 0
	if index >= widgetItems.count():
		return widgetItems.count() - 1
	return index
}

func findIndexForWidgetValue(id as string) private as int
{
	var v = -1
	if widgetItems {
		var n = 0
		var it as Iterator<KeyValuePair<string, string>> #force = widgetItems.iterate()
		while it {
			var item = it.next()
			if item == null:
				break
			if item.key == id {
				v = n
				break
			}
			n ++
		}
	}
	return v
}

func getWidgetItemCount as int
{
	if widgetItems == null:
		return 0
	return widgetItems.count()
}

func getWidgetTextForIndex(index as int) private as string
{
	assert widgetItems
	return widgetItems.getValue(index)
}

func getSelectedWidgetIndex as int
{
	IFDEF "target_ios_objc" {
		return lang "objc" int {{{ [pickerView selectedRowInComponent:0] }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" int {{{ Int(pickerView.selectedRow(inComponent: 0)) }}}
	}
	ELSE IFDEF "target_android" {
		return selectedWidgetIndex
	}
	ELSE IFDEF "target_html" {
		return lang "js" int {{{ this.element.selectedIndex }}}
	}
	ELSE IFDEF "target_reactjs" {
		return lang "js" int {{{ this.selectElement.selectedIndex }}}
	}
	ELSE {
		ERROR "Not implemented"
		return -1
	}
}

func setSelectedWidgetIndex(index as int)
{
	var v #used = adjustSelectedWidgetItemIndex(index)
	IFDEF "target_ios_objc" {
		var txt = getWidgetTextForIndex(v)
		if txt == null:
			txt = ""
		lang "objc" {{{
			[self setText:txt];
		}}}
		if index >= 0 && index < getWidgetItemCount() {
			lang "objc" {{{
				[pickerView selectRow:index inComponent:0 animated:NO];
			}}}
		}
	}
	ELSE IFDEF "target_swift" {
		var txt = getWidgetTextForIndex(v)
		if txt == null:
			txt = ""
		lang "swift" {{{
			self.text = txt
		}}}
		if index >= 0 && index < getWidgetItemCount() {
			lang "swift" {{{
				pickerView.selectRow(Int(index), inComponent: 0, animated: false)
			}}}
		}
	}
	ELSE IFDEF "target_android" {
		selectedWidgetIndex = v
		base.setSelection(v)
	}
	ELSE IFDEF "target_html" {
		lang "js" {{{
			this.element.selectedIndex = v;
		}}}
	}
	ELSE IFDEF "target_reactjs" {
		lang "js" {{{
			this.selectElement.selectedIndex = v;
		}}}
	}
	ELSE {
		ERROR "Not implemented"
	}
}

func setSelectedWidgetValue(id as string):
	setSelectedWidgetIndex(findIndexForWidgetValue(id))

func getSelectedWidgetValue as string
{
	var index = getSelectedWidgetIndex()
	if widgetItems == null || index < 0:
		return null
	return widgetItems.getKey(index)
}

func setWidgetValue(value as object):
	setSelectedWidgetValue(String.asString(value))

func getWidgetValue as object:
	return getSelectedWidgetValue()

func setWidgetValueChangeHandler(handler as function):
	widgetValueChangeHandler = handler

func onWidgetSelectionChanged
{
	if widgetValueChangeHandler:
		widgetValueChangeHandler()
}

func getWidgetItems as KeyValueList<string, string>:
	return widgetItems

func onFocusListener private
{
	if widgetOnFocusHandler:
		widgetOnFocusHandler()
}

func onLoseFocusListener private
{
	if widgetOnLoseFocusHandler:
		widgetOnLoseFocusHandler()
}

func setWidgetIsEnabled(v as bool, background as Color = null)
{
	widgetIsEnabled = v
	IFDEF "target_html" {
		if widgetIsEnabled {
			HTMLDOM.setAttribute(element, "disabled", null)
			HTMLDOM.setStyle(element, "background-color", "rgba(0,0,0,0)")
		}
		else {
			HTMLDOM.setAttribute(element, "disabled", "disabled")
			HTMLDOM.setStyle(element, "background-color", HTMLDOM.colorToRGBA(background))
		}
	}
	ELSE {
		ERROR "Not implemented"
	}
}

func getWidgetIsEnabled as bool:
	return widgetIsEnabled
