
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

**
** The StringUtil class provides commonly used generic utility functions for string manipulation.
**

class:

**
** Creates a new string based on "string" that is at least "length" characters
** long. If the original string is shorter, it will be padded to the desired length
** by adding instances of paddingCharacter (default of which is the space character).
** The "aling" attribute may be either -1, 0 or 1, and determines if the padding
** characters willb e added to the end, both sides or to the beginning, respectively.
**

func padToLength(string as string, length as int, align as int = -1, paddingCharacter as char = ' ') static as string
{
	var ll as int
	if string == null {
		ll = 0
	}
	else {
		ll = String.getLength(string)
	}
	if ll >= length:
		return string
	var add = length - ll
	var n = 0
	var sb = new StringBuilder()
	if align < 0 {
		sb.appendString(string)
		for(n=0; n<add; n++):
			sb.appendCharacter(paddingCharacter)
	}
	else if align == 0 {
		var ff = add / 2
		var ss = add - ff
		for(n=0; n<ff; n++):
			sb.appendCharacter(paddingCharacter)
		sb.appendString(string)
		for(n=0; n<ss; n++):
			sb.appendCharacter(paddingCharacter)
	}
	else {
		for(n=0; n<add; n++):
			sb.appendCharacter(paddingCharacter)
		sb.appendString(string)
	}
	return sb.toString()
}

**
** Splits the given string "str" to a vector of multiple strings, cutting the
** string at each instance of the "delim" character where the delim does not
** appear enclosed in either double quotes or single quotes.
**
** Eg. quotedStringToVector("first 'second third'", ' ') produces [ "first", "second third" ]
**

func quotedStringToVector(str as string, delim as char, ignoreRepeatedDelimiters as bool = true, escapeCharacter as char = '\\') static as vector<string>
{
	var v = new vector<string>
	if str == null:
		return v
	var dquote = false
	var quote = false
	var sb as StringBuilder = null
	var it = String.iterate(str)
	loop {
		var c = it.getNextChar()
		if Character.isEOF(c):
			break
		if c == '"' && quote == false {
			dquote = !dquote
		}
		else if c == '\'' && dquote == false {
			quote = !quote
		}
		else if quote == false && dquote == false && c == delim {
			if sb {
				var r = sb.toString()
				if r == null:
					r = ""
				v += r
			}
			else if ignoreRepeatedDelimiters == false {
				v += ""
			}
			sb = null
		}
		else {
			if escapeCharacter > 0 && c == escapeCharacter {
				c = it.getNextChar()
				if Character.isEOF(c):
					break
			}
			if sb == null:
				sb = new StringBuilder()
			sb.appendCharacter(c)
		}
		if (quote == true || dquote == true) && sb == null:
			sb = new StringBuilder()
	}
	if sb {
		var r = sb.toString()
		if r == null:
			r = ""
		v += r
	}
	return v
}

**
** Parses the string "str", splitting it to multiple strings using quotedStringToVector(),
** and then further processing it to key/value pairs, splitting each string at the
** equal sign '=' and adding the entries to a map.
**

func quotedStringToMap(str as string, delim as char) static as map<string,string>
{
	var v = new map<string,string>
	var vector = quotedStringToVector(str, delim)
	foreach c in vector {
		var sp = String.split(c, '=', 2)
		var key = sp[0]
		var val = sp[1]
		if String.isEmpty(key) == false:
			v[key] = val
	}
	return v
}

**
** Combines a vector of strings to a single string, incorporating the "delim"
** character between each string in the vector. If the "unique" variable is set to
** "true", only one instance of each unique string will be appended to the resulting
** string.
**

func combine(strings as vector<string>, delim as char, unique as bool = false, index as int = 0) static as string
{
	var sb = new StringBuilder()
	var flags as map<string,string>
	if unique:
		flags = new map<string,string>
	var i = index
	while i < sizeof strings {
		var o = strings[i]
		i++
		if o == null:
			continue
		if flags {
			if Map.get(flags, o):
				continue
			Map.set(flags, o, "true")
		}
		if delim > 0 && sb.count() > 0:
			sb.appendCharacter(delim)
		sb.appendString(o)
	}
	return sb.toString()
}

**
** Vaidates a string character-by-character, calling the supplied function to determine
** the validity of each character. Returns true if the entire string was validated, false if not.
**

func validateCharacters(str as string, validator as function<bool,char>) static as bool
{
	assert str
	var it = assert String.iterate(str)
	loop {
		var c = it.getNextChar()
		if c < 1:
			break
		if validator(c) == false:
			return false
	}
	return true
}

**
** Converts a vector of objects to a vector of strings. If the allowConversion parameter is
** true, attempts to also convert any non-string objects in the original vector to string objects,
** if possible. In either case, any objects that are either not strings or not convertible to strings,
** will be omitted from the resulting vector.
**

func toStringVector(vector as vector, allowConversion as bool = true) static as vector<string>
{
	var v = new vector<string>
	foreach o in vector {
		if allowConversion {
			var s = String.asString(o)
			if s:
				v += s
		}
		else {
			if o is string:
				v += o as! string
		}
	}
	return v
}

**
** Converts a vector of strings to a vector of objects. No operations are performed on the elements.
**

func toObjectVector(vector as vector<string>) static as vector
{
	IFDEF "target_lua" {
		return vector as! vector
	}
	ELSE {
		var v = new vector
		foreach o in vector:
			v += o
		return v
	}
}

**
** Wraps the given strings to a vector of multiple lines, honoring a maximum of charactersPerLine
** characters on each line. Attempts to break lines at whitespace where possible.
**

func wrapToLines(text as string, charactersPerLine as int) static as vector<string>
{
	assert text
	var v = new vector<string>
	var it = String.iterate(text)
	var lineBuilder as StringBuilder
	var wordBuilder as StringBuilder
	while it {
		var c = it.getNextChar()
		if c == ' ' || c == '\t' || c == '\n' || c < 1 {
			if wordBuilder {
				var word = wordBuilder.toString()
				wordBuilder = null
				if lineBuilder == null:
					lineBuilder = new StringBuilder()
				var cc = lineBuilder.count()
				if cc > 0:
					cc ++
				cc += String.getLength(word)
				if cc > charactersPerLine {
					v += lineBuilder.toString()
					lineBuilder = new StringBuilder()
				}
				if lineBuilder.count() > 0:
					lineBuilder.appendCharacter(' ')
				lineBuilder.appendString(word)
			}
			if c < 1:
				break
			continue
		}
		if wordBuilder == null:
			wordBuilder = new StringBuilder()
		wordBuilder.appendCharacter(c)
	}
	if lineBuilder:
		v += lineBuilder.toString()
	return v
}

**
** Removes all "0" characters from the beginning of the string.
**

func stripLeadingZeros(str as string) static as string
{
	if String.getChar(str, 0) == '0' {
		var iter = assert String.iterate(str)
		var i = 0
		loop {
			var c = iter.getNextChar()
			if Character.isEOF(c):
				break
			if c != '0':
				return String.getEndOfString(str, i)
			i++
		}
		return ""
	}
	return str
}

**
** Takes a string that represents a number, and presents it in a nicely
** formatted manner, with delimiter separating each sequence of three digits.
**

func formatNumberString(vv as string, delimiter as char) static as string
{
	assert vv
	var it = assert String.iterate(vv)
	var rr = String.getLength(vv)
	var sb = new StringBuilder()
	loop {
		var c = it.getNextChar()
		if c < 1:
			break
		sb.appendCharacter(c)
		rr --
		if rr < 1:
			break
		if rr % 3 == 0:
			sb.appendCharacter(delimiter)
	}
	return sb.toString()
}

**
** Converts an integer value to a string and presents it in a nicely
** formatted manner, with delimiter separating each sequence of three digits.
**

func formatInteger(vv as int, delimiter as char) static as string:
	return formatNumberString(String.forInteger(vv), delimiter)

**
** Converts a long integer value to a string and presents it in a nicely
** formatted manner, with delimiter separating each sequence of three digits.
**

func formatLongInteger(vv as int, delimiter as char) static as string:
	return formatNumberString(String.forLongInteger(vv), delimiter)
