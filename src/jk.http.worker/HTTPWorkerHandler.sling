
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.console
import jk.worker

class is Runnable abstract:

pvar ctx as LoggingContext

ctor
{
	// FIXME: Should also be able to log through the "common server mechanism",
	// in which ever way that may have been configured.
	ctx = new ConsoleApplicationContext()
}

func handleRequest(req as HTTPWorkerRequest, resp as HTTPWorkerResponse) abstract

func onStartRequest virtual:
	nop

func onEndRequest virtual:
	nop

func preProcess(req as HTTPWorkerRequest, resp as HTTPWorkerResponse) virtual:
	nop

func postProcess(req as HTTPWorkerRequest, resp as HTTPWorkerResponse) virtual:
	nop

func generateNotFound(resp as HTTPWorkerResponse) virtual
{
	resp.setStatus("404")
	resp.setHeaders(null)
	resp.setContentType("text/plain")
	resp.setBody(String.toUTF8Buffer("Not found"))
}

func generateInternalServerError(resp as HTTPWorkerResponse) virtual
{
	resp.setStatus("500")
	resp.setHeaders(null)
	resp.setContentType("text/plain")
	resp.setBody(String.toUTF8Buffer("Internal server error"))
}

func run virtual
{
	onStartRequest()
	var req = HTTPWorkerRequest.instance()
	var resp = new HTTPWorkerResponse()
	try {
		preProcess(req, resp)
		if String.isEmpty(resp.getStatus()):
			handleRequest(req, resp)
	}
	catch e {
		Log.error(ctx, "Exception while processing request: " .. Log.asString(ctx, e))
		generateInternalServerError(resp)
	}
	if String.isEmpty(resp.getStatus()):
		generateNotFound(resp)
	postProcess(req, resp)
	resp.send()
	onEndRequest()
}
