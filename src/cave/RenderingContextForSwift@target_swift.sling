
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is RenderingContext:

depend "swift-import:UIKit"
depend "swift-import:CoreGraphics"

class ColorStop
{
	ctor(stop as double, color as Color)
	{
		this.stop = stop as float
		this.color = color
	}

	var stop public as float
	var color public as Color
}

class GradientObject abstract
{
	var colorStops protected as vector<ColorStop>

	func addColorStop(stop as double, color as Color)
	{
		if not colorStops:
			colorStops = new vector<ColorStop>
		colorStops += new ColorStop(stop, color)
	}

	func getColors protected as Color[]
	{
		var size = SIZE colorStops
		var colors = new Color[size]
		for(var i = 0; i < size; i++) {
			var colorStop = colorStops[i]
			if not colorStop.color {
				colors[i] = lang "swift" !"CGColor" {{{ CaveColor.black().toUIColor()?.cgColor }}}
			}
			else {
				colors[i] = lang "swift" !"CGColor" {{{ colorStop.color.toUIColor()?.cgColor }}}
			}
		}
		return colors
	}

	func createGradient abstract
}

class LinearGradientObject is GradientObject
{
	ctor(cgContext as !"CGContext", x0 as double, y0 as double, x1 as double, y1 as double)
	{
		this.cgContext = cgContext
		this.x0 = x0
		this.y0 = y0
		this.x1 = x1
		this.y1 = y1
	}

	var x0 as double
	var y0 as double
	var x1 as double
	var y1 as double
	var cgContext as !"CGContext"

	func createGradient override
	{
		lang "swift" {{{
			let start = CGPoint(x: x0, y: y0)
			let end = CGPoint(x: x1, y: y1)
			let gradient = CGGradient(colorsSpace: CGColorSpaceCreateDeviceRGB(), colors: getColors(), locations: nil)
			cgContext.drawLinearGradient(gradient!, start: start, end: end, options: CGGradientDrawingOptions.drawsBeforeStartLocation)
		}}}
	}
}

class RadialGradientObject is GradientObject
{
	ctor(cgContext as !"CGContext", x0 as double, y0 as double, r0 as double, x1 as double, y1 as double, r1 as double)
	{
		this.cgContext = cgContext
		this.x0 = x0
		this.y0 = y0
		this.r0 = r0
		this.x1 = x1
		this.y1 = y1
		this.r1 = r1
	}

	var x0 as double
	var y0 as double
	var r0 as double
	var x1 as double
	var y1 as double
	var r1 as double
	var cgContext as !"CGContext"

	func createGradient override
	{
		lang "swift" {{{
			let startCenter = CGPoint(x: x0, y: y0)
			let endCenter = CGPoint(x: x1, y: y1)
			let gradient = CGGradient(colorsSpace: CGColorSpaceCreateDeviceRGB(), colors: getColors(), locations: nil)
			cgContext.drawRadialGradient(gradient!, startCenter: startCenter, startRadius: CGFloat(r0), endCenter: endCenter, endRadius: CGFloat(r1), options: CGGradientDrawingOptions.drawsBeforeStartLocation)
		}}}
	}
}

class PatternObject
{
	ctor(image as !"UIImage", repeat as int, rectObject as !"CGRect")
	{
		this.image = image
		this.repeat = repeat
		this.rectObject = rectObject
	}

	var repeat as int
	var rectObject as !"CGRect"
	var image as !"UIImage"

	func createPattern
	{
		lang "swift" {{{ image.drawAsPattern(in: rectObject) }}}
	}
}

func forContext(context as GuiApplicationContext, cgContext as !"CGContext") static as this
{
	var v = new this()
	v.setCgContext(cgContext)
	v.setContext(context)
	return v
}

prop context as GuiApplicationContext
prop cgContext as !"CGContext"
var rectObject as !"CGRect"
var pathObject as !"UIBezierPath"
var fontDescription as FontDescription
var textAlign = RenderingContext.ALIGN_LEFT
var lineWidth = 5
var strokeColor as !"UIColor"
var fillColor as !"UIColor"
var textBaseline as int
var offsetX as double
var offsetY as double
var shadowBlur as double

func setFillStyle(style as object) override
{
	var f as Color
	if style is string {
		f = Color.instance(style as! string)
	}
	else if style is Color {
		f = style as! Color
	}
	if f {
		fillColor = f.toUIColor()
		lang "swift" {{{ fillColor.setFill() }}}
	}
}

func setStrokeStyle(style as object) override
{
	var f as Color
	if style is string {
		f = Color.instance(style as! string)
	}
	else if style is Color {
		f = style as! Color
	}
	if f {
		strokeColor = f.toUIColor()
		lang "swift" {{{ strokeColor.setStroke() }}}
	}
}

func setShadowColor(color as Color) override
{
	assert offsetX
	assert offsetY
	assert shadowBlur
	lang "swift" {{{ cgContext.setShadow(offset: CGSize(width: offsetX, height: offsetY), blur: CGFloat(shadowBlur), color: color.toUIColor().cgColor) }}}
}

func setShadowBlur(blur as double) override:
	shadowBlur = blur

func setShadowOffsetX(offset as double) override:
	offsetX = offset

func setShadowOffsetY(offset as double) override:
	offsetY = offset

func createLinearGradient(x0 as double, y0 as double, x1 as double, y1 as double) override as object
{
	assert cgContext
	return new LinearGradientObject(cgContext, x0, y0, x1, y1)
}

func createPattern(img as Image, repeat as int) override as object
{
	assert rectObject
	var image = assert img as ImageForSwift
	var simg = assert image.getSwiftBitmap()
	return new PatternObject(simg, repeat, rectObject)
}

func createRadialGradient(x0 as double, y0 as double, r0 as double, x1 as double, y1 as double, r1 as double) override as object
{
	assert cgContext
	return new RadialGradientObject(cgContext, x0, y0, r0, x1, y1, r1)
}

func addColorStop(gradient as object, index as double, color as Color) override
{
	var gradientObject = assert gradient as GradientObject
	assert color
	gradientObject.addColorStop(index, color)
}

func setLineCap(cap as int) override
{
	assert cgContext
	lang "swift" {{{
		var lineCap: CGLineCap! = nil
		if cap == CaveRenderingContext.LINE_CAP_BUTT {
			lineCap = CGLineCap.butt
		}
		if cap == CaveRenderingContext.LINE_CAP_ROUND {
			lineCap = CGLineCap.round
		}
		if cap == CaveRenderingContext.LINE_CAP_SQUARE {
			lineCap = CGLineCap.square
		}
		cgContext.setLineCap(lineCap)
	}}}
}

func setLineJoin(join as int) override
{
	assert cgContext
	lang "swift" {{{
		var lineJoin: CGLineJoin! = nil
		if join == CaveRenderingContext.LINE_JOIN_MITER {
			lineJoin = CGLineJoin.miter
		}
		if join == CaveRenderingContext.LINE_JOIN_BEVEL {
			lineJoin = CGLineJoin.bevel
		}
		if join == CaveRenderingContext.LINE_JOIN_ROUND {
			lineJoin = CGLineJoin.round
		}
		cgContext.setLineJoin(lineJoin)
	}}}
}

func setLineWidth(width as double) override
{
	assert cgContext
	lineWidth = width as float
	lang "swift" {{{ cgContext.setLineWidth(CGFloat(width)) }}}
}

func setMiterLimit(limit as double) override
{
	assert cgContext
	lang "swift" {{{ cgContext.setMiterLimit(CGFloat(limit)) }}}
}

func rect(x as double, y as double, width as double, height as double) override
{
	assert cgContext
	var xx = x as int
	var yy = y as int
	var ww = xx + width as int
	var hh = yy + height as int
	lang "swift" {{{
		rectObject = CGRect(x: xx, y: yy, width: ww, height: hh)
		cgContext.addRect(rectObject)
	}}}
}

func fillRect(x as double, y as double, width as double, height as double) override
{
	assert cgContext
	lang "swift" {{{
		let rect = CGRect(x: x, y: y, width: width, height: height)
		cgContext.addRect(rect)
		cgContext.fill(rect)
	}}}
}

func strokeRect(x as double, y as double, width as double, height as double) override
{
	assert cgContext
	lang "swift" {{{
		let rect = CGRect(x: x, y: y, width: width, height: height)
		cgContext.addRect(rect)
		cgContext.stroke(rect)
	}}}
}

func clearRect(x as double, y as double, width as double, height as double) override
{
	assert cgContext
	lang "swift" {{{
		let rect = CGRect(x: x, y: y, width: width, height: height)
		cgContext.clear(rect)
	}}}
}

func fill override
{
	assert cgContext
	lang "swift" {{{ cgContext.fillPath() }}}
}

func stroke override
{
	assert cgContext
	lang "swift" {{{ cgContext.strokePath() }}}
}

func beginPath override
{
	assert cgContext
	lang "swift" {{{ 
		pathObject = UIBezierPath()
		cgContext.addPath(pathObject.cgPath)
	}}}
}

func moveTo(x as double, y as double) override
{
	assert cgContext
	lang "swift" {{{ cgContext.move(to: CGPoint(x: x, y: y)) }}}
}

func closePath override
{
	assert cgContext
	lang "swift" {{{ cgContext.closePath() }}}
}

func lineTo(x as double, y as double) override
{
	assert cgContext
	lang "swift" {{{ cgContext.addLine(to: CGPoint(x: x, y: y)) }}}
}

func clip override
{
	assert cgContext
	lang "swift" {{{ cgContext.clip() }}}
}

func quadraticCurveTo(cpx as double, cpy as double, x as double, y as double) override
{
	assert cgContext
	lang "swift" {{{ cgContext.addQuadCurve(to: CGPoint(x: cpx, y: cpy), control: CGPoint(x: x, y: y)) }}}
}

func bezierCurveTo(cp1x as double, cp1y as double, cp2x as double, cp2y as double, x as double, y as double) override
{
	assert cgContext
	lang "swift" {{{ cgContext.addCurve(to: CGPoint(x: x, y: y), control1: CGPoint(x: cp1x, y: cp1y), control2: CGPoint(x: cp2x, y: cp2y)) }}}
}

func arc(x as double, y as double, r as double, sAngle as double, eAngle as double, counterclockwise as bool) override
{
	assert cgContext
	lang "swift" {{{ cgContext.addArc(center: CGPoint(x: x, y: y), radius: CGFloat(r), startAngle: CGFloat(sAngle), endAngle: CGFloat(eAngle), clockwise: counterclockwise) }}}
}

func arcTo(x1 as double, y1 as double, x2 as double, y2 as double, r as double) override
{
	assert cgContext
	lang "swift" {{{ cgContext.addArc(tangent1End: CGPoint(x: x1, y: y1), tangent2End: CGPoint(x: x2, y: y2), radius: CGFloat(r)) }}}
}

func isPointInPath(x as double, y as double) override as bool
{
	assert pathObject
	lang "swift" {{{ return pathObject.contains(CGPoint(x: x, y: y)) }}}
}

func scale(scalewidth as double, scaleheight as double) override
{
	assert cgContext
	lang "swift" {{{ cgContext.scaleBy(x: CGFloat(scalewidth), y: CGFloat(scaleheight)) }}}
}

func rotate(angle as double) override
{
	assert cgContext
	lang "swift" {{{ cgContext.rotate(by: CGFloat(angle)) }}}
}

func translate(x as double, y as double) override
{
	assert cgContext
	lang "swift" {{{ cgContext.translateBy(x: CGFloat(x), y: CGFloat(y)) }}}
}

func transform(a as double, b as double, c as double, d as double, e as double, f as double) override
{
	assert cgContext
	lang "swift" {{{ cgContext.concatenate(_: CGAffineTransform(a: CGFloat(a), b: CGFloat(b), c: CGFloat(c), d: CGFloat(d), tx: CGFloat(e), ty: CGFloat(f))) }}}
}

func setTransform(a as double, b as double, c as double, d as double, e as double, f as double) stub override

func setFont(font as FontDescription) override:
	fontDescription = font

func setTextAlign(align as int) override:
	textAlign = align

func setTextBaseline(baseline as int) override:
	textBaseline = baseline

func fillText(text as string, x as double, y as double, maxWidth as double) override
{
	lang "swift" {{{
		let text = NSAttributedString(string: text, attributes: [
			NSAttributedString.Key.font: getFontDescription(CGFloat(maxWidth)),
			NSAttributedString.Key.paragraphStyle: getTextAlignment(),
			NSAttributedString.Key.foregroundColor: fillColor
		])
		text.draw(at: CGPoint(x: x, y: y))
	}}}
}

func strokeText(text as string, x as double, y as double, maxWidth as double) override
{
	lang "swift" {{{
		let text = NSAttributedString(string: text, attributes: [
			NSAttributedString.Key.font: getFontDescription(CGFloat(maxWidth)),
			NSAttributedString.Key.paragraphStyle: getTextAlignment(),
			NSAttributedString.Key.strokeColor:strokeColor,
			NSAttributedString.Key.strokeWidth: lineWidth
		])
		text.draw(at: CGPoint(x: x, y: y))
	}}}
}

func measureTextHeight(text as string) override as double
{
	lang "swift" {{{
		let font = UIFont.systemFont(ofSize: UIFont.systemFontSize)
		let attributes = NSDictionary(object: font, forKey:NSAttributedString.Key.font as NSCopying)
		let size = text.size(withAttributes: attributes as! [NSAttributedString.Key : Any] as! [NSAttributedString.Key : Any])
		return Swift.Double(size.height)
	}}}
}

func measureTextWidth(text as string) override as double
{
	lang "swift" {{{
		let font = UIFont.systemFont(ofSize: UIFont.systemFontSize)
		let attributes = NSDictionary(object: font, forKey:NSAttributedString.Key.font as NSCopying)
		let size = text.size(withAttributes: attributes as! [NSAttributedString.Key : Any] as! [NSAttributedString.Key : Any])
		return Swift.Double(size.width)
	}}}
}

func drawImage(img as Image, x as double, y as double) override
{
	var image = assert img as ImageForSwift
	var simg = assert image.getSwiftBitmap()
	lang "swift" {{{ simg.draw(at: CGPoint(x: x, y: y)) }}}
}

func drawAndScaleImage(img as Image, x as double, y as double, width as double, height as double) override
{
	var image = assert img as ImageForSwift
	var simg = assert image.getSwiftBitmap()
	lang "swift" {{{ simg.draw(in: CGRect(x: x, y: y, width: width, height: height)) }}}
}

func drawAndProcessImage(img as Image, sx as double, sy as double, swidth as double, sheight as double, x as double, y as double, width as double, height as double) override
{
	assert img
	var croped = assert img.crop(sx as int, sy as int, swidth as int, sheight as int)
	var scaled = assert croped.scaleToSize(width as int, height as int)
	var aimage = assert scaled as ImageForSwift
	var image = assert aimage.getSwiftBitmap()
	lang "swift" {{{ image.draw(at: CGPoint(x: x, y: y)) }}}
}

func setGlobalAlpha(alpha as double) override
{
	assert cgContext
	lang "swift" {{{ cgContext.setAlpha(CGFloat(alpha)) }}}
}

func save override
{
	assert cgContext
	lang "swift" {{{ cgContext.saveGState() }}}
}

func restore override
{
	assert cgContext
	lang "swift" {{{ cgContext.restoreGState() }}}
}

func getFontDescription(size as !"CGFloat") private as !"UIFont"
{
	var font as !"UIFont"
	if fontDescription {
		var bold = fontDescription.getBold()
		var italic = fontDescription.getItalic()
		lang "swift" {{{
			if(bold) {
				font = UIFont.boldSystemFont(ofSize: size)
			}
			if(italic) {
				font = UIFont.italicSystemFont(ofSize: size)
			}
		}}}
	}
	else {
		lang "swift" {{{ font = UIFont.systemFont(ofSize: size) }}}
	}
	return font
}

func getTextAlignment private as !"NSMutableParagraphStyle"
{
	lang "swift" {{{
		let paragraphStyle = NSMutableParagraphStyle()
		if textAlign == CaveRenderingContext.ALIGN_START || textAlign == CaveRenderingContext.ALIGN_LEFT {
			paragraphStyle.alignment = .left
		}
		else if textAlign == CaveRenderingContext.ALIGN_END || textAlign == CaveRenderingContext.ALIGN_RIGHT {
			paragraphStyle.alignment = .right
		}
		else if textAlign == CaveRenderingContext.ALIGN_CENTER {
			paragraphStyle.alignment = .center
		}
		else {
			paragraphStyle.alignment = .left
		}
		return paragraphStyle
	}}}
}
