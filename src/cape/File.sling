
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

**
** The File class is used to access and manipulate the filesystem of the current
** environment. Despite the name of the class, this class is used to manipulate
** all kinds of filesystem entries, including files, directories, symbolic links,
** block devices, etc., depending on the underlying platform.
**

class abstract:

**
** Creates a new instance of the File object, representing the given path,
** utilizing the path naming notation of the underlying platform. Essentially,
** this means that a path name like "C:\Users\Me\this.txt" would be valid on Windows,
** and a path name like "/home/me/this.txt" would be valid on a Unix-like
** operating system, such as macOS or Linux.
**

func forPath(path as string) static as this
{
	if path == null || String.getLength(path) < 1:
		return new FileInvalid()
	IFDEF "target_java" {
		return FileForJava.forPath(path)
	}
	ELSE IFDEF "target_netx" {
		return FileForDotNet.forPath(path)
	}
	ELSE IFDEF "target_objc" {
		return FileForObjC.forPath(path)
	}
	ELSE IFDEF "target_nodejs" {
		return FileForNodeJS.forPath(path)
	}
	ELSE IFDEF "target_sushi" {
		return FileForSushi.forPath(path)
	}
	ELSE IFDEF "target_kotlin" {
		return FileForKotlin.forPath(path)
	}
	ELSE IFDEF "target_swift" {
		return FileForSwift.forPath(path)
	}
	ELSE {
		ERROR "Not implemented."
		return new FileInvalid()
	}
}

**
** Creates a new instance of the File object, representing the given path that can
** be found inside (or relative to) the given "relativeTo" file object. Eg. if you pass
** a path value "test.txt" and a relativeTo file instance representing the directory
** "C:\Users\Me", the created file object would now be representative of "C:\Users\Me\test.txt".
** This function can support both Windows-style (backslash) and Unix-style (forward
** slash) pathname notations: Forward-slash notation always works automatically on
** all platforms, and backslash-notation on Windows-based platforms. To support 
** backslash-notation on non-Windows-platforms, supply "true" as the value for
** the "alwaysSupportWindowsPathnames" parameter.
**

func forRelativePath(path as string, relativeTo as this, alwaysSupportWindowsPathnames as bool = false) static as this
{
	if relativeTo == null:
		return forPath(path)
	if path == null:
		return new FileInvalid()
	if Environment.isAbsolutePath(path):
		return forPath(path)
	var sep = Environment.getPathSeparator()
	// Trick here: This way we can support forward slashes even on Windows
	if sep != '/' {
		if String.indexOf(path, sep) < 0 && String.indexOf(path, '/') >= 0:
			sep = '/'
	}
	else {
		// Trick here: This way we can support backslashes even on non-Windows
		if alwaysSupportWindowsPathnames {
			if String.indexOf(path, sep) < 0 && String.indexOf(path, '\\') >= 0:
				sep = '\\'
		}
	}
	var f = relativeTo
	var comps = String.split(path, sep)
	foreach comp in comps {
		if String.isEmpty(comp):
			continue
		f = f.entry(comp)
	}
	return f
}

**
** Returns a new file object that represents a file with a given name that is
** inside the directory represented by the current object. NOTE: The given file
** name should not include file separator characters (either backslash or forward
** slash, depending on the current platform). Rather, to access nested directories,
** one should call entry() multiple times. Eg. not like this: myDir.entry("a/b/c"),
** but like this: myDir.entry("a").entry("b").entry("c")
**

func entry(name as string) virtual abstract as this

**
** Returns an Iterator object that represents all filesystem entries inside the
** directory represented by the current object. Each entry given by the Iterator
** represents a file or directory that was found inside the directory.
**

func entries virtual abstract as Iterator<this>

**
** Moves the filesystem entry represented by the current object to a new location
** that is represented by the "dest" parameter. If "replace" is "true", then any
** existing filesystem entry will be deleted and replaced with the current one.
** Otherwise an error status will occur.
**

func move(dest as this, replace as bool) virtual abstract as bool

**
** Touches the currently represented filesystem entry. This means: If the entry
** currently exists, then its "last modified" timestamp value will be updated to
** reflect the current time. Otherwise, the entry is created. In either case, the
** modification timestamp will reflect the current time after this operation.
**

func touch virtual abstract as bool

**
** Starts reading the contents of the file, and returns a FileReader object that
** can be used to access the contents.
**

func read virtual abstract as FileReader

**
** Starts writing to the contents of the file, and returns a FileWriter object that
** can be used to perform write operations. This method always truncates the file
** if it has existing contents.
**

func write virtual abstract as FileWriter

**
** Starts writing to the contents of the file, and returns a FileWriter object that
** can be used to perform write operations. If the file has existing contents, they
** will be preserved, and any contents written using the FileWriter object will be
** appended to the existing contents.
**

func append virtual abstract as FileWriter

**
** Queries for detailed information about the file, and returns a FileInfo object
** that can be used to access the information. NOTE: This method will always return
** a valid FileInfo object (never a null value). To test if a file exists, call
** the exists() method of the returned object.
**

func stat virtual abstract as FileInfo

**
** Creates a new directory on the filesystem using the path represented by the
** current object. If any parent directory is not yet existing, this method will
** fail. To automatically create also parent directories, see createDirectoryRecursive()
**

func createDirectory virtual abstract as bool

**
** Creates a new directory on the filesystem using the path represented by the
** current object. Will also create all parent directories that may not yet
** be existing.
**

func createDirectoryRecursive virtual abstract as bool

**
** Removes the directory represented by the current object. If the filesystem
** entry does not exist or is not a directory, this method will fail.
**

func removeDirectory virtual abstract as bool

**
** Gets a string representation of the fully qualified pathname that this File
** object represents.
**

func getPath virtual abstract as string

**
** Removes the file or other non-directory filesystem entry that this object points
** to. If the entry does not exist or is a directory, this method will fail.
**

func remove virtual abstract as bool

**
** Makes the current file executable, if possible with regards to the semantics
** of the underlying platform. In practice, this means setting the +x (executable)
** attribute on Unix-like operating systems.
**

func makeExecutable virtual abstract as bool

**
** Gets a string representation of the pathname that this File object represents.
** The returned string is returned as relative to the base directory that is
** given as a parameter (if this file is indeed inside the base directory) or null
** if this file is not inside the given directory. If the prefix parameter is not null,
** then any occurrence of the base directory in the beginning of the path will be
** replaced with the contents of the prefix parameter.
**

func getRelativePath(baseFile as this, prefix as string) virtual as string
{
	if not baseFile:
		return null
	var vp = getPath()
	var bp = baseFile.getPath()
	while String.endsWith(bp, "/") || String.endsWith(bp, "\\"):
		bp = String.getSubString(bp, 0, String.getLength(bp) - 1)
	if String.startsWith(vp, bp .. "/") || String.startsWith(vp, bp .. "\\") {
		if prefix:
			return prefix .. String.getSubString(vp, String.getLength(bp))
		return String.getSubString(vp, String.getLength(bp) + 1)
	}
	return null
}

**
** Gets a string representation of the pathname that this File object represents.
** The returned string is returned as relative to the base directory that is
** given as a parameter (if this file is indeed inside the base directory) or only
** the basename of the file if this file is not inside the given directory. If the
** prefix parameter is not null, then any occurrence of the base directory in the
** beginning of the path will be replaced with the contents of the prefix parameter.
**

func getRelativePathOrBasename(baseFile as this, prefix as string) virtual as string
{
	var v = getRelativePath(baseFile, prefix)
	if v:
		return v
	return getBasename()
}

**
** Renames the current filesystem entry, and changes its name to the string
** given as parameter "newname". If a filesystem entry with that name already
** exists and "replace" parameter is "true", then the existing entry will be
** replaced with the current entry.
**

func rename(newname as string, replace as bool) virtual as bool:
	return move(forPath(newname), replace)

**
** Writes to the current file, getting the contents from the given reader object.
** This will read from the reader until EOF (until read() returns less than 1), and writes
** all contents to the current file. If doAppend is not true, the contents of the
** current file will be truncated prior to writing.
**

func writeFromReader(reader as Reader, doAppend as bool) virtual as bool
{
	onError(null)
	assert reader
	var buffer = assert MALLOC 1024
	var writer as FileWriter
	if doAppend {
		writer = append()
	}
	else {
		writer = write()
	}
	assert writer
	var v = true
	loop {
		var r = reader.read(buffer)
		if r < 1:
			break
		var w = writer.write(buffer, r)
		if w < r {
			v = false
			break
		}
	}
	writer.close()
	return v
}

**
** Creates a filesystem entry for the currently repre.issented object as a special
** "FIFO" type file (first in, first out) on platforms that support it (which
** are generally Unix-like operating systems).
**

func createFifo virtual as bool
{
	onError("Not supported")
	return false
}

**
** Returns true if the file represented by the current object is possible to be
** executed on the current platform (ie. if a ProcessLauncher instance can be
** used to execute the file). Eg. on Windows, this would be dependent on the file
** name extension, and on Unix-based platforms, would be depenedent on the
** "execute" flag on the file attributes.
**

func isExecutable virtual as bool
{
	IFDEF "target_browser" {
		return false
	}
	ELSE IFDEF "target_android" {
		return stat().getExecutable()
	}
	ELSE IFDEF "target_darwin" {
		return stat().getExecutable()
	}
	ELSE {
		if OS.isWindows():
			return hasExtension("exe") || hasExtension("bat") || hasExtension("cmd") || hasExtension("com")
		return stat().getExecutable()
	}
}

**
** Checks if the filesystem entry represented by the current object is existing
** in the filesystem. This method returns true if any type of filesystem entry
** exists, whether it is a file, directory, or some other type of entry.
**

func exists virtual as bool
{
	onError(null)
	var fi = stat()
	return fi.getType() != FileInfo.FILE_TYPE_UNKNOWN
}

**
** Checks if the contents of the current file and the one given as parameter are
** completely matching (byte per byte comparison).
**

func isIdentical(file as this) virtual as bool
{
	assert file
	var myrd = assert read()
	var oord = assert file.read()
	var mybuf = assert MALLOC 1024
	var oobuf = assert MALLOC 1024
	var v = true
	while v {
		var myr = myrd.read(mybuf)
		var oor = oord.read(oobuf)
		if myr != oor {
			v = false
		}
		else {
			if myr < 1:
				break
			for(var n=0; n<myr; n++) {
				IFDEF "target_objc" {
					if Buffer.getByte(mybuf, n) != Buffer.getByte(oobuf, n):
						v = false
				}
				ELSE IFDEF "target_kotlin" {
					v = lang "kotlin" bool {{{ if (mybuf!!.get(n) != oobuf!!.get(n)) false else true }}}
				}
				ELSE {
					if mybuf[n] != oobuf[n] {
						v = false
					}
				}
			}
		}
	}
	myrd.close()
	oord.close()
	return v
}

class ReadLineIterator is Iterator<string>
{
	prop reader as PrintReader

	func next as string
	{
		assert reader
		var v = reader.readLine()
		if v == null {
			reader.close()
			reader = null
		}
		return v
	}
}

var lastErrorDescription as string

**
** Gets the description of the latest error that was encountered by thie
** File object. When performing operations on this object and in cases where
** errors are encountered, the "last error description" is updated to reflect
** a human-readable description of the error. This method can be used to retrieve
** that description.
**

func getLastErrorDescription as string:
	return lastErrorDescription

**
** Sets the error description of the last encountered error. Call this from a
** derived class when encountering errors when performing operations. For users
** of the file class, use getLastErrorDescription() to retrieve the errors as
** necessary.
**

func onError(v as string) protected
{
	var pp = getPath()
	if not v {
		lastErrorDescription = null
	}
	else if pp {
		lastErrorDescription = pp .. ": " .. v
	}
	else {
		lastErrorDescription = v
	}
}

**
** Reads the complete file contents, treats the contents as a UTF-8 encoded file,
** and returns the complete conents as an Iterator that returns a series of strings,
** each string representing one line of text in the file. The line delimiter character
** '\n' determines where the lines are separated.
**

func readLines as Iterator<string>
{
	var rd = assert PrintReader.forReader(read())
	return new ReadLineIterator().setReader(rd)
}

**
** Reads the complete file contents, treats the contents as a UTF-8 encoded file,
** and returns the complete conents as a vector of strings, each string representing
** one line of text in the file. The line delimiter character '\n' determines where
** the lines are separated.
**

func readLinesVector as vector<string>
{
	var it = assert readLines()
	var v = new vector<string>
	loop {
		var line = it.next()
		if not line:
			break
		v += line
	}
	return v
}

**
** Checks if the file has been modified since the given timestamp.
**

func hasChangedSince(originalTimeStamp as long) as bool
{
	var nts = getLastModifiedTimeStamp()
	if nts > originalTimeStamp:
		return true
	return false
}

**
** Gets the last modification timestamp of this file as a Unix timestamp (number
** of seconds since January 1, 1970).
**

func getLastModifiedTimeStamp as long
{
	if isFile() == false:
		return 0
	var st = stat()
	if st == null:
		return 0
	return st.getModifyTime() as long
}

**
** Compares the last modification time of the current object to that of the other
** object given as parameter. Returns -1 if the current file was modified prior to
** that given as parameter, 0 if the modification timestamps of both files are equals,
** or 1 if the current file was modified after that given as parameter.
**

func compareModificationTime(bf as this) virtual as int
{
	if bf == null:
		return 1
	var myts = getLastModifiedTimeStamp()
	var bfts = bf.getLastModifiedTimeStamp()
	if myts < bfts:
		return -1
	if myts > bfts:
		return 1
	return 0
}

**
** Checks if this file is newer than the one specified as a parameters (compares
** the modification timestamps of the two files).
**

func isNewerThan(bf as this) virtual as bool:
	return compareModificationTime(bf) > 0

**
** Checks if this file is older than the one specified as a parameters (compares
** the modification timestamps of the two files).
**

func isOlderThan(bf as this) virtual as bool:
	return compareModificationTime(bf) < 0

**
** Checks if this file represents the same file as the one given as parameter.
** NOTE: This checks if the two objects are referencing the same exact file. This
** does not compare the contents of the files (for that, use isIdentical()).
**

func isSame(file as this) virtual as bool
{
	onError(null)
	assert file
	var path = getPath()
	if path && path == file.getPath():
		return true
	return false
}

**
** Removes the filesystem entry that is referenced by this object, including any
** children, contained files or subdirectories it may have.
**

func removeRecursive virtual as bool
{
	onError(null)
	var finfo = stat()
	if not finfo:
		return true
	if finfo.isDirectory() == false || finfo.isLink() == true:
		return remove()
	var it = entries()
	if not it:
		return false
	while it {
		var f = it.next()
		if not f:
			break
		assert f.removeRecursive():
			onError(f.getLastErrorDescription())
	}
	return removeDirectory()
}

**
** Returns true if this object points to an existing file on the filesystem.
**

func isFile virtual as bool
{
	var st = assert stat()
	return st.isFile()
}

**
** Returns true if this object points to an existing directory on the filesystem.
**

func isDirectory virtual as bool
{
	var st = assert stat()
	return st.isDirectory()
}

**
** Returns true if this object points to an existing symbolic link on the filesystem
** (if symbolic links are at all supported on the current operating system).
**

func isLink virtual as bool
{
	var st = assert stat()
	return st.isLink()
}

**
** Returns the size in bytes of the current file.
**

func getSize virtual as int
{
	var st = stat()
	if st == null:
		return 0
	return st.getSize()
}

**
** Sets the mode permissions of this file. The implementation and functionality
** of this is system-dependent, and generally would refer to the Unix style
** permission flags.
**

func setMode(mode as int) virtual as bool
{
	onError("Not supported")
	return false
}

**
** Sets the user id (uid) of the owner of this file. Only applicable if the underlying
** platform supports numerical user ids (usually Unix-like operating systems).
**

func setOwnerUser(uid as int) virtual as bool
{
	onError("Not supported")
	return false
}

**
** Sets the group id (gid) of the owner of this file. Only applicable if the underlying
** platform supports numerical group ids (usually Unix-like operating systems).
**

func setOwnerGroup(gid as int) virtual as bool
{
	onError("Not supported")
	return false
}

**
** Returns a new file object that represents the same path as the current object,
** but with a given filename extension added to the file name. Eg. the following
** would be true: File.forPath("super").withExtension("txt") = "super.txt".
**

func withExtension(ext as string) virtual as this
{
	if not ext:
		return this
	var bn = getBasename()
	return getSibling(bn .. "." .. ext)
}

**
** Returns a new file object that represents the same path as the current object,
** but converted into executable format of the same, if applicable. In practice,
** this adds the executable filename extension "exe", "com", "bat" or "cmd" on a Windows
** based platform, if such a file exists. While this would have no effect on a
** Unix-like operating system, you can use this for cross platform compatibility
** between Windows and other operating systems.
**

func asExecutable virtual as this
{
	IFDEF "target_android" {
		return this
	}
	ELSE IFDEF "target_darwin" {
		return this
	}
	ELSE IFDEF "target_browser" {
		return this
	}
	ELSE {
		if OS.isWindows() {
			if hasExtension("exe") == false && hasExtension("bat") == false && hasExtension("cmd") == false && hasExtension("com") == false {
				var exe = withExtension("exe")
				if exe.isFile():
					return exe
				var bat = withExtension("bat")
				if bat.isFile():
					return bat
				var cmd = withExtension("cmd")
				if cmd.isFile():
					return cmd
				var com = withExtension("com")
				if com.isFile():
					return com
				return exe
			}
		}
		return this
	}
}

**
** Returns the parent directory of the currently referenced file or directory.
**

func getParent virtual as this
{
	onError(null)
	var path = directoryName()
	if path == null:
		return new FileInvalid()
	return forPath(path)
}

**
** Returns a new file object that references another file in the same directory
** as the current one, but with a different name, as supplied in the parameter.
** If name is null, then returns the parent directory.
**

func getSibling(name as string) virtual as this
{
	var pp = assert getParent()
	if name == null:
		return pp
	return pp.entry(name)
}

**
** Checks if this filename has the given extension.
** Eg. File.forPath("test.exe").hasExtension("exe") would return true.
**

func hasExtension(ext as string) virtual as bool
{
	var xx = assert extension()
	return String.equalsIgnoreCase(xx, ext)
}

**
** Returns the filename extension (if any) of the current file as a string.
** Eg. File.forPath("test.exe").extension() would return "exe".
**

func extension virtual as string
{
	var bn = assert getBasename()
	var dot = String.lastIndexOf(bn, '.')
	if dot < 0:
		return null
	return String.subString(bn, dot+1)
}

**
** Returns the name of the directory (as a string) where the current file is in.
**

func directoryName virtual as string
{
	var path = assert getPath()
	var delim = Environment.getPathSeparator()
	var dp = String.lastIndexOf(path, delim)
	if dp < 0:
		return "."
	return String.subString(path, 0, dp)
}

**
** Returns the name of the current file, excluding the directory path.
**

func getBasename virtual as string
{
	var path = assert getPath()
	var delim = Environment.getPathSeparator()
	if String.endsWith(path, String.asString(delim)):
		path = String.getSubString(path, 0, String.getLength(path) - 1)
	var dp = String.lastIndexOf(path, delim)
	if dp < 0:
		return path
	return String.subString(path, dp+1)
}

**
** Returns the name of the current file, excluding the directory path and also
** excluding the file extension, if any.
**

func getBasenameWithoutExtension virtual as string
{
	var bn = assert getBasename()
	var dot = String.lastIndexOf(bn, '.')
	if dot < 0:
		return bn
	return String.subString(bn, 0, dot)
}

func baseName as string #deprecated:
	return getBasename()

func baseNameWithoutExtension as string #deprecated:
	return getBasenameWithoutExtension()

**
** Copies the currently referenced file to a new given file, defined by the "dest" parameter.
** NOTE: As the name suggests, this does not copy directories. This method is intended solely
** to copy an individual file.
**

func copyFileTo(dest as this) as bool
{
	onError(null)
	assert dest
	if this.isSame(dest):
		return true
	var buf = assert MALLOC(4096 * 4)
	var reader = assert this.read()
	var writer = assert dest.write() {
		if reader is Closable:
			(reader as! Closable).close()
		onError(dest.getLastErrorDescription())
	}
	var v = true
	var n = 0
	while((n = reader.read(buf)) > 0) {
		var nr = writer.write(buf, n)
		if nr != n {
			v = false
			break
		}
	}
	if v {
		var fi = this.stat()
		if fi {
			var mode = fi.getMode()
			if mode != 0:
				dest.setMode(mode)
		}
	}
	else {
		dest.remove()
	}
	if reader && reader is Closable:
		(reader as! Closable).close()
	if writer && writer is Closable:
		(writer as! Closable).close()
	return v
}

**
** Copies the currently referenced File object (which may be either a file or a
** directory) to a new given target path, defined by the "dest" parameter.
**

func copyFileOrDirectoryTo(dest as this) as bool
{
	assert dest
	if isFile():
		return copyFileTo(dest)
	if not isDirectory():
		return false
	assert dest.createDirectoryRecursive()
	var it = assert entries()
	loop {
		var nsrc = it.next()
		if not nsrc:
			break
		var ndest = dest.entry(nsrc.getBasename())
		assert nsrc.copyFileOrDirectoryTo(ndest)
	}
	return true
}

**
** Truncates and replaces the contents of the given filesystem entry. after
** successful completion, the contents of the "str" variable will become the
** new contents of the file. The file contents will be encoded using the character
** encoding specified.
**

func setContentsString(str as string, encoding as string) virtual as bool
{
	if String.isEmpty(encoding):
		return false
	return setContentsBuffer(String.toBuffer(str, encoding))
}

**
** Truncates and replaces the contents of the given filesystem entry. after
** successful completion, the contents of the "str" variable will become the
** new contents of the file, encoded using the UTF-8 character encoding.
**

func setContentsUTF8(str as string) virtual as bool:
	return setContentsBuffer(String.toUTF8Buffer(str))

**
** Truncates and replaces the contents of the given filesystem entry. after
** successful completion, the contents of the "buffer" variable will become the
** new contents of the file.
**

func setContentsBuffer(buffer as buffer) virtual as bool
{
	onError(null)
	assert buffer
	var writer = assert write()
	if writer.write(buffer, SIZE(buffer)) < 0:
		return false
	writer.close()
	return true
}

**
** Reads the entire contents of the file and returns them as a string object.
** The file contents are decoded using the specified character encoding.
**

func getContentsString(encoding as string) virtual as string
{
	if String.isEmpty(encoding):
		return null
	return String.forBuffer(getContentsBuffer(), encoding)
}

**
** Reads the entire contents of the file and returns them as a string object.
** The file contents are decoded using the UTF-8 character encoding.
**

func getContentsUTF8 virtual as string:
	return String.forUTF8Buffer(getContentsBuffer())

**
** Reads the entire contents of the file with Byte Order Mark (BOM).
** Determines the charset of the file and return them as a string object.
**

func getContentsWithBOM virtual as string
{
	var buf = getContentsBuffer()
	if Buffer.getByte(buf, 0) == 0xEF && Buffer.getByte(buf, 1) == 0xBB && Buffer.getByte(buf, 2) == 0xBF {
		return String.forUTF8Buffer(Buffer.getSubBuffer(buf, 3, Buffer.getSize(buf) - 3))
	}
	else if Buffer.getByte(buf, 0) == 0xFF && Buffer.getByte(buf, 1) == 0xFE {
		onError("Not supported encoding, UTF-16 little endian")
		return null
	}
	else if Buffer.getByte(buf, 0) == 0xFE && Buffer.getByte(buf, 1) == 0xFF {
		onError("Not supported encoding, UTF-16 big-endian")
		return null
	}
	else if Buffer.getByte(buf, 0) == 0xFF && Buffer.getByte(buf, 1) == 0xFE && Buffer.getByte(buf, 2) == 0x00 && Buffer.getByte(buf, 3) == 0x00 {
		onError("Not supported encoding, UTF-32 little endian")
		return null
	}
	else if Buffer.getByte(buf, 0) == 0x00 && Buffer.getByte(buf, 1) == 0x00 && Buffer.getByte(buf, 2) == 0xFE && Buffer.getByte(buf, 3) == 0xFF {
		onError("Not supported encoding, UTF-32 big endian")
		return null
	}
	return String.forUTF8Buffer(buf)
}

**
** Reads the entire contents of the file and returns them as a buffer object.
**

func getContentsBuffer virtual as buffer
{
	onError(null)
	var reader = assert read()
	var sz = reader.getSize()
	var b = MALLOC sz
	var rsz = reader.read(b)
	reader.close()
	if rsz < sz:
		return null
	return b
}
