
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.time
import jk.thread
import jk.socket
import jk.socket.ssl

class is IOManager:

// FIXME: This implementation is incomplete

class MyEntry is IOManagerEntry
{
	pvar socket as ConnectedSocket
	var rrl as function
	var wrl as function
	var added = false

	func setListeners(rrl as function, wrl as function) as bool
	{
		this.rrl = rrl
		this.wrl = wrl
		return update()
	}

	func setReadListener(rrl as function) as bool
	{
		this.rrl = rrl
		return update()
	}

	func setWriteListener(wrl as function) as bool
	{
		this.wrl = wrl
		return update()
	}

	func update as bool
	{
		remove()
		assert socket
		if socket is TCPSocket {
			var tcps = socket as TCPSocketForNodeJS
			if rrl:
				tcps.setReadListener(rrl)
			if wrl:
				tcps.setWriteListener(wrl)
		}
		added = true
		return true
	}

	func remove as bool
	{
		if added == false:
			return false
		added = false
		return true
	}
}

var exitflag as bool
var running = false
var signalPort = -1

func onReadReady(socket as TCPSocket)
{
	assert socket
	var ss = socket.accept()
	assert ss
	ss.close()
}

func doExecute(ctx as LoggingContext) override as bool:
	return true

func stop override
{
	exitflag = true
	sendSignal()
}

func sendSignal
{
	if signalPort > 0 {
		var signalClient = assert TCPSocket.createAndConnect("127.0.0.1", signalPort)
		signalClient.close()
	}
}

func isRunning as bool:
	return running

func add(o as object) override as IOManagerEntry
{
	var s = assert o as ConnectedSocket
	return new MyEntry().setSocket(s)
}

func startTimer(delay as long, handler as function<bool>) override as IOManagerTimer:
	return null
