
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.web
import jk.json

class:

func forAPIKey(key as string) static as this
{
	assert String.isNotEmpty(key)
	return new this().setApiKey(key)
}

ctor:
	client = NativeWebClient.instance()

prop apiKey as string
var baseUrl = "https://roads.googleapis.com/v1"
var client as WebClient

func queryNearestRoads(points as vector<DynamicMap>, callback as function<void, vector<SnappedPoint>, Error>) as bool
{
	assert callback
	assert client:
		callback(null, Error.forCode("noWebClientInstance"))
	assert points:
		callback(null, Error.forCode("noPointsSupplied"))
	var cb final = callback
	var sb = new StringBuilder()
	var first = true
	foreach point as DynamicMap in points {
		if not first:
			sb.appendString("|")
		sb.appendString(point.getString("latitude"))
		sb.appendString(",")
		sb.appendString(point.getString("longitude"))
		if first:
			first = false
	}
	client.query("GET", baseUrl .. "/nearestRoads?key=" .. apiKey .. "&points=" .. sb.toString(), null, null, func(statusCode as string, headers as KeyValueList<string,string>, body as buffer) {
		var data = assert JSONParser.parseBuffer(body) as DynamicMap:
			cb(null, Error.forCode("invalidServerResponse"))
		var snappedPoints = assert data.getDynamicVector("snappedPoints")
		if not snappedPoints || snappedPoints.getSize() < 0:
			cb(null, Error.forCode("noSnappedPointsFound"))
		var sp = new vector<SnappedPoint>
		foreach point as DynamicMap in snappedPoints.toVector() {
			var p = SnappedPoint.forJsonObject(point)
			if not p:
				continue
			sp += p
		}
		cb(sp, null)
	})
	return true
}
