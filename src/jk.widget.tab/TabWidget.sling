
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class #widget #deprecated:

class TabHeaderWidget #widget
{
	ui LayerWidget
	{
		CanvasWidget headerBackground {
		}
		LayerWidget headerPadding {
			LabelWidget headerTitle {
				text = "Tab Header"
			}
		}
	}

	ctor(ctx as GuiApplicationContext)
	{
		base(ctx)
		forceCreateWidget()
	}

	pvar index as int
	pvar container as parent

	func initializeWidget override
	{
		base.initializeWidget()
		Widget.setWidgetClickHandler(this, func {
			container.updateSelectedTab(index)
		})
	}

	func setHeaderMargin(tabHeaderPadding as int #notLiteral):
		headerPadding.setWidgetMargin(tabHeaderPadding)

	func setHeaderTitle(text as string):
		headerTitle.setWidgetText(text)

	func setHeaderTitleAlign(align as int):
		headerTitle.setWidgetTextAlign(align)

	func setHeaderBackground(color as Color):
		headerBackground.setWidgetColor(color)

	func setHeaderOutlineColor(color as Color):
		headerBackground.setWidgetOutlineColor(color)

	func setWidgetRoundingRadius(radius as int #notLiteral):
		headerBackground.setWidgetRoundingRadius(radius)

	func setHeaderOutlineWidth(width as int #notLiteral):
		headerBackground.setWidgetOutlineWidth(width)

	func setHeaderTextColor(color as Color):
		headerTitle.setWidgetTextColor(color)
}

ui LayerWidget
{
	VerticalBoxWidget container {
		LayerWithBackgroundColorWidget tabHeadersBackground {
			color = Color.white()
			HorizontalBoxWidget tabHeaders {
			}
		}
		LayerWithBackgroundColorWidget background : 1.0 {
			color = Color.white()
			LayerWidget content {
			}
		}
	}
}

pvar widgetTabOutlineColor as Color
pvar widgetTabOutlineWidth as int #notLiteral
pvar widgetContentOutlineColor as Color
pvar widgetContentOutlineWidth as int #notLiteral
pvar widgetTabContent as vector<DynamicMap>
pvar widgetSelectedTabBackgroundColor as Color
pvar widgetSelectedTabTextColor as Color
pvar widgetUnselectedTabBackgroundColor as Color
pvar widgetUnselectedTabTextColor as Color
pvar widgetTabHeaderTitleMargin as int #notLiteral
pvar widgetRoundingRadius as int #notLiteral
pvar widgetTextAlign as int #notLiteral
pvar widgetContentSpacing as int #notLiteral
pvar widgetTabContentRoundingRadius as int #notLiteral
pvar widgetOnTabChangeListener as function<void, int, Widget>

func initializeWidget override
{
	base.initializeWidget()
	assert widgetTabContent
	container.setWidgetSpacing(widgetContentSpacing)
	if widgetContentOutlineColor:
		background.setWidgetOutlineColor(widgetContentOutlineColor)
	background.setWidgetOutlineWidth(widgetContentOutlineWidth)
	background.setWidgetRoundingRadius(widgetTabContentRoundingRadius)
	tabHeadersBackground.setWidgetRoundingRadius(widgetRoundingRadius)
	for(var i = 0; i < Vector.getSize(widgetTabContent); i++) {
		var d = Vector.get(widgetTabContent, i)
		if not d:
			continue
		var h = new TabHeaderWidget(context)
		h.setHeaderMargin(widgetTabHeaderTitleMargin)
		h.setContainer(this)
		h.setIndex(i)
		h.setHeaderTitle(d.getString("header"))
		h.setHeaderTitleAlign(widgetTextAlign)
		if widgetTabOutlineColor:
			h.setHeaderOutlineColor(widgetTabOutlineColor)
		h.setHeaderOutlineWidth(widgetTabOutlineWidth)
		tabHeaders.addWidget(h, 1.0)
	}
	updateSelectedTab(0)
}

func updateSelectedTab(idx as int)
{
	var w = Widget.getChildren(tabHeaders)
	for(var i = 0; i < sizeof w; i++) {
		if i == idx {
			if not widgetSelectedTabBackgroundColor:
				widgetSelectedTabBackgroundColor = Color.white()
			if not widgetSelectedTabTextColor:
				widgetSelectedTabTextColor = Color.black()
			(w[idx] as TabHeaderWidget).setHeaderBackground(widgetSelectedTabBackgroundColor)
			(w[idx] as TabHeaderWidget).setHeaderTextColor(widgetSelectedTabTextColor)
			(w[idx] as TabHeaderWidget).setWidgetRoundingRadius(widgetRoundingRadius)
			continue
		}
		if not widgetUnselectedTabBackgroundColor:
			widgetUnselectedTabBackgroundColor = Color.forRGB(128,128,128)
		if not widgetUnselectedTabTextColor:
			widgetUnselectedTabTextColor = Color.forRGB(80,80,80)
		(w[i] as TabHeaderWidget).setHeaderBackground(widgetUnselectedTabBackgroundColor)
		(w[i] as TabHeaderWidget).setHeaderTextColor(widgetUnselectedTabTextColor)
		(w[i] as TabHeaderWidget).setWidgetRoundingRadius(widgetRoundingRadius)
	}
	updateContent(idx)
}

func updateContent(idx as int) private
{
	Widget.removeChildrenOf(content)
	var v = assert Vector.get(widgetTabContent, idx)
	var w = assert v.get("widget") as Widget
	content.addWidget(w)
	if widgetOnTabChangeListener:
		widgetOnTabChangeListener(idx, w)
}

func setWidgetSelectedTab(index as int)
{
	if index < sizeof widgetTabContent:
		updateSelectedTab(index)
}
