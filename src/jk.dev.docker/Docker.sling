
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.io
import jk.env
import jk.log
import jk.process

class:

prop docker:dockerValue as File
{
	get {
		if not dockerValue:
			dockerValue = ExternalCommand.findInPath("docker")
		if not dockerValue:
			Error.throw("commandNotFound", "docker")
		return dockerValue
	}
	set {
		dockerValue = value
	}
}

var ctx public as LoggingContext

ctor(ctx as LoggingContext):
	this.ctx = ctx

func buildImageFromFiles(files as vector<File>, entrypoint as string) as string
{
	if Vector.getSize(files) < 1:
		Error.throw("noFiles", null)
	var v as string
	var dir = TemporaryDirectory.create()
	if not dir:
		Error.throw("failedToCreateTemporaryDirectory", null)
	try {
		foreach file in files {
			var dest = dir.entry(file.getBasename())
			file.copyFileOrDirectoryTo(dest)
		}
		v = buildImageFromDirectory(dir, entrypoint)
	}
	catch e {
		Log.debug(ctx, "Caught buildImageFromFiles exception: `" .. String.asString(e) .. "'")
		throw e
	}
	finally {
		Log.debug(ctx, "Removing temporary directory: `" .. String.asString(dir) .. "'")
		dir.removeRecursive()
	}
	return v
}

func buildImageFromDirectory(directory as File, entrypoint as string, baseImage as string = null) as string
{
	if not directory:
		Error.throw("parameterMissing", "directory")
	if not directory.isDirectory():
		Error.throw("noSuchDirectory", directory)
	var dockerfile = TemporaryFile.create()
	if not dockerfile:
		Error.throw("failedToCreateTemporaryFile", null)
	var v as string
	try {
		var writer = PrintWriterWrapper.forWriter(dockerfile.write())
		if not writer:
			Error.throw("failedToWriteFile", dockerfile)
		var bim = baseImage
		if String.isEmpty(bim):
			bim = "scratch"
		writer.println("FROM " .. bim)
		writer.println("COPY . .")
		if String.isNotEmpty(entrypoint):
			writer.println("CMD [ \"/" .. entrypoint .. "\" ]")
		if writer is Closable:
			(writer as! Closable).close()
		v = buildImageFromDockerfile(dockerfile, directory)
	}
	catch e {
		Log.debug(ctx, "Caught buildImageFromDirectory exception: `" .. String.asString(e) .. "'")
		throw e
	}
	finally {
		Log.debug(ctx, "Removing temporary dockerfile: `" .. String.asString(dockerfile) .. "'")
		dockerfile.remove()
	}
	return v
}

func getProcessLauncher as ProcessLauncher
{
	var pl = ProcessLauncher.forFile(docker)
	if not pl:
		Error.throw("noProcessLauncher", docker)
	pl.setDetachFromTerminal(true)
	return pl
}

class ExecuteResult private
{
	pvar returnValue as int
	pvar output as string
}

func doExecute(pl as ProcessLauncher) private as ExecuteResult
{
	var v = new ExecuteResult()
	v.setReturnValue(-1)
	if not pl:
		return v
	var sb = new StringBuilder()
	if ctx && ctx.isInDebugMode():
		Log.debug(ctx, "Executing: `" .. String.asString(pl) .. "'")
	var result = pl.executeToStringBuilder(sb)
	var rr = sb.toString()
	if result != 0 {
		Log.error(ctx, "Docker output: `" .. rr .. "'")
	}
	else if ctx && ctx.isInDebugMode() {
		Log.debug(ctx, "Docker output: `" .. rr .. "'")
	}
	v.setReturnValue(result)
	v.setOutput(rr)
	return v
}

func doSimpleExecute(pl as ProcessLauncher) private
{
	var v = doExecute(pl).getReturnValue()
	if v != 0:
		Error.throw("dockerActionFailed", pl)
}

func buildImageFromDockerfile(dockerfile as File, context as File, buildArgs as DynamicMap = null) as string
{
	if not dockerfile:
		Error.throw("parameterMissing", "dockerFile")
	if not dockerfile.isFile():
		Error.throw("noSuchFile", dockerfile)
	if context && context.isDirectory() == false:
		Error.throw("noSuchDirectory", context)
	var pl = getProcessLauncher()
	var tmpdir as File
	var rcontext = context
	if not rcontext {
		tmpdir = TemporaryDirectory.create()
		if not tmpdir:
			Error.throw("failedToCreateTemporarDirectory", null)
		rcontext = tmpdir
	}
	pl.addToParams("build")
	pl.addToParams(rcontext.getPath())
	if buildArgs {
		foreach key in buildArgs.getKeys() {
			var val = buildArgs.getString(key)
			if not val:
				val = ""
			pl.addToParams("--build-arg")
			pl.addToParams(key .. "=" .. val)
		}
	}
	pl.addToParams("-f")
	pl.addToParams(dockerfile.getPath())
	if ctx && ctx.isInDebugMode():
		Log.debug(ctx, "Using Dockerfile contents: `" .. dockerfile.getContentsUTF8() .. "'")
	var result = doExecute(pl)
	var rr = result.getOutput()
	if tmpdir:
		tmpdir.removeRecursive()
	var lookfor = "Successfully built "
	var p = String.getLastIndexOfString(rr, lookfor)
	if p < 0:
		Error.throw("dockerErrorBuildFailed", null)
	var imageId = String.strip(String.getEndOfString(rr, p + String.getLength(lookfor)))
	if String.isEmpty(imageId):
		Error.throw("dockerErrorNoImageId", null)
	return imageId
}

func executeRunner(runner as DockerImageRunner) as int
{
	if not runner:
		Error.throw("parameterMissing", "runner")
	var id = runner.getImageId()
	if String.isEmpty(id):
		Error.throw("noImageId", runner)
	var pl = getProcessLauncher()
	pl.addToParams("run")
	var env = runner.getEnvironment()
	if env {
		foreach key in Map.getKeys(env) {
			pl.addToParams("--env")
			pl.addToParams(key .. "=" .. Map.get(env, key))
		}
	}
	foreach port in runner.getPorts() {
		pl.addToParams("-p")
		if String.contains(port, ":") {
			pl.addToParams(port)
		}
		else {
			pl.addToParams(port .. ":" .. port)
		}
	}
	pl.addToParams("-it")
	pl.addToParams("--rm")
	pl.addToParams(id)
	return doExecute(pl).getReturnValue()
}

func tag(image as string, tag as string)
{
	if String.isEmpty(image):
		Error.throw("missingParameter", "Docker:tag:image")
	if String.isEmpty(tag):
		Error.throw("missingParameter", "Docker:tag:tag")
	var pl = getProcessLauncher()
	pl.addToParams("tag")
	pl.addToParams(image)
	pl.addToParams(tag)
	doSimpleExecute(pl)
}

func push(tag as string)
{
	if String.isEmpty(tag):
		Error.throw("missingParameter", "Docker:push:tag")
	var pl = getProcessLauncher()
	pl.addToParams("push")
	pl.addToParams(tag)
	doSimpleExecute(pl)
}

func login(username as string, password as string, server as string)
{
	if String.isEmpty(username):
		Error.throw("missingParameter", "Docker:login:username")
	if String.isEmpty(password):
		Error.throw("missingParameter", "Docker:login:password")
	if String.isEmpty(server):
		Error.throw("missingParameter", "Docker:login:server")
	var pl = getProcessLauncher()
	pl.addToParams("login")
	pl.addToParams("-u")
	pl.addToParams(username)
	pl.addToParams("--password")
	pl.addToParams(password)
	pl.addToParams(server)
	doSimpleExecute(pl)
}

func readFromReader(reader as Reader, buffer as buffer, builder as StringBuilder) private
{
	loop {
		var r = reader.read(buffer)
		if r < 1:
			break
		var str = assert String.forUTF8Buffer(Buffer.getSubBuffer(buffer, 0, r))
		builder.appendString(str)
	}
}
