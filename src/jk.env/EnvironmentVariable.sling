
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func getAll static as map<string,string>
{
	IFDEF "target_kotlin" {
		var vars as map<string,string>
		lang "kotlin" {{{
			val vs = java.lang.System.getenv()
			vs!!.forEach { (a, b) -> vars!!.set(a, b) }
		}}}
		return vars
	}
	ELSE IFDEF "target_sushi" {
		var v = new map<string,string>
		var envs = lang "lua" vector<string> {{{ _os:get_all_environment_variables() }}}
		if envs {
			foreach env in envs {
				var comps = String.split(env, '=', 2)
				var key = Vector.get(comps, 0)
				var val = Vector.get(comps, 1)
				if not key:
					continue
				if not val:
					val = ""
				Map.set(v, key, val)
			}
		}
		return v
	}
	ELSE {
		ERROR "Not implemented"
		return null
	}
}

func get(key as string) static as string
{
	assert key
	IFDEF "target_cs" {
		var v as string
		lang "cs" {{{
			v = System.Environment.GetEnvironmentVariable(key);
		}}}
		return v
	}
	ELSE IFDEF "target_java" {
		var v as string
		lang "java" {{{
			v = java.lang.System.getenv(key);
		}}}
		return v
	}
	ELSE IFDEF "target_objc" {
		var v as string
		lang "objc" {{{
			v = [[[NSProcessInfo processInfo] environment] objectForKey:key];
		}}}
		return v
	}
	ELSE IFDEF "target_nodejs" {
		var v as string
		lang "js" {{{
			v = process.env[key];
		}}}
		return v
	}
	ELSE IFDEF "target_kotlin" {
		var v as string
		lang "kotlin" {{{
			v = java.lang.System.getenv(key)
		}}}
		return v
	}
	ELSE IFDEF "target_stdlua" {
		var v as string
		lang "lua" {{{
			v = os.getenv(key)
		}}}
		return v
	}
	ELSE IFDEF "target_sushi" {
		var v as string
		lang "lua" {{{
			v = _os:get_environment_variable(key)
		}}}
		return v
	}
	ELSE IFDEF "target_swift" {
		var v as string
		lang "swift" {{{
			v = ProcessInfo.processInfo.environment[key]
		}}}
		return v
	}
	ELSE {
		var vars = assert getAll()
		return Map.get(vars, key)
	}
}

func set(key as string, val as string) static
{
	assert key
	IFDEF "target_cs" {
		lang "cs" {{{
			System.Environment.SetEnvironmentVariable(key, val);
		}}}
	}
	ELSE {
		ERROR "Not implemented"
	}
}

func unset(key as string) static
{
	ERROR "Not implemented"
}
