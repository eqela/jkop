
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.worker
import jk.mypacket
import jk.url

class:

func instance static as this
{
	var v = new this()
	v.parseWorkerInput()
	return v
}

func parseWorkerInput
{
	var parser = MyPacketParser.forBuffer(Worker.getInputBuffer())
	setMethod(parser.getLengthEncodedString())
	setPath(parser.getLengthEncodedString())
	var nheaders = parser.getLengthEncodedInteger()
	for(var n=0; n<nheaders; n++) {
		var key = parser.getLengthEncodedString()
		var val = parser.getLengthEncodedString()
		if key {
			if not headers:
				headers = new KeyValueList<string,string>
			headers.add(key, val)
		}
	}
	setBody(parser.getLengthEncodedBuffer())
}

pvar method as string
pvar path as string
pvar headers as KeyValueList<string,string>
pvar body as buffer
var url as URL

func getBodyString as string:
	return String.forUTF8Buffer(body)

func addToHeaders(key as string, value as string)
{
	assert key
	var vv = value
	if not vv:
		vv = ""
	if not headers:
		headers = new KeyValueList<string,string>()
	headers.add(key, vv)
}

func removeFromHeaders(key as string)
{
	assert headers
	assert key
	var n = 0
	var klow = String.toLowerCase(key)
	while n < headers.count() {
		var kk = String.toLowerCase(headers.getKey(n))
		if kk && kk == klow {
			headers.remove(n)
		}
		else {
			n++
		}
	}
}

func getHeaderValue(name as string) as string
{
	assert name
	assert headers
	var nlow = String.toLowerCase(name)
	var it = headers.iterate()
	while it {
		var vv = it.next()
		if not vv:
			break
		if nlow == String.toLowerCase(vv.key):
			return vv.value
	}
	return null
}

func getURL as URL
{
	if not url:
		url = URL.forString(path, true)
	return url
}

func getQueryParameters as map<string,string>
{
	var url = assert getURL()
	return url.getQueryParameters()
}

func getQueryParameter(key as string) as string
{
	var url = assert getURL()
	return url.getQueryParameter(key)
}

func getURLPath as string
{
	var url = assert getURL()
	return url.getPath()
}
