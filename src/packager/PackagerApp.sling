
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.os
import jk.log
import jk.env
import jk.json
import jk.console
import jk.archive

class is ConsoleApplicationMain:

var source as File
var outputDir as File
var type as string
var wixPath as File
var packageInfoDetails = new DynamicMap()

func initialize override as bool
{
	foreach arg in args {
		if arg.isOption("type") {
			type = arg.value
		}
		else if arg.isOption("wix") {
			wixPath = File.forPath(arg.value)
		}
		else if arg.isOption("output") {
			outputDir = File.forPath(arg.value)
		}
		else if arg.isParameter() {
			assert source == null:
				Log.error(ctx, "Only one source path can be specified")
			source = File.forPath(arg.parameter)
		}
		else if arg.isAnyOption() && String.startsWith(arg.getKey(), "D") {
			packageInfoDetails.setString(String.getEndOfString(arg.getKey(), 1), arg.value)
		}
		else {
			arg.reportAsUnsupported(ctx)
			return false
		}
	}
	if String.isEmpty(type) {
		if OS.isWindows() {
			type = "msi"
		}
		else if OS.isLinux() {
			type = "deb"
		}
		else if OS.isMacOS() {
			type = "pkg"
		}
	}
	return true
}

func execute override as bool
{
	assert source:
		Log.error(ctx, "No source path provided.")
	var sourceDir as File
	var tmpDir as File
	if source.isFile() {
		if source.hasExtension("zip") {
			assert tmpDir = TemporaryDirectory.create():
				Log.error(ctx, "Failed to create a temporary directory")
			Log.status(ctx, "Extracting files: `" .. source.getPath() .. "' .. ")
			assert ZipReader.extractZipFileToDirectory(source, tmpDir) {
				Log.error(ctx, "Failed to extract zip file: '" .. source.getPath() .. "'.")
				tmpDir.removeRecursive()
			}
			Log.status(ctx, null)
			sourceDir = tmpDir
		}
		else if TarReader.isTarFile(source) {
			assert tmpDir = TemporaryDirectory.create():
				Log.error(ctx, "Failed to create a temporary directory")
			Log.status(ctx, "Extracting files: `" .. source.getPath() .. "' .. ")
			assert TarReader.extractTarFileToDirectory(source, tmpDir) {
				Log.error(ctx, "Failed to extract tar file: '" .. source.getPath() .. "'.")
				tmpDir.removeRecursive()
			}
			Log.status(ctx, null)
			sourceDir = tmpDir
		}
		else {
			Log.error(ctx, "Unsupported source file type: `" .. source.getPath() .. "'")
			return false
		}
	}
	else if source.isDirectory() {
		sourceDir = source
	}
	else {
		Log.error(ctx, "Not a file or directory: `" .. source.getPath() .. "'")
		return false
	}
	loop {
		var entry as File
		var it = sourceDir.entries()
		while it {
			var ee = it.next()
			if not ee:
				break
			if entry == null {
				entry = ee
			}
			else {
				entry = null
				break
			}
		}
		if not entry:
			break
		sourceDir = entry
	}
	var v = doExecute(sourceDir)
	if tmpDir:
		tmpDir.removeRecursive()
	return v
}

func doExecute(sourceDir as File) as bool
{
	var pi = sourceDir.entry("packageinfo.json")
	if pi.isFile() {
		var pic = assert JSONParser.parse(pi) as DynamicMap:
			Log.error(ctx, "Invalid format for package info file: `" .. pi.getPath() .. "'")
		foreach key in pic.getKeys() {
			if not packageInfoDetails.getString(key):
				packageInfoDetails.setString(key, pic.getString(key))
		}
	}
	var packageInfo = PackageInfo.forData(packageInfoDetails)
	assert String.isNotEmpty(packageInfo.vendor):
		Log.error(ctx, "No vendor specified")
	assert String.isNotEmpty(packageInfo.name):
		Log.error(ctx, "No name specified")
	assert String.isNotEmpty(packageInfo.version):
		Log.error(ctx, "No version specified")
	assert String.isNotEmpty(packageInfo.platform):
		Log.error(ctx, "No target platform/architecture specified")
	assert String.isNotEmpty(packageInfo.authorName):
		Log.error(ctx, "No author name specified")
	assert String.isNotEmpty(packageInfo.authorEmail):
		Log.error(ctx, "No author email specified")
	assert String.isNotEmpty(packageInfo.description):
		Log.error(ctx, "No description specified")
	if String.isEmpty(packageInfo.title):
		packageInfo.title = packageInfo.name
	var od = outputDir
	if od == null:
		od = source.getParent()
	var maker as PackageMaker
	if type == "deb" {
		maker = new DebMaker()
	}
	else if type == "msi" {
		var msi = new MsiMaker()
		msi.setWixPath(wixPath)
		maker = msi
	}
	else if type == "pkg" {
		maker = new PkgMaker()
	}
	assert maker:
		Log.error(ctx, "Unsupported package type: `" .. type .. "'")
	assert maker.execute(ctx, sourceDir, od, packageInfo):
		Log.error(ctx, "Package generation failed.")
	return true
}

main:
	return executeMain(new this(), args)
