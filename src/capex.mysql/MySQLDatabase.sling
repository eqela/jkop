
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

import capex.data

class is SQLDatabase abstract:

const SSL_MODE_PREFERRED = "Preferred"
const SSL_MODE_NONE = "None"
const SSL_MODE_REQUIRED = "Required"
const SSL_MODE_VERIFYCA = "VerifyCA"
const SSL_MODE_VERIFYFULL = "VerifyFull"

const PROTOCOL_SOCKET = "socket"
const PROTOCOL_UNIX = "unix"
const PROTOCOL_PIPE = "pipe"
const PROCOL_MEMORY = "memory"

prop databaseName as string
prop enableUTF8 = false

func instance private static as this
{
	IFDEF "target_netx" {
		return new MySQLDatabaseForDotNet()
	}
	ELSE {
		ERROR "Not implemented"
		return null
	}
}

func forConnectionString(connectionString as string, logContext as LoggingContext, sslMode as string = SSL_MODE_NONE, enableUTF8 as bool = false) static as this
{
	assert String.isNotEmpty(connectionString)
	var ss = String.split(connectionString, ':', 4)
	assert ss && Vector.getSize(ss) == 4
	return connect(ss[0], ss[1], ss[2], ss[3], sslMode, enableUTF8, logContext)
}

func connect(serverAddress as string, username as string, password as string, database as string, sslMode as string, enableUTF8 as bool, logger as LoggingContext = null) static as this
{
	assert String.isNotEmpty(serverAddress) && String.isNotEmpty(username) && String.isNotEmpty(password) && String.isNotEmpty(database) && String.isNotEmpty(sslMode)
	var v = assert instance()
	v.setLogger(logger)
	v.setEnableUTF8(enableUTF8)
	assert v.initialize(serverAddress, username, password, database, sslMode, PROTOCOL_SOCKET)
	return v
}

func forConfig(logContext as LoggingContext, config as DynamicMap) static as this
{
	assert config
	var serverAddress = assert config.getString("serverAddress")
	var username = assert config.getString("username")
	var password = assert config.getString("password")
	var database = assert config.getString("database")
	var enableUTF8 = config.getBoolean("enableUTF8", false)
	var sslMode = config.getString("sslMode")
	if String.isEmpty(sslMode):
		sslMode = SSL_MODE_NONE
	var protocol = config.getString("protocol")
	if String.isEmpty(protocol):
		protocol = PROTOCOL_SOCKET
	var v = assert instance()
	v.setLogger(logContext)
	v.setEnableUTF8(enableUTF8)
	assert v.initialize(serverAddress, username, password, database, sslMode, protocol)
	return v
}

func getDatabaseTypeId override as string:
	return "mysql"

func initialize(serverAddress as string, username as string, password as string, database as string, sslMode as string, protocol as string) virtual as bool:
	return true

func querySingleRow(stmt as SQLStatement) override as cape.DynamicMap
{
	var it = assert query(stmt)
	var v as cape.DynamicMap #force = it.next()
	it.close()
	return v
}

func tableExists(table as string) override as bool
{
	assert String.isNotEmpty(table) && String.isNotEmpty(databaseName)
	var stmt = assert prepare("SELECT TABLE_NAME FROM information_schema.tables WHERE table_schema = ? AND table_name = ? LIMIT 1;")
	stmt.addParamString(databaseName)
	stmt.addParamString(table)
	var sr = assert querySingleRow(stmt)
	return String.equalsIgnoreCase(table, sr.getString("TABLE_NAME"))
}

func queryAllTableNames(callback as function<void, vector>) override
{
	var stmt = assert prepare("SELECT TABLE_NAME FROM information_schema.tables WHERE table_schema = ?;") {
		callback(null)
	}
	stmt.addParamString(databaseName)
	query(stmt, func(it as SQLResultSetIterator) {
		assert it {
			callback(null)
		}
		var v = new vector
		loop {
			var vv = it.next()
			if not vv:
				break
			v += vv.getString("TABLE_NAME")
		}
		callback(v)
	})
}

func queryAllTableNames override as vector
{
	assert String.isNotEmpty(databaseName)
	var stmt = assert prepare("SELECT TABLE_NAME FROM information_schema.tables WHERE table_schema = ?;")
	stmt.addParamString(databaseName)
	var it = assert query(stmt)
	var v = new vector
	loop {
		var vv = it.next()
		if not vv:
			break
		v += vv.getString("TABLE_NAME")
	}
	return v
}

func columnToCreateString(cc as SQLTableColumnInfo) private as string
{
	var sb = new StringBuilder()
	var columnName = cc.getName()
	sb.append(columnName)
	sb.append(' ')
	var tt = cc.getType()
	sb.append(prepareTypeAsString(tt, columnName))
	return sb.toString()
}

func prepareTypeAsString(tt as int, columnName as string, forDataTypeChecking as bool = false) as string
{
	if tt == SQLTableColumnInfo.TYPE_INTEGER_KEY {
		if forDataTypeChecking:
			return "INTEGER"
		return "INTEGER AUTO_INCREMENT, PRIMARY KEY (" .. columnName .. ")"
	}
	else if tt == SQLTableColumnInfo.TYPE_INTEGER {
		return "INTEGER"
	}
	else if tt == SQLTableColumnInfo.TYPE_LONG_KEY {
		if forDataTypeChecking:
			return "BIGINT"
		return "BIGINT AUTO_INCREMENT, PRIMARY KEY (" .. columnName .. ")"
	}
	else if tt == SQLTableColumnInfo.TYPE_LONG {
		return "BIGINT"
	}
	else if tt == SQLTableColumnInfo.TYPE_STRING {
		return "VARCHAR(255)"
	}
	else if tt == SQLTableColumnInfo.TYPE_STRING_KEY {
		if forDataTypeChecking:
			return "VARCHAR(255)"
		return "VARCHAR(255), PRIMARY KEY (" .. columnName .. ")"
	}
	else if tt == SQLTableColumnInfo.TYPE_TEXT {
		return "LONGTEXT"
	}
	else if tt == SQLTableColumnInfo.TYPE_BLOB {
		return "LONGBLOB"
	}
	else if tt == SQLTableColumnInfo.TYPE_DOUBLE {
		return "REAL"
	}
	Log.error(getLogger(), "Unknown column type: " .. String.forInteger(tt))
	return "UNKNOWN"
}

func prepareCreateTableStatement(table as string, columns as vector<SQLTableColumnInfo>) override as SQLStatement
{
	assert String.isNotEmpty(table) && columns
	var sb = new StringBuilder()
	sb.append("CREATE TABLE ")
	sb.append(table)
	sb.append(" (")
	var first = true
	foreach column as SQLTableColumnInfo in columns {
		if not first:
			sb.append(',')
		sb.append(' ')
		sb.append(columnToCreateString(column))
		first = false
	}
	sb.append(" );")
	return prepare(sb.toString())
}

func prepareDeleteTableStatement(table as string) override as SQLStatement
{
	assert String.isNotEmpty(table)
	var sb = new StringBuilder()
	sb.append("DROP TABLE ")
	sb.append(table)
	sb.append(";")
	return prepare(sb.toString())
}

func prepareCreateIndexStatement(table as string, column as string, unique as bool) override as SQLStatement
{
	assert String.isNotEmpty(table) && String.isNotEmpty(column)
	var unq = ""
	if unique:
		unq = "UNIQUE "
	var sql = "CREATE " .. unq .. "INDEX " .. table .. "_" .. column .. " ON " .. table .. " (" .. column .. ")"
	return prepare(sql)
}

func prepareCreateColumnStatement(table as string, column as SQLTableColumnInfo) override as SQLStatement
{
	assert String.isNotEmpty(table) && column
	var sql = "ALTER TABLE " .. table .. " ADD COLUMN " .. column.getName() .. " " .. prepareTypeAsString(column.getType(), column.getName())
	return prepare(sql)
}

func prepareUpdateColumnTypeStatement(table as string, column as SQLTableColumnInfo) override as SQLStatement
{
	assert String.isNotEmpty(table) && column
	var sql = "ALTER TABLE " .. table .. " CHANGE " .. column.getName() .. " " .. column.getName() .. " " .. prepareTypeAsString(column.getType(), column.getName(), true)
	return prepare(sql)
}

func getLastInsertId(table as string) override as long
{
	// FIXME: Parameter table is ignored.
	var v = assert querySingleRow(prepare("SELECT LAST_INSERT_ID() AS id;"))
	return v.getLongInteger("id")
}

func getPrimaryKeyColumnName(table as string) override as string
{
	var v = assert querySingleRow(prepare("SELECT COLUMN_NAME FROM information_schema.KEY_COLUMN_USAGE WHERE CONSTRAINT_NAME LIKE 'PRIMARY%' AND TABLE_NAME='" .. table .. "';"))
	return v.getString("COLUMN_NAME")
}

func getIdentityColumnName(table as string) override as string
{
	var v = assert querySingleRow(prepare("SELECT COLUMN_NAME FROM information_schema.columns WHERE TABLE_NAME='" .. table .. "' AND IS_NULLABLE='NO' AND EXTRA LIKE '%auto_increment%';"))
	return v.getString("COLUMN_NAME")
}

func columnExists(table as string, column as string) override as bool
{
	assert String.isNotEmpty(table) && String.isNotEmpty(databaseName) && String.isNotEmpty(column)
	var stmt = assert prepare("SELECT COLUMN_NAME FROM information_schema.columns WHERE table_schema = ? AND table_name = ? AND column_name = ? LIMIT 1;")
	stmt.addParamString(databaseName)
	stmt.addParamString(table)
	stmt.addParamString(column)
	var sr = assert querySingleRow(stmt)
	return String.equalsIgnoreCase(column, sr.getString("COLUMN_NAME"))
}

func isColumnTypeSame(table as string, column as SQLTableColumnInfo) override as bool
{
	assert String.isNotEmpty(table) && String.isNotEmpty(databaseName) && column
	var stmt = assert prepare("SELECT COLUMN_TYPE FROM information_schema.columns WHERE table_schema = ? AND table_name = ? AND column_name = ? LIMIT 1;")
	stmt.addParamString(databaseName)
	stmt.addParamString(table)
	stmt.addParamString(column.getName())
	var sr = assert querySingleRow(stmt)
	return String.equalsIgnoreCase(prepareTypeAsString(column.getType(), column.getName(), true), sr.getString("COLUMN_TYPE"))
}
