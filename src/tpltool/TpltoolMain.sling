
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.log
import jk.console
import jk.template

class is ConsoleApplicationMain:

var sources as vector<File>
var output as File

func initialize override as bool
{
	foreach arg in args {
		if arg.isParameter() {
			if not sources:
				sources = new vector<File>
			sources += File.forPath(arg.parameter)
		}
		else if arg.isOption("output") {
			output = File.forPath(arg.value)
		}
		else {
			arg.reportAsUnsupported(ctx)
			return false
		}
	}
	return true
}

func execute override as bool
{
	assert output:
		Log.error(ctx, "No output directory specified")
	foreach source in sources {
		var ff = FileFinder.forRoot(source)
		loop {
			var file = ff.next()
			if not file:
				break
			if not file.isFile():
				continue
			var rp = file.getRelativePath(source, null)
			if not rp:
				continue
			var isTemplate = false
			if String.endsWith(rp, ".t") {
				rp = String.getSubString(rp, 0, String.getLength(rp) - 2)
				isTemplate = true
			}
			if String.endsWith(rp, ".html") && String.equals(rp, "index.html") == false:
				rp = String.getSubString(rp, 0, String.getLength(rp) - 5) .. "/index.html"
			var dest = output
			foreach comp in String.split(rp, '/'):
				dest = dest.entry(comp)
			dest.getParent().createDirectoryRecursive()
			if isTemplate {
				var tt = assert TextTemplate.forFile(file, "<%", "%>", TextTemplate.TYPE_HTML, sources, null, ctx):
					Log.error(ctx, "Failed to process template file `" .. file.getPath() .. "'")
				var str = assert tt.execute(null, null):
					Log.error(ctx, "Failed to execute template file `" .. file.getPath() .. "'")
				dest.setContentsUTF8(str)
			}
			else {
				file.copyFileTo(dest)
			}
		}
	}
	return true
}

main:
	return executeMain(new this(), args)
