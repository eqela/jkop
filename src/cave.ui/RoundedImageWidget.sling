
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class #widget:

ui LayerWidget
{
	ImageWidget imageWidget {
		imageScaleMethod = ImageWidget.FIT
	}
}

ctor(ctx as GuiApplicationContext)
{
	base(ctx)
	forceCreateWidget()
}

func setWidgetSize(sz as int #notLiteral) as this
{
	setWidgetHeightRequest(sz)
	setWidgetWidthRequest(sz)
	return this
}

func setWidgetImageResource(src as string) as this
{
	var image = context.getResourceImage(src)
	image = createCircularImage(image)
	imageWidget.setWidgetImage(image)
	return this
}

func setWidgetImage(image as Image) as this
{
	var img = createCircularImage(image)
	imageWidget.setWidgetImage(img)
	return this
}

func createCircularImage(image as Image) private as Image
{
	assert image
	var minSize = Math.min(image.getPixelWidth(), image.getPixelHeight()) as int
	image = image.crop(0, 0, minSize, minSize)
	image = image.scaleToSize(minSize, minSize)
	IFDEF "target_iosoc" {
		var outputImage as !"UIImage"
		var bytesData #used = image.toPNGData()
		lang "objc" {{{
			NSData *imageData = [NSData dataWithBytes:[bytesData bytes] length:[bytesData length]];
			UIImage *uiImage = [UIImage imageWithData:imageData];
			CGRect rect = CGRectMake(0, 0, [image getPixelWidth], [image getPixelHeight]);
			UIGraphicsBeginImageContextWithOptions(rect.size, NO, uiImage.scale); {
				UIBezierPath *interior = [UIBezierPath bezierPathWithOvalInRect:rect];
				[interior addClip];
				[uiImage drawInRect:rect];
			}
			outputImage = UIGraphicsGetImageFromCurrentImageContext();
			UIGraphicsEndImageContext();
		}}}
		return ImageForIOS.forUIImage(outputImage)
	}
	IFDEF "target_android" {
		var w = image.getPixelWidth()
		var h = image.getPixelHeight()
		var img = assert (image as ImageForAndroid).getAndroidBitmap()
		var output as !"android.graphics.Bitmap"
		lang "java" {{{
			output = android.graphics.Bitmap.createBitmap(w, h, android.graphics.Bitmap.Config.ARGB_8888);
			android.graphics.Canvas canvas = new android.graphics.Canvas(output);
			android.graphics.Paint paint = new android.graphics.Paint();
			android.graphics.Rect rect = new android.graphics.Rect(0, 0, w, h);
			android.graphics.RectF rectf = new android.graphics.RectF(rect);
			paint.setAntiAlias(true);
			canvas.drawARGB(0, 0, 0, 0);
			canvas.drawOval(rectf, paint);
			paint.setXfermode(new android.graphics.PorterDuffXfermode(android.graphics.PorterDuff.Mode.SRC_IN));
			canvas.drawBitmap(img, rect, rect, paint);
		}}}
		return ImageForAndroid.forAndroidBitmap(output)
	}
	ELSE {
		ERROR "Not implemented"
		return null
	}
}
