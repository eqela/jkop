
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import cave

class is Backend:

class ViewSprite is Sprite
{
	var view protected as !"android.view.View"
	prop widthFactor as double
	prop heightFactor as double
	var myx protected = -99999.9
	var myy protected = -99999.9
	var mywidth protected as double
	var myheight protected as double
	var myAngle protected = 0.0
	var myAlpha protected = 1.0

	func getView as !"android.view.View"
	{
		return view
	}

	func getViewGroup as !"android.view.ViewGroup"
	{
		return view as !"android.view.ViewGroup"
	}

	func setView(value as !"android.view.View") as this
	{
		view = value
		return this
	}

	func setBackgroundColor(color as Color)
	{
		if(color != null) {
			view.setBackgroundColor(color.toARGBInt32())
		}
		else {
			view.setBackgroundColor(0)
		}
	}

	func move(x as double, y as double)
	{
		if(x != myx) {
			view.setX(x * widthFactor as float)
			myx = x
		}
		if(y != myy) {
			view.setY(y * heightFactor as float)
			myy = y
		}
	}

	func updateSizeAsPixels(wpx as int, hpx as int)
	{
		mywidth = wpx / widthFactor
		myheight = hpx / heightFactor
	}

	func setRotation(angle as double)
	{
		if(myAngle == angle) {
			return
		}
		var a = angle * 180.0 / Math.M_PI
		view.setRotation(a as float)
		myAngle = angle
	}

	func setAlpha(alpha as double)
	{
		var f = alpha
		if(f < 0) {
			f = 0
		}
		if(f > 1) {
			f = 1
		}
		if(f == myAlpha) {
			return
		}
		view.setAlpha(f as float)
		myAlpha = f
	}

	func scale(scalex as double, scaley as double)
	{
		view.setScaleX(scalex as float)
		view.setScaleY(scaley as float)
	}

	func getX as double
	{
		return myx
	}

	func getY as double
	{
		return myy
	}

	func getWidth as double
	{
		return mywidth
	}

	func getHeight as double
	{
		return myheight
	}

	func getRotation as double
	{
		return myAngle
	}

	func getAlpha as double
	{
		return myAlpha
	}

	func getScaleX as double
	{
		return view.getScaleX() as double
	}

	func getScaleY as double
	{
		return view.getScaleY() as double
	}

	func removeFromContainer
	{
		if(view == null) {
			return
		}
		var pp = lang "java" !"android.view.ViewParent" {{{ view.getParent() }}}
		if(pp == null) {
			return
		}
		var parent = pp as !"android.view.ViewGroup"
		if(parent == null) {
			return
		}
		parent.removeView(view)
	}
}

class MyTextureSprite is ViewSprite is TextureSprite
{
	prop context as !"android.content.Context"
	prop layer as MySpriteLayer

	func resize(w as double, h as double)
	{
		if(w == mywidth && h == myheight) {
			return
		}
		var wpx #used = w * getWidthFactor() as int
		var hpx #used = h * getHeightFactor() as int
		lang "java" {{{
			int x = (int)view.getX();
			int y = (int)view.getY();
			view.layout(x, y, x+wpx, y+hpx);
		}}}
		mywidth = w
		myheight = h
	}

	func setTexture(texture as Texture)
	{
		setTextureWithSize(texture, getWidth(), getHeight())
	}

	func setTextureWithSize(texture as Texture, width as double, height as double)
	{
		if texture == null || (width <= 0.0 && height <= 0.0):
			return
		var w = SpriteUtil.getAspectWidth(texture.getPixelWidth(), texture.getPixelHeight(), width, height)
		var h = SpriteUtil.getAspectHeight(texture.getPixelWidth(), texture.getPixelHeight(), width, height)
		if w <= 0.0:
			w = height
		if h <= 0.0:
			h = width
		if w <= 0.0 || h <= 0.0:
			return
		if w <= 0.0 || h <= 0.0:
			return
		if texture is ColorTexture {
			var view = getView()
			if view == null {
				view = new !"android.view.View"(context)
				setView(view)
			}
			resize(w, h)
			setBackgroundColor((texture as! ColorTexture).getColor())
			return
		}
		if texture is ImageTexture {
			var img = assert (texture as! ImageTexture).getImage() as ImageForAndroid
			var bm = assert img.getAndroidBitmap()
			var view = getView() as !"android.widget.ImageView"
			if view == null {
				view = new !"android.widget.ImageView"(context)
				setView(view)
			}
			lang "java" {{{
				view.setScaleType(android.widget.ImageView.ScaleType.FIT_XY);
			}}}
			resize(w, h)
			view.setImageBitmap(bm)
			return
		}
		ERROR "Unknown texture type"
	}
}

class TextViewSprite is ViewSprite is TextSprite
{
	var context as AndroidApplicationContext

	ctor(androidContext as AndroidApplicationContext)
	{
		this.context = androidContext
	}

	func initialize(context as !"android.content.Context", text as TextProperties) as bool
	{
		var vv = new !"android.widget.TextView"(context)
		setView(vv)
		setText(text)
		return true
	}

	func setText(desc as TextProperties)
	{
		var view = getView() as !"android.widget.TextView"
		if(view == null) {
			return
		}
		if(desc == null) {
			view.setText("")
			return
		}
		var textColor = desc.getTextColor()
		if(textColor != null) {
			view.setTextColor(textColor.toARGBInt32())
		}
		var fontFamily = desc.getFontFamily()
		var fontResource = desc.getFontResource()
		var fontFile = desc.getFontFile()
		var fontStyle as int #used
		lang "java" {{{
			fontStyle = android.graphics.Typeface.NORMAL;
			if(desc.getFontIsItalic() && desc.getFontIsBold()) {
				fontStyle = android.graphics.Typeface.BOLD_ITALIC;
			}
			else if(desc.getFontIsItalic()) {
				fontStyle = android.graphics.Typeface.ITALIC;
			}
			if(desc.getFontIsBold()) {
				fontStyle = android.graphics.Typeface.BOLD;
			}
		}}}
		if(String.isEmpty(fontFamily) == false) {
			lang "java" {{{
				view.setTypeface(android.graphics.Typeface.create(fontFamily, fontStyle), fontStyle);
			}}}
		}
		else if(String.isEmpty(fontResource) == false) {
			lang "java" {{{
				android.content.Context ctx = view.getContext();
				if(ctx != null) {
					view.setTypeface(android.graphics.Typeface.createFromAsset(ctx.getAssets(), fontResource), fontStyle);
				}
			}}}
		}
		else if(fontFile != null) {
			lang "java" {{{
				view.setTypeface(android.graphics.Typeface.createFromFile(fontFile.getPath()), fontStyle);
			}}}
		}
		setBackgroundColor(desc.getBackgroundColor())
		view.setText(desc.getText())
		var msw as int
		var msh as int
		var hsz as double
		var fsDesc = desc.getFontSizeDescription()
		if(cape.String.isEmpty(fsDesc) == false) {
			var density as int
			var gc = context as GuiApplicationContext
			if(gc != null) {
				density = gc.getScreenDensity()
			}
			else {
				density = 96
			}
			hsz = cave.Length.asPoints(fsDesc, density)
		}
		else {
			var fsRelative = desc.getFontSizeRelative()
			var fsAbsolute = desc.getFontSizeAbsolute()
			if(fsRelative > 0.0) {
				hsz = getHeightFactor() * fsRelative
			}
			else {
				hsz = fsAbsolute * 18
			}
		}
		lang "java" {{{
			view.setTextSize((float)hsz);
			view.measure(android.view.View.MeasureSpec.UNSPECIFIED, android.view.View.MeasureSpec.UNSPECIFIED);
			msw = view.getMeasuredWidth();
			msh = view.getMeasuredHeight();
			view.layout(0, 0, msw, msh);
		}}}
		updateSizeAsPixels(msw, msh)
	}
}

class MyViewGroup is !"android.view.ViewGroup"
{
	ctor(context as !"android.content.Context")
	{
		base(context)
	}

	func onLayout(changed as bool, left as int, top as int, right as int, bottom as int)
	{
		lang "java" {{{
			int count = getChildCount();
			for (int i = 0; i < count; i++) {
				android.view.View child = getChildAt(i);
				if(child.getVisibility() != GONE) {
					child.layout((int)child.getX(), (int)child.getY(), (int)child.getWidth(), (int)child.getHeight());
				}
			}
		}}}
	}

	func onSizeChanged(w as int, h as int, oldw as int, oldh as int)
	{
		base.onSizeChanged(w, h, oldw, oldh)
	}
}

class MySpriteLayer is ViewSprite is ContainerSprite is SpriteLayer
{
	prop parentView as !"android.view.View"
	var referenceWidth = 1.0
	var referenceHeight = 0.0
	var layerWidthFactor = 0.0
	var layerHeightFactor = 0.0
	var context as AndroidApplicationContext
	var ppi = -1

	ctor(androidContext as AndroidApplicationContext, context as !"android.content.Context")
	{
		this.context = androidContext
		view = new MyViewGroup(context)
	}

	func getLayerWidthFactor as double
	{
		if(layerWidthFactor == 0.0 && referenceWidth > 0.0 && parentView != null) {
			var rwidth = parentView.getWidth() as double
			layerWidthFactor = rwidth / referenceWidth
		}
		return layerWidthFactor
	}

	func getLayerHeightFactor as double
	{
		if(layerHeightFactor == 0.0) {
			var rh = getReferenceHeight()
			if(rh > 0.0 && parentView != null) {
				var rheight = parentView.getHeight() as double
				layerHeightFactor = rheight / rh
			}
		}
		return layerHeightFactor
	}

	func addTextureSpriteForSize(texture as Texture, width as double, height as double) as TextureSprite
	{
		var v = new MyTextureSprite()
		v.setWidthFactor(getLayerWidthFactor())
		v.setHeightFactor(getLayerHeightFactor())
		v.setContext(view.getContext())
		v.setLayer(this)
		v.setTextureWithSize(texture, width, height)
		var vv = assert v.getView()
		var vg = view as !"android.view.ViewGroup"
		if vg:
			vg.addView(vv)
		return v
	}

	func addTextSprite(text as TextProperties) as TextSprite
	{
		assert view
		var v = new TextViewSprite(context)
		v.setWidthFactor(getLayerWidthFactor())
		v.setHeightFactor(getLayerHeightFactor())
		assert v.initialize(view.getContext(), text)
		var vv = assert v.getView()
		var vg = view as !"android.view.ViewGroup"
		if vg:
			vg.addView(vv)
		return v
	}

	func addContainerSprite(width as double, height as double) as ContainerSprite
	{
		if(view == null) {
			return null
		}
		var v = new this(context, view.getContext() as! !"android.content.Context")
		v.setParentView(view)
		var vv = v.getView()
		if(vv == null) {
			return null
		}
		var vg = view as !"android.view.ViewGroup"
		if(vg != null) {
			vg.addView(vv)
		}
		return v
	}

	func removeSprite(sprite as Sprite)
	{
		var vs = sprite as ViewSprite
		if(vs == null) {
			return
		}
		vs.removeFromContainer()
	}

	func removeAllSprites
	{
		var vg = getViewGroup()
		if(vg != null) {
			vg.removeAllViews()
		}
	}

	func setReferenceWidth(rw as double)
	{
		referenceWidth = rw
	}

	func setReferenceHeight(rh as double)
	{
		referenceHeight = rh
	}

	func getReferenceWidth as double
	{
		return referenceWidth
	}

	func getReferenceHeight as double
	{
		if(referenceHeight > 0.0) {
			return referenceHeight
		}
		var v = (parentView.getHeight() as double) * referenceWidth / (parentView.getWidth() as double)
		return v
	}

	func getPPI private as int
	{
		if(ppi < 0) {
			var gc = context as GuiApplicationContext
			if(gc != null) {
				ppi = gc.getScreenDensity()
			}
			if(ppi < 0) {
				ppi = 96
			}
		}
		return ppi
	}

	func getHeightValue(spec as string) as double
	{
		return cave.Length.asPoints(spec, getPPI()) / getLayerHeightFactor()
	}

	func getWidthValue(spec as string) as double
	{
		return cave.Length.asPoints(spec, getPPI()) / getLayerWidthFactor()
	}
}

class ColorTexture is Texture
{
	prop color as Color

	func getPixelWidth as int:
		return 0

	func getPixelHeight as int:
		return 0
}

class ImageTexture is Texture
{
	prop image as Image

	func getPixelWidth as int
	{
		assert image
		return image.getPixelWidth()
	}

	func getPixelHeight as int
	{
		assert image
		return image.getPixelHeight()
	}
}

class MyLayeredContainerView is !"android.view.ViewGroup"
{
	prop backend as parent
	var pointerEvent #used = new PointerEvent()
	var keyEvent #used = new KeyEvent()

	ctor(context as !"android.content.Context")
	{
		base(context)
	}

	func onLayout(changed as bool, left as int, top as int, right as int, bottom as int)
	{
		lang "java" {{{
			int count = getChildCount();
			for (int i = 0; i < count; i++) {
				android.view.View child = getChildAt(i);
				if(child.getVisibility() != GONE) {
					child.layout(0, 0, getWidth(), getHeight());
				}
			}
		}}}
	}

	func onSizeChanged(w as int, h as int, oldw as int, oldh as int)
	{
		base.onSizeChanged(w, h, oldw, oldh)
		backend.onSizeChanged(w, h)
	}

	func onKeyDown(keyCode as int, event as !"android.view.KeyEvent") as bool
	{
		PRINT "KEY DOWN: " .. String.forInteger(keyCode)
		return true
	}

	func onKeyUp(keyCode as int, event as !"android.view.KeyEvent") as bool
	{
		PRINT "KEY UP: " .. String.forInteger(keyCode)
		return true
	}

	func onTouchEvent(event as !"android.view.MotionEvent") as bool
	{
		lang "java" {{{
			int viewWidth = getWidth();
			int viewHeight = getHeight();
			if(viewWidth < 1 || viewHeight < 1) {
				return(false);
			}
			int androidAction = event.getAction();
			int action;
			int hsz = event.getHistorySize();
			int pcount = event.getPointerCount();
			if(androidAction == android.view.MotionEvent.ACTION_DOWN || androidAction == android.view.MotionEvent.ACTION_POINTER_DOWN) {
				action = cave.PointerEvent.DOWN;
			}
			else if(androidAction == android.view.MotionEvent.ACTION_UP || androidAction == android.view.MotionEvent.ACTION_POINTER_UP) {
				action = cave.PointerEvent.UP;
			}
			else if(androidAction == android.view.MotionEvent.ACTION_MOVE) {
				action = cave.PointerEvent.MOVE;
			}
			else if(androidAction == android.view.MotionEvent.ACTION_CANCEL) {
				action = cave.PointerEvent.CANCEL;
			}
			else {
				return(false);
			}
			pointerEvent.isConsumed = false;
			pointerEvent.action = action;
			for(int h = 0; h<hsz; h++) {
				for (int p = 0; p<pcount; p++) {
					pointerEvent.pointerId = p;
					pointerEvent.x = (double)event.getHistoricalX(p, h) / (double)viewWidth;
					pointerEvent.y = (double)event.getHistoricalY(p, h) / (double)viewHeight;
					backend.onPointerEvent(pointerEvent);
				}
			}
			for(int p = 0; p < pcount; p++) {
				pointerEvent.pointerId = p;
				pointerEvent.x = (double)event.getX(p) / (double)viewWidth;
				pointerEvent.y = (double)event.getY(p) / (double)viewHeight;
				backend.onPointerEvent(pointerEvent);
			}
		}}}
		return true
	}
}

func forScene(scene as Scene, context as AndroidApplicationContext) static as this
{
	var v = new this(context)
	if(scene != null) {
		v.setScene(scene)
		scene.setBackend(v)
	}
	return v
}

var androidView as !"android.view.ViewGroup"
var isInitialized = false
var isStarted = false
var animator as !"android.animation.TimeAnimator"
var gameTime as TimeValue
var sceneManager as SceneManager
var androidContext as AndroidApplicationContext

ctor(context as AndroidApplicationContext)
{
	this.androidContext = context
	sceneManager = new SceneManager()
	sceneManager.setContext(context as GuiApplicationContext)
	sceneManager.setBackend(this)
	var vv = new MyLayeredContainerView(context.getAndroidActivityContext())
	vv.setBackend(this)
	androidView = vv
}

func setScene(scene as Scene)
{
	sceneManager.pushScene(scene)
}

func onKeyEvent(event as KeyEvent)
{
	var scene = sceneManager.getCurrentScene()
	if(scene != null) {
		scene.onKeyEvent(event)
	}
}

func onPointerEvent(event as PointerEvent)
{
	var scene = sceneManager.getCurrentScene()
	if(scene != null) {
		scene.onPointerEvent(event)
	}
}

func getAndroidView as !"android.view.ViewGroup"
{
	return androidView
}

func onSizeChanged(w as int, h as int)
{
	if(isInitialized == false && w > 0 && h > 0) {
		isInitialized = true
		sceneManager.initialize()
		if(isStarted) {
			doStart()
		}
	}
}

func createSpriteLayer override as SpriteLayer
{
	assert androidView
	var v = new MySpriteLayer(androidContext, androidView.getContext() as! !"android.content.Context")
	v.setParentView(androidView)
	var vv = assert v.getView()
	androidView.addView(vv)
	vv.layout(0, 0, androidView.getWidth(), androidView.getHeight())
	return v
}

func createImageFromResource(name as string) override as Image
{
	assert androidView
	return ImageForAndroid.forResource(name, androidView.getContext())
}

func createTextureForImage(image as Image) override as Texture:
	return new ImageTexture().setImage(image)

func createTextureForColor(color as Color) override as Texture:
	return new ColorTexture().setColor(color)

func deleteSpriteLayer(layer as SpriteLayer) override
{
	assert androidView
	var ll = assert layer as MySpriteLayer
	androidView.removeView(ll.getView())
}

func deleteTexture(texture as Texture) override
{
}

class MyAnimatorListener implements !"android.animation.TimeAnimator.TimeListener"
{
	prop listener as parent
	func onTimeUpdate(animation as !"android.animation.TimeAnimator", totalTime as long, deltaTime as long)
	{
		listener.onTick(totalTime, deltaTime)
	}
}

func onTick(totalTime as long, deltaTime as long)
{
	if(gameTime == null) {
		gameTime = new TimeValue()
	}
	gameTime.setMilliSeconds(totalTime)
	// FIXME: Too slow
	var scene = sceneManager.getCurrentScene()
	if(scene != null) {
		scene.tick(gameTime, deltaTime / 1000.0)
	}
}

func doStart private
{
	sceneManager.start()
	if(animator == null) {
		animator = new !"android.animation.TimeAnimator"()
		animator.setTimeListener(new MyAnimatorListener().setListener(this))
	}
	if(animator.isStarted() == false) {
		animator.start()
	}
	else if(animator.isPaused() == true) {
		try {
			animator.resume()
		}
		catch(e as !"java.lang.NoSuchMethodError") {
			animator.start()
		}
	}
}

func onStart
{
	isStarted = true
	if(isInitialized) {
		doStart()
	}
}

func onStop
{
	if(animator != null) {
		try {
			animator.pause()
		}
		catch(e as !"java.lang.NoSuchMethodError") {
			animator.end()
		}
	}
	sceneManager.stop()
	isStarted = false
}

func onDestroy
{
	if(animator != null) {
		animator.end()
		animator = null
	}
	sceneManager.cleanup()
	isInitialized = false
}
