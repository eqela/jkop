
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.lang

class:

func getCurrentPlatformName static as string:
	return VALUE "target_platform"

IFDEF "target_android" {
}
ELSE IFDEF "target_darwin" {
}
ELSE IFDEF "target_browser" {
}
ELSE IFDEF "target_windows" {
}
ELSE {
	var isWindowsFlag private static as BooleanObject
	var isLinuxFlag private static as BooleanObject
	var isMacOSFlag private static as BooleanObject
	var isAndroidFlag private static as BooleanObject
	var isIOSFlag private static as BooleanObject
}

func is32Bit static as bool
{
	var cpu = getProcessorType()
	if cpu == "x86" || cpu == "arm":
		return true
	return false
}

func is64Bit static as bool
{
	var cpu = getProcessorType()
	if cpu == "x64" || cpu == "arm64":
		return true
	return false
}

func getProcessorType static as string
{
	IFDEF "target_netcore" {
		lang "cs" {{{
			if(System.Runtime.InteropServices.RuntimeInformation.OSArchitecture == System.Runtime.InteropServices.Architecture.X86) {
				return "x86";
			}
			if(System.Runtime.InteropServices.RuntimeInformation.OSArchitecture == System.Runtime.InteropServices.Architecture.X64) {
				return "x64";
			}
			if(System.Runtime.InteropServices.RuntimeInformation.OSArchitecture == System.Runtime.InteropServices.Architecture.Arm) {
				return "arm";
			}
			if(System.Runtime.InteropServices.RuntimeInformation.OSArchitecture == System.Runtime.InteropServices.Architecture.Arm64) {
				return "arm64";
			}
		}}}
	}
	return null
}

func isWindows static as bool
{
	IFDEF "target_android" {
		return false
	}
	ELSE IFDEF "target_darwin" {
		return false
	}
	ELSE IFDEF "target_browser" {
		return false
	}
	ELSE IFDEF "target_windows" {
		return true
	}
	ELSE {
		if isWindowsFlag:
			return isWindowsFlag.toBoolean()
		var v = isSystemType("windows")
		isWindowsFlag = Boolean.asObject(v)
		return v
	}
}

func isLinux static as bool
{
	IFDEF "target_android" {
		return false
	}
	ELSE IFDEF "target_darwin" {
		return false
	}
	ELSE IFDEF "target_browser" {
		return false
	}
	ELSE IFDEF "target_windows" {
		return false
	}
	ELSE {
		if isLinuxFlag:
			return isLinuxFlag.toBoolean()
		var v = isSystemType("linux")
		isLinuxFlag = Boolean.asObject(v)
		return v
	}
}

func isMacOS static as bool
{
	IFDEF "target_android" {
		return false
	}
	ELSE IFDEF "target_macos" {
		return true
	}
	ELSE IFDEF "target_ios" {
		return false
	}
	ELSE IFDEF "target_browser" {
		return false
	}
	ELSE IFDEF "target_windows" {
		return false
	}
	ELSE {
		if isMacOSFlag:
			return isMacOSFlag.toBoolean()
		var v = isSystemType("macos")
		isMacOSFlag = Boolean.asObject(v)
		return v
	}
}

func isOSX static as bool:
	return isMacOS()

func isAndroid static as bool
{
	IFDEF "target_android" {
		return true
	}
	ELSE IFDEF "target_darwin" {
		return false
	}
	ELSE IFDEF "target_browser" {
		return false
	}
	ELSE IFDEF "target_windows" {
		return false
	}
	ELSE {
		if isAndroidFlag:
			return isAndroidFlag.toBoolean()
		var v = isSystemType("android")
		isAndroidFlag = Boolean.asObject(v)
		return v
	}
}

func isIOS static as bool
{
	IFDEF "target_android" {
		return false
	}
	ELSE IFDEF "target_macos" {
		return false
	}
	ELSE IFDEF "target_ios" {
		return true
	}
	ELSE IFDEF "target_browser" {
		return false
	}
	ELSE IFDEF "target_windows" {
		return false
	}
	ELSE {
		if isIOSFlag:
			return isIOSFlag.toBoolean()
		var v = isSystemType("ios")
		isIOSFlag = Boolean.asObject(v)
		return v
	}
}

func isSystemType(ida as string) static as bool
{
	var id = ida
	if id == "osx":
		id = "macos"
	IFDEF "target_cs" {
		IFDEF "target_dotnet4" {
			var v = false
			if id == "windows" {
				lang "cs" {{{
					if(System.Environment.OSVersion.Platform == System.PlatformID.Win32NT ||
						System.Environment.OSVersion.Platform == System.PlatformID.Win32S ||
						System.Environment.OSVersion.Platform == System.PlatformID.Win32Windows ||
						System.Environment.OSVersion.Platform == System.PlatformID.WinCE ||
						System.Environment.OSVersion.Platform == System.PlatformID.Xbox) {
							v = true;
					}
				}}}
				return v
			}
			if id == "macos" {
				lang "cs" {{{
					if(System.Environment.OSVersion.Platform == System.PlatformID.MacOSX) {
						v = true;
					}
				}}}
				if v:
					return v
				if isSystemType("posix") == false:
					return false
				if isDirectory("/Applications"):
					return true
				return false
			}
			if id == "posix" || id == "linux" || id == "unix" {
				lang "cs" {{{
					if(System.Environment.OSVersion.Platform == System.PlatformID.Unix) {
						v = true;
					}
				}}}
				return v
			}
		}
		ELSE {
			if id == "windows" {
				var c as int
				lang "cs" {{{
					c = System.IO.Path.DirectorySeparatorChar;
				}}}
				if c == '\\':
					return true
				return false
			}
			if id == "macos" {
				if isDirectory("/Applications"):
					return true
				return false
			}
			if id == "posix" || id == "linux" || id == "unix" {
				if isFile("/bin/sh") && isDirectory("/Applications") == false:
					return true
				return false
			}
		}
	}
	ELSE IFDEF "target_java" {
		var v = false
		lang "java" {{{
			java.lang.String os = java.lang.System.getProperty("os.name").toLowerCase();
		}}}
		if id == "windows" {
			lang "java" {{{
				if(os.indexOf("win") >= 0) {
					v = true;
				}
			}}}
			return v
		}
		if id == "macos" {
			lang "java" {{{
				if(os.indexOf("mac") >= 0) {
					v = true;
				}
			}}}
			if v:
				return v
			if isSystemType("posix") == false:
				return false
			if isDirectory("/Applications"):
				return true
			return false
		}
		if id == "posix" || id == "linux" || id == "unix" {
			lang "java" {{{
				if(os.indexOf("nix") >= 0 || os.indexOf("nux") >= 0 || os.indexOf("aix") > 0) {
					v = true;
				}
			}}}
			return v
		}
	}
	ELSE IFDEF "target_nodejs" {
		var platform = lang "js" string {{{ process.platform }}}
		if id == "windows" {
			if String.contains(platform, "win"):
				return true
			return false
		}
		if id == "linux" {
			if String.contains(platform, "linux"):
				return true
			return false
		}
		if id == "macos" {
			if String.contains(platform, "darwin"):
				return true
			return false
		}
	}
	ELSE IFDEF "target_sushi" {
		var type = lang "lua" string {{{ _os:get_system_type() }}}
		return type == id
	}
	ELSE IFDEF "target_swift" {
		if id == "windows" {
			if isDirectory("%userprofile%"):
				return true
			return false
		}
		if id == "macos" {
			if isDirectory("/Applications"):
				return true
			return false
		}
		if id == "posix" || id == "linux" || id == "unix" {
			if isFile("/bin/sh") && isDirectory("/Applications") == false:
				return true
			return false
		}
	}
	return false
}

func isDirectory(path as string) private static as bool
{
	assert String.isNotEmpty(path)
	IFDEF "target_cs" {
		var v as bool
		lang "cs" {{{
			try {
				var attrs = System.IO.File.GetAttributes(path);
				v = attrs.HasFlag(System.IO.FileAttributes.Directory);
			}
			catch(System.Exception e) {
				System.Console.WriteLine(e.ToString());
			}
		}}}
		return v
	}
	ELSE IFDEF "target_swift" {
		var v as bool
		var d as bool
		lang "swift" {{{
			var manager: FileManager = FileManager.default
			var isDir : ObjCBool = false
			v = manager?.fileExists(atPath:(path as NSString?)?.standardizingPath!, isDirectory:&isDir) ?? false
			d = isDir.boolValue
		}}}
		if not v:
			return false
		return d
	}
	ELSE IFDEF "target_java" {
		return lang "java" bool {{{ new java.io.File(path).isDirectory() }}}
	}
	ELSE {
		ERROR "Not implemented"
		return false
	}
}

func isFile(path as string) private static as bool
{
	assert String.isNotEmpty(path)
	IFDEF "target_cs" {
		var v as bool
		lang "cs" {{{
			try {
				var attrs = System.IO.File.GetAttributes(path);
				v = attrs.HasFlag(System.IO.FileAttributes.Directory) == false;
			}
			catch(System.Exception e) {
				System.Console.WriteLine(e.ToString());
			}
		}}}
		return v
	}
	ELSE IFDEF "target_swift" {
		var v as bool
		var d as bool
		lang "swift" {{{
			var manager: FileManager = FileManager.default
			var isDir : ObjCBool = false
			v = manager?.fileExists(atPath:(path as NSString?)?.standardizingPath!, isDirectory:&isDir) ?? false
			d = !isDir.boolValue
		}}}
		if not v:
			return false
		return d
	}
	ELSE IFDEF "target_java" {
		return lang "java" bool {{{ new java.io.File(path).isFile() }}}
	}
	ELSE {
		ERROR "Not implemented"
		return false
	}
}
