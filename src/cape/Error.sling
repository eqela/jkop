
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is StringObject:

func forCode(code as string, detail as string = null) static as this:
	return new this().setCode(code).setDetail(detail)

func forMessage(message as string) static as this:
	return new this().setMessage(message)

func instance(code as string, message as string = null, detail as string = null) static as this:
	return new this().setCode(code).setMessage(message).setDetail(detail)

func set(error as this, code as string, message as string = null) static as this
{
	assert error
	error.setCode(code)
	error.setMessage(message)
	return error
}

func setErrorCode(error as this, code as string) static as this:
	return set(error, code, null)

func setErrorMessage(error as this,message as string) static as this:
	return set(error, null, message)

func isError(o as object) static as bool
{
	assert o
	assert o is this
	var e = o as! this
	if String.isEmpty(e.getCode()) && String.isEmpty(e.getMessage()):
		return false
	return true
}

func asString(error as this) static as string
{
	assert error
	return error.toString()
}

prop code as string
prop message as string
prop detail as string

func clear as this
{
	code = null
	message = null
	detail = null
	return this
}

func toStringWithDefault(defaultError as string) as string
{
	if String.isEmpty(message) == false:
		return message
	if String.isEmpty(code) == false {
		if String.isEmpty(detail) == false:
			return code .. ":" .. detail
		return code
	}
	if String.isEmpty(detail) == false:
		return "Error with detail: " .. detail
	return defaultError
}

func toString as string:
	return toStringWithDefault("Unknown Error")
