
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is SHAEncoder:

func encodeAsBuffer(data as buffer, version as int) override as buffer
{
	assert data
	var hashAlgorithm as !"System.Security.Cryptography.HashAlgorithm" #used
	IFDEF "target_dotnet4" {
		if SHAEncoder.ANY == version || SHAEncoder.SHA1 == version {
			lang "cs" {{{
				hashAlgorithm = new System.Security.Cryptography.SHA1CryptoServiceProvider();
			}}}
		}
		else if SHAEncoder.SHA256 == version {
			lang "cs" {{{
				hashAlgorithm = new System.Security.Cryptography.SHA256CryptoServiceProvider();
			}}}
		}
		else if SHAEncoder.SHA384 == version {
			lang "cs" {{{
				hashAlgorithm = new System.Security.Cryptography.SHA384CryptoServiceProvider();
			}}}
		}
		else if SHAEncoder.SHA512 == version {
			lang "cs" {{{
				hashAlgorithm = new System.Security.Cryptography.SHA512CryptoServiceProvider();
			}}}
		}
	}
	ELSE {
		if SHAEncoder.ANY == version || SHAEncoder.SHA1 == version {
			lang "cs" {{{
				hashAlgorithm = System.Security.Cryptography.SHA1.Create();
			}}}
		}
		else if SHAEncoder.SHA256 == version {
			lang "cs" {{{
				hashAlgorithm = System.Security.Cryptography.SHA256.Create();
			}}}
		}
		else if SHAEncoder.SHA384 == version {
			lang "cs" {{{
				hashAlgorithm = System.Security.Cryptography.SHA384.Create();
			}}}
		}
		else if SHAEncoder.SHA512 == version {
			lang "cs" {{{
				hashAlgorithm = System.Security.Cryptography.SHA512.Create();
			}}}
		}
	}
	assert hashAlgorithm
	return lang "cs" buffer {{{ hashAlgorithm.ComputeHash(data) }}}
}

func encodeAsString(data as buffer, version as int) override as string
{
	var encodedBytes = assert encodeAsBuffer(data, version)
	var result as string #used
	lang "cs" {{{
		System.Text.StringBuilder sb = new System.Text.StringBuilder();
		foreach(byte b in encodedBytes) {
			sb.Append(b.ToString("x2"));
		}
		result = sb.ToString();
	}}}
	return result
}
