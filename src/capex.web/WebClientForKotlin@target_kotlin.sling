
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is WebClient:

depend "androidPermission:android.permission.INTERNET"

func query(method as string, url as string, requestHeaders as KeyValueList<string,string>, body as buffer, callback as function<void, string, KeyValueList<string,string>, buffer>) override
{
	if(String.isEmpty(method) || String.isEmpty(url)) {
		callback(null, null, null)
		return
	}
	if(String.startsWith(url, "http://") == false && String.startsWith(url, "https://") == false) {
		callback(null, null, null)
		return
	}
	var req = new WebClientRequest().setMethod(method).setUrl(url).setRequestHeaders(requestHeaders).setBody(body)
	lang "kotlin" {{{
		WebClientTask(callback).executeOnExecutor(android.os.AsyncTask.THREAD_POOL_EXECUTOR, req)
	}}}
}

class WebClientRequest
{
	prop method as string
	prop url as string
	prop requestHeaders as KeyValueList<string,string>
	prop body as buffer
}

class WebClientResponse
{
	prop responseCode as string
	prop responseHeaders as KeyValueList<string, string>
	prop responseBody as buffer
}

class WebClientTask is !"android.os.AsyncTask<WebClientRequest, Void, WebClientResponse>"
{
	var callback as function<void, string, KeyValueList<string,string>, buffer>
	var reader as !"java.io.InputStream"

	ctor(cb as function<void, string, KeyValueList<string,string>, buffer>):
		callback = cb

	func getConnectionForURL(url as string) private as !"java.net.HttpURLConnection"
	{
		var conn as !"java.net.HttpURLConnection" = null
		lang "kotlin" {{{
			try {
				conn = java.net.URL(url).openConnection() as java.net.HttpURLConnection
				conn.setReadTimeout(30000)
			}
			catch(e: Exception) {
				conn = null
			}
		}}}
		return conn
	}

	func setRequestHeaders(conn as !"java.net.HttpURLConnection", requestHeaders as KeyValueList<string,string>) private
	{
		if requestHeaders {
			var iter = requestHeaders.iterate()
			loop {
				var nh as KeyValuePair<string,string> = iter.next()
				if !nh:
					break
				var key = nh.key
				var value = nh.value
				lang "kotlin" {{{
					conn?.setRequestProperty(key, value)
				}}}
			}
		}
	}

	func close
	{
		lang "kotlin" {{{
			try {
				reader?.close()
			}
			catch(e: Exception) {
				e.printStackTrace()
			}
		}}}
	}

	func processResponse(c as !"java.net.HttpURLConnection") private as WebClientResponse
	{
		var conn = c
		var responseHeaders = new KeyValueList<string,string>()
		var responseCode as int
		lang "kotlin" {{{
			try {
				val respHeaders = conn?.getHeaderFields()
				for (rh in respHeaders!!.entries) {
		}}}
		var key = lang "kotlin" string {{{ rh?.key }}}
		if String.isEmpty(key):
			continue
		key = String.toLowerCase(key)
		var value as string = null
		lang "kotlin" {{{
			for (s in rh.value) {
				value = s
			}
		}}}
		responseHeaders.add(key, value)
		lang "kotlin" {{{
				}
				responseCode = conn!!.getResponseCode()
			}
			catch(e: Exception) {
				e.printStackTrace()
			}
		}}}
		lang "kotlin" {{{
			try {
				reader = conn?.getInputStream()
			}
			catch(e: Exception) {
				e.printStackTrace()
				reader = null
			}
			if(reader == null) {
				return(null)
			}
			var buf = kotlin.ByteArray(1024*32)
		}}}
		var length = 0
		lang "kotlin" {{{
			var responseBuffer = kotlin.ByteArray(1024 * 1024 * 2)
			while(true) {
				try {
					val rdr = reader
					var r = rdr!!.read(buf)
					if(r < 1) {
						break
					}
					System.arraycopy(buf, 0, responseBuffer, length, r)
					length += r
				}
				catch(e: Exception) {
					e.printStackTrace()
					break
				}
			}
		}}}
		var bb = MALLOC(length)
		var i = 0
		while(true) {
			if(i > length-1) {
				break
			}
			lang "kotlin" {{{
				var c : kotlin.Int = responseBuffer[i].toInt() and 0xFF as kotlin.Int
				cape.Buffer.setByte(bb, i.toLong(), c!!.toUByte())
				i++
			}}}
		}
		lang "kotlin" {{{
			conn?.disconnect()
			conn = null
		}}}
		if(responseCode == 0) {
			responseCode = 404
		}
		var response = new WebClientResponse()
		response.setResponseCode(String.forInteger(responseCode))
		response.setResponseHeaders(responseHeaders)
		response.setResponseBody(bb)
		return(response)
	}

	lang "kotlin" {{{
		protected override fun doInBackground(vararg req: WebClientRequest): WebClientResponse? {
			val url = req[0].getUrl()
			val method = req[0].getMethod()
			val requestHeaders = req[0].getRequestHeaders()
			val body = req[0].getBody()
			val conn = getConnectionForURL(url)
			if (conn == null) {
				return (null)
			}
			setRequestHeaders(conn, requestHeaders)
			try {
				conn.setRequestMethod(method)
			}
			catch (e:Exception) {
				e.printStackTrace()
			}
			if (method.equals("POST", ignoreCase = true) || method.equals("PUT", ignoreCase = true)) {
				val w: java.io.OutputStream? = null
				var writer = w
				try {
					writer = conn.getOutputStream()
					writer.write(body?.toByteArray())
					writer.flush()
				}
				catch (e:Exception) {
					e.printStackTrace()
				}
				finally {
					try {
						writer?.close()
					}
					catch (e: Exception) {
						e.printStackTrace()
					}
				}
			}
			return (processResponse(conn))
		}
		protected override fun onProgressUpdate(vararg progress: Void) {
		}
		protected override fun onPostExecute(res: WebClientResponse) {
			var responseCode: kotlin.String? = null
			responseCode = "404"
			var responseHeaders: cape.KeyValueList<kotlin.String?, kotlin.String?>? = null
			var body: UByteArray? = null
			if (res != null) {
				responseCode = res.getResponseCode()
				responseHeaders = res.getResponseHeaders()
				body = res?.getResponseBody()
			}
			if (callback != null) {
				callback!!.invoke(responseCode, responseHeaders, body)
			}
			close()
		}
	}}}
}
