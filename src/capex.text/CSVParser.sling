
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

import cape

func parse(buffer as buffer) static as DynamicVector
{
	if buffer == null:
		return null
	return forBuffer(buffer).acceptRows()
}

func parse(str as string) static as DynamicVector
{
	if String.isEmpty(str):
		return null
	return forString(str).acceptRows()
}

func parse(file as File) static as DynamicVector
{
	if file == null:
		return null
	return parse(file.getContentsUTF8())
}

func forString(str as string) static as this
{
	var v = new this()
	v.setDataString(str)
	return v
}

func forBuffer(buffer as buffer) static as this
{
	var v = new this()
	v.setDataBuffer(buffer)
	return v
}

var iterator as CharacterIterator

func setDataString(str as string)
{
	iterator = CharacterIteratorForString.forString(str)
	iterator.moveToNextChar()
}

func setDataBuffer(buffer as buffer)
{
	iterator = CharacterIteratorForBuffer.forBuffer(buffer)
	iterator.moveToNextChar()
}

func acceptRows private as DynamicVector
{
	var records = new DynamicVector()
	loop {
		var record = new DynamicVector()
		loop {
			var column = acceptColumn()
			record.append(column)
			var c = iterator.getCurrentChar()
			if c == ',' {
				iterator.moveToNextChar()
			}
			else if c == '\n' {
				iterator.moveToNextChar()
				break
			}
			if iterator.hasEnded():
				break
		}
		records.append(record)
		if iterator.hasEnded():
			break
	}
	return records
}

func acceptColumn private as string
{
	var ss = iterator.getCurrentChar()
	var insideQuotes = (ss == '\'' || ss == '"')
	var sb = new StringBuilder()
	if not insideQuotes {
		if ss < 1:
			return null
		if ss == ',' || ss == '\n':
			return sb.toString()
		sb.append(ss)
	}
	var i = 0
	loop {
		var c = iterator.getNextChar()
		i ++
		if c < 1 {
			for(var n = 0 ; n < i ; n++):
				iterator.moveToPreviousChar()
			return null
		}
		if insideQuotes {
			if c == ss {
				var x = iterator.getNextChar()
				if x == ',' || x == '\n':
					break
				sb.append('\\')
			}
		}
		else {
			if c == ',' || c == '\n':
				break
		}
		sb.append(c)
	}
	return sb.toString()
}
