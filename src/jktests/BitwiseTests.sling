
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.sha
import jk.test

class is UnitTest:

func testBitwise
{
	var bits64 = 0x1020304050607080
	var a = bits64 & 0xFF00000000000000
	ASSERT(String.forLongIntegerHex(a as long) == "1000000000000000")
	var b = bits64 & 0x00FF000000000000
	ASSERT(String.forLongIntegerHex(b as long) == "20000000000000")
	var c = bits64 & 0x0000FF0000000000
	ASSERT(String.forLongIntegerHex(c as long) == "300000000000")
	var d = bits64 & 0x000000FF00000000
	ASSERT(String.forLongIntegerHex(d as long) == "4000000000")
	var e = bits64 & 0x00000000FF000000
	ASSERT(String.forLongIntegerHex(e as long) == "50000000")
	var f = bits64 & 0x0000000000FF0000
	ASSERT(String.forLongIntegerHex(f as long) == "600000")
	var g = bits64 & 0x000000000000FF00
	ASSERT(String.forLongIntegerHex(g as long) == "7000")
	var h = bits64 & 0x00000000000000FF
	ASSERT(String.forLongIntegerHex(h as long) == "80")
	// "WITH BIT SHIFT"
	ASSERT((a >> 56) as int == 16)
	ASSERT((b >> 48) as int == 32)
	ASSERT((c >> 40) as int == 48)
	ASSERT((d >> 32) as int == 64)
	ASSERT((e >> 24) as int == 80)
	ASSERT((f >> 16) as int == 96)
	ASSERT((g >> 8) as int == 112)
	ASSERT(h as int == 128)
}

func execute override as bool
{
	START_TESTS()
	TEST("Test Bitwise", testBitwise())
	END_TESTS()
}
