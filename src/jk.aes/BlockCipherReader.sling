
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.io

class is Reader is SizedReader is SeekableReader:

func create(reader as SizedReader, cipher as BlockCipher) static as SizedReader
{
	assert reader
	if cipher == null:
		return reader
	var v = new this()
	v.reader = reader
	v.cipher = cipher
	v.bcurrent = Buffer.allocate(cipher.getBlockSize())
	v.bnext = Buffer.allocate(cipher.getBlockSize())
	v.ddata = Buffer.allocate(cipher.getBlockSize())
	v.csize = 0
	v.cindex = 0
	v.nsize = 0
	return v
}

var cipher as BlockCipher
var reader as SizedReader
var bcurrent as buffer
var csize as int
var cindex as int
var bnext as buffer
var nsize as int
var ddata as buffer

func getSize as int
{
	assert reader
	return reader.getSize()
}

func setCurrentPosition(n as int64) as bool
{
	var rem as int = n % cipher.getBlockSize()
	var ss as int = n - rem
	csize = 0
	cindex = 0
	nsize = 0
	var v = false
	if reader && reader is SeekableReader:
		v = (reader as! SeekableReader).setCurrentPosition(ss)
	if v && rem > 0 {
		var bb = Buffer.allocate(rem)
		if read(bb) != rem:
			v = false
	}
	return v
}

func getCurrentPosition as int64
{
	if reader != null && reader is SeekableReader:
		return (reader as! SeekableReader).getCurrentPosition()
	return -1
}

func read(buf as buffer) as int
{
	if buf == null || Buffer.getSize(buf) < 1:
		return 0
	var ptr = buf
	assert ptr
	var v = 0
	var bs = cipher.getBlockSize()
	while v < Buffer.getSize(buf) {
		var x = bs
		if v + x > Buffer.getSize(buf):
			x = Buffer.getSize(buf) - v
		var r = readBlock(ptr, v, x)
		if r < 1:
			break
		v += r
	}
	return v
}

func readAndDecrypt(buf as buffer) as int
{
	var v = reader.read(ddata)
	if v == cipher.getBlockSize() {
		cipher.decryptBlock(ddata, buf)
	}
	else {
		Buffer.copyFrom(ddata, buf, 0, 0, v)
	}
	return v
}

func readBlock(ptr as buffer, offset as int, size as int) as int
{
	if cindex >= csize:
		csize = 0
	if nsize < 1:
		nsize = readAndDecrypt(bnext)
	if csize < 1 {
		if nsize < cipher.getBlockSize():
			return 0
		var nn = bcurrent
		bcurrent = bnext
		csize = nsize
		cindex = 0
		bnext = nn
		nsize = readAndDecrypt(bnext)
	}
	var dsize as int
	var data = cipher.getBlockSize()
	if nsize < data {
		var ptr2 = bcurrent
		if ptr2 {
			data -= Buffer.getByte(ptr2, 0)
			var newSize = Buffer.getSize(bcurrent)
			var padding = Buffer.getByte(bcurrent, (newSize - 1))
			var finalLength = newSize - padding
			var fbuf as buffer
			if finalLength < 0 {
				fbuf = bcurrent
			}
			else if padding >= 1 {
				fbuf = Buffer.resize(bcurrent, finalLength)
			}
			dsize = Buffer.getSize(fbuf)
			Buffer.copyFrom(ptr, fbuf, 0, offset, finalLength)
		}
	}
	else {
		dsize = Buffer.getSize(bcurrent)
	}
	Buffer.copyFrom(ptr, bcurrent, cindex, offset, size)
	cindex += size
	return dsize
}
