
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

import capex.http

class MyHTTPClientListener is HTTPClientListener
{
	prop listener as function<void, DynamicMap, Error>
	var body as buffer

	func onError(message as string) override
	{
		if(listener != null) {
			listener(null, Error.forMessage(message))
		}
	}

	func onAborted override
	{
		if(listener != null) {
			listener(null, Error.forCode("aborted"))
		}
	}

	func onDataReceived(buffer as buffer) override as bool
	{
		body = Buffer.append(body, buffer)
		return(true)
	}

	func onResponseCompleted override
	{
		base.onResponseCompleted()
		if(listener != null) {
			var json = JSONParser.parse(body) as DynamicMap
			if(json == null) {
				listener(null, Error.forMessage("Invalid JSON Format from Google: " .. String.asString(body)))
				return
			}
			listener(json, null)
		}
	}
}

func send(serverKey as string, registrationIds as DynamicVector, notification as DynamicMap, data as DynamicMap, listener as function<void,DynamicMap,Error>) static
{
	if(String.isEmpty(serverKey)) {
		listener(null, Error.forCode("missingServerKey"))
		return
	}
	var body = new DynamicMap()
	var sz = registrationIds.getSize()
	if(sz == 1) {
		body.set("to", String.asString(registrationIds.get(0)))
	}
	else if(sz > 1) {
		body.set("registration_ids", registrationIds)
	}
	else {
		listener(null, Error.forCode("missingRegistrationId"))
		return
	}
	if(notification != null) {
		body.set("notification", notification)
	}
	if(data != null) {
		body.set("data", data)
	}
	var json = JSONEncoder.encode(body)
	var op = new HTTPClientOperation()
	op.setAcceptInvalidCertificate(true)
	var req = HTTPClientRequest.forPOST("https://fcm.googleapis.com/fcm/send", "application/json", String.toUTF8Buffer(json))
	req.addHeader("Authorization", "key=" .. serverKey)
	op.executeRequest(req, new MyHTTPClientListener().setListener(listener))
}
