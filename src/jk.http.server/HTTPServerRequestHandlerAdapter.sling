
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log

class is HTTPServerRequestHandler is HTTPServerComponent:

var server as HTTPServerBase
var logContext protected as LoggingContext

func getServer as HTTPServerBase:
	return server

func isInitialized as bool
{
	if server == null:
		return false
	return true
}

func initialize(server as HTTPServerBase) virtual
{
	this.server = server
	if server {
		this.logContext = server.getLogContext()
	}
	else {
		this.logContext = null
	}
}

func onMaintenance virtual
{
}

func onRefresh virtual
{
}

func cleanup virtual:
	this.server = null

func onGET(req as HTTPServerRequest) virtual as bool:
	return false

func onGET(req as HTTPServerRequest, next as function) virtual
{
	if onGET(req) == false:
		next()
}

func onPOST(req as HTTPServerRequest) virtual as bool:
	return false

func onPOST(req as HTTPServerRequest, next as function) virtual
{
	if onPOST(req) == false:
		next()
}

func onPUT(req as HTTPServerRequest) virtual as bool:
	return false

func onPUT(req as HTTPServerRequest, next as function) virtual
{
	if onPUT(req) == false:
		next()
}

func onDELETE(req as HTTPServerRequest) virtual as bool:
	return false

func onDELETE(req as HTTPServerRequest, next as function) virtual
{
	if onDELETE(req) == false:
		next()
}

func onPATCH(req as HTTPServerRequest) virtual as bool:
	return false

func onPATCH(req as HTTPServerRequest, next as function) virtual
{
	if onPATCH(req) == false:
		next()
}

func handleRequest(req as HTTPServerRequest, next as function) virtual
{
	if req == null {
		next()
	}
	else if req.isGET() {
		onGET(req, next)
	}
	else if req.isPOST() {
		onPOST(req, next)
	}
	else if req.isPUT() {
		onPUT(req, next)
	}
	else if req.isDELETE() {
		onDELETE(req, next)
	}
	else if req.isPATCH() {
		onPATCH(req, next)
	}
	else {
		next()
	}
}
