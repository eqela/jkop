
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is Scene is SpriteLayer:

var layer protected as SpriteLayer
var backgroundColor as Color
var backgroundTexture as Texture
var backgroundSprite as TextureSprite

func getLayer as SpriteLayer:
	return layer

func setBackgroundColor(color as Color)
{
	backgroundColor = color
	updateBackgroundColor()
}

func getBackgroundTexture as Texture
{
	if backgroundTexture:
		return backgroundTexture
	if backgroundColor:
		return createTextureForColor(backgroundColor)
	return null
}

func updateBackgroundColor private
{
	if backgroundSprite == null {
		if layer {
			var txt = getBackgroundTexture()
			if txt {
				backgroundSprite = layer.addTextureSpriteForSize(txt, layer.getReferenceWidth(), layer.getReferenceHeight())
				backgroundSprite.move(0, 0)
			}
		}
	}
	else {
		var txt = getBackgroundTexture()
		if txt:
			backgroundSprite.setTexture(txt)
	}
}

func initialize override
{
	base.initialize()
	layer = backend.createSpriteLayer()
	updateBackgroundColor()
}

func cleanup override
{
	base.cleanup()
	layer.removeAllSprites()
	backend.deleteSpriteLayer(layer)
	layer = null
	backgroundSprite = null
}

func onPointerEvent(event as PointerEvent) override
{
	if layer {
		event.x = event.x * layer.getReferenceWidth()
		event.y = event.y * layer.getReferenceHeight()
	}
}

func addTextureSpriteForSize(texture as Texture, width as double, height as double) as TextureSprite:
	return layer.addTextureSpriteForSize(texture, width, height)

func addTextSprite(text as TextProperties) as TextSprite:
	return layer.addTextSprite(text)

func addContainerSprite(width as double, height as double) as ContainerSprite:
	return layer.addContainerSprite(width, height)

func removeSprite(sprite as Sprite):
	layer.removeSprite(sprite)

func removeAllSprites:
	layer.removeAllSprites()

func setReferenceWidth(referenceWidth as double):
	layer.setReferenceWidth(referenceWidth)

func setReferenceHeight(referenceHeight as double):
	layer.setReferenceHeight(referenceHeight)

func getReferenceWidth as double:
	return layer.getReferenceWidth()

func getReferenceHeight as double:
	return layer.getReferenceHeight()

func getHeightValue(spec as string) as double:
	return layer.getHeightValue(spec)

func getWidthValue(spec as string) as double:
	return layer.getWidthValue(spec)
