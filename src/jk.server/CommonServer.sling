
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.log
import jk.console
import jk.io
import jk.socket.io
import jk.env

class abstract:

var listenPort as int
var loggingDirectory as File
var configFile as File
var enableDebugMessages as bool
var duplicateLoggingOnConsole as bool
var ctx protected as LoggingContext
var configuration = new map<string,string>

ctor
{
	ctx = new ConsoleApplicationContext()
	initConfigValue("LISTEN_PORT", "8080")
	initConfigValue("LOGGING_DIRECTORY", null)
	initConfigValue("ENABLE_DEBUG_MESSAGES", "false")
	initConfigValue("DUPLICATE_LOGGING_ON_CONSOLE", "false")
}

func getLoggingDirectory as File:
	return loggingDirectory

func getListenPort as int:
	return listenPort

func getConfigfromEnvironment(name as string) as string
{
	assert name
	var depvar = "SYMPATHY_" .. name
	var v = EnvironmentVariable.get(depvar)
	if v {
		Log.warning(ctx, "Accepting deprecated configuration variable `" .. depvar .. "'. Use `" .. name .. "' instead.")
		return v
	}
	return EnvironmentVariable.get(name)
}

func getConfigFileDirectory as File
{
	if configFile == null:
		return null
	return configFile.getParent()
}

func onMaintenance virtual
{
}

func initConfigValue(key as string, defaultValue as string)
{
	assert key
	var vv = getConfigfromEnvironment(key)
	if not vv:
		vv = defaultValue
	doConfigure(key, vv, null)
}

func setConfigValue(key as string, value as string) as this
{
	doConfigure(key, value, null)
	return this
}

func configure(key as string, value as string, relativeTo as File, error as Error) virtual as bool
{
	if key == "LISTEN_PORT" || key == "listenPort" {
		listenPort = Integer.asInteger(value)
		return true
	}
	if key == "LOGGING_DIRECTORY" || key == "loggingDirectory" {
		if String.isNotEmpty(value) {
			loggingDirectory = File.forRelativePath(value, relativeTo)
		}
		else {
			loggingDirectory = null
		}
		return true
	}
	if key == "ENABLE_DEBUG_MESSAGES" || key == "enableDebugMessages" {
		enableDebugMessages = Boolean.asBoolean(value)
		return true
	}
	if key == "DUPLICATE_LOGGING_ON_CONSOLE" || key == "duplicateLoggingOnConsole" {
		duplicateLoggingOnConsole = Boolean.asBoolean(value)
		return true
	}
	return false
}

func doConfigure(key as string, value as string, relativeTo as File) private as bool
{
	var error = new Error()
	var vv = value
	if not vv:
		vv = ""
	if configure(key, vv, relativeTo, error) == false {
		if String.isEmpty(error.getCode()) {
			error.setCode("unsupportedConfigurationOption")
			error.setDetail(key)
		}
		Log.error(ctx, Log.asString(ctx, error))
		return false
	}
	Map.set(configuration, key, vv)
	return true
}

func printUsage(stdout as PrintWriter) virtual
{
	var flags = [
		[ "debug", "Enable debug messages in logging" ],
		[ "v|version|vv", "Display version information" ],
		[ "h|help", "Usage information" ]
	]
	var options = [
		[ "config", "Specify a configuration file to use" ],
		[ "listen", "Specify the TCP port to listen to" ],
		[ "O<option>", "Manually specify configuration parameters (key/value pairs)" ]
	]
	ConsoleApplicationUtil.printUsage(stdout, null, null, flags, options)
}

func printHeader(stdout as PrintWriter) virtual
{
}

func printVersion(stdout as PrintWriter, longFormat as bool) virtual
{
}

func logServerConfiguration virtual
{
	var sb = new StringBuilder()
	sb.appendString("Server configuration:")
	var keys = Map.getKeys(configuration)
	Vector.sortAsStrings(keys)
	foreach key in keys {
		sb.appendString("\n  ")
		sb.appendString(key)
		sb.appendString(": ")
		sb.appendString(Map.get(configuration, key))
	}
	Log.info(ctx, sb.toString())
}

func acceptCommandLineArgument(arg as CommandLineArgument) virtual as bool:
	return false

func execute(args as array<string>) as bool
{
	var stdout = Stdout.instance()
	var arguments = ConsoleApplicationUtil.parseCommandLineArguments(args)
	foreach arg in arguments {
		if arg.isFlag("v") || arg.isFlag("version") {
			printVersion(stdout, false)
			return true
		}
		else if arg.isFlag("vv") {
			printVersion(stdout, true)
			return true
		}
	}
	printHeader(stdout)
	var showHelp = false
	var options = new KeyValueListForStrings()
	foreach arg in arguments {
		if arg.isOption("config") {
			if configFile {
				Log.error(ctx, "Duplicate config file parameter supplied: `" .. arg.getComplete() .. "'")
				return false
			}
			configFile = File.forPath(arg.getStringValue())
		}
		else if arg.isFlag("help") || arg.isFlag("h") {
			showHelp = true
		}
		else if arg.isFlag("debug") {
			enableDebugMessages = true
		}
		else if arg.isOption("listen") {
			listenPort = arg.getIntegerValue()
		}
		else if arg.key && String.startsWith(arg.key, "O") {
			var key = String.getEndOfString(arg.key, 1)
			if String.isEmpty(key) {
				Log.error(ctx, "Invalid option parameter: `" .. arg.getComplete() .. "'")
				return false
			}
			options.add(key, arg.getStringValue())
		}
		else if acceptCommandLineArgument(arg) {
			nop // all good
		}
		else {
			arg.reportAsUnsupported(ctx)
			return false
		}
	}
	if showHelp {
		printUsage(stdout)
		return true
	}
	if configFile {
		var config = SimpleConfigFile.forFile(configFile)
		if config == null {
			Log.error(ctx, "Failed to read configuration file: `" .. configFile.getPath() .. "'")
			return false
		}
		var it = config.iterate()
		while it {
			var kvp = it.next()
			if kvp == null:
				break
			var key = kvp.key
			var value = kvp.value
			if doConfigure(key, value, configFile.getParent()) == false:
				return false
		}
	}
	var oit as Iterator<KeyValuePair<string,string>> #force = options.iterate()
	while oit {
		var kvp = oit.next()
		if kvp == null:
			break
		var key = kvp.key
		var value = kvp.value
		if doConfigure(key, value, null) == false:
			return false
	}
	if loggingDirectory {
		Log.debug(ctx, "Configuring logging to directory: `" .. loggingDirectory.getPath() .. "'")
		var dlc = DirectoryLoggingContext.create(loggingDirectory)
		if enableDebugMessages:
			dlc.setEnableDebugMessages(true)
		dlc.setAlsoPrintOnConsole(duplicateLoggingOnConsole)
		ctx = dlc
	}
	else {
		var cac = ctx as ConsoleApplicationContext
		if cac && enableDebugMessages:
			cac.setEnableDebugMessages(true)
	}
	return executeServer()
}

func executeMain(args as array<string>) as int:
	return execute(args) ? 0 : 1

func initializeWithIOManager(ioManager as IOManager, ctx as LoggingContext) virtual as bool:
	return true

func initializeNetworkServer(server as NetworkServer) virtual as bool:
	return true

func initializeApplication virtual as bool:
	return true

func createServer abstract as NetworkServer

func executeServer as bool
{
	logServerConfiguration()
	assert initializeApplication():
		Log.error(ctx, "Failed to initialize application")
	var server = assert createServer():
		Log.error(ctx, "Failed to create server object")
	assert initializeNetworkServer(server):
		Log.error(ctx, "Failed to configure HTTP server")
	var ioManager = assert IOManager.createDefault():
		Log.error(ctx, "FAILED to create IO manager")
	IOManager.setCurrent(ioManager)
	assert server.initialize(ioManager, ctx):
		Log.error(ctx, "Failed to initialize HTTP server.")
	assert initializeWithIOManager(ioManager, ctx):
		Log.error(ctx, "Failed to initialize with IOManager")
	assert ioManager.execute(ctx):
		Log.error(ctx, "Failed to execute IO manager")
	Log.info(ctx, "Exiting normally.")
	return true
}
