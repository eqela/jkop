
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func forMaxPoolSize(maximumPoolSize as int) static as this
{
	var v = new this()
	v.maximumPoolSize = maximumPoolSize
	return v
}

var maximumPoolSize as int
var queue as vector<Runnable>
var threadIsRunning as bool
var activeThreads as vector<RunningThread>
var counts as int // FOR TEST LOG ONLY

func submit(task as Runnable)
{
	if not queue:
		queue = new vector<Runnable>
	if not activeThreads:
		activeThreads = new vector<RunningThread>
	if Vector.getSize(activeThreads) + 1 >= maximumPoolSize {
		queue += task
	}
	else {
		onExecute(task)
		onRemovedUnActiveThreads()
	}
}

func submit(tasks as vector<Runnable>)
{
	if not queue:
		queue = new vector<Runnable>
	if not activeThreads:
		activeThreads = new vector<RunningThread>
	foreach task in tasks:
		onExecute(task)
	onRemovedUnActiveThreads()
}

func onExecute(task as Runnable)
{
	PRINT "-------- onExecute"
	assert task
	if not threadIsRunning:
		threadIsRunning = true
	var thread = Thread.start(task)
	activeThreads += thread
	PRINT "************ THREAD START : " .. String.asString(Vector.getSize(activeThreads))
	if Vector.getSize(activeThreads) + 1 < maximumPoolSize:
		onExecute(onGetRunnableFromQueue())
}

func onRemovedUnActiveThreads
{
	assert Vector.getSize(activeThreads) > 0
	var cthread = Vector.get(activeThreads, 0)
	if cthread.isAlive() == false {
		counts ++
		PRINT "------------ REMOVE " .. String.asString(counts)
		Vector.removeFirst(activeThreads)
		if Vector.getSize(activeThreads) + 1 < maximumPoolSize:
			onExecute(onGetRunnableFromQueue())
	}
	onRemovedUnActiveThreads()
}

func onGetRunnableFromQueue as Runnable
{
	assert Vector.getSize(queue) > 0:
		threadIsRunning = false
	return Vector.popFirst(queue) as Runnable
}

func getActiveThreads as int:
	return Vector.getSize(activeThreads)
