
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.log
import jk.diff

class abstract:

pvar file as File
pvar fileName as string
pvar fileEncoding = "UTF-8"
pvar actions as vector<ActionCommand>
var ctx protected as LoggingContext

func setContext(ctx as LoggingContext):
	this.ctx = ctx

func addAction(action as ActionCommand) as this
{
	if action {
		if not actions:
			actions = new vector<ActionCommand>
		actions += action
	}
	return this
}

func getOriginalContent as string
{
	assert file
	return file.getContentsString(getFileEncoding())
}

func getModifiedContentForFile(file as File, fileName as string) abstract as string

func getModifiedContent as string:
	return getModifiedContentForFile(file, fileName)

func getDiff as string
{
	assert file
	var orig = assert getOriginalContent()
	var modd = assert getModifiedContent()
	return UnifiedDiff.execute(file.getBasename(), orig, modd)
}
