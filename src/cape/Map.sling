
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

class MyMapObject<K,V> is MapObject<K,V> private
{
	prop map as map<K,V>

	func toMap as map<K,V>:
		return map
}

func asObject<K,V> (map as map<K,V>) static as MapObject<K,V>
{
	assert map
	var v = new MyMapObject<K,V>()
	v.setMap(map)
	return v
}

func get <K,V> (map as map<K,V>, key as K, ddf as V) static as V
{
	if map == null || key == null:
		return ddf
	if containsKey(map, key) == false:
		return ddf
	return getValue(map, key)
}

func get <K,V> (map as map<K,V>, key as K) static as V:
	return getValue(map, key)

func getValue <K,V> (map as map<K,V> #used, key as K #used) static as V
{
	if map == null || key ==  null:
		return DEFAULT V
	IFDEF "target_cs" {
		var v as V
		lang "cs" {{{
			try {
				v = map[key];
			}
			catch {
				v = default(V);
			}
		}}}
		return v
	}
	ELSE IFDEF "target_java" {
		return lang "java" V {{{ map.get(key) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" V {{{ map.get(key) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" V {{{ map.get(key) }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" V {{{ map![key!] }}}
	}
	ELSE {
		return map[key]
	}
}

func set <K,V> (data as map<K,V> #used, key as K #used, val as V #used) static as bool
{
	assert data
	assert key
	IFDEF "target_cs" {
		lang "cs" {{{
			data[key] = val;
		}}}
		return true
	}
	ELSE IFDEF "target_java" {
		lang "java" {{{
			data.put(key, val);
		}}}
		return true
	}
	ELSE IFDEF "target_js" {
		lang "js" {{{
			data.set(key, val);
		}}}
		return true
	}
	ELSE IFDEF "target_kotlin" {
		var v = val
		lang "kotlin" {{{
			data.put(key, v)
		}}}
		return true
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			data!.setObject(val!, forKey: key as! NSCopying)
		}}}
		return true
	}
	ELSE {
		data[key] = val
		return true
	}
}

func setValue <K,V> (data as map<K,V>, key as K, val as V) static as bool:
	return set(data, key, val)

func remove <K,V> (data as map<K,V> #used, key as K #used) static
{
	assert data
	assert key
	IFDEF "target_cs" {
		lang "cs" {{{
			data.Remove(key);
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" {{{
			data.remove(key);
		}}}
	}
	ELSE IFDEF "target_js" {
		lang "js" {{{
			data.delete(key);
		}}}
	}
	ELSE IFDEF "target_objc" {
		lang "objc" {{{
			[data removeObjectForKey:key];
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" {{{
			data.remove(key)
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			data.removeObject(forKey: key!)
		}}}
	}
	ELSE IFDEF "target_lua" {
		lang "lua" {{{
			data[key] = nil
		}}}
	}
	ELSE {
		ERROR "Not implemented"
	}
}

func count <K,V> (data as map<K,V> #used) static as int
{
	if data == null:
		return 0
	IFDEF "target_cs" {
		return lang "cs" int {{{ data.Count }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" int {{{ data.size() }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" int {{{ data.size }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" int {{{ [data count] }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" int {{{ data.count() }}}
	}
	ELSE IFDEF "target_swift" {
		return lang "swift" int {{{ data.count }}}
	}
	ELSE {
		return Vector.getSize(getKeys(data))
	}
}

func containsKey <K,V> (data as map<K,V> #used, key as K #used) static as bool
{
	assert data
	assert key
	IFDEF "target_cs" {
		return lang "cs" bool {{{ data.ContainsKey(key) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" bool {{{ data.containsKey(key) }}}
	}
	ELSE IFDEF "target_js" {
		return lang "js" bool {{{ data.has(key) }}}
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" bool {{{ [data objectForKey:key] == nil ? NO : YES }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" bool {{{ data.containsKey(key) }}}
	}
	ELSE IFDEF "target_swift" {
		var v = false
		lang "swift" bool {{{ 
			if(data![key!] != nil) {
				v = true
			}
		}}}
		return v
	}
	ELSE {
		foreach kk in getKeys(data) {
			if key == kk:
				return true
		}
		return false
	}
}

func containsValue <K,V> (data as map<K,V>, val as V #used) static as bool
{
	assert data
	assert val
	IFDEF "target_cs" {
		return lang "cs" bool {{{ data.ContainsValue(val) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" bool {{{ data.containsValue(val) }}}
	}
	ELSE IFDEF "target_js" {
		var vals #used = getValues(data)
		return lang "js" bool {{{ vals.includes(val) }}}
	}
	ELSE IFDEF "target_objc" {
		var v = false
		lang "objc" {{{
			NSArray* a = [data allKeysForObject:val];
			v = (a != nil && [a count] > 0);
		}}}
		return v
	}
	ELSE IFDEF "target_kotlin" {
		var v = val
		return lang "kotlin" bool {{{ data.containsValue(v) }}}
	}
	ELSE IFDEF "target_swift" {
		var v = false
		lang "swift" bool {{{
			let keys = data.allKeys(for: val!)
			if(keys != nil && keys.count > 0) {
				v = true
			}
		}}}
		return v
	}
	ELSE {
		foreach vv in getValues(data) {
			if val == vv:
				return true
		}
		return false
	}
}

func clear <K,V> (data as map<K, V> #used) static
{
	assert data
	IFDEF "target_cs" {
		lang "cs" {{{
			data.Clear();
		}}}
	}
	ELSE IFDEF "target_java" {
		lang "java" {{{
			data.clear();
		}}}
	}
	ELSE IFDEF "target_js" {
		lang "js" {{{
			data.clear();
		}}}
	}
	ELSE IFDEF "target_objc" {
		lang "objc" {{{
			[data removeAllObjects];
		}}}
	}
	ELSE IFDEF "target_kotlin" {
		lang "kotlin" {{{
			data.clear()
		}}}
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			data.removeAllObjects()
		}}}
	}
	ELSE IFDEF "target_sushi" {
		lang "lua" {{{
			_vm:clear_table(data)
		}}}
	}
	ELSE {
		ERROR "Not implemented"
	}
}

func dup <K,V> (data as map<K, V> #used) static as map<K,V>
{
	assert data
	IFDEF "target_cs" {
		return lang "cs" map<K,V> {{{ new System.Collections.Generic.Dictionary<K, V>(data) }}}
	}
	ELSE IFDEF "target_java" {
		return lang "java" magical<java.lang.Object> {{{ data.clone() }}} as! map<K,V>
	}
	ELSE IFDEF "target_js" {
		return lang "js" map<K,V> {{{ new Map(data) }}}
	}
	ELSE IFDEF "target_kotlin" {
		return lang "kotlin" map<K, V> {{{ kotlin.collections.HashMap(data) }}}
	}
	ELSE IFDEF "target_swift" {
		var map as map<K,V>
		lang "swift" {{{
			let m = (NSDictionary.init(dictionary: data as! [AnyHashable : Any]))
			map = m.mutableCopy() as? NSMutableDictionary
		}}}
		return map
	}
	ELSE {
		ERROR "Not implemented"
		return null
	}
}

func getKeys <K,V> (data as map<K,V> #used) static as vector<K>
{
	assert data
	IFDEF "target_cs" {
		var v as vector<K> #force = new vector<K>
		lang "cs" {{{
			foreach(K key in data.Keys) {
				v.Add(key);
			}
		}}}
		return v
	}
	ELSE IFDEF "target_java" {
		var v = new vector<K>
		lang "java" {{{
			for(K key : data.keySet()) {
				v.add(key);
			}
		}}}
		return v
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" vector<K> {{{ [[data allKeys] mutableCopy] }}}
	}
	ELSE IFDEF "target_js" {
		var v #used = new vector<K>
		lang "js" {{{
			data.forEach(function(value, key) {
				this.push(key)
			}, v);
		}}}
		return v
	}
	ELSE IFDEF "target_kotlin" {
		var v = new vector<K>
		lang "kotlin" {{{
			for((k, vv) in data) {
				v!!.add(k)
			}
		}}}
		return v
	}
	ELSE IFDEF "target_sushi" {
		var v as vector<K>
		lang "lua" {{{
			v = _vm:get_table_keys(data)
		}}}
		return v
	}
	ELSE IFDEF "target_swift" {
		var v as vector<K>
		lang "swift" {{{
			let arr = NSArray(array: data.allKeys)
			v = arr.mutableCopy() as? NSMutableArray
		}}}
		return v
	}
	ELSE {
		ERROR "Not implemented"
		return null
	}
}

func getValues <K,V> (data as map<K,V> #used) static as vector<V>
{
	assert data
	IFDEF "target_cs" {
		var v as vector<V> #force = new vector<V>
		lang "cs" {{{
			foreach(V value in data.Values) {
				v.Add(value);
			}
		}}}
		return v
	}
	ELSE IFDEF "target_java" {
		var v = new vector<V>
		lang "java" {{{
			for(V value : data.values()) {
				v.add(value);
			}
		}}}
		return v
	}
	ELSE IFDEF "target_objc" {
		return lang "objc" vector<V> {{{ [[data allValues] mutableCopy] }}}
	}
	ELSE IFDEF "target_js" {
		var v = new vector<V>
		lang "js" {{{
			data.forEach(function(value, keys) {
				this.push(value)
			}, v);
		}}}
		return v
	}
	ELSE IFDEF "target_kotlin" {
		var v = new vector<V>
		lang "kotlin" {{{
			for((k, vv) in data) {
				v!!.add(vv)
			}
		}}}
		return v
	}
	ELSE IFDEF "target_sushi" {
		var v as vector<K>
		lang "lua" {{{
			v = _vm:get_table_values(data)
		}}}
		return v
	}
	ELSE IFDEF "target_swift" {
		var v as vector<K>
		lang "swift" {{{
			let arr = NSArray(array: data.allValues)
			v = arr.mutableCopy() as? NSMutableArray
		}}}
		return v
	}
	ELSE {
		ERROR "Not implemented"
		return null
	}
}

IFDEF "target_cs" {
	class MyKeyIterator<K> is Iterator<K>
	{
		lang "cs" {{{
			public System.Collections.Generic.IEnumerator<K> enumerator;
		}}}
		var current as K

		func doNext as K
		{
			var v as K = DEFAULT K
			lang "cs" {{{
				if(enumerator != null) {
					if(enumerator.MoveNext() == false) {
						enumerator = null;
					}
					else {
						v = enumerator.Current;
					}
				}
			}}}
			return v
		}

		func next as K
		{
			if current {
				var vv = current
				current = DEFAULT K
				return vv
			}
			return doNext()
		}

		func hasNext as bool
		{
			if current:
				return true
			var v = doNext()
			if v {
				current = v
				return true
			}
			return false
		}
	}
}

func iterateKeys <K,V> (data as map<K,V>) static as Iterator<K>
{
	IFDEF "target_cs" {
		assert data
		var v = new MyKeyIterator<K>()
		lang "cs" {{{
			var keys = data.Keys;
			if(keys != null) {
				v.enumerator = keys.GetEnumerator();
			}
		}}}
		return v
	}
	ELSE {
		return Vector.iterate(getKeys(data))
	}
}

func iterateValues <K,V> (data as map<K,V>) static as Iterator<V>:
	return Vector.iterate(getValues(data))
