
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is Iterator<File>:

func forRoot(root as File) static as this
{
	return new this().setRoot(root)
}

class Pattern
{
	var pattern as string
	var suffix as string
	var prefix as string

	func setPattern(pattern as string) as this
	{
		this.pattern = pattern
		if pattern {
			if String.startsWith(pattern, "*"):
				suffix = String.getSubString(pattern, 1)
			if String.endsWith(pattern, "*"):
				prefix = String.getSubString(pattern, 0, String.getLength(pattern)-1)
		}
		return this
	}

	func match(check as string) as bool
	{
		if not check:
			return false
		if pattern == check:
			return true
		if suffix && String.endsWith(check, suffix):
			return true
		if prefix && String.startsWith(check, prefix):
			return true
		return false
	}
}

var root as File
var patterns as vector<Pattern>
var excludePatterns as vector<Pattern>
var stack as Stack<Iterator<File>>
prop includeMatchingDirectories = false
prop includeDirectories = false

ctor
{
	patterns = new vector<Pattern>
	excludePatterns = new vector<Pattern>
}

func setRoot(root as File) as this
{
	this.root = root
	stack = null
	return this
}

func addPattern(pattern as string) as this
{
	patterns += new Pattern().setPattern(pattern)
	return this
}

func addExcludePattern(pattern as string) as this
{
	excludePatterns += new Pattern().setPattern(pattern)
	return this
}

func matchPattern(file as File) as bool
{
	if not file:
		return false
	if Vector.getSize(patterns) < 1:
		return true
	var filename = file.getBasename()
	foreach pattern in patterns {
		if pattern.match(filename):
			return true
	}
	return false
}

func matchExcludePattern(file as File) as bool
{
	if not file:
		return false
	if Vector.getSize(excludePatterns) < 1:
		return false
	var filename = file.getBasename()
	foreach pattern in excludePatterns {
		if pattern.match(filename):
			return true
	}
	return false
}

func next as File
{
	loop {
		if not stack {
			if not root:
				break
			var es = root.entries()
			root = null
			if not es {
				break
			}
			stack = new Stack<Iterator<File>>()
			stack.push(es)
		}
		var entries = stack.peek()
		if not entries {
			stack = null
			break
		}
		var e = entries.next()
		if not e {
			stack.pop()
		}
		else if matchExcludePattern(e) {
			; // skip
		}
		else if e.isFile() {
			if matchPattern(e):
				return e
		}
		else if includeMatchingDirectories && e.isDirectory() && matchPattern(e) {
			return e
		}
		else if e.isDirectory() && e.isLink() == false {
			var ees = e.entries()
			if ees:
				stack.push(ees)
			if includeDirectories:
				return e
		}
	}
	return null
}

func hasNext as bool
{
	assert stack
	var it = assert stack.peek()
	return it.hasNext()
}
