
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

IFDEF "target_netcore"
{
	depend "nuget:System.Reflection@4.3.*"
	depend "nuget:System.Runtime.Loader@4.3.*"
}

func forFile(ctx as LoggingContext, file as File) static as this
{
	var v = new this()
	if v.loadFile(ctx, file) == false:
		v = null
	return v
}

func forObject(ctx as LoggingContext, oo as object #preserve) static as this
{
	assert oo
	IFDEF("target_cs") {
		var asm as !"System.Reflection.Assembly" #preserve
		IFDEF "target_dotnet4" {
			lang "cs" {{{
				var type = oo.GetType();
				if(type != null) {
					asm = type.Assembly;
				}
			}}}
		}
		ELSE {
			lang "cs" {{{
				var type = oo.GetType();
				if(type != null) {
					asm = System.Reflection.IntrospectionExtensions.GetTypeInfo(type).Assembly;
				}
			}}}
		}
		assert asm
		var v = new this()
		v.setAssembly(asm)
		return v
	}
	ELSE {
		ERROR "Not implemented."
		return null
	}
}

func isModuleFile(ctx as LoggingContext, file as File) static as bool
{
	assert file
	IFDEF("target_cs") {
		if file.hasExtension("dll"):
			return true
	}
	ELSE IFDEF"target_swift" {
		if file.hasExtension("dylib") || file.hasExtension("tbd"):
			return true
	}
	return false
}

IFDEF("target_cs") {
	prop assembly as !"System.Reflection.Assembly" #preserve
}

IFDEF "target_swift" {
	prop handle as !"UnsafeMutableRawPointer"
}

func getModuleDescription as string
{
	IFDEF("target_cs") {
		if assembly:
			return lang "cs" string {{{ assembly.FullName }}}
	}
	return "builtin"
}

func loadFile(ctx as LoggingContext, file as File #preserve) as bool
{
	assert file:
		ctx.logError(VALUE "__THIS__" .. ": Null file")
	assert file.isFile():
		ctx.logError(VALUE "__THIS__" .. ": Not a file: `" .. file.getPath() .. "'")
	ctx.logDebug("Loading dynamic module: `" .. file.getPath() .. "'")
	IFDEF "target_cs" {
		var error as string #preserve
		IFDEF "target_dotnet4cs" {
			lang "cs" {{{
				try {
					assembly = System.Reflection.Assembly.UnsafeLoadFrom(file.getPath());
				}
				catch(System.Exception e) {
					error = e.ToString();
				}
			}}}
		}
		ELSE IFDEF "target_uwp" {
			ctx.logError("Loading assemblies on UWP: Not supported")
		}
		ELSE {
			lang "cs" {{{
				try {
					assembly = System.Runtime.Loader.AssemblyLoadContext.Default.LoadFromAssemblyPath(file.getPath());
				}
				catch(System.Exception e) {
					error = e.ToString();
				}
			}}}
		}
		if assembly == null {
			if error:
				ctx.logDebug(error)
			ctx.logError("Failed to load assembly: `" .. file.getPath() .. "'")
			return false
		}
		ctx.logDebug("Assembly successfully loaded: `" .. file.getPath() .. "'")
		return true
	}
	ELSE IFDEF "target_swift" {
		var path = file.getPath()
		lang "swift" {{{
			handle = dlopen(path, RTLD_NOW)
			if (handle == nil) {
				let errorString = String(validatingUTF8: dlerror())
				ctx.logDebug("Failed to load library: `" + (errorString)! + "'")
				return false
			}
		}}}
		ctx.logDebug("Assembly successfully loaded: `" .. path .. "'")
		return true
	}
	ELSE {
		ERROR "Not implemented."
		return false
	}
}

func executeStaticMethod(ctx as LoggingContext, entityName as string #preserve, methodName as string #preserve, params as array<object> #preserve) as bool
{
	IFDEF("target_cs") {
		assert assembly:
			ctx.logError("executeStaticMethod: No assembly has been loaded.")
		var mainType as !"System.Type" #preserve
		lang "cs" {{{
			mainType = assembly.GetType(entityName);
		}}}
		assert mainType:
			ctx.logError("Failed to find class `" .. entityName .. "' in dynamic module: `" .. getModuleDescription() .. "'")
		var error as string #preserve
		var methodRef as !"System.Reflection.MethodInfo" #preserve
		IFDEF "target_uwp" {
			ctx.logError("GetMethod on UWP: Not supported")
		}
		ELSE IFDEF "target_dotnet4" {
			lang "cs" {{{
				try {
					methodRef = mainType.GetMethod(methodName);
				}
				catch(System.Exception e) {
					error = e.ToString();
				}
			}}}
		}
		ELSE {
			lang "cs" {{{
				try {
					methodRef = System.Reflection.IntrospectionExtensions.GetTypeInfo(mainType).GetMethod(methodName);
				}
				catch(System.Exception e) {
					error = e.ToString();
				}
			}}}
		}
		if methodRef == null {
			if error:
				ctx.logDebug(error)
			ctx.logError("Failed to find method `" .. methodName .. "' in entity `" .. entityName .. "' in module: `" .. getModuleDescription() .. "'")
			return false
		}
		lang "cs" {{{
			try {
				methodRef.Invoke(null, @params);
			}
			catch(System.Exception e) {
				error = e.ToString();
			}
		}}}
		if error {
			ctx.logDebug(error)
			ctx.logError("Failed to call method `" .. methodName .. "' in entity `" .. entityName .. "' in module: `" .. getModuleDescription() .. "'")
			return false
		}
		return true
	}
	ELSE IFDEF "target_swift" {
		if params != null {
			ctx.logError("Function with parameters is not available.")
			return false
		}
		else {
			lang "swift" {{{
				let sym = dlsym(handle, methodName)
				if (sym == nil) {
					let errorString = String(validatingUTF8: dlerror())
					ctx.logError("Failed to find method: `" + (errorString)! + "'")
				}
				typealias randomFunc = @convention(c) () -> AnyObject
				let f = unsafeBitCast(sym, to: randomFunc.self)
				f()
				dlclose(handle)
			}}}
			return true
		}
	}
	ELSE {
		ERROR "Not implemented."
		return false
	}
}

func createObject(ctx as LoggingContext, className as string #preserve) as object
{
	IFDEF("target_cs") {
		assert assembly:
			ctx.logError("createObject: No assembly has been loaded.")
		var type as !"System.Type" #preserve
		lang "cs" {{{
			type = assembly.GetType(className);
		}}}
		assert type:
			ctx.logError("Failed to find class `" .. className .. "' in dynamic module: `" .. getModuleDescription() .. "'")
		var error as string #preserve
		var constructor as !"System.Reflection.ConstructorInfo" #preserve
		IFDEF "target_uwp" {
			ctx.logError("GetConstructor on UWP: Not supported")
		}
		ELSE IFDEF "target_dotnet4cs" {
			lang "cs" {{{
				try {
					constructor = type.GetConstructor(new System.Type[0]);
				}
				catch(System.Exception e) {
					error = e.ToString();
				}
			}}}
		}
		ELSE {
			lang "cs" {{{
				try {
					constructor = System.Reflection.IntrospectionExtensions.GetTypeInfo(type).GetConstructor(new System.Type[0]);
				}
				catch(System.Exception e) {
					error = e.ToString();
				}
			}}}
		}
		if constructor == null {
			if error:
				ctx.logDebug(error)
			ctx.logError("Failed to find a default constructor in class `" .. className .. "' in module: `" .. getModuleDescription() .. "'")
			return null
		}
		var v as object #preserve
		lang "cs" {{{
			try {
				v = constructor.Invoke(null);
			}
			catch(System.Exception e) {
				error = e.ToString();
			}
		}}}
		if error {
			ctx.logDebug(error)
			ctx.logError("Failed to call default constructor of class `" .. className .. "' in module: `" .. getModuleDescription() .. "'")
			return null
		}
		if v == null {
			ctx.logError("Constructor called without error for class `" .. className .. "' in module `" .. getModuleDescription() .. "', but no object was created!")
			return null
		}
		return v
	}
	ELSE IFDEF "target_swift" {
		// FIXME: Need for appropriate API
		ERROR "Not implemented."
		return null
	}
	ELSE {
		ERROR "Not implemented."
		return null
	}
}
