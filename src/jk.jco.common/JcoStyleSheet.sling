
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

class Rule public
{
	prop selectors:selectorsValue as vector<string>
	{
		get {
			if not selectorsValue:
				selectorsValue = new vector<string>
			return selectorsValue
		}
	}

	prop properties:propertiesValue as vector<RuleProperty>
	{
		get {
			if not propertiesValue:
				propertiesValue = new vector<RuleProperty>
			return propertiesValue
		}
	}

	func addToSelectors(selector as string)
	{
		if selector:
			selectors += selector
	}

	func addToProperties(key as string, value as string)
	{
		if key:
			properties += new RuleProperty(key, value)
	}
}

class RuleProperty public
{
	prop key as string
	prop value as string

	ctor:
		nop

	ctor(key as string, value as string)
	{
		this.key = key
		this.value = value
	}
}

prop rules:rulesValue as vector<Rule>
{
	get {
		if not rulesValue:
			rulesValue = new vector<Rule>
		return rulesValue
	}
}

func removeExistingSelectors(selectors as vector<string>)
{
	var removes = new vector<Rule>
	foreach selector in selectors {
		foreach rule in rules {
			var srms = new vector<string>
			foreach es in rule.selectors {
				if es == selector:
					srms += es
			}
			foreach srm in srms:
				Vector.removeValue(rule.selectors, srm)
			if Vector.getSize(rule.selectors) < 1:
				removes += rule
		}
	}
	foreach remove in removes:
		Vector.removeValue(rules, remove)
}

func addToRules(rule as Rule)
{
	assert rule
	removeExistingSelectors(rule.selectors)
	rules += rule
}
