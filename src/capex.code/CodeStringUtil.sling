
/*
 * This file is part of Jkop
 * Copyright (c) 2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func combineCamelCase(components as array) static as string
{
	var sb = new StringBuilder()
	foreach component as string in components {
		if sb.count() < 1 {
			sb.append(component)
		}
		else {
			var c0 = String.getChar(component, 0)
			if c0 >= 'a' && c0 <= 'z' {
				sb.append((c0 - 'a' + 'A') as char)
				sb.append(String.getSubString(component, 1))
			}
			else {
				sb.append(component)
			}
		}
	}
	return sb.toString()
}

func escapeStringLiteralCStyle(str as string) static as string
{
	assert str
	var sb = new StringBuilder()
	var it = String.iterate(str)
	var c as char
	while((c = it.getNextChar()) > 0) {
		if(c == '"') {
			sb.append("\\\"")
		}
		else if(c == '\a') {
			sb.append("\\a")
		}
		else if(c == '\b') {
			sb.append("\\b")
		}
		else if(c == '\f') {
			sb.append("\\f")
		}
		else if(c == '\n') {
			sb.append("\\n")
		}
		else if(c == '\r') {
			sb.append("\\r")
		}
		else if(c == '\t') {
			sb.append("\\t")
		}
		else if(c == '\v') {
			sb.append("\\v")
		}
		else if(c == '\\') {
			sb.append("\\\\")
		}
		else {
			sb.append(c)
		}
	}
	return(sb.toString())
}

func unescapeStringLiteralCStyle(str as string, removeFirstAndLast as bool = true) static as string
{
	assert str
	var n = 0
	var max = String.getLength(str)
	if removeFirstAndLast:
		max -= 2
	var sb = new StringBuilder()
	var it = String.iterate(str)
	if removeFirstAndLast:
		it.getNextChar()
	while n < max {
		var c = it.getNextChar()
		n++
		if c != '\\' {
			sb.append(c)
			continue
		}
		if n >= max:
			break
		c = it.getNextChar()
		n++
		if c == 'a' {
			sb.append('\a')
		}
		else if c == 'b' {
			sb.append('\b')
		}
		else if c == 'f' {
			sb.append('\f')
		}
		else if c == 'n' {
			sb.append('\n')
		}
		else if c == 'r' {
			sb.append('\r')
		}
		else if c == 't' {
			sb.append('\t')
		}
		else if c == 'v' {
			sb.append('\v')
		}
		else if c == '0' {
			sb.append(0 as char)
		}
		else {
			sb.append(c)
		}
	}
	return sb.toString()
}

func unescapeStringLiteralSingleQuoteStyle(str as string) static as string
{
	var n = 0
	var max = String.getLength(str) - 2
	var sb = new StringBuilder()
	var it = String.iterate(str)
	it.getNextChar()
	while(n < max) {
		var c = it.getNextChar()
		n++
		if(c != '\\') {
			sb.append(c)
			continue
		}
		if(n >= max) {
			break
		}
		c = it.getNextChar()
		n++
		if(c == '\'') {
			sb.append('\'')
		}
		else if(c == '\\') {
			sb.append('\\')
		}
		else {
			sb.append('\\')
			sb.append(c)
		}
	}
	return(sb.toString())
}

func unescapeCharacterLiteralCStyle(literal as string, removeFirstAndLast as bool = true) static as CharacterObject
{
	var str = literal
	if removeFirstAndLast {
		assert String.startsWith(literal, "'")
		assert String.endsWith(literal, "'")
		str = String.getSubString(literal, 1, String.getLength(literal) - 2)
	}
	var c as char
	var ll = String.getLength(str)
	if ll == 1 {
		c = String.getChar(str, 0)
	}
	else {
		if str == "\\a" {
			c = '\a'
		}
		else if str == "\\b" {
			c = '\b'
		}
		else if str == "\\f" {
			c = '\f'
		}
		else if str == "\\n" {
			c = '\n'
		}
		else if str == "\\r" {
			c = '\r'
		}
		else if str == "\\t" {
			c = '\t'
		}
		else if str == "\\v" {
			c = '\v'
		}
		else if str == "\\\\" {
			c = '\\'
		}
		else if str == "\\'" {
			c = '\''
		}
		else if str == "\\\"" {
			c = '"'
		}
		else if str == "\\?" {
			c = '?'
		}
		else if str == "\\0" {
			c = 0 as char
		}
		else {
			if ll == 4 && String.getChar(str, 0) == '\\' && String.getChar(str, 1) == 'x' {
				var s2 = String.getSubString(str, 2, 2)
				c = String.toIntegerFromHex(s2) as char
			}
			else if ll == 6 && String.getChar(str, 0) == '\\' && String.getChar(str, 1) == 'u' {
				var s2 = String.getSubString(str, 2, 4)
				c = String.toIntegerFromHex(s2) as char
			}
			else if ll == 4 && String.getChar(str, 0) == '\\' {
				// "FIXME: \\ooo (octal numbers)
				return null
			}
			else {
				return null
			}
		}
	}
	return Character.asObject(c)
}
