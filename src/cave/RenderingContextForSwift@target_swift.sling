
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is RenderingContext:

depend "swift-import:UIKit"
depend "swift-import:CoreGraphics"

func forContext(context as GuiApplicationContext, cgContext as !"CGContext") static as this
{
	var v = new this()
	v.setCgContext(cgContext)
	v.setContext(context)
	return v
}

prop context as GuiApplicationContext
prop cgContext as !"CGContext"
var rectObject as !"CGRect"
var pathObject as !"UIBezierPath"
var fontDescription as FontDescription
var textAlign = RenderingContext.ALIGN_LEFT
var textBaseline as int

func setFillStyle(style as object) override
{
	var f as Color
	if style is string {
		f = Color.instance(style as! string)
	}
	else if style is Color {
		f = style as! Color
	}
	if f {
		var fillColor = f.toUIColor()
		lang "swift" {{{ fillColor.setFill() }}}
	}
}

func setStrokeStyle(style as object) override
{
	var f as Color
	if style is string {
		f = Color.instance(style as! string)
	}
	else if style is Color {
		f = style as! Color
	}
	if f {
		var strokeColor = f.toUIColor()
		lang "swift" {{{ strokeColor.setStroke() }}}
	}
}

func setShadowColor(color as Color) stub override
func setShadowBlur(blur as double) stub override
func setShadowOffsetX(offset as double) stub override
func setShadowOffsetY(offset as double) stub override
func createLinearGradient(x0 as double, y0 as double, x1 as double, y1 as double) stub override as object
func createPattern(image as Image, repeat as int) stub override as object
func createRadialGradient(x0 as double, y0 as double, r0 as double, x1 as double, y1 as double, r1 as double) stub override as object
func addColorStop(gradient as object, index as double, color as Color) stub override

func setLineCap(cap as int) override
{
	lang "swift" {{{
		var lineCap: CGLineCap! = nil
		if cap == CaveRenderingContext.LINE_CAP_BUTT {
			lineCap = CGLineCap.butt
		}
		if cap == CaveRenderingContext.LINE_CAP_ROUND {
			lineCap = CGLineCap.round
		}
		if cap == CaveRenderingContext.LINE_CAP_SQUARE {
			lineCap = CGLineCap.square
		}
		cgContext.setLineCap(lineCap)
	}}}
}

func setLineJoin(join as int) override
{
	lang "swift" {{{
		var lineJoin: CGLineJoin! = nil
		if join == CaveRenderingContext.LINE_JOIN_MITER {
			lineJoin = CGLineJoin.miter
		}
		if join == CaveRenderingContext.LINE_JOIN_BEVEL {
			lineJoin = CGLineJoin.bevel
		}
		if join == CaveRenderingContext.LINE_JOIN_ROUND {
			lineJoin = CGLineJoin.round
		}
		cgContext.setLineJoin(lineJoin)
	}}}
}

func setLineWidth(width as double) override
{
	lang "swift" {{{ cgContext.setLineWidth(CGFloat(width)) }}}
}

func setMiterLimit(limit as double) override
{
	lang "swift" {{{ cgContext.setMiterLimit(CGFloat(limit)) }}}
}

func rect(x as double, y as double, width as double, height as double) override
{
	var xx = x as int
	var yy = y as int
	var ww = xx + width as int
	var hh = yy + height as int
	lang "swift" {{{
		rectObject = CGRect(x: xx, y: yy, width: ww, height: hh)
		cgContext.addRect(rectObject)
	}}}
}

func fillRect(x as double, y as double, width as double, height as double) override
{
	lang "swift" {{{
		let rect = CGRect(x: x, y: y, width: width, height: height)
		cgContext.addRect(rect)
		cgContext.fill(rect)
	}}}
}

func strokeRect(x as double, y as double, width as double, height as double) override
{
	lang "swift" {{{
		let rect = CGRect(x: x, y: y, width: width, height: height)
		cgContext.addRect(rect)
		cgContext.stroke(rect)
	}}}
}

func clearRect(x as double, y as double, width as double, height as double) override
{
	lang "swift" {{{
		let rect = CGRect(x: x, y: y, width: width, height: height)
		cgContext.clear(rect)
	}}}
}

func fill override

func stroke override
{
	lang "swift" {{{ cgContext.strokePath() }}}
}

func beginPath override
{
	lang "swift" {{{ 
		pathObject = UIBezierPath()
		cgContext.addPath(pathObject.cgPath)
	}}}
}

func moveTo(x as double, y as double) override
{
	lang "swift" {{{ cgContext.move(to: CGPoint(x: x, y: y)) }}}
}

func closePath override
{
	lang "swift" {{{ cgContext.closePath() }}}
}

func lineTo(x as double, y as double) override
{
	lang "swift" {{{ cgContext.addLine(to: CGPoint(x: x, y: y)) }}}
}

func clip override
{
	lang "swift" {{{ cgContext.clip() }}}
}

func quadraticCurveTo(cpx as double, cpy as double, x as double, y as double) stub override
func bezierCurveTo(cp1x as double, cp1y as double, cp2x as double, cp2y as double, x as double, y as double) stub override
func arc(x as double, y as double, r as double, sAngle as double, eAngle as double, counterclockwise as bool) stub override
func arcTo(x1 as double, y1 as double, x2 as double, y2 as double, r as double) stub override
func isPointInPath(x as double, y as double) stub override as bool
func scale(scalewidth as double, scaleheight as double) stub override
func rotate(angle as double) stub override
func translate(x as double, y as double) stub override
func transform(a as double, b as double, c as double, d as double, e as double, f as double) stub override
func setTransform(a as double, b as double, c as double, d as double, e as double, f as double) stub override
func setFont(font as FontDescription) override:
	fontDescription = font

func setTextAlign(align as int) override:
	textAlign = align

func setTextBaseline(baseline as int) override:
	textBaseline = baseline

func fillText(text as string, x as double, y as double, maxWidth as double) stub override
func strokeText(text as string, x as double, y as double, maxWidth as double) stub override
func measureTextHeight(text as string) stub override as double
func measureTextWidth(text as string) stub override as double
func drawImage(img as Image, x as double, y as double) stub override
func drawAndScaleImage(img as Image, x as double, y as double, width as double, height as double) stub override
func drawAndProcessImage(img as Image, sx as double, sy as double, swidth as double, sheight as double, x as double, y as double, width as double, height as double) stub override
func setGlobalAlpha(alpha as double) stub override
func save stub override
func restore stub override
