
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class imports cape:

func encodeString(str as string) static as string
{
	assert str
	return encode(String.toUTF8Buffer(str))
}

func encode(buffer as buffer) static as string
{
	assert buffer
	IFDEF "target_android" {
		return lang "java" string {{{ android.util.Base64.encodeToString(buffer, android.util.Base64.NO_WRAP) }}}
	}
	ELSE IFDEF "target_iosoc" {
		return lang "objc" string {{{ [buffer base64EncodedStringWithOptions:0] }}}
	}
	ELSE {
		var sb = new StringBuilder()
		var i as long = 0
		var b64i as int
		var size = Buffer.getSize(buffer)
		while i < size {
			b64i = Buffer.getByte(buffer, i) >> 2 as int
			sb.append(toASCIIChar(b64i))
			b64i = (Buffer.getByte(buffer, i) & 0x03) << 4 as int
			if ((i + 1) < size) {
				b64i += Buffer.getByte(buffer, i+1) >> 4 as int
				sb.append(toASCIIChar(b64i))
				b64i = (Buffer.getByte(buffer, i+1) & 0x0F) << 2 as int
				if ((i + 2) < size) {
					b64i += (Buffer.getByte(buffer, i+2) >> 6) as int
					sb.append(toASCIIChar(b64i))
					b64i = Buffer.getByte(buffer, i+2) & 0x3F as int
					sb.append(toASCIIChar(b64i))
				}
				else {
					sb.append(toASCIIChar(b64i))
					sb.append("=")
				}
			}
			else {
				sb.append(toASCIIChar(b64i))
				sb.append("==")
			}
			i += 3
		}
		if sb != null:
			return(sb.toString())
		return null
	}
}

func toASCIIChar(lookup as int) static as char
{
	var c = 0
	if lookup < 0 || lookup > 63:
		return c as char
	if lookup <= 25 {
		c = lookup + 65
	}
	else if lookup <= 51 {
		c = lookup + 71
	}
	else if lookup <= 61 {
		c = lookup - 4
	}
	else if lookup == 62 {
		c = '+' as int
	}
	else if lookup == 63 {
		c = '/' as int
	}
	return c as char
}
