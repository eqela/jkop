
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2017 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class #widget:

var context as GuiApplicationContext

ctor(context as GuiApplicationContext)
{
	this.context = context
}

func openPhotoDialog(widget as Widget, callback as function<void, Image, string, Error>)
{
	var cb final #used = callback
	IFDEF("target_android") {
		var screen = ScreenForWidget.findScreenForWidget(widget)
		if(screen == null) {
			if(cb != null) {
				cb(null, null, Error.forCode("no_screen_found"))
			}
			return
		}
		var actx = (context as GuiApplicationContextForAndroid).getAndroidActivityContext()
		var ctx final = actx
		screen.setAndroidActivityResultHandler(func(requestCode as int, resultCode as int, data as !"android.content.Intent") {
			if(requestCode != 0) {
				if(cb != null) {
					cb(null, null, Error.forCode("invalid_request_code"))
				}
				return
			}
			if(resultCode != lang "java" int {{{ android.app.Activity.RESULT_OK }}}) {
				if(cb != null) {
					cb(null, null, null)
				}
				return
			}
			var img as Image
			var imgName as string
			lang "java" {{{
				android.net.Uri uri = data.getData();
				android.database.Cursor returnCursor = ctx.getContentResolver().query(uri, null, null, null, null);
				int nameIndex = returnCursor.getColumnIndex(android.provider.OpenableColumns.DISPLAY_NAME);
				returnCursor.moveToFirst();
				imgName = returnCursor.getString(nameIndex);
				try {
					java.io.InputStream stream = ctx.getContentResolver().openInputStream(data.getData());
	                android.graphics.Bitmap bitmap = android.graphics.BitmapFactory.decodeStream(stream);
	                stream.close();
					img = cave.ImageForAndroid.forAndroidBitmap(bitmap);
	            } catch (java.io.FileNotFoundException e) {
	                e.printStackTrace();
	            } catch (java.io.IOException e) {
	                e.printStackTrace();
	            }
			}}}
			if(cb != null) {
				if(img == null) {
					cb(null, null, Error.forCode("no_photo_data"))
				}
				else {
					cb(img, imgName, null)
				}
			}
		})
		var act = (context as GuiApplicationContextForAndroid).getAndroidActivityContext() as !"android.app.Activity"
		var activity final = act
		lang "java" {{{
			android.content.Intent intent = new android.content.Intent(android.content.Intent.ACTION_GET_CONTENT);
			intent.setType("image/*");
			try {
				activity.startActivityForResult(android.content.Intent.createChooser(intent, "Select a photo"), 0);
			}
			catch(android.content.ActivityNotFoundException ex) {
			}
		}}}
	}
	ELSE IFDEF("target_html") {
		var img as Image #used
		lang "js" {{{
			var fileSelector = document.createElement('input');
			fileSelector.setAttribute('type', "file");
			fileSelector.setAttribute('accept', "image/*");
			fileSelector.click();
			fileSelector.addEventListener("change", handleFiles, false);
			function handleFiles() {
				var files = fileSelector.files;
				if(typeof files === "undefined" || files === null) {
					console.log("undefined files");
					return;
				}
				var file = files[0];
				if(typeof file === "undefined" || file === null) {
					console.log("undefined file");
					return;
				}
				var reader = new FileReader();
				var image = new Image();
				reader.onload = function(event) {
					image.src = "" + event.target.result;
					console.log(" IMAGE SOURCE >>>>>>> 1 : " + "`" + event.target.result + "'");
				};
				reader.readAsDataURL(file);
				img = CaveImageForBrowser.forJavaScriptImage(image);
				var path = fileSelector.value;
				var filename = path.substring(path.lastIndexOf("\\")+1);
			    console.log("Filename: " + filename);
			    if(cb != null) {
					if(filename == null) {
						cb(null, null, Error.forCode("no_file_data"))
					}
					else {
						cb(img, filename, null)
					}
				}
			}
		}}}
	}
	ELSE {
		ERROR("Not implemented")
		if(cb != null) {
			cb(null, null, Error.forCode("not_supported"))
		}
	}
}
