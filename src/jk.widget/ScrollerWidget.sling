
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is WidgetWithLayout is HeightAwareWidget #widget:

func forWidget(context as GuiApplicationContext, widget as Widget) static as this
{
	var v = new this(context)
	v.addWidget(widget)
	return v
}

IFDEF "target_html"
{
	extend Widget

	func createElement override as object
	{
		var v = HTMLDOM.createElement("div")
		HTMLDOM.addToClassList(v, VALUE "__THIS__")
		return v
	}

	func prepareElement(element as object) override
	{
		base.prepareElement(element)
		HTMLDOM.setStyle(element, "overflow", "scroll")
		HTMLDOM.addEventListener(element, "scroll", func {
			onScroll(lang "js" int {{{ element.scrollLeft }}}, lang "js" int {{{ element.scrollTop }}})
		})
	}

	var noScrollBarStyleCreated static = false

	func createNoScrollBarStyle static
	{
		if noScrollBarStyleCreated:
			return
		var styleElement = HTMLDOM.createElement("style")
		var className = "." .. VALUE "__THIS__" .. "WithNoScrollBar"
		var style as string
		if HTMLDOM.isWebKit() {
			style = className .. "::-webkit-scrollbar { display: none; }"
		}
		else if HTMLDOM.isFirefox() {
			if not HTMLDOM.isMobile() {
				style = className .. " { overflow: hidden; }\n" ..
					className .. ":hover { overflow: auto; }"
			}
		}
		if style {
			HTMLDOM.setTextContent(styleElement, style)
			HTMLDOM.appendChild(HTMLDOM.getDocumentHead(), styleElement)
		}
		noScrollBarStyleCreated = true
	}
}

IFDEF "target_android" {
	extend !"android.view.View"
	isAlso Widget
}

IFDEF "target_swift" {
	extend !"UIView"
	isAlso Widget
}

func onScroll(scrollX as int, scrollY as int) private
{
	currentScrollX = scrollX
	var cw = Widget.getWidth(Vector.get(Widget.getChildren(this), 0))
	valueX = (currentScrollX / (cw - Widget.getWidth(this))) * widgetMaximumValueX
	if cw > 0:
		nearEndX = ((cw - currentScrollX) < (Widget.getWidth(this) * 2))
	if widgetOnScrolledHandlerX && lastScrollX != currentScrollX {
		widgetOnScrolledHandlerX(lastScrollX < currentScrollX ? 0 : 1)
		lastScrollX = currentScrollX
	}
	currentScrollY = scrollY
	var ch = Widget.getHeight(Vector.get(Widget.getChildren(this), 0))
	valueY = (scrollY / (ch - Widget.getHeight(this))) * widgetMaximumValueY
	if ch > 0:
		nearEndY = ((ch - currentScrollY) < (Widget.getHeight(this) * 2))
	if widgetOnScrolledHandlerY && lastScrollY != currentScrollY {
		widgetOnScrolledHandlerY(lastScrollY < currentScrollY ? 0 : 1)
		lastScrollY = currentScrollY
	}
}

pvar widgetOnScrolledHandlerX as function<void, int>
pvar widgetOnScrolledHandlerY as function<void, int>
pvar widgetMaximumValueX = 1000.0
pvar widgetMaximumValueY = 1000.0
var layoutHeight private = -1
var layoutWidth private = -1
var heightChanged private = false
var valueX private = 0.0
var valueY private = 0.0
var currentScrollX private = 0
var currentScrollY private = 0
var lastScrollX private = 0
var lastScrollY private = 0
var nearEndX private = false
var nearEndY private = false

func isNearEndX as bool:
	return nearEndX

func isNearEndY as bool:
	return nearEndY

func getValueX as double:
	return valueX

func getValueY as double:
	return valueY

ctor(context as GuiApplicationContext)
{
	IFDEF "target_android" {
		base((context as! GuiApplicationContextForAndroid).getActivityContext())
	}
	ELSE IFDEF "target_swift" {
		lang "swift" {{{
			super.init(frame: CGRect.zero)
		}}}
	}
}

func setWidgetScrollBarDisabled(value as bool)
{
	IFDEF "target_html" {
		if value {
			createNoScrollBarStyle()
			HTMLDOM.setStyle(element, "-ms-overflow-style", "none")
			HTMLDOM.addToClassList(element, VALUE "__THIS__" .. "WithNoScrollBar")
		}
		else {
			HTMLDOM.setStyle(element, "-ms-overflow-style", "scrollbar")
			HTMLDOM.removeFromClassList(element, VALUE "__THIS__" .. "WithNoScrollBar")
		}
	}
}

func onWidgetHeightChanged(height as int #notLiteral) virtual
{
	foreach child in Widget.getChildren(this) {
		if height > layoutHeight {
			Widget.resizeHeight(child, height)
		}
		else {
			Widget.resizeHeight(child, layoutHeight)
		}
	}
	heightChanged = true
}

func setWidgetLayoutChanged
{
}

func hasWidgetLayoutChanged as bool:
	return false

func layoutWidget(widthConstraint as int #notLiteral, force as bool) virtual as bool
{
	var mw as int
	var mh as int
	foreach child in Widget.getChildren(this) {
		Widget.move(child, 0, 0)
		Widget.layout(child, -1, heightChanged)
		var cw = Widget.getWidth(child)
		var ch = Widget.getHeight(child)
		if cw > mw:
			mw = cw
		if ch > mh:
			mh = ch
	}
	var mh2 = mh
	var eh = Widget.getHeight(this)
	if eh > 0 && mh2 > eh:
		mh2 = eh
	heightChanged = false
	layoutHeight = mh
	layoutWidth = mw
	if widthConstraint < 0 {
		Widget.setLayoutSize(this, mw, mh2)
	}
	else {
		Widget.setLayoutSize(this, widthConstraint, mh2)
	}
	return true
}

func addWidget(widget as Widget) as this
{
	Widget.addChild(this, widget)
	return this
}
