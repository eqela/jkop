
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is ApplicationContext is EventLoop abstract:

import cape

var styles as map<string, map>
var errorCounter = 0
var warningCounter = 0
var infoCounter = 0
var debugCounter = 0

func setStyle(id as string, style as map)
{
	if not styles:
		styles = new map<string, map>
	styles[id] = style
}

func getStyle(id as string) as map
{
	assert styles
	assert id
	return styles[id]
}

func getStyleObject(id as string, style as string) as object
{
	var ss = assert Map.getValue(styles, id)
	return Map.getValue(ss, style)
}

func getStyleString(id as string, style as string, defval as string = null) as string
{
	var v = String.asString(getStyleObject(id, style))
	if String.isEmpty(v):
		v = defval
	return v
}

func getStyleColor(id as string, style as string, defval as string = null) as Color
{
	var v = Color.asColor(getStyleObject(id, style))
	if not v && defval:
		v = Color.instance(defval)
	return v
}

func getStylePixels(id as string, style as string, defval as string = null) as int
{
	var ss = getStyleString(id, style)
	if String.isEmpty(ss):
		ss = defval
	return getHeightValue(ss)
}

func getApplicationDataDirectory abstract as cape.File
func getResourceImage(id as string) abstract as Image
func getImageForBuffer(buffer as buffer, mimeType as string) abstract as Image
func getImageForBuffer(buffer as buffer, mimeType as string, callback as function<void, Image>) abstract
func showMessageDialog(title as string, message as string) abstract
func showMessageDialog(title as string, message as string, callback as function) abstract
func showConfirmDialog(title as string, message as string, okcallback as function, cancelcallback as function) abstract
func showErrorDialog(message as string) abstract
func showErrorDialog(message as string, callback as function) abstract
func getScreenTopMargin abstract as int
func getScreenWidth abstract as int
func getScreenHeight abstract as int
func getScreenDensity abstract as int
func getHeightValue(spec as string) abstract as int
func getWidthValue(spec as string) abstract as int
func startTimer(timeout as long, callback as function) abstract
func enableKeepAwakeMode abstract
func disableKeepAwakeMode abstract

func px(spec as string) as int:
	return getHeightValue(spec)

func logError(message as string)
{
	PRINT "[ERROR] " .. message
	errorCounter ++
}

func logWarning(message as string)
{
	PRINT "[WARNING] " .. message
	warningCounter ++
}

func logInfo(message as string)
{
	PRINT "[INFO] " .. message
	infoCounter ++
}

func logDebug(message as string)
{
	PRINT "[DEBUG] " .. message
	debugCounter ++
}

func logStatus(message as string):
	PRINT "[STATUS] " .. message

func isInDebugMode as bool:
	return false

func getErrorCount as int:
	return errorCounter

func getWarningCount as int:
	return warningCounter

func getInfoCount as int:
	return infoCounter

func getDebugCount as int:
	return debugCounter

func resetCounters
{
	errorCounter = 0
	warningCounter = 0
	infoCounter = 0
	debugCounter = 0
}

func runScheduled(timeout as long, runnable as Runnable)
{
	assert timeout >= 0
	var rr final = assert runnable
	startTimer(timeout, func {
		rr.run()
	})
}

func runInBackground(runnable as Runnable)
{
	assert runnable
	Thread.start(runnable)
}
