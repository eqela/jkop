
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

IFDEF "target_swift" {
	lang "swift" {{{
		public static func fdZero(_ set: inout fd_set) {
			set.fds_bits = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
		}

		public static func fdSet(_ fd: Int32, set: inout fd_set) {
			let intOffset = Int(fd / 32)
			let bitOffset = fd % 32
			let mask = 1 << bitOffset
			switch intOffset {
			case 0: set.fds_bits.0 = set.fds_bits.0 | Swift.Int32(mask)
			case 1: set.fds_bits.1 = set.fds_bits.1 | Swift.Int32(mask)
			case 2: set.fds_bits.2 = set.fds_bits.2 | Swift.Int32(mask)
			case 3: set.fds_bits.3 = set.fds_bits.3 | Swift.Int32(mask)
			case 4: set.fds_bits.4 = set.fds_bits.4 | Swift.Int32(mask)
			case 5: set.fds_bits.5 = set.fds_bits.5 | Swift.Int32(mask)
			case 6: set.fds_bits.6 = set.fds_bits.6 | Swift.Int32(mask)
			case 7: set.fds_bits.7 = set.fds_bits.7 | Swift.Int32(mask)
			case 8: set.fds_bits.8 = set.fds_bits.8 | Swift.Int32(mask)
			case 9: set.fds_bits.9 = set.fds_bits.9 | Swift.Int32(mask)
			case 10: set.fds_bits.10 = set.fds_bits.10 | Swift.Int32(mask)
			case 11: set.fds_bits.11 = set.fds_bits.11 | Swift.Int32(mask)
			case 12: set.fds_bits.12 = set.fds_bits.12 | Swift.Int32(mask)
			case 13: set.fds_bits.13 = set.fds_bits.13 | Swift.Int32(mask)
			case 14: set.fds_bits.14 = set.fds_bits.14 | Swift.Int32(mask)
			case 15: set.fds_bits.15 = set.fds_bits.15 | Swift.Int32(mask)
			case 16: set.fds_bits.16 = set.fds_bits.16 | Swift.Int32(mask)
			case 17: set.fds_bits.17 = set.fds_bits.17 | Swift.Int32(mask)
			case 18: set.fds_bits.18 = set.fds_bits.18 | Swift.Int32(mask)
			case 19: set.fds_bits.19 = set.fds_bits.19 | Swift.Int32(mask)
			case 20: set.fds_bits.20 = set.fds_bits.20 | Swift.Int32(mask)
			case 21: set.fds_bits.21 = set.fds_bits.21 | Swift.Int32(mask)
			case 22: set.fds_bits.22 = set.fds_bits.22 | Swift.Int32(mask)
			case 23: set.fds_bits.23 = set.fds_bits.23 | Swift.Int32(mask)
			case 24: set.fds_bits.24 = set.fds_bits.24 | Swift.Int32(mask)
			case 25: set.fds_bits.25 = set.fds_bits.25 | Swift.Int32(mask)
			case 26: set.fds_bits.26 = set.fds_bits.26 | Swift.Int32(mask)
			case 27: set.fds_bits.27 = set.fds_bits.27 | Swift.Int32(mask)
			case 28: set.fds_bits.28 = set.fds_bits.28 | Swift.Int32(mask)
			case 29: set.fds_bits.29 = set.fds_bits.29 | Swift.Int32(mask)
			case 30: set.fds_bits.30 = set.fds_bits.30 | Swift.Int32(mask)
			case 31: set.fds_bits.31 = set.fds_bits.31 | Swift.Int32(mask)
			default: break
			}
		}

		public static func fdIsSet(_ fd: Int32, set: inout fd_set) -> Bool {
			let intOffset = Int(fd / 32)
			let bitOffset = fd % 32
			let mask = 1 << bitOffset
			switch intOffset {
			case 0: return set.fds_bits.0 & Swift.Int32(mask) != 0
			case 1: return set.fds_bits.1 & Swift.Int32(mask) != 0
			case 2: return set.fds_bits.2 & Swift.Int32(mask) != 0
			case 3: return set.fds_bits.3 & Swift.Int32(mask) != 0
			case 4: return set.fds_bits.4 & Swift.Int32(mask) != 0
			case 5: return set.fds_bits.5 & Swift.Int32(mask) != 0
			case 6: return set.fds_bits.6 & Swift.Int32(mask) != 0
			case 7: return set.fds_bits.7 & Swift.Int32(mask) != 0
			case 8: return set.fds_bits.8 & Swift.Int32(mask) != 0
			case 9: return set.fds_bits.9 & Swift.Int32(mask) != 0
			case 10: return set.fds_bits.10 & Swift.Int32(mask) != 0
			case 11: return set.fds_bits.11 & Swift.Int32(mask) != 0
			case 12: return set.fds_bits.12 & Swift.Int32(mask) != 0
			case 13: return set.fds_bits.13 & Swift.Int32(mask) != 0
			case 14: return set.fds_bits.14 & Swift.Int32(mask) != 0
			case 15: return set.fds_bits.15 & Swift.Int32(mask) != 0
			case 16: return set.fds_bits.16 & Swift.Int32(mask) != 0
			case 17: return set.fds_bits.17 & Swift.Int32(mask) != 0
			case 18: return set.fds_bits.18 & Swift.Int32(mask) != 0
			case 19: return set.fds_bits.19 & Swift.Int32(mask) != 0
			case 20: return set.fds_bits.20 & Swift.Int32(mask) != 0
			case 21: return set.fds_bits.21 & Swift.Int32(mask) != 0
			case 22: return set.fds_bits.22 & Swift.Int32(mask) != 0
			case 23: return set.fds_bits.23 & Swift.Int32(mask) != 0
			case 24: return set.fds_bits.24 & Swift.Int32(mask) != 0
			case 25: return set.fds_bits.25 & Swift.Int32(mask) != 0
			case 26: return set.fds_bits.26 & Swift.Int32(mask) != 0
			case 27: return set.fds_bits.27 & Swift.Int32(mask) != 0
			case 28: return set.fds_bits.28 & Swift.Int32(mask) != 0
			case 29: return set.fds_bits.29 & Swift.Int32(mask) != 0
			case 30: return set.fds_bits.30 & Swift.Int32(mask) != 0
			case 31: return set.fds_bits.31 & Swift.Int32(mask) != 0
			default: return false
			}
		}

		public static func fdClr(_ fd: Int32, set: inout fd_set) {
			let intOffset = Int(fd / 32)
			let bitOffset = fd % 32
			let mask = ~(1 << bitOffset)
			switch intOffset {
				case 0: set.fds_bits.0 = set.fds_bits.0 & Int32(mask)
				case 1: set.fds_bits.1 = set.fds_bits.1 & Int32(mask)
				case 2: set.fds_bits.2 = set.fds_bits.2 & Int32(mask)
				case 3: set.fds_bits.3 = set.fds_bits.3 & Int32(mask)
				case 4: set.fds_bits.4 = set.fds_bits.4 & Int32(mask)
				case 5: set.fds_bits.5 = set.fds_bits.5 & Int32(mask)
				case 6: set.fds_bits.6 = set.fds_bits.6 & Int32(mask)
				case 7: set.fds_bits.7 = set.fds_bits.7 & Int32(mask)
				case 8: set.fds_bits.8 = set.fds_bits.8 & Int32(mask)
				case 9: set.fds_bits.9 = set.fds_bits.9 & Int32(mask)
				case 10: set.fds_bits.10 = set.fds_bits.10 & Int32(mask)
				case 11: set.fds_bits.11 = set.fds_bits.11 & Int32(mask)
				case 12: set.fds_bits.12 = set.fds_bits.12 & Int32(mask)
				case 13: set.fds_bits.13 = set.fds_bits.13 & Int32(mask)
				case 14: set.fds_bits.14 = set.fds_bits.14 & Int32(mask)
				case 15: set.fds_bits.15 = set.fds_bits.15 & Int32(mask)
				case 16: set.fds_bits.16 = set.fds_bits.16 & Int32(mask)
				case 17: set.fds_bits.17 = set.fds_bits.17 & Int32(mask)
				case 18: set.fds_bits.18 = set.fds_bits.18 & Int32(mask)
				case 19: set.fds_bits.19 = set.fds_bits.19 & Int32(mask)
				case 20: set.fds_bits.20 = set.fds_bits.20 & Int32(mask)
				case 21: set.fds_bits.21 = set.fds_bits.21 & Int32(mask)
				case 22: set.fds_bits.22 = set.fds_bits.22 & Int32(mask)
				case 23: set.fds_bits.23 = set.fds_bits.23 & Int32(mask)
				case 24: set.fds_bits.24 = set.fds_bits.24 & Int32(mask)
				case 25: set.fds_bits.25 = set.fds_bits.25 & Int32(mask)
				case 26: set.fds_bits.26 = set.fds_bits.26 & Int32(mask)
				case 27: set.fds_bits.27 = set.fds_bits.27 & Int32(mask)
				case 28: set.fds_bits.28 = set.fds_bits.28 & Int32(mask)
				case 29: set.fds_bits.29 = set.fds_bits.29 & Int32(mask)
				case 30: set.fds_bits.30 = set.fds_bits.30 & Int32(mask)
				case 31: set.fds_bits.31 = set.fds_bits.31 & Int32(mask)
				default: break
			}
		}
	}}}
}
