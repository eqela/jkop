
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is LayerWithBackgroundColorWidget is ResizeAwareWidget #widget:

pvar widgetNarrowWidth as int
pvar isNarrowInitialized = false
pvar isWideInitialized = false

ctor(ctx as GuiApplicationContext):
	base(ctx)

func onWidgetResized
{
	if widgetNarrowWidth <= 0:
		widgetNarrowWidth = context.getHeightValue("150mm")
	var width = Widget.getWidth(this)
	if width < widgetNarrowWidth && not isNarrowInitialized {
		onNarrowLayout()
		isNarrowInitialized = true
		isWideInitialized = false
	}
	else if width > widgetNarrowWidth && not isWideInitialized {
		onWideLayout()
		isWideInitialized = true
		isNarrowInitialized = false
	}
}

func onNarrowLayout private:
	checkForNarrow(this)

func onWideLayout private:
	checkForWide(this)

func checkForNarrow(widget as Widget) private
{
	if widget is ResponsiveAwareWidget:
		(widget as ResponsiveAwareWidget).doNarrowLayout()
	if widget is ContainerWidget || widget is VerticalScrollerWidget {
		var children = Widget.getChildren(widget)
		foreach child in children:
			checkForNarrow(child)
	}
}

func checkForWide(widget as Widget) private
{
	if widget is ResponsiveAwareWidget:
		(widget as ResponsiveAwareWidget).doWideLayout()
	if widget is ContainerWidget || widget is VerticalScrollerWidget {
		var children = Widget.getChildren(widget)
		foreach child in children:
			checkForWide(child)
	}
}
