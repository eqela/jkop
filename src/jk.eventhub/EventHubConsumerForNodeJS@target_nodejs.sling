
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.lang
import jk.json
import jk.nodejs

class is EventHubConsumer:

depend "npm:@azure/event-hubs:5.2"

var consumer as dynamic

func initialize(eventHubName  as string, connectionString as string, consumerGroup as string) override
{
	var api = NodeModule.require("@azure/event-hubs")
	var consumer = api.EventHubConsumerClient
	lang "js" {{{
		this.consumer = new consumer(consumerGroup, connectionString, eventHubName)
	}}}
}

func receiveEvents async override as Event[]
{
	var api = NodeModule.require("@azure/event-hubs")
	var earliestEventPosition = api.earliestEventPosition
	var consumerClient = consumer
	var eventList as dynamic
	lang "js" {{{
		var test
		const subscription = consumerClient.subscribe({
			processEvents: async (events, context) => {
				eventList = events
			},
			processError: async (err, context) => {
				console.log(`Error : ${err}`)
			}
		},
		{ startPosition: earliestEventPosition }
		);
		await new Promise((resolve) => {
			setTimeout(async () => {
				await subscription.close();
				await consumerClient.close();
				resolve();
			}, 30000);
		})
	}}}
	var v = new vector<EventHubConsumer.Event>
	if eventList:
		for (var n=0; n <= (Integer.asInteger(eventList.length) - 1); n++) {
			var e = new Event()
			e.body = Buffer.asBuffer(eventList[n].body)
			e.properties = DynamicMap.asDynamicMap(eventList[n].properties)
			e.offset = String.asString(eventList[n].offset)
			e.sequenceNumber = Integer.asInteger(eventList[n].sequenceNumber)
			e.enqueuedTimeUtc = LongInteger.asLong(eventList[n].enqueuedTimeUtc)
			e.partitionKey = Integer.asInteger(eventList[n].partitionKey)
			e.systemProperties = DynamicMap.asDynamicMap(eventList[n].systemProperties)
			v += e
		}
	return v
}

