
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func createGreyscale(bmpbuf as BitmapBuffer , rf as double = 1.0, gf as double = 1.0, bf as double = 1.0, af as double = 1.0) static as BitmapBuffer
{
	var w = bmpbuf.getWidth()
	var h = bmpbuf.getHeight()
	var srcbuf = bmpbuf.getBuffer()
	if(srcbuf == null || w < 1 || h < 1) {
		return null
	}
	var desbuf = MALLOC(w*h*4)
	if(desbuf == null) {
		return null
	}
	var ss as int = Buffer.getSize(srcbuf)
	var srcptr = srcbuf
	var desptr = desbuf
	var x as int
	var y as int
	for(y = 0; y < h; y++) {
		for(x = 0; x < w; x++) {
			var sr as double = ImageFilterUtil.getSafeByte(srcptr, ss, (y*w+x)*4+0) * 0.2126
			var sg as double = ImageFilterUtil.getSafeByte(srcptr, ss, (y*w+x)*4+1) * 0.7152
			var sb as double = ImageFilterUtil.getSafeByte(srcptr, ss, (y*w+x)*4+2) * 0.0722
			var sa as double = ImageFilterUtil.getSafeByte(srcptr, ss, (y*w+x)*4+3)
			var sbnw = (sr+sg+sb) as int
			Buffer.setByte(desptr, (y*w+x)*4+0, ImageFilterUtil.clamp(sbnw * rf))
			Buffer.setByte(desptr, (y*w+x)*4+1, ImageFilterUtil.clamp(sbnw * gf))
			Buffer.setByte(desptr, (y*w+x)*4+2, ImageFilterUtil.clamp(sbnw * bf))
			Buffer.setByte(desptr, (y*w+x)*4+3, ImageFilterUtil.clamp(sa * af))
		}
	}
	return BitmapBuffer.create(desbuf, w, h)
}

func createRedSepia(imgbuf as BitmapBuffer) static as BitmapBuffer
{
	return createGreyscale(imgbuf, 110.0/255.0+1.0, 66.0/255.0+1.0, 20.0/255.0+1.0)
}
