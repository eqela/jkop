
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

class MyProcess is Process
{
	lang "java" {{{
		public java.lang.Process process = null;
	}}}

	var exitValue = 0

	func close
	{
		lang "java" {{{
			if(process != null) {
				exitValue = process.exitValue();
				process = null;
			}
		}}}
	}

	func getId as string
	{
		var id = 0
		lang "java" {{{
			if(process != null) {
				id = process.hashCode();
			}
		}}}
		return String.forInteger(id)
	}

	func isRunning as bool
	{
		var v = false
		lang "java" {{{
			if(process != null) {
				try {
					int x = process.exitValue();
				}
				catch(java.lang.Exception e) {
					v = true;
				}
			}
		}}}
		return v
	}

	func getExitStatus as int
	{
		if isRunning():
			return -1
		lang "java" {{{
			if(process != null) {
				int v;
				try {
					v = process.exitValue();
				}
				catch(java.lang.Exception e) {
					v = -1;
				}
				exitValue = v;
			}
		}}}
		close()
		return exitValue
	}

	func sendInterrupt
	{
	}

	func killRequest
	{
		killForce()
	}

	func killForce
	{
		lang "java" {{{
			if(process != null) {
				try {
					process.destroy();
				}
				catch(java.lang.Exception e) {
				}
			}
		}}}
	}

	func kill(timeout as int = 2)
	{
		killForce()
		IFDEF "target_android" {
			lang "java" {{{
				if(process != null) {
					try {
						process.waitFor();
					}
					catch(java.lang.Exception e) {
					}
				}
			}}}
		}
		ELSE {
			lang "java" {{{
				if(process != null) {
					try {
						process.waitFor((long)timeout, java.util.concurrent.TimeUnit.MILLISECONDS);
					}
					catch(java.lang.Exception e) {
					}
				}
			}}}
		}
	}

	func waitForExit as int
	{
		lang "java" {{{
			if(process != null) {
				try {
					process.waitFor();
				}
				catch(java.lang.Exception e) {
				}
			}
		}}}
		return getExitStatus()
	}
}

func startProcess(launcher as ProcessLauncher,wait as bool, pipeHandler as BufferDataReceiver) static as Process
{
	var ff = launcher.getFile()
	if ff == null:
		return null
	var sb = new StringBuilder()
	foreach param in launcher.getParams() {
		if sb.count() > 0 {
			sb.append(' ')
		}
		sb.append('"')
		sb.append(param)
		sb.append('"')
	}
	var sbs = sb.toString()
	if sbs == null:
		sbs = ""
	var np = new MyProcess()
	var cwdp as string
	var cwd = launcher.getCwd()
	if cwd != null:
		cwdp = cwd.getPath()
	IFDEF "target_android" {
		lang "java" {{{
			ProcessBuilder pb = new ProcessBuilder(sbs);
			pb.directory(new java.io.File(ff.getPath()));
			pb.directory(new java.io.File(cwdp));
		}}}
	}
	ELSE {
		lang "java" {{{
			ProcessBuilder pb = new ProcessBuilder(sbs);
			pb.directory(new java.io.File(ff.getPath()));
			pb.redirectOutput();
			pb.redirectErrorStream(true);
			pb.directory(new java.io.File(cwdp));
		}}}
	}
	var env = launcher.getEnv()
	if env != null && Map.count(env) > 0 {
		var keys as vector<string> #force = Map.getKeys(env)
		foreach key in keys {
			var val = env[key]
			if val == null:
				val = ""
			lang "java" {{{
				env.put(key, val);
			}}}
		}
	}
	lang "java" {{{
		try {
			np.process = pb.start();
		}
		catch(java.lang.Exception e) {
			np = null;
		}
	}}}
	if np == null:
		return null
	if wait {
		var output as string = null
		if pipeHandler != null {
			lang "java" {{{
				try {
					java.io.InputStream stdin = np.process.getInputStream();
					java.io.InputStream stderr = np.process.getErrorStream();
					byte[] bufferin = new byte[1024];
					byte[] buffererr = new byte[1024];
					while(true) {
						int sizeOfIn = stdin.read(bufferin, 0, bufferin.length);
						int sizeOfErr = stderr.read(buffererr, 0, buffererr.length);
						if(sizeOfIn > 0  && sizeOfIn != -1) {
							pipeHandler.onBufferData(bufferin, (long)sizeOfIn);
						}
						if(sizeOfErr > 0 && sizeOfErr != -1) {
							pipeHandler.onBufferData(buffererr, (long)sizeOfErr);
						}
						if((sizeOfErr < 0 && sizeOfErr == -1) && (sizeOfIn < 0  && sizeOfIn == -1)) {
							break;
						}
					}
				}
				catch(java.lang.Exception e) {
				}
			}}}
		}
		else {
			lang "java" {{{
				try {
					java.lang.StringBuilder sbn = new java.lang.StringBuilder();
					java.io.BufferedReader stdin = new java.io.BufferedReader(new java.io.InputStreamReader(np.process.getInputStream()));
					java.io.BufferedReader stderr = new java.io.BufferedReader(new java.io.InputStreamReader(np.process.getErrorStream()));
					while(true) {
						java.lang.String line1 = stdin.readLine();
						if(line1 != null) {
							sbn.append(line1);
						}
						java.lang.String line2 = stderr.readLine();
						if(line2 != null) {
							sbn.append(line2);
						}
						if(line1 == null && line2 == null) {
							break;
						}
					}
					stdin.close();
					stderr.close();
					output = sbn.toString();
				}
				catch(java.lang.Exception e) {
				}
			}}}
		}
		np.waitForExit()
		if output != null {
			lang "java" {{{
				java.lang.System.out.println(output);
			}}}
		}
		np.close()
	}
	return np
}
