
/*
 * This file is part of Eqela Jkop
 * Copyright (c) 2016-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is UDPSocket:

// FIXME: This implementation is incomplete

var socket as dynamic

func send(message as buffer, address as string, port as int) override as int
{
	if address == null || message == null || port < 0:
		return 0
	var v = 0
	lang "js" {{{
		const dgram = require('dgram');
		this.socket = dgram.createSocket('udp4');
		this.socket.send(message, 0, message.byteLength, port, address);
		v = this.socket.getSendBufferSize();
	}}}
	return v
}

func sendBroadcast(message as buffer, address as string, port as int) override as int
{
	if address == null || message == null || port < 0:
		return 0
	var v = 0
	lang "js" {{{
		const dgram = require('dgram');
		this.socket = dgram.createSocket('udp4');
		this.socket.setBroadcast(true);
		this.socket.send(message, 0, message.byteLength, port, address);
		v = this.socket.getSendBufferSize();
	}}}
	return v
}

func receive(message as buffer, timeout as int) override as int
{
	var v as int
	/*
	// FIXME
	lang "js" {{{
		this.socket.setTTL(timeout);
		this.socket.on('message', function await (msg, rinfo) {
			message = msg;
			v = rinfo.size;
		});
	}}}
	*/
	return v
}

func receiveWithAddress(message as buffer, timeout as int, address as SocketAddress) override as int
{
	var v as int
	/*
	// FIXME
	lang "js" {{{
		this.socket.setTTL(timeout);
		this.socket.on('message', function await (msg, rinfo) {
			message = msg;
			v = rinfo.size;
			address.address = rinfo.address;
			address.port = rinfo.port;
		});
	}}}
	*/
	return v
}

func bind(port as int) override as bool
{
	var v = true
	lang "js" {{{
		try {
			this.socket.bind(port);
		}
		catch(e) {
			console.error(e);
			v = false;
		}
	}}}
	return v
}

func close override
{
	lang "js" {{{
		this.socket.close();
	}}}
}

func getLocalAddress override as string:
	return lang "js" string {{{ this.socket.address().address }}}

func getLocalPort override as int:
	return lang "js" int {{{ this.socket.address().port }}}
