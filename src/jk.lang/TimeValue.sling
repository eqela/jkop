
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2020 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func forSeconds(seconds as long) static as this
{
	var v = new this()
	v.seconds = seconds
	return v
}

pvar seconds as long = 0
pvar microSeconds as long = 0

func toString as string
{
	var sb = new StringBuilder()
	sb.appendString(String.forLongInteger(seconds))
	sb.appendCharacter('.')
	sb.appendString(String.forLongInteger(microSeconds))
	return sb.toString()
}

func dup as this
{
	var v = new this()
	v.copyFrom(this)
	return v
}

func reset
{
	seconds = 0
	microSeconds = 0
}

func copyFrom(tv as this)
{
	seconds = tv.seconds
	microSeconds = tv.microSeconds
}

func set(tv as this)
{
	seconds = tv.getSeconds()
	microSeconds = tv.getMicroSeconds()
}

func setSeconds(value as long)
{
	seconds = value
}

func setMilliSeconds(value as long)
{
	microSeconds = value * 1000
}

func setMicroSeconds(value as long)
{
	microSeconds = value
}

func add(s as long, us as long) as this
{
	var ts = this.getSeconds() + s
	var tus = this.getMicroSeconds() + us
	if tus > 1000000 {
		ts += tus / 1000000
		tus = tus % 1000000
	}
	while tus < 0 {
		ts --
		tus += 1000000
	}
	var v = new this()
	v.seconds = ts
	v.microSeconds = tus
	return v
}

func addTimeValue(tv as this) as this
{
	if tv == null:
		return this
	return add(tv.getSeconds(), tv.getMicroSeconds())
}

func subtract(tv as this) as this
{
	if tv == null:
		return this
	return add(-tv.getSeconds(), -tv.getMicroSeconds())
}

func asMicroSeconds as long:
	return this.getSeconds() * 1000000 + this.getMicroSeconds() as long

func diff(a as this, b as this) static as long
{
	if a == null && b == null:
		return 0
	if a == null:
		return b.asMicroSeconds()
	if b == null:
		return a.asMicroSeconds()
	var r = (a.seconds - b.seconds) * 1000000 + (a.microSeconds - b.microSeconds)
	return r
}

func diffDouble(a as this, b as this) static as double:
	return diff(a, b) / 1000000.0 as double
